//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;

namespace SBGamePlay
{
#pragma warning disable 414   
    
    [System.Serializable] public class ScenarioManager : Actor
    {
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        private List<EditorVisibilityInfoStruct> mVisibilityInfo = new List<EditorVisibilityInfoStruct>();
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        private Scenario mScenarioInUse;
        
        private bool mHasTriggered;
        
        [Sirenix.OdinInspector.FoldoutGroup("ScenarioManager")]
        public Scenario CurrentScenario;
        
        [Sirenix.OdinInspector.FoldoutGroup("ScenarioManager")]
        public bool TriggerOnLevelStart;
        
        public ScenarioManager()
        {
        }
        
        [System.Serializable] public struct EditorVisibilityInfoStruct
        {
            
            public Actor anActor;
            
            public bool IsVisible;
        }
    }
}
/*
function bool StartScenario(string aScenarioName,Game_Pawn aPawn) {
local export editinline Scenario aScenario;
aScenario = Scenario(static.DynamicLoadObject(aScenarioName,Class'Scenario'));
if (aScenario != None
&& aScenario.VerifyRequirements(aPawn)) {       
aScenario.ForwardEvents(aPawn);                                           
return True;                                                              
}
return False;                                                               
}
*/
