//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using Framework.Attributes;

namespace Engine
{
    
    
    [System.Serializable] public class SceneManager : Info
    {
        
        [Sirenix.OdinInspector.FoldoutGroup("SceneManager")]
        public List<MatAction> Actions = new List<MatAction>();
        
        [Sirenix.OdinInspector.FoldoutGroup("SceneManager")]
        [FieldConfig()]
        public byte Affect;
        
        [Sirenix.OdinInspector.FoldoutGroup("SceneManager")]
        public Actor AffectedActor;
        
        [Sirenix.OdinInspector.FoldoutGroup("SceneManager")]
        public bool bLooping;
        
        [Sirenix.OdinInspector.FoldoutGroup("SceneManager")]
        public bool bCinematicView;
        
        [Sirenix.OdinInspector.FoldoutGroup("SceneManager")]
        public NameProperty PlayerScriptTag;
        
        [Sirenix.OdinInspector.FoldoutGroup("SceneManager")]
        public NameProperty NextSceneTag;
        
        [Sirenix.OdinInspector.FoldoutGroup("SceneManager")]
        public NameProperty EventStart;
        
        [Sirenix.OdinInspector.FoldoutGroup("SceneManager")]
        public NameProperty EventEnd;
        
        [Sirenix.OdinInspector.FoldoutGroup("SceneManager")]
        public bool bHideHUD;
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public float PctSceneComplete;
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public MatAction CurrentAction;
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public float SceneSpeed;
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public float TotalSceneTime;
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public Actor Viewer;
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public Pawn OldPawn;
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public bool bIsRunning;
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public bool bIsSceneStarted;
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public float CurrentTime;
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public List<Vector> SampleLocations = new List<Vector>();
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public List<MatSubAction> SubActions = new List<MatSubAction>();
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public Orientation CamOrientation;
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public Orientation PrevOrientation;
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public Interpolator RotInterpolator;
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public Vector CameraShake;
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public Vector DollyOffset;
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public bool bAbortCinematic;
        
        public float OffsetStartFactor;
        
        public SceneManager()
        {
        }
        
        [System.Serializable] public struct Interpolator
        {
            
            public int bDone;
            
            public float _value;
            
            public float _remainingTime;
            
            public float _totalTime;
            
            public float _speed;
            
            public float _acceleration;
        }
        
        [System.Serializable] public struct Orientation
        {
            
            public byte CamOrientation;
            
            public Actor LookAt;
            
            public Actor DollyWith;
            
            public float EaseIntime;
            
            public int bReversePitch;
            
            public int bReverseYaw;
            
            public int bReverseRoll;
            
            public int MA;
            
            public float PctInStart;
            
            public float PctInEnd;
            
            public float PctInDuration;
            
            public Rotator StartingRotation;
        }
        
        public enum EAffect
        {
            
            AFFECT_ViewportCamera ,
            
            AFFECT_Actor,
        }
    }
}
/*
event cl_OnTick(float delta) {
Super.cl_OnTick(delta);                                                     
TickScene(delta);                                                           
}
event SceneEnded() {
bIsSceneStarted = False;                                                    
if (Affect == 0) {                                                          
if (PlayerController(Viewer) != None) {                                   
PlayerController(Viewer).Pawn = OldPawn;                                
PlayerController(Viewer).SetViewTarget(OldPawn);                        
PlayerController(Viewer).bInterpolating = False;                        
PlayerController(Viewer).myHUD.bHideHUD = False;                        
PlayerController(Viewer).SetViewingCinematic(False);                    
}
}
Viewer.FinishedInterpolation();                                             
Enable('Trigger');                                                          
TriggerEvent(EventEnd,self,None);                                           
}
event SceneStarted() {
local GameEngine Engine;
local PlayerController Controller;
Viewer = None;                                                              
Engine = Class'Actor'.static.GetGameEngine();                               
if (Affect == 1) {                                                          
Viewer = AffectedActor;                                                   
} else {                                                                    
if (Engine != None) {                                                     
Controller = Engine.GetPlayerController();                              
if (Controller != None) {                                               
Viewer = Controller;                                                  
OldPawn = Controller.Pawn;                                            
if (OldPawn != None) {                                                
OldPawn.Velocity = vect(0.000000, 0.000000, 0.000000);              
OldPawn.Acceleration = vect(0.000000, 0.000000, 0.000000);          
}
Controller.SetViewTarget(Viewer);                                     
Controller.SetViewingCinematic(True);                                 
Controller.StartInterpolation();                                      
Controller.myHUD.bHideHUD = bHideHUD;                                 
CurrentTime = OffsetStartFactor * TotalSceneTime;                     
} else {                                                                
bIsRunning = False;                                                   
bIsSceneStarted = False;                                              
}
}
}
Viewer.StartInterpolation();                                                
TriggerEvent(EventStart,self,None);                                         
}
function Trigger(Actor Other,Pawn EventInstigator) {
bIsRunning = True;                                                          
bIsSceneStarted = False;                                                    
Disable('Trigger');                                                         
}
simulated event Destroyed() {
}
simulated function BeginPlay() {
Super.BeginPlay();                                                          
if (Affect == 1 && AffectedActor == None) {                                 
Log("SceneManager : Affected actor is NULL!");                            
}
TotalSceneTime = GetTotalSceneTime();                                       
bIsRunning = False;                                                         
bIsSceneStarted = False;                                                    
}
function SceneStart() {
bIsRunning = True;                                                          
bIsSceneStarted = False;                                                    
}
native function TickScene(float delta);
native function AbortScene();
native function float GetTotalSceneTime();
*/
