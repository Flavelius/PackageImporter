//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using SBAssemblies;

namespace SBGame
{
    
    
    [System.Serializable] public class NPC_Taxonomy : Content_Type
    {
        
        [Sirenix.OdinInspector.FoldoutGroup("NPC_Taxonomy")]
        public string ClassesPackage = string.Empty;
        
        [Sirenix.OdinInspector.FoldoutGroup("Description")]
        public LocalizedString prefix;
        
        [Sirenix.OdinInspector.FoldoutGroup("Description")]
        public LocalizedString Description;
        
        [Sirenix.OdinInspector.FoldoutGroup("Description")]
        public LocalizedString Postfix;
        
        [Sirenix.OdinInspector.FoldoutGroup("Description")]
        [FieldConst()]
        public string Note = string.Empty;
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public Color AlternativeMainColor;
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public Color AlternativeSecondaryColor;
        
        [Sirenix.OdinInspector.FoldoutGroup("Overrides")]
        [System.NonSerialized, UnityEngine.HideInInspector]
        public Color ClothColor1;
        
        [Sirenix.OdinInspector.FoldoutGroup("Overrides")]
        [System.NonSerialized, UnityEngine.HideInInspector]
        public Color ClothColor2;
        
        [Sirenix.OdinInspector.FoldoutGroup("Overrides")]
        [System.NonSerialized, UnityEngine.HideInInspector]
        public Color ArmorColor1;
        
        [Sirenix.OdinInspector.FoldoutGroup("Overrides")]
        [System.NonSerialized, UnityEngine.HideInInspector]
        public Color ArmorColor2;
        
        [Sirenix.OdinInspector.FoldoutGroup("Overrides")]
        [System.NonSerialized, UnityEngine.HideInInspector]
        public string PaletteArmor; //texture
        
        [Sirenix.OdinInspector.FoldoutGroup("Overrides")]
        [System.NonSerialized, UnityEngine.HideInInspector]
        public string PaletteClothing; //texture
        
        public int CachedColorCloth1;
        
        public int CachedColorCloth2;
        
        public int CachedColorArmor1;
        
        public int CachedColorArmor2;
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public List<NPC_Taxonomy> Enemies = new List<NPC_Taxonomy>();
        
        [System.NonSerialized, UnityEngine.HideInInspector]
        [FieldTransient()]
        public List<NPC_Taxonomy> Friendlies = new List<NPC_Taxonomy>();
        
        [Sirenix.OdinInspector.FoldoutGroup("Relations")]
        public List<NPC_Taxonomy> Likes = new List<NPC_Taxonomy>();
        
        [Sirenix.OdinInspector.FoldoutGroup("Relations")]
        public List<NPC_Taxonomy> Dislikes = new List<NPC_Taxonomy>();
        
        [Sirenix.OdinInspector.FoldoutGroup("Loot")]
        public List<LootTable> Loot = new List<LootTable>();
        
        public NPC_Taxonomy Parent;
        
        public NPC_Taxonomy()
        {
        }
    }
}
/*
event string GetActiveText(Game_ActiveTextItem aItem) {
if (aItem == None || aItem.Tag == "") {                                     
return GetDescription();                                                  
} else {                                                                    
return Super.GetActiveText(aItem);                                        
}
}
final native function AppendLoot(out array<LootTable> lootz);
native function int GetArmorColor2();
native function int GetArmorColor1();
native function int GetClothColor2();
native function int GetClothColor1();
native function string GetDescription();
final native function bool DoesntLike(export editinline NPC_Taxonomy aTaxonomyNode);
final native function bool IsParent(export editinline NPC_Taxonomy aTaxonomyNode);
function NPC_Taxonomy GetRoot() {
local export editinline NPC_Taxonomy P;
P = GetParent();                                                            
if (P != None) {                                                            
while (P.GetParent() != None) {                                           
P = P.GetParent();                                                      
}
}
return Parent;                                                              
}
function NPC_Taxonomy GetParent() {
return Parent;                                                              
}
*/
