//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using SBAssemblies;

namespace SBGame
{
    
    
    [System.Serializable] public class Quest_Type : Content_Type
    {
        
        [Sirenix.OdinInspector.FoldoutGroup("Information")]
        public byte QuestArea;

        [Sirenix.OdinInspector.FoldoutGroup("Information")]
        public LocalizedString Name;

        [Sirenix.OdinInspector.FoldoutGroup("Information")]
        [FieldConst()]
        public LocalizedString Summary;
        
        [Sirenix.OdinInspector.FoldoutGroup("Information")]
        [FieldConst()]
        public string Tag = string.Empty;
        
        [Sirenix.OdinInspector.FoldoutGroup("Information")]
        [FieldConst()]
        public string Note = string.Empty;
        
        [Sirenix.OdinInspector.FoldoutGroup("Information")]
        [FieldConst()]
        public Quest_Chain QuestChain;
        
        [Sirenix.OdinInspector.FoldoutGroup("Information")]
        [FieldConst()]
        public int Level;
        
        [Sirenix.OdinInspector.FoldoutGroup("ProvideChat")]
        [FieldConst()]
        public bool DeliverByMail;
        
        [Sirenix.OdinInspector.FoldoutGroup("ProvideChat")]
        [FieldConst()]
        public NPC_Type Provider;
        
        [Sirenix.OdinInspector.FoldoutGroup("ProvideChat")]
        [FieldConst()]
        public Conversation_Topic ProvideTopic;
        
        [Sirenix.OdinInspector.FoldoutGroup("MidChat")]
        [FieldConst()]
        public Conversation_Topic MidTopic;
        
        [Sirenix.OdinInspector.FoldoutGroup("MidChat")]
        [FieldConst()]
        public bool ProviderMidChat;
        
        [Sirenix.OdinInspector.FoldoutGroup("MidChat")]
        [FieldConst()]
        public bool FinisherMidChat;
        
        [Sirenix.OdinInspector.FoldoutGroup("FinishChat")]
        [FieldConst()]
        public NPC_Type Finisher;
        
        [Sirenix.OdinInspector.FoldoutGroup("FinishChat")]
        [FieldConst()]
        public Conversation_Topic FinishTopic;
        
        [Sirenix.OdinInspector.FoldoutGroup("Requirement")]
        [FieldConst()]
        public List<Content_Requirement> Requirements = new List<Content_Requirement>();
        
        [Sirenix.OdinInspector.FoldoutGroup("Requirement")]
        [FieldConst()]
        public List<Quest_Type> Prequests = new List<Quest_Type>();
        
        [Sirenix.OdinInspector.FoldoutGroup("Requirement")]
        [FieldConst()]
        public bool Disabled;
        
        [Sirenix.OdinInspector.FoldoutGroup("Target")]
        [FieldConst()]
        public List<Quest_Target> Targets = new List<Quest_Target>();
        
        [Sirenix.OdinInspector.FoldoutGroup("Rewards")]
        [FieldConst()]
        public List<Quest_Reward> Rewards = new List<Quest_Reward>();
        
        [FieldConst()]
        public int QuestLevelLowerDelta;
        
        public Quest_Type()
        {
        }
        
        public enum EQuestArea
        {
            
            QA_Tech ,
            
            QA_Carnyx ,
            
            QA_Quarterstone ,
            
            QA_Ringfell ,
            
            QA_MountOfHeroes ,
            
            QA_Parliament ,
            
            QA_DeadspellStorm ,
            
            QA_Ancestral,
        }
    }
}
/*
event string GetActiveText(Game_ActiveTextItem aItem) {
local export editinline Quest_Target Target;
local export editinline Quest_Reward reward;
if (aItem == None || aItem.Tag == "N") {                                    
return GetName();                                                         
} else {                                                                    
if (aItem.Tag == "T") {                                                   
Target = Targets[aItem.Ordinality];                                     
if (Target != None) {                                                   
return Target.GetActiveText(aItem.SubItem);                           
} else {                                                                
return "?Target?";                                                    
}
} else {                                                                  
if (aItem.Tag == "R") {                                                 
reward = Rewards[aItem.Ordinality];                                   
if (reward != None) {                                                 
} else {                                                              
return "?Reward?";                                                  
}
} else {                                                                
if (aItem.Tag == "P") {                                               
if (Provider != None) {                                             
return Provider.GetActiveText(aItem.SubItem);                     
} else {                                                            
return "?Provider?";                                              
}
} else {                                                              
if (aItem.Tag == "F") {                                             
if (Finisher != None) {                                           
return Finisher.GetActiveText(aItem.SubItem);                   
} else {                                                          
return "?Finisher?";                                            
}
} else {                                                            
return Super.GetActiveText(aItem);                                
}
}
}
}
}
}
final native function bool CheckPawn(Game_Pawn aCandidate);
final native function sv_OnComplete(Game_Pawn aPawn);
final native function bool sv_CanComplete(Game_Pawn aPawn);
final native function sv_OnAccept(Game_Pawn aPawn);
function string GetName() {
if (Len(Name.Text) > 0) {                                                   
return Name.Text;                                                         
} else {                                                                    
return "Unnamed quest";                                                   
}
}
*/
