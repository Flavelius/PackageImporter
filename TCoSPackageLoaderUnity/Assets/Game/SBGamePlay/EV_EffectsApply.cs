//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using Framework.Attributes;

namespace SBGamePlay
{
    
    
    public class EV_EffectsApply : Content_Event
    {
        
        [FieldCategory(Category="Action")]
        [FieldConst()]
        public List<FSkill_EffectClass_AudioVisual> Effects = new List<FSkill_EffectClass_AudioVisual>();
        
        [FieldCategory(Category="Action")]
        [FieldConst()]
        public bool ApplyToObject;
        
        [FieldCategory(Category="Action")]
        [FieldConst()]
        public bool ApplyToSubject;
        
        [FieldCategory(Category="Action")]
        [FieldConst()]
        public NameProperty Tag;
        
        [FieldCategory(Category="Action")]
        [FieldConst()]
        public bool SubjectEffectIsPermanent;
        
        public EV_EffectsApply()
        {
        }
    }
}
/*
function sv_Execute(Game_Pawn aObject,Game_Pawn aSubject) {
local int i;
i = 0;                                                                      
while (i < Effects.Length) {                                                
if (aObject != None && ApplyToObject) {                                   
aObject.Effects.sv_StartTagged(Effects[i],Tag);                         
}
if (aSubject != None && ApplyToSubject) {                                 
if (SubjectEffectIsPermanent) {                                         
aSubject.Effects.sv_StartTagged(Effects[i],Tag);                      
goto jl00C2;                                                          
}
aSubject.Effects.sv_StartReplicatedOneShot(Effects[i]);                 
}
i++;                                                                      
}
}
function bool sv_CanExecute(Game_Pawn aObject,Game_Pawn aSubject) {
return Effects.Length > 0
&& (aObject != None || aSubject != None)
&& (ApplyToObject || ApplyToSubject)
&& Tag != 'None';
}
*/
