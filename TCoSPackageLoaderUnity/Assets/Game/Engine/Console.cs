//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using Framework.Attributes;

namespace Engine
{
    
    
    [System.Serializable] public class Console : Interaction
    {
        
        [FieldConfig()]
        public byte ConsoleHotKey;
        
        public int HistoryTop;
        
        public int HistoryBot;
        
        public int HistoryCur;
        
        public string TypedStr = string.Empty;
        
        [ArraySizeForExtraction(Size=16)]
        public string[] History = new string[0];
        
        public int TypedStrPos;
        
        public bool bTyping;
        
        public bool bIgnoreKeys;
        
        [FieldCategory(Category="Console")]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public bool bRunningDemo;
        
        [FieldCategory(Category="Console")]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public bool bHoldingStart;
        
        [FieldCategory(Category="Console")]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public bool bHoldingBack;
        
        [FieldCategory(Category="Console")]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public float TimeIdle;
        
        [FieldCategory(Category="Console")]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public float TimeHoldingReboot;
        
        [FieldCategory(Category="Console")]
        public float TimePerTitle;
        
        [FieldCategory(Category="Console")]
        public float TimePerDemo;
        
        [FieldCategory(Category="Console")]
        public float TimeTooIdle;
        
        [FieldCategory(Category="Console")]
        public float TimeBeforeReboot;
        
        [FieldCategory(Category="Console")]
        public float TimePerSoak;
        
        [FieldCategory(Category="Console")]
        [ArraySizeForExtraction(Size=64)]
        public string[] DemoLevels = new string[0];
        
        public List<string> BufferedConsoleCommands = new List<string>();
        
        public Console()
        {
        }
    }
}
/*
exec function PreviousTabStop() {
ViewportOwner.GUIDesktop.PreviousTabStop();                                 
}
exec function NextTabStop() {
ViewportOwner.GUIDesktop.NextTabStop();                                     
}
function MakeCSConsole();
function string SetInitialMusic(string NewSong) {
return NewSong;                                                             
}
function SetMusic(string NewSong);
event ConnectFailure(string FailCode,string URL);
simulated event Tick(float delta) {
while (BufferedConsoleCommands.Length > 0) {                                
BufferedConsoleCommands.Remove(0,1);                                      
}
}
function TypingClose() {
bTyping = False;                                                            
if (ViewportOwner != None && ViewportOwner.Actor != None) {                 
ViewportOwner.Actor.Typing(bTyping);                                      
}
TypedStr = "";                                                              
TypedStrPos = 0;                                                            
if (GetStateName() == 'Typing') {                                           
GotoState('None');                                                        
}
}
function TypingOpen() {
bTyping = True;                                                             
if (ViewportOwner != None && ViewportOwner.Actor != None) {                 
ViewportOwner.Actor.Typing(bTyping);                                      
}
GotoState('Typing');                                                        
}
event bool KeyEvent(byte Key,byte Action,float delta) {
if (Action != 1) {                                                          
return False;                                                             
}
return False;                                                               
}
function DelayedConsoleCommand(string Command) {
BufferedConsoleCommands.Length = BufferedConsoleCommands.Length + 1;        
BufferedConsoleCommands[BufferedConsoleCommands.Length - 1] = Command;      
}
event NotifyLevelChange() {
ConsoleClose();                                                             
}
event Message(coerce string Msg,float MsgLife);
exec function ConsoleToggle();
function ConsoleClose();
function ConsoleOpen();
exec function TeamTalk() {
TypedStr = "TeamSay ";                                                      
TypedStrPos = 8;                                                            
TypingOpen();                                                               
}
exec function Talk() {
TypedStr = "Say ";                                                          
TypedStrPos = 4;                                                            
TypingOpen();                                                               
}
exec function Type() {
TypedStr = "";                                                              
TypedStrPos = 0;                                                            
TypingOpen();                                                               
}
function UnPressButtons() {
local PlayerController PC;
if (ViewportOwner != None) {                                                
PC = ViewportOwner.Actor;                                                 
if (PC != None) {                                                         
PC.UnPressButtons();                                                    
}
}
}
event NativeConsoleOpen() {
}
event ViewportInitialized() {
if (ViewportOwner.ConfiguredInternetSpeed == 0) {                           
ViewportOwner.static.ResetConfig("ConfiguredInternetSpeed");              
}
if (ViewportOwner.ConfiguredLanSpeed == 0) {                                
ViewportOwner.static.ResetConfig("ConfiguredLanSpeed");                   
}
}
event Initialized() {
if (IsSoaking()) {                                                          
TimePerTitle = 1.00000000;                                                
TimePerDemo = TimePerSoak;                                                
}
}
state Typing {
function EndState() {
ConsoleCommand("toggleime 0");                                          
bTyping = False;                                                        
bVisible = False;                                                       
}
function BeginState() {
bTyping = True;                                                         
bVisible = True;                                                        
bIgnoreKeys = True;                                                     
HistoryCur = HistoryTop;                                                
}
function bool KeyEvent(byte Key,byte Action,float delta) {
local string Temp;
if (Action == 1) {                                                      
bIgnoreKeys = False;                                                  
}
if (Key == 27) {                                                        
if (TypedStr != "") {                                                 
TypedStr = "";                                                      
TypedStrPos = 0;                                                    
HistoryCur = HistoryTop;                                            
return True;                                                        
} else {                                                              
TypingClose();                                                      
return True;                                                        
}
} else {                                                                
if (Action != 1) {                                                    
return False;                                                       
} else {                                                              
if (Key == 13) {                                                    
if (TypedStr != "") {                                             
History[HistoryTop] = TypedStr;                                 
HistoryTop = (HistoryTop + 1) % 16;                             
if (HistoryBot == -1 || HistoryBot == HistoryTop) {             
HistoryBot = (HistoryBot + 1) % 16;                           
}
HistoryCur = HistoryTop;                                        
Temp = TypedStr;                                                
TypedStr = "";                                                  
TypedStrPos = 0;                                                
if (!ConsoleCommand(Temp)) {                                    
Message(Localize("Errors","Exec","Core"),6.00000000);         
}
Message("",6.00000000);                                         
}
TypingClose();                                                    
return True;                                                      
} else {                                                            
if (Key == 38) {                                                  
if (HistoryBot >= 0) {                                          
if (HistoryCur == HistoryBot) {                               
HistoryCur = HistoryTop;                                    
} else {                                                      
HistoryCur--;                                               
if (HistoryCur < 0) {                                       
HistoryCur = 16 - 1;                                      
}
}
TypedStr = History[HistoryCur];                               
TypedStrPos = Len(TypedStr);                                  
}
return True;                                                    
} else {                                                          
if (Key == 40) {                                                
if (HistoryBot >= 0) {                                        
if (HistoryCur == HistoryTop) {                             
HistoryCur = HistoryBot;                                  
} else {                                                    
HistoryCur = (HistoryCur + 1) % 16;                       
}
TypedStr = History[HistoryCur];                             
TypedStrPos = Len(TypedStr);                                
}
} else {                                                        
if (Key == 8) {                                               
if (TypedStrPos > 0) {                                      
TypedStr = Left(TypedStr,TypedStrPos - 1)
$ Right(TypedStr,Len(TypedStr) - TypedStrPos);
TypedStrPos--;                                            
}
return True;                                                
} else {                                                      
if (Key == 46) {                                            
if (TypedStrPos < Len(TypedStr)) {                        
TypedStr = Left(TypedStr,TypedStrPos)
$ Right(TypedStr,Len(TypedStr) - TypedStrPos - 1);
}
return True;                                              
} else {                                                    
if (Key == 37) {                                          
TypedStrPos = Max(0,TypedStrPos - 1);                   
return True;                                            
} else {                                                  
if (Key == 39) {                                        
TypedStrPos = Min(Len(TypedStr),TypedStrPos + 1);     
return True;                                          
} else {                                                
if (Key == 36) {                                      
TypedStrPos = 0;                                    
return True;                                        
} else {                                              
if (Key == 35) {                                    
TypedStrPos = Len(TypedStr);                      
return True;                                      
}
}
}
}
}
}
}
}
}
}
}
return True;                                                            
}
function bool KeyType(byte Key,optional string Unicode) {
if (bIgnoreKeys) {                                                      
return True;                                                          
}
if (Key >= 32) {                                                        
if (Unicode != "") {                                                  
TypedStr = Left(TypedStr,TypedStrPos) $ Unicode
$ Right(TypedStr,Len(TypedStr) - TypedStrPos);
} else {                                                              
TypedStr = Left(TypedStr,TypedStrPos) $ Chr(Key)
$ Right(TypedStr,Len(TypedStr) - TypedStrPos);
}
TypedStrPos++;                                                        
return True;                                                          
}
return False;                                                           
}
exec function Type() {
TypedStr = "";                                                          
TypedStrPos = 0;                                                        
TypingClose();                                                          
}
}
*/
