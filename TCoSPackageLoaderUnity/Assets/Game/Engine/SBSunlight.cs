//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using Framework.Attributes;

namespace Engine
{
    
    
    [System.Serializable] public class SBSunlight : Light
    {
        
        [FieldCategory(Category="SBSunlight")]
        public bool ProjectShadow;
        
        [FieldCategory(Category="SBSunlight")]
        public int FOV;
        
        [FieldCategory(Category="SBSunlight")]
        public int MaxTraceDistance;
        
        [FieldCategory(Category="SBSunlight")]
        public byte BlendingOp;
        
        [FieldCategory(Category="Advanced")]
        public SBProjector AttachedSBProjector;
        
        [FieldConst()]
        public int ProjWidth;
        
        [FieldConst()]
        public int ProjHeight;
        
        [FieldConst()]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        [ArraySizeForExtraction(Size=6)]
        public Plane[] FrustumPlanes = new Plane[0];
        
        [FieldConst()]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        [ArraySizeForExtraction(Size=8)]
        public Vector[] FrustumVertices = new Vector[0];
        
        [FieldConst()]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public Vector FrustumOrigin;
        
        [FieldConst()]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public Box Box;
        
        [FieldConst()]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public int TextureInterface;
        
        [FieldConst()]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public List<Actor> InfluencedActors = new List<Actor>();
        
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public Vector OldLocation;
        
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public Matrix Matrix;
        
        public SBSunlight()
        {
        }
    }
}
/*
simulated event PostBeginPlay() {
if (Level.NetMode == 1) {                                                   
GotoState('NoProjection');                                                
return;                                                                   
}
AttachProjector();                                                          
}
native function DetachProjector();
native function AttachProjector();
state NoProjection {
function BeginState() {
Disable('Tick');                                                        
}
}
*/
