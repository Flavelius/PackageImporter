//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using Framework.Attributes;

namespace Engine
{
    
    
    [System.Serializable] public class ZoneInfo : Info
    {
        
        public const float CHECK_MUSIC_PLAYING_TIMER = 1F;
        
        public SkyZoneInfo SkyZone;
        
        [FieldCategory(Category="ZoneInfo")]
        public NameProperty ZoneTag;
        
        [FieldCategory(Category="ZoneInfo")]
        public string LocationName = string.Empty;
        
        [FieldCategory(Category="ZoneInfo")]
        public float KillZ;
        
        [FieldCategory(Category="ZoneInfo")]
        public byte KillZType;
        
        [FieldCategory(Category="ZoneInfo")]
        public bool bSoftKillZ;
        
        [FieldCategory(Category="ZoneInfo")]
        public bool bTerrainZone;
        
        [FieldCategory(Category="ZoneInfo")]
        public bool bDistanceFog;
        
        [FieldCategory(Category="ZoneInfo")]
        public bool bHeightFog;
        
        [FieldCategory(Category="ZoneInfo")]
        public bool bClearToFogColor;
        
        [FieldConst()]
        public List<TerrainInfo> Terrains = new List<TerrainInfo>();
        
        public Vector AmbientVector;
        
        [FieldCategory(Category="ZoneLight")]
        public byte AmbientBrightness;
        
        [FieldCategory(Category="ZoneLight")]
        public byte AmbientHue;
        
        [FieldCategory(Category="ZoneLight")]
        public byte AmbientSaturation;
        
        [FieldCategory(Category="ZoneLight")]
        [IgnoreFieldExtraction()]
        public Color DistanceFogColor;
        
        [FieldCategory(Category="ZoneLight")]
        public float DistanceFogStart;
        
        [FieldCategory(Category="ZoneLight")]
        public float DistanceFogEnd;
        
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public float RealDistanceFogEnd;
        
        [FieldCategory(Category="ZoneLight")]
        public float DistanceFogEndMin;
        
        [FieldCategory(Category="ZoneLight")]
        public float DistanceFogBlendTime;
        
        [FieldCategory(Category="ZoneLight")]
        public float DistanceFogUpperHeight;
        
        [FieldCategory(Category="ZoneLight")]
        public float DistanceFogLowerHeight;
        
        [FieldCategory(Category="ZoneLight")]
        public float FogUpperHeightLimit;
        
        [FieldCategory(Category="ZoneLight")]
        [FieldConst()]
        [IgnoreFieldExtraction()]
        public string EnvironmentMap;
        
        [FieldCategory(Category="ZoneLight")]
        public float TexUPanSpeed;
        
        [FieldCategory(Category="ZoneLight")]
        public float TexVPanSpeed;
        
        [FieldCategory(Category="ZoneLight")]
        public float DramaticLightingScale;
        
        [FieldCategory(Category="ZoneSound")]
        public string ZoneEffect;
        
        [FieldCategory(Category="ZoneVisibility")]
        public bool bLonelyZone;
        
        [FieldCategory(Category="ZoneVisibility")]
        public List<ZoneInfo> ManualExcludes = new List<ZoneInfo>();
        
        [FieldCategory(Category="ZoneMap")]
        public string MapBlockTextureNamePrefix = string.Empty;
        
        [FieldCategory(Category="ZoneMap")]
        public int MapBlockSize;
        
        [FieldCategory(Category="ZoneMap")]
        public int MapUnitsPerPixel;
        
        [FieldCategory(Category="ZoneMap")]
        public float MapMinX;
        
        [FieldCategory(Category="ZoneMap")]
        public float MapMinY;
        
        [FieldCategory(Category="ZoneMap")]
        public float MapMaxX;
        
        [FieldCategory(Category="ZoneMap")]
        public float MapMaxY;
        
        [FieldCategory(Category="ZoneMap")]
        public int MapMinZoomStep;
        
        [FieldCategory(Category="ZoneMap")]
        public int MapMaxZoomStep;
        
        [FieldCategory(Category="ZoneMap")]
        public int MapDefaultZoomStep;
        
        [FieldCategory(Category="ZoneBloom")]
        public float BloomContrast;
        
        [FieldCategory(Category="ZoneBloom")]
        public float OriginalScreenAmount;
        
        [FieldCategory(Category="ZoneBloom")]
        public float BloomScreenAmount;
        
        [FieldCategory(Category="ZoneBloom")]
        public float BlurScreenAmount;
        
        [FieldCategory(Category="ZoneBloom")]
        public int NumBlurPasses;
        
        [FieldCategory(Category="ZoneBloom")]
        public bool UseWideBlur;
        
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public float BackupBloomContrast;
        
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public float BackupBloomScreenAmount;
        
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public float BackupOriginalScreenAmount;
        
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public float BackupBlurScreenAmount;
        
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public Color BackupDistanceFogColor;
        
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public float BackupDistanceFogEnd;
        
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public float BackupDistanceFogEndMin;
        
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public float BackupDistanceFogStart;
        
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public byte BackupAmbientBrightness;
        
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public byte BackupAmbientHue;
        
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public byte BackupAmbientSaturation;
        
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public float BackupSunlightsBrightness;
        
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public float BackupSunlightsContrastAdjust;
        
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public float BackupLightmapContrastAdjust;
        
        [FieldCategory(Category="LevelArea")]
        public LocalizedString LevelAreaName;
        
        [FieldCategory(Category="PvP")]
        public PvPSettings PvPSettings;
        
        [FieldCategory(Category="LevelArea")]
        public string RespawnPoint = string.Empty;
        
        [FieldCategory(Category="DayNightCycle")]
        public bool EnableDayLightCycle;
        
        [FieldCategory(Category="ZoneMusic")]
        public string TrackName = string.Empty;
        
        [FieldCategory(Category="ZoneMusic")]
        public float AmbientFadeOutDuration;
        
        [FieldCategory(Category="ZoneMusic")]
        public float AmbientFadeInDuration;
        
        [FieldCategory(Category="ZoneMusic")]
        public float StartAmbientFadeInTime;
        
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        private float mCheckMusicTimer;
        
        public ZoneInfo()
        {
        }
    }
}
/*
event ActorLeaving(Actor Other);
event ActorEntered(Actor Other);
simulated function PreBeginPlay() {
Super.PreBeginPlay();                                                       
LinkToSkybox();                                                             
}
simulated function LinkToSkybox() {
local SkyZoneInfo TempSkyZone;
foreach AllActors(Class'SkyZoneInfo',TempSkyZone,'None') {                  
SkyZone = TempSkyZone;                                                    
}
if (Level.DetailMode == 0) {                                                
foreach AllActors(Class'SkyZoneInfo',TempSkyZone,'None') {                
if (!TempSkyZone.bHighDetail && !TempSkyZone.bSuperHighDetail) {        
SkyZone = TempSkyZone;                                                
}
}
goto jl0117;                                                              
}
if (Level.DetailMode == 1) {                                                
foreach AllActors(Class'SkyZoneInfo',TempSkyZone,'None') {                
if (!TempSkyZone.bSuperHighDetail) {                                    
SkyZone = TempSkyZone;                                                
}
}
goto jl0117;                                                              
}
if (Level.DetailMode == 2) {                                                
foreach AllActors(Class'SkyZoneInfo',TempSkyZone,'None') {                
SkyZone = TempSkyZone;                                                  
}
}
}
final native(308) iterator function ZoneActors(class<Actor> BaseClass,out Actor Actor);
*/
