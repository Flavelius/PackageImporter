//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using Framework.Attributes;

namespace Engine
{
    
    
    [System.Serializable] public class Spline : UObject
    {
        
        public const int mMaxTimes = 5;
        
        public Vector SplineA;
        
        public Vector SplineB;
        
        public Vector SplineC;
        
        public Vector SplineD;
        
        public Rotator SplineE;
        
        public Rotator SplineF;
        
        public Rotator SplineG;
        
        public Rotator SplineH;
        
        public float mStartT;
        
        public float mEndT;
        
        public bool mbInit;
        
        public float mTime;
        
        [ArraySizeForExtraction(Size=5)]
        public float[] maDeltaTimes = new float[0];
        
        public int mIndex;
        
        public float mTotalTime;
        
        public bool mbRotatorSpline;
        
        public int mCnt;
        
        public Spline()
        {
        }
    }
}
/*
final native function bool NextSplineRot(float dt,out Rotator D,out Rotator V,out Rotator A,out float outdt,optional bool bSmoothDt,optional bool bAccumDeltas);
final native function bool NextSplinePos(float dt,out Vector D,out Vector V,out Vector A,out float outdt,optional bool bSmoothDt,optional bool bAccumDeltas);
final native function bool InitSplineRot(float t0,Rotator d0,Rotator v0,float t1,Rotator d1,Rotator v1);
final native function bool InitSplinePath(float t0,Vector d0,Vector v0,float t1,Vector d1,Vector v1);
*/
