//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using Framework.Attributes;

namespace Engine
{
    
    
    [System.Serializable] public class xProcMesh : Actor
    {
        
        [FieldConst()]
        public List<ProcMeshVertex> Vertices = new List<ProcMeshVertex>();
        
        [FieldConst()]
        public List<int> SectionOffsets = new List<int>();
        
        [FieldCategory(Category="xProcMesh")]
        public float Dampening;
        
        [FieldCategory(Category="xProcMesh")]
        public Range DampeningRange;
        
        [FieldCategory(Category="xProcMesh")]
        public Range MovementClamp;
        
        [FieldCategory(Category="xProcMesh")]
        public Range ForceClamp;
        
        [FieldCategory(Category="xProcMesh")]
        public float ForceAttenuation;
        
        [FieldCategory(Category="xProcMesh")]
        public float Tension;
        
        [FieldCategory(Category="xProcMesh")]
        public float RestTension;
        
        [FieldCategory(Category="xProcMesh")]
        public bool CheckCollision;
        
        [FieldCategory(Category="xProcMesh")]
        public float Noise;
        
        [FieldCategory(Category="xProcMesh")]
        public Range NoiseForce;
        
        [FieldCategory(Category="xProcMesh")]
        public Range NoiseTimer;
        
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public float NoiseCounter;
        
        [FieldCategory(Category="xProcMesh")]
        public byte ProcType;
        
        [FieldCategory(Category="Force")]
        public bool bForceAffected;
        
        [FieldCategory(Category="xProcMesh")]
        public bool bRigidEdges;
        
        [FieldConst()]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public int pProcData;
        
        [FieldCategory(Category="xProcMesh")]
        [TypeProxyDefinition(TypeName="Effects")]
        public System.Type HitEffect;
        
        [FieldCategory(Category="xProcMesh")]
        [TypeProxyDefinition(TypeName="Effects")]
        public System.Type BigHitEffect;
        
        [FieldCategory(Category="xProcMesh")]
        public float BigMomentumThreshold;
        
        [FieldCategory(Category="xProcMesh")]
        public float BigTouchThreshold;
        
        [FieldCategory(Category="xProcMesh")]
        public float ShootStrength;
        
        [FieldCategory(Category="xProcMesh")]
        public float TouchStrength;
        
        [FieldCategory(Category="xProcMesh")]
        public float InfluenceRadius;
        
        public xProcMesh()
        {
        }
        
        [System.Serializable] public struct ProcMeshVertex
        {
            
            public Vector Position;
            
            public Vector Normal;
            
            public Color Color;
            
            public float U;
            
            public float V;
        }
        
        public enum EProcMeshType
        {
            
            MT_Water ,
            
            MT_Deform,
        }
    }
}
/*
simulated function Touch(Actor Other) {
local Vector touchLocation;
local Vector EffectNormal;
local Vector EffectLocation;
local float touchValue;
Super.Touch(Other);                                                         
if (Other == None || !Other.bDisturbFluidSurface) {                         
return;                                                                   
}
touchLocation = Other.Location;                                             
touchValue = VSize(Velocity);                                               
ProcPling(touchLocation,TouchStrength,Other.CollisionRadius,EffectLocation,EffectNormal);
if (touchValue > BigTouchThreshold && BigHitEffect != None) {               
Spawn(BigHitEffect,self,,EffectLocation,rotator(EffectNormal));           
} else {                                                                    
if (HitEffect != None) {                                                  
Spawn(HitEffect,self,,EffectLocation,rotator(EffectNormal));            
}
}
}
simulated function TakeDamage(int Damage,Pawn instigatedBy,Vector HitLocation,Vector Momentum,class<DamageType> DamageType) {
local Vector EffectNormal;
local Vector EffectLocation;
ProcPling(HitLocation,ShootStrength,0.00000000,EffectLocation,EffectNormal);
if (VSize(Momentum) > BigMomentumThreshold
&& BigHitEffect != None) { 
Spawn(BigHitEffect,self,,EffectLocation,rotator(EffectNormal));           
} else {                                                                    
if (HitEffect != None) {                                                  
Spawn(HitEffect,self,,EffectLocation,rotator(EffectNormal));            
}
}
}
final native function ProcPling(Vector Position,float Strength,float Radius,out Vector EffectLocation,out Vector EffectNormal);
*/
