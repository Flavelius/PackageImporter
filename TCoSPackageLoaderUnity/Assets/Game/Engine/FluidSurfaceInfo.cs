//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using Framework.Attributes;

namespace Engine
{
    
    
    public class FluidSurfaceInfo : Info
    {
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public byte FluidGridType;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float FluidGridSpacing;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public int FluidXSize;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public int FluidYSize;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float FluidHeightScale;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float FluidSpeed;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float FluidTimeScale;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float FluidDamping;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float FluidNoiseFrequency;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public Range FluidNoiseStrength;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public bool TestRipple;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float TestRippleSpeed;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float TestRippleStrength;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float TestRippleRadius;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float UTiles;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float UOffset;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float VTiles;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float VOffset;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float AlphaCurveScale;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float AlphaHeightScale;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public byte AlphaMax;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float ShootStrength;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float ShootRadius;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float RippleVelocityFactor;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float TouchStrength;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        [TypeProxyDefinition(TypeName="Actor")]
        public System.Type ShootEffect;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public bool OrientShootEffect;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        [TypeProxyDefinition(TypeName="Actor")]
        public System.Type TouchEffect;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public bool OrientTouchEffect;
        
        [FieldConst()]
        public List<int> ClampBitmap = new List<int>();
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public TerrainInfo ClampTerrain;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public bool bShowBoundingBox;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public bool bUseNoRenderZ;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float NoRenderZ;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float WarmUpTime;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        public float UpdateRate;
        
        [FieldCategory(Category="FluidSurfaceInfo")]
        [IgnoreFieldExtraction()]
        public Color FluidColor;
        
        [FieldConst()]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public List<float> Verts0 = new List<float>();
        
        [FieldConst()]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public List<float> Verts1 = new List<float>();
        
        [FieldConst()]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public List<byte> VertAlpha = new List<byte>();
        
        [FieldConst()]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public int LatestVerts;
        
        [FieldConst()]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public Box FluidBoundingBox;
        
        [FieldConst()]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public Vector FluidOrigin;
        
        [FieldConst()]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public float TimeRollover;
        
        [FieldConst()]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public float TestRippleAng;
        
        [FieldConst()]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public FluidSurfacePrimitive Primitive;
        
        [FieldConst()]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public List<FluidSurfaceOscillator> Oscillators = new List<FluidSurfaceOscillator>();
        
        [FieldConst()]
        [IgnoreFieldExtraction()]
        [FieldTransient()]
        public bool bHasWarmedUp;
        
        public FluidSurfaceInfo()
        {
        }
        
        public enum EFluidGridType
        {
            
            FGT_Square ,
            
            FGT_Hexagonal,
        }
    }
}
/*
simulated function Touch(Actor Other) {
local Vector touchLocation;
Super.Touch(Other);                                                         
if (Other == None || !Other.bDisturbFluidSurface) {                         
return;                                                                   
}
touchLocation = Other.Location;                                             
Pling(touchLocation,ShootStrength * Other.FluidSurfaceShootStrengthMod,Other.CollisionRadius);
touchLocation.Z = Location.Z;                                               
if (TouchEffect != None
&& EffectIsRelevant(touchLocation,False)) {   
if (OrientTouchEffect) {                                                  
Spawn(TouchEffect,self,,touchLocation,rotator(Other.Velocity));         
} else {                                                                  
Spawn(TouchEffect,self,,touchLocation);                                 
}
}
}
simulated function TakeDamage(int Damage,Pawn instigatedBy,Vector HitLocation,Vector Momentum,class<DamageType> DamageType) {
if (DamageType.default.FluidSurfaceShootStrengthMod ~= 0) {                 
return;                                                                   
}
Pling(HitLocation,ShootStrength * DamageType.default.FluidSurfaceShootStrengthMod,ShootRadius);
if (ShootEffect != None
&& EffectIsRelevant(HitLocation,False)) {     
if (OrientShootEffect) {                                                  
Spawn(ShootEffect,self,,HitLocation,rotator(Momentum));                 
} else {                                                                  
Spawn(ShootEffect,self,,HitLocation);                                   
}
}
}
final native function Pling(Vector Position,float Strength,optional float Radius);
*/
