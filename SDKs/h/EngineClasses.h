#if _MSC_VER
#pragma pack (push,4)
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern DLL_IMPORT FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,num,func) \
  extern DLL_IMPORT Native int##cls##func;
#define AUTOGENERATE_CLASS(TClass) \
  extern DLL_IMPORT UClass* autoclass##TClass;
#define AUTOGENERATE_PACKAGE(pkg) \
  extern DLL_IMPORT TCHAR GPackage[];
#endif

AUTOGENERATE_NAME(AIHearSBSound)
AUTOGENERATE_NAME(AIHearSound)
AUTOGENERATE_NAME(Accept)
AUTOGENERATE_NAME(AcceptPlayInfoProperty)
AUTOGENERATE_NAME(ActorEntered)
AUTOGENERATE_NAME(ActorEnteredVolume)
AUTOGENERATE_NAME(ActorLeaving)
AUTOGENERATE_NAME(ActorLeavingVolume)
AUTOGENERATE_NAME(AddCameraEffect)
AUTOGENERATE_NAME(AddInteraction)
AUTOGENERATE_NAME(AddScreenMessage)
AUTOGENERATE_NAME(AllowClassRemoval)
AUTOGENERATE_NAME(AllowDetourTo)
AUTOGENERATE_NAME(AnimEnd)
AUTOGENERATE_NAME(AnnouncementPlayed)
AUTOGENERATE_NAME(Attach)
AUTOGENERATE_NAME(AutoLoadMenus)
AUTOGENERATE_NAME(BaseChange)
AUTOGENERATE_NAME(BeginEvent)
AUTOGENERATE_NAME(BeginPlay)
AUTOGENERATE_NAME(BreathTimer)
AUTOGENERATE_NAME(Bump)
AUTOGENERATE_NAME(ChangeAnimation)
AUTOGENERATE_NAME(ClearSavedWindows)
AUTOGENERATE_NAME(ClientCloseMenu)
AUTOGENERATE_NAME(ClientHearSBSound)
AUTOGENERATE_NAME(ClientHearSound)
AUTOGENERATE_NAME(ClientOpenMenu)
AUTOGENERATE_NAME(ClientReplaceMenu)
AUTOGENERATE_NAME(ClientSetViewTarget)
AUTOGENERATE_NAME(CloseAll)
AUTOGENERATE_NAME(CloseAllWindows)
AUTOGENERATE_NAME(CloseMenu)
AUTOGENERATE_NAME(CloseWindow)
AUTOGENERATE_NAME(CollisionSound)
AUTOGENERATE_NAME(ConnectFailure)
AUTOGENERATE_NAME(ConvertToFileExtension)
AUTOGENERATE_NAME(ConvertToFileType)
AUTOGENERATE_NAME(DemoPlaySound)
AUTOGENERATE_NAME(Destroyed)
AUTOGENERATE_NAME(Detach)
AUTOGENERATE_NAME(DetourWeight)
AUTOGENERATE_NAME(DoJump)
AUTOGENERATE_NAME(EnableWindow)
AUTOGENERATE_NAME(EncroachedBy)
AUTOGENERATE_NAME(EncroachingOn)
AUTOGENERATE_NAME(EndCrouch)
AUTOGENERATE_NAME(EndEvent)
AUTOGENERATE_NAME(EndedRotation)
AUTOGENERATE_NAME(EnemyNotVisible)
AUTOGENERATE_NAME(Falling)
AUTOGENERATE_NAME(FellOutOfWorld)
AUTOGENERATE_NAME(FillPrecacheMaterialsArray)
AUTOGENERATE_NAME(FillPrecacheStaticMeshesArray)
AUTOGENERATE_NAME(FinishedInterpolation)
AUTOGENERATE_NAME(FocusWindow)
AUTOGENERATE_NAME(ForceGenerate)
AUTOGENERATE_NAME(FreezeInput)
AUTOGENERATE_NAME(FreezeMovement)
AUTOGENERATE_NAME(FreezeRotation)
AUTOGENERATE_NAME(GainedChild)
AUTOGENERATE_NAME(Generate)
AUTOGENERATE_NAME(GetAllowedAudioRepeatTime)
AUTOGENERATE_NAME(GetDescriptionText)
AUTOGENERATE_NAME(GetEquippedWeaponFlag)
AUTOGENERATE_NAME(GetJumpZ)
AUTOGENERATE_NAME(GetPathRoot)
AUTOGENERATE_NAME(GetSecurityLevel)
AUTOGENERATE_NAME(HasExtension)
AUTOGENERATE_NAME(HeadVolumeChange)
AUTOGENERATE_NAME(HearNoise)
AUTOGENERATE_NAME(HideAllWindows)
AUTOGENERATE_NAME(HitWall)
AUTOGENERATE_NAME(InLoadingScreen)
AUTOGENERATE_NAME(Init)
AUTOGENERATE_NAME(InitInputSystem)
AUTOGENERATE_NAME(InitializeController)
AUTOGENERATE_NAME(Initialized)
AUTOGENERATE_NAME(InternalFocusChanged)
AUTOGENERATE_NAME(IsDead)
AUTOGENERATE_NAME(IsPlayerPawn)
AUTOGENERATE_NAME(IsPlayingVideo)
AUTOGENERATE_NAME(IsRotationFrozen)
AUTOGENERATE_NAME(IsViewingCinematic)
AUTOGENERATE_NAME(KeyFrameReached)
AUTOGENERATE_NAME(KilledBy)
AUTOGENERATE_NAME(LIPSincAnimEnd)
AUTOGENERATE_NAME(Landed)
AUTOGENERATE_NAME(LongFall)
AUTOGENERATE_NAME(LostChild)
AUTOGENERATE_NAME(MayDodgeToMoveTarget)
AUTOGENERATE_NAME(MayFall)
AUTOGENERATE_NAME(MissedDodge)
AUTOGENERATE_NAME(ModifyVelocity)
AUTOGENERATE_NAME(NativeConsoleOpen)
AUTOGENERATE_NAME(NeedsMenuResolution)
AUTOGENERATE_NAME(NotReachableBy)
AUTOGENERATE_NAME(Notify)
AUTOGENERATE_NAME(NotifyBump)
AUTOGENERATE_NAME(NotifyFallingHitWall)
AUTOGENERATE_NAME(NotifyHeadVolumeChange)
AUTOGENERATE_NAME(NotifyHitMover)
AUTOGENERATE_NAME(NotifyHitWall)
AUTOGENERATE_NAME(NotifyJumpApex)
AUTOGENERATE_NAME(NotifyLanded)
AUTOGENERATE_NAME(NotifyLevelChange)
AUTOGENERATE_NAME(NotifyMissedJump)
AUTOGENERATE_NAME(NotifyMusicChange)
AUTOGENERATE_NAME(NotifyPhysicsVolumeChange)
AUTOGENERATE_NAME(NotifyPostLanded)
AUTOGENERATE_NAME(NotifySoundStopped)
AUTOGENERATE_NAME(NotifyTakeHit)
AUTOGENERATE_NAME(OnAdjustVolume)
AUTOGENERATE_NAME(OnCreateComponents)
AUTOGENERATE_NAME(OnDrawWeapon)
AUTOGENERATE_NAME(OnLogin)
AUTOGENERATE_NAME(OnRefresh)
AUTOGENERATE_NAME(OnSettingsChanged)
AUTOGENERATE_NAME(OnSheatheWeapon)
AUTOGENERATE_NAME(OnStreamChanged)
AUTOGENERATE_NAME(OnStreamingStopped)
AUTOGENERATE_NAME(OpenMenu)
AUTOGENERATE_NAME(OpenWindow)
AUTOGENERATE_NAME(ParseDirectories)
AUTOGENERATE_NAME(ParseEditorString)
AUTOGENERATE_NAME(ParseExtension)
AUTOGENERATE_NAME(ParsePath)
AUTOGENERATE_NAME(PawnEnteredVolume)
AUTOGENERATE_NAME(PawnLeavingVolume)
AUTOGENERATE_NAME(PhysicsChangedFor)
AUTOGENERATE_NAME(PhysicsVolumeChange)
AUTOGENERATE_NAME(PlayDying)
AUTOGENERATE_NAME(PlayFalling)
AUTOGENERATE_NAME(PlayJump)
AUTOGENERATE_NAME(PlayLandingAnimation)
AUTOGENERATE_NAME(PlayVideo)
AUTOGENERATE_NAME(PlayerCalcView)
AUTOGENERATE_NAME(PlayerInput)
AUTOGENERATE_NAME(PlayerSeesMe)
AUTOGENERATE_NAME(PostBeginPlay)
AUTOGENERATE_NAME(PostLoadSavedGame)
AUTOGENERATE_NAME(PostNetReceive)
AUTOGENERATE_NAME(PostRender2D)
AUTOGENERATE_NAME(PostRender)
AUTOGENERATE_NAME(PostTeleport)
AUTOGENERATE_NAME(PostTouch)
AUTOGENERATE_NAME(PreBeginPlay)
AUTOGENERATE_NAME(PreLogin)
AUTOGENERATE_NAME(PreSaveGame)
AUTOGENERATE_NAME(PreSpawned)
AUTOGENERATE_NAME(PreTeleport)
AUTOGENERATE_NAME(PrepareForMove)
AUTOGENERATE_NAME(ProcessKeyEvent)
AUTOGENERATE_NAME(ProcessKeyType)
AUTOGENERATE_NAME(ProcessMessage)
AUTOGENERATE_NAME(ProcessPostRender)
AUTOGENERATE_NAME(ProcessPreRender)
AUTOGENERATE_NAME(ProcessTick)
AUTOGENERATE_NAME(QuitGame)
AUTOGENERATE_NAME(RadialMenuCollect)
AUTOGENERATE_NAME(RadialMenuSelect)
AUTOGENERATE_NAME(RanInto)
AUTOGENERATE_NAME(RecoverFromBadStateCode)
AUTOGENERATE_NAME(RemoveCameraEffect)
AUTOGENERATE_NAME(RemoveInteraction)
AUTOGENERATE_NAME(RenderTexture)
AUTOGENERATE_NAME(ReplaceMenu)
AUTOGENERATE_NAME(RestoreSavedWindows)
AUTOGENERATE_NAME(SV_PlayerTick)
AUTOGENERATE_NAME(SaveOpenWindows)
AUTOGENERATE_NAME(SceneEnded)
AUTOGENERATE_NAME(SceneStarted)
AUTOGENERATE_NAME(SeeMonster)
AUTOGENERATE_NAME(SeePlayer)
AUTOGENERATE_NAME(SendWindowMessage)
AUTOGENERATE_NAME(ServerTravel)
AUTOGENERATE_NAME(SetAnimAction)
AUTOGENERATE_NAME(SetFocusTo)
AUTOGENERATE_NAME(SetHandle)
AUTOGENERATE_NAME(SetHeadScale)
AUTOGENERATE_NAME(SetInitialState)
AUTOGENERATE_NAME(SetRequiredGameResolution)
AUTOGENERATE_NAME(SetRotation)
AUTOGENERATE_NAME(SetTextData)
AUTOGENERATE_NAME(SetWalking)
AUTOGENERATE_NAME(SetupSpecialPathAbilities)
AUTOGENERATE_NAME(ShouldTickPhysics)
AUTOGENERATE_NAME(ShowLevelAreaName)
AUTOGENERATE_NAME(ShowMessageBox)
AUTOGENERATE_NAME(ShowPartyTravelConfirmation)
AUTOGENERATE_NAME(ShowPartyTravelOverview)
AUTOGENERATE_NAME(ShowStdWindow)
AUTOGENERATE_NAME(ShowTutorialWindow)
AUTOGENERATE_NAME(Shutdown)
AUTOGENERATE_NAME(SoakStop)
AUTOGENERATE_NAME(SpawnParticle)
AUTOGENERATE_NAME(SpecialCost)
AUTOGENERATE_NAME(SpecialHandling)
AUTOGENERATE_NAME(StartCrouch)
AUTOGENERATE_NAME(StartLoadingScreen)
AUTOGENERATE_NAME(StopLoadingScreen)
AUTOGENERATE_NAME(StopVideo)
AUTOGENERATE_NAME(StreamFinished)
AUTOGENERATE_NAME(SuggestMovePreparation)
AUTOGENERATE_NAME(TakeDamage)
AUTOGENERATE_NAME(Test)
AUTOGENERATE_NAME(Tick)
AUTOGENERATE_NAME(Timer)
AUTOGENERATE_NAME(ToggleMap)
AUTOGENERATE_NAME(TornOff)
AUTOGENERATE_NAME(Touch)
AUTOGENERATE_NAME(TravelPostAccept)
AUTOGENERATE_NAME(TravelPreAccept)
AUTOGENERATE_NAME(Trigger)
AUTOGENERATE_NAME(UnPressButtons)
AUTOGENERATE_NAME(UnTouch)
AUTOGENERATE_NAME(UnTrigger)
AUTOGENERATE_NAME(UpdateLoadingScreen)
AUTOGENERATE_NAME(UpdateStdWindow)
AUTOGENERATE_NAME(UpdateWindow)
AUTOGENERATE_NAME(UsedBy)
AUTOGENERATE_NAME(ViewportInitialized)
AUTOGENERATE_NAME(WorldSpaceOverlays)
AUTOGENERATE_NAME(ZoneChange)
AUTOGENERATE_NAME(cl_NotifyUnderCursor)
AUTOGENERATE_NAME(cl_OnBaseline)
AUTOGENERATE_NAME(cl_OnFrame)
AUTOGENERATE_NAME(cl_OnGroupChange)
AUTOGENERATE_NAME(cl_OnInit)
AUTOGENERATE_NAME(cl_OnPlayerTick)
AUTOGENERATE_NAME(cl_OnSceneEnded)
AUTOGENERATE_NAME(cl_OnSceneStarted)
AUTOGENERATE_NAME(cl_OnShutdown)
AUTOGENERATE_NAME(cl_OnTick)
AUTOGENERATE_NAME(cl_OnUpdate)
AUTOGENERATE_NAME(frame)
AUTOGENERATE_NAME(sv_OnInit)
AUTOGENERATE_NAME(sv_OnShutdown)

//------------------------------------------------------------------------------
//  Actor
//------------------------------------------------------------------------------

#define UCONST_Actor_MINFLOORZ  0.7
#define UCONST_Actor_MAXSTEPHEIGHT  25.0
enum EOwningDepartmentType {
  ODT_None = 0,
  ODT_Level = 1,
  ODT_Sound = 2,
  EOwningDepartmentType_RESERVED_3 = 3,
  ODT_Gameplay = 4
};

enum eKillZType {
  KILLZ_None = 0,
  KILLZ_Lava = 1,
  KILLZ_Suicide = 2
};

enum ETravelType {
  TRAVEL_Absolute = 0,
  TRAVEL_Partial = 1,
  TRAVEL_Relative = 2
};

enum EForceType {
  FT_None = 0,
  FT_DragAlong = 1,
  FT_Constant = 2
};

enum EMusicTransition {
  MTRAN_None = 0,
  MTRAN_Instant = 1,
  MTRAN_Segue = 2,
  MTRAN_Fade = 3,
  MTRAN_FastFade = 4,
  MTRAN_SlowFade = 5
};

enum ESoundSlot {
  SLOT_None = 0,
  SLOT_Misc = 1,
  SLOT_Pain = 2,
  SLOT_Interact = 3,
  SLOT_Ambient = 4,
  SLOT_Talk = 5,
  SLOT_Interface = 6
};

enum ESoundOcclusion {
  OCCLUSION_Default = 0,
  OCCLUSION_None = 1,
  OCCLUSION_BSP = 2,
  OCCLUSION_StaticMeshes = 3
};

enum ERenderStyle {
  STY_None = 0,
  STY_Normal = 1,
  STY_Masked = 2,
  STY_Translucent = 3,
  STY_Modulated = 4,
  STY_Alpha = 5,
  STY_Additive = 6,
  STY_Subtractive = 7,
  STY_Particle = 8,
  STY_AlphaZ = 9
};

enum ESurfaceTypes {
  EST_Default = 0,
  EST_Rock = 1,
  EST_Dirt = 2,
  EST_Metal = 3,
  EST_Wood = 4,
  EST_Plant = 5,
  EST_Flesh = 6,
  EST_Ice = 7,
  EST_Snow = 8,
  EST_Water = 9,
  EST_Glass = 10,
  EST_CreakyWood = 11,
  EST_Grass = 12,
  EST_Gravel = 13,
  EST_HardRock = 14,
  EST_Mud = 15,
  EST_Stone = 16,
  EST_Hardwood = 17,
  EST_WoodRug = 18,
  EST_Custom08 = 19,
  EST_Custom09 = 20,
  EST_Custom10 = 21,
  EST_Custom11 = 22,
  EST_Custom12 = 23,
  EST_Custom13 = 24,
  EST_Custom14 = 25,
  EST_Custom15 = 26,
  EST_Custom16 = 27,
  EST_Custom17 = 28,
  EST_Custom18 = 29,
  EST_Custom19 = 30,
  EST_Custom20 = 31,
  EST_Custom21 = 32,
  EST_Custom22 = 33,
  EST_Custom23 = 34,
  EST_Custom24 = 35,
  EST_Custom25 = 36,
  EST_Custom26 = 37,
  EST_Custom27 = 38,
  EST_Custom28 = 39,
  EST_Custom29 = 40,
  EST_Custom30 = 41,
  EST_Custom31 = 42
};

enum EUV2Mode {
  UVM_MacroTexture = 0,
  UVM_LightMap = 1,
  UVM_Skin = 2
};

enum ENetRole {
  ROLE_None = 0,
  ROLE_DumbProxy = 1,
  ROLE_SimulatedProxy = 2,
  ROLE_AutonomousProxy = 3,
  ROLE_Authority = 4
};

enum EPhysics {
  PHYS_None = 0,
  PHYS_Walking = 1,
  PHYS_Falling = 2,
  PHYS_Swimming = 3,
  PHYS_Flying = 4,
  PHYS_Rotating = 5,
  PHYS_Projectile = 6,
  PHYS_Interpolating = 7,
  PHYS_MovingBrush = 8,
  PHYS_Spider = 9,
  PHYS_Trailer = 10,
  PHYS_Ladder = 11,
  PHYS_RootMotion = 12,
  PHYS_Karma = 13,
  PHYS_KarmaRagDoll = 14,
  PHYS_Hovering = 15,
  PHYS_CinMotion = 16,
  PHYS_DragonFlying = 17,
  PHYS_Jumping = 18,
  PHYS_SitGround = 19,
  PHYS_SitChair = 20,
  PHYS_Submerged = 21,
  PHYS_Turret = 22
};

enum EResidence {
  RES_ServerClient = 0,
  RES_ClientOnly = 1,
  RES_ServerOnly = 2
};

enum EFilterState {
  FS_Maybe = 0,
  FS_Yes = 1,
  FS_No = 2
};

enum EDrawType {
  DT_None = 0,
  DT_Sprite = 1,
  DT_Mesh = 2,
  DT_Brush = 3,
  DT_RopeSprite = 4,
  DT_VerticalSprite = 5,
  DT_Terraform = 6,
  DT_SpriteAnimOnce = 7,
  DT_StaticMesh = 8,
  DT_DrawType = 9,
  DT_Particle = 10,
  DT_AntiPortal = 11,
  DT_FluidSurface = 12
};

enum ELightEffect {
  LE_None = 0,
  LE_TorchWaver = 1,
  LE_FireWaver = 2,
  LE_WateryShimmer = 3,
  LE_Searchlight = 4,
  LE_SlowWave = 5,
  LE_FastWave = 6,
  LE_CloudCast = 7,
  LE_StaticSpot = 8,
  LE_Shock = 9,
  LE_Disco = 10,
  LE_Warp = 11,
  LE_Spotlight = 12,
  LE_NonIncidence = 13,
  LE_Shell = 14,
  LE_OmniBumpMap = 15,
  LE_Interference = 16,
  LE_Cylinder = 17,
  LE_Rotor = 18,
  LE_Negative = 19,
  LE_Sunlight = 20,
  LE_QuadraticNonIncidence = 21
};

enum ELightType {
  LT_None = 0,
  LT_Steady = 1,
  LT_Pulse = 2,
  LT_Blink = 3,
  LT_Flicker = 4,
  LT_Strobe = 5,
  LT_BackdropLight = 6,
  LT_SubtlePulse = 7,
  LT_TexturePaletteOnce = 8,
  LT_TexturePaletteLoop = 9,
  LT_FadeOut = 10
};

enum eSBNetworkRoles {
  sbROLE_None = 0,
  sbROLE_Server = 1,
  sbROLE_Proxy = 2,
  sbROLE_DBProxy = 3,
  sbROLE_Client = 4,
  sbROLE_RelevantLod0 = 5,
  sbROLE_RelevantLod1 = 6,
  sbROLE_RelevantLod2 = 7,
  sbROLE_RelevantLod3 = 8,
  sbROLE_ServerLocal = 9,
  sbROLE_ClientLocal = 10
};

// FActorRelation 0 ( )
struct DLL_IMPORT FActorRelation {
  public:
    class AActor* mActor;  // 0 0
    class FString mDescription;  // 4 400000 CPF_NeedCtorLink
    class FColor mColour;  // C 0
    FActorRelation(struct FActorRelation const &);
    FActorRelation(void);
    ~FActorRelation(void);
    struct FActorRelation & operator=(struct FActorRelation const &);
};

// FKRBVec 0 ( )
struct DLL_IMPORT FKRBVec {
  public:
    FLOAT X;  // 0 0
    FLOAT Y;  // 4 0
    FLOAT Z;  // 8 0
};

// FKRigidBodyState 0 ( )
struct DLL_IMPORT FKRigidBodyState {
  public:
    struct FKRBVec Position;  // 0 0
    class FQuat Quaternion;  // C 0
    struct FKRBVec LinVel;  // 1C 0
    struct FKRBVec AngVel;  // 28 0
};

// FSBSoundTypeParams 1 ( CLASS_Abstract )
struct DLL_IMPORT FSBSoundTypeParams {
  public:
    BYTE SoundType;  // 0 0
    FLOAT RunningTime;  // 4 0
    FLOAT TimeBetweenSounds;  // 8 0
    struct FSBSoundTypeParams & operator=(struct FSBSoundTypeParams const &);
};

// FSBSoundGroupParams 1 ( CLASS_Abstract )
struct DLL_IMPORT FSBSoundGroupParams {
  public:
    FName PropertyGroupName;  // 0 0
    FLOAT RunningTime;  // 4 0
    FLOAT TimeBetweenSounds;  // 8 0
    FSBSoundGroupParams(void);
    struct FSBSoundGroupParams & operator=(struct FSBSoundGroupParams const &);
};

// FSBProjectorRenderInfoPtr 0 ( )
struct DLL_IMPORT FSBProjectorRenderInfoPtr {
  public:
    DWORD Ptr;  // 0 2000 CPF_Transient
};

// FStaticMeshProjectorRenderInfoPtr 0 ( )
struct DLL_IMPORT FStaticMeshProjectorRenderInfoPtr {
  public:
    DWORD Ptr;  // 0 2000 CPF_Transient
};

// FProjectorRenderInfoPtr 0 ( )
struct DLL_IMPORT FProjectorRenderInfoPtr {
  public:
    DWORD Ptr;  // 0 2000 CPF_Transient
};

// FHashLink 0 ( )
struct DLL_IMPORT FHashLink {
  public:
    DWORD HashNext;  // 0 2000 CPF_Transient
    DWORD HashPrevious;  // 4 2000 CPF_Transient
    INT NextIndex;  // 8 0
    INT PreviousIndex;  // C 0
};

// FHashValues 0 ( )
struct DLL_IMPORT FHashValues {
  public:
    TArray<struct FHashLink> HashLinks;  // 0 402002 CPF_Const CPF_Transient CPF_NeedCtorLink
    INT StartIndices;  // C 0
    INT EndIndices;  // 10 0
};

// FPointRegion 0 ( )
struct DLL_IMPORT FPointRegion {
  public:
    class AZoneInfo* Zone;  // 0 0
    INT iLeaf;  // 4 0
    BYTE ZoneNumber;  // 8 0
    FPointRegion(class AZoneInfo *);
    FPointRegion(class AZoneInfo *,int,unsigned char);
    FPointRegion(void);
    struct FPointRegion & operator=(struct FPointRegion const &);
};

// FBatchReference 0 ( )
struct DLL_IMPORT FBatchReference {
  public:
    INT BatchIndex;  // 0 0
    INT ElementIndex;  // 4 0
};

// FLightRenderDataPtr 0 ( )
struct DLL_IMPORT FLightRenderDataPtr {
  public:
    DWORD Ptr;  // 0 2000 CPF_Transient
};

// FActorRenderDataPtr 0 ( )
struct DLL_IMPORT FActorRenderDataPtr {
  public:
    DWORD Ptr;  // 0 2000 CPF_Transient
};

// FActorFrameDataPtr 0 ( )
struct DLL_IMPORT FActorFrameDataPtr {
  public:
    DWORD Ptr;  // 0 2000 CPF_Transient
};

//  Actor.GetTaggedRelations 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execGetTaggedRelations_Parms {
  class FString aTag;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FColor aColour;  // 8 80 CPF_Parm
  class FString aDescription;  // C 400080 CPF_Parm CPF_NeedCtorLink
  TArray<struct FActorRelation> oRelations;  // 14 400180 CPF_Parm CPF_OutParm CPF_NeedCtorLink
};


//  Actor.cl_NotifyUnderCursor 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventcl_NotifyUnderCursor_Parms {
  BITFIELD aSetting : 1;  // 0 80 CPF_Parm
};


//  Actor.RadialMenuSelect 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct AActor_eventRadialMenuSelect_Parms {
  class APawn* aPlayerPawn;  // 0 80 CPF_Parm
  BYTE aMainOption;  // 4 80 CPF_Parm
  BYTE aSubOption;  // 5 80 CPF_Parm
};


//  Actor.RadialMenuImage 20002 0 ( FUNC_Defined FUNC_Public )
struct AActor_execRadialMenuImage_Parms {
  class APawn* aPlayerPawn;  // 0 80 CPF_Parm
  BYTE aMainOption;  // 4 80 CPF_Parm
  BYTE aSubOption;  // 5 80 CPF_Parm
  class UMaterial* ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.RadialMenuCollect 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct AActor_eventRadialMenuCollect_Parms {
  class APawn* aPlayerPawn;  // 0 80 CPF_Parm
  BYTE aMainOption;  // 4 80 CPF_Parm
  TArray<BYTE> aMainOptions;  // 8 400180 CPF_Parm CPF_OutParm CPF_NeedCtorLink
};


//  Actor.OnSettingsChanged 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventOnSettingsChanged_Parms {
};


//  Actor.BlocksShotAt 20002 0 ( FUNC_Defined FUNC_Public )
struct AActor_execBlocksShotAt_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.PawnBaseDied 20000 0 ( FUNC_Public )
struct AActor_execPawnBaseDied_Parms {
};


//  Actor.IsStationary 20002 0 ( FUNC_Defined FUNC_Public )
struct AActor_execIsStationary_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.NotifyLocalPlayerTeamReceived 20000 0 ( FUNC_Public )
struct AActor_execNotifyLocalPlayerTeamReceived_Parms {
};


//  Actor.NotifyLocalPlayerDead 20000 0 ( FUNC_Public )
struct AActor_execNotifyLocalPlayerDead_Parms {
  class APlayerController* PC;  // 0 80 CPF_Parm
};


//  Actor.SetDelayedDamageInstigatorController 20000 0 ( FUNC_Public )
struct AActor_execSetDelayedDamageInstigatorController_Parms {
  class AController* C;  // 0 80 CPF_Parm
};


//  Actor.TeamLink 20002 0 ( FUNC_Defined FUNC_Public )
struct AActor_execTeamLink_Parms {
  INT TeamNum;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.SelfTriggered 20002 0 ( FUNC_Defined FUNC_Public )
struct AActor_execSelfTriggered_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.EffectIsRelevant 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AActor_execEffectIsRelevant_Parms {
  class FVector SpawnLocation;  // 0 80 CPF_Parm
  BITFIELD bForceDedicated : 1;  // C 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.CheckMaxEffectDistance 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AActor_execCheckMaxEffectDistance_Parms {
  class APlayerController* P;  // 0 80 CPF_Parm
  class FVector SpawnLocation;  // 4 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.Crash 22002 0 ( FUNC_Defined FUNC_Static FUNC_Public )
struct AActor_execCrash_Parms {
};


//  Actor.GetCollisionExtent 20002 0 ( FUNC_Defined FUNC_Public )
struct AActor_execGetCollisionExtent_Parms {
  class FVector ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.CanSplash 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AActor_execCanSplash_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.PlayTeleportEffect 20000 0 ( FUNC_Public )
struct AActor_execPlayTeleportEffect_Parms {
  BITFIELD bOut : 1;  // 0 80 CPF_Parm
  BITFIELD bSound : 1;  // 4 80 CPF_Parm
};


//  Actor.IsInPain 20002 0 ( FUNC_Defined FUNC_Public )
struct AActor_execIsInPain_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.IsInVolume 20002 0 ( FUNC_Defined FUNC_Public )
struct AActor_execIsInVolume_Parms {
  class AVolume* aVolume;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.UntriggerEvent 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execUntriggerEvent_Parms {
  FName EventName;  // 0 80 CPF_Parm
  class AActor* Other;  // 4 80 CPF_Parm
  class APawn* EventInstigator;  // 8 80 CPF_Parm
};


//  Actor.TriggerEvent 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execTriggerEvent_Parms {
  FName EventName;  // 0 80 CPF_Parm
  class AActor* Other;  // 4 80 CPF_Parm
  class APawn* EventInstigator;  // 8 80 CPF_Parm
};


//  Actor.Reset 20000 0 ( FUNC_Public )
struct AActor_execReset_Parms {
};


//  Actor.StartInterpolation 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AActor_execStartInterpolation_Parms {
};


//  Actor.TouchingActor 20103 0 ( FUNC_Final FUNC_Defined FUNC_Simulated FUNC_Public )
struct AActor_execTouchingActor_Parms {
  class AActor* A;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.NearSpot 20103 0 ( FUNC_Final FUNC_Defined FUNC_Simulated FUNC_Public )
struct AActor_execNearSpot_Parms {
  class FVector Spot;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.DisplayDebug 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AActor_execDisplayDebug_Parms {
  class UCanvas* Canvas;  // 0 80 CPF_Parm
  FLOAT YL;  // 4 180 CPF_Parm CPF_OutParm
  FLOAT YPos;  // 8 180 CPF_Parm CPF_OutParm
};


//  Actor.SetDefaultDisplayProperties 20002 0 ( FUNC_Defined FUNC_Public )
struct AActor_execSetDefaultDisplayProperties_Parms {
};


//  Actor.SetDisplayProperties 20002 0 ( FUNC_Defined FUNC_Public )
struct AActor_execSetDisplayProperties_Parms {
  BYTE NewStyle;  // 0 80 CPF_Parm
  class UMaterial* NewTexture;  // 4 80 CPF_Parm
  BITFIELD bLighting : 1;  // 8 80 CPF_Parm
};


//  Actor.GetHumanReadableName 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AActor_execGetHumanReadableName_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  Actor.POVChanged 20000 0 ( FUNC_Public )
struct AActor_execPOVChanged_Parms {
  class APlayerController* PC;  // 0 80 CPF_Parm
  BITFIELD bBehindViewChanged : 1;  // 4 80 CPF_Parm
};


//  Actor.BecomeViewTarget 20000 0 ( FUNC_Public )
struct AActor_execBecomeViewTarget_Parms {
};


//  Actor.TravelPostAccept 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventTravelPostAccept_Parms {
};


//  Actor.TravelPreAccept 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventTravelPreAccept_Parms {
};


//  Actor.CheckForErrors 20002 0 ( FUNC_Defined FUNC_Public )
struct AActor_execCheckForErrors_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.HurtRadius 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AActor_execHurtRadius_Parms {
  FLOAT DamageAmount;  // 0 80 CPF_Parm
  FLOAT DamageRadius;  // 4 80 CPF_Parm
  class UClass* DamageType;  // 8 80 CPF_Parm
  FLOAT Momentum;  // C 80 CPF_Parm
  class FVector HitLocation;  // 10 80 CPF_Parm
};


//  Actor.UpdatePrecacheStaticMeshes 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AActor_execUpdatePrecacheStaticMeshes_Parms {
};


//  Actor.UpdatePrecacheMaterials 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AActor_execUpdatePrecacheMaterials_Parms {
};


//  Actor.SetInitialState 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct AActor_eventSetInitialState_Parms {
};


//  Actor.PostBeginPlay 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventPostBeginPlay_Parms {
};


//  Actor.PreBeginPlay 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct AActor_eventPreBeginPlay_Parms {
};


//  Actor.RenderTexture 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventRenderTexture_Parms {
  class UScriptedTexture* Tex;  // 0 80 CPF_Parm
};


//  Actor.RenderOverlays 20000 0 ( FUNC_Public )
struct AActor_execRenderOverlays_Parms {
  class UCanvas* Canvas;  // 0 80 CPF_Parm
};


//  Actor.RecoverFromBadStateCode 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventRecoverFromBadStateCode_Parms {
};


//  Actor.Multiply_ColorFloat 23401 0 ( FUNC_Final FUNC_Native FUNC_Operator FUNC_Static FUNC_Public )
struct AActor_execMultiply_ColorFloat_Parms {
  class FColor A;  // 0 80 CPF_Parm
  FLOAT B;  // 4 80 CPF_Parm
  class FColor ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.Add_ColorColor 23401 0 ( FUNC_Final FUNC_Native FUNC_Operator FUNC_Static FUNC_Public )
struct AActor_execAdd_ColorColor_Parms {
  class FColor A;  // 0 80 CPF_Parm
  class FColor B;  // 4 80 CPF_Parm
  class FColor ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.Multiply_FloatColor 23401 0 ( FUNC_Final FUNC_Native FUNC_Operator FUNC_Static FUNC_Public )
struct AActor_execMultiply_FloatColor_Parms {
  FLOAT A;  // 0 80 CPF_Parm
  class FColor B;  // 4 80 CPF_Parm
  class FColor ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.Subtract_ColorColor 23401 0 ( FUNC_Final FUNC_Native FUNC_Operator FUNC_Static FUNC_Public )
struct AActor_execSubtract_ColorColor_Parms {
  class FColor A;  // 0 80 CPF_Parm
  class FColor B;  // 4 80 CPF_Parm
  class FColor ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.CollidingActors 20405 0 ( FUNC_Final FUNC_Iterator FUNC_Native FUNC_Public )
struct AActor_execCollidingActors_Parms {
  class UClass* BaseClass;  // 0 80 CPF_Parm
  class AActor* Actor;  // 4 180 CPF_Parm CPF_OutParm
  FLOAT Radius;  // 8 80 CPF_Parm
  class FVector loc;  // C 90 CPF_OptionalParm CPF_Parm
};


//  Actor.VisibleCollidingActors 20405 0 ( FUNC_Final FUNC_Iterator FUNC_Native FUNC_Public )
struct AActor_execVisibleCollidingActors_Parms {
  class UClass* BaseClass;  // 0 80 CPF_Parm
  class AActor* Actor;  // 4 180 CPF_Parm CPF_OutParm
  FLOAT Radius;  // 8 80 CPF_Parm
  class FVector loc;  // C 90 CPF_OptionalParm CPF_Parm
  BITFIELD bIgnoreHidden : 1;  // 18 90 CPF_OptionalParm CPF_Parm
};


//  Actor.VisibleActors 20405 0 ( FUNC_Final FUNC_Iterator FUNC_Native FUNC_Public )
struct AActor_execVisibleActors_Parms {
  class UClass* BaseClass;  // 0 80 CPF_Parm
  class AActor* Actor;  // 4 180 CPF_Parm CPF_OutParm
  FLOAT Radius;  // 8 90 CPF_OptionalParm CPF_Parm
  class FVector loc;  // C 90 CPF_OptionalParm CPF_Parm
};


//  Actor.RadiusActors 20405 0 ( FUNC_Final FUNC_Iterator FUNC_Native FUNC_Public )
struct AActor_execRadiusActors_Parms {
  class UClass* BaseClass;  // 0 80 CPF_Parm
  class AActor* Actor;  // 4 180 CPF_Parm CPF_OutParm
  FLOAT Radius;  // 8 80 CPF_Parm
  class FVector loc;  // C 90 CPF_OptionalParm CPF_Parm
};


//  Actor.TraceActors 20405 0 ( FUNC_Final FUNC_Iterator FUNC_Native FUNC_Public )
struct AActor_execTraceActors_Parms {
  class UClass* BaseClass;  // 0 80 CPF_Parm
  class AActor* Actor;  // 4 180 CPF_Parm CPF_OutParm
  class FVector HitLoc;  // 8 180 CPF_Parm CPF_OutParm
  class FVector HitNorm;  // 14 180 CPF_Parm CPF_OutParm
  class FVector End;  // 20 80 CPF_Parm
  class FVector Start;  // 2C 90 CPF_OptionalParm CPF_Parm
  class FVector Extent;  // 38 90 CPF_OptionalParm CPF_Parm
};


//  Actor.TouchingActors 20405 0 ( FUNC_Final FUNC_Iterator FUNC_Native FUNC_Public )
struct AActor_execTouchingActors_Parms {
  class UClass* BaseClass;  // 0 80 CPF_Parm
  class AActor* Actor;  // 4 180 CPF_Parm CPF_OutParm
};


//  Actor.BasedActors 20405 0 ( FUNC_Final FUNC_Iterator FUNC_Native FUNC_Public )
struct AActor_execBasedActors_Parms {
  class UClass* BaseClass;  // 0 80 CPF_Parm
  class AActor* Actor;  // 4 180 CPF_Parm CPF_OutParm
};


//  Actor.ChildActors 20405 0 ( FUNC_Final FUNC_Iterator FUNC_Native FUNC_Public )
struct AActor_execChildActors_Parms {
  class UClass* BaseClass;  // 0 80 CPF_Parm
  class AActor* Actor;  // 4 180 CPF_Parm CPF_OutParm
};


//  Actor.DynamicActors 20405 0 ( FUNC_Final FUNC_Iterator FUNC_Native FUNC_Public )
struct AActor_execDynamicActors_Parms {
  class UClass* BaseClass;  // 0 80 CPF_Parm
  class AActor* Actor;  // 4 180 CPF_Parm CPF_OutParm
  FName MatchTag;  // 8 90 CPF_OptionalParm CPF_Parm
};


//  Actor.AllActors 20405 0 ( FUNC_Final FUNC_Iterator FUNC_Native FUNC_Public )
struct AActor_execAllActors_Parms {
  class UClass* BaseClass;  // 0 80 CPF_Parm
  class AActor* Actor;  // 4 180 CPF_Parm CPF_OutParm
  FName MatchTag;  // 8 90 CPF_OptionalParm CPF_Parm
};


//  Actor.GetGameInfo 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execGetGameInfo_Parms {
  class AGameInfo* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.ResetStaticFilterState 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execResetStaticFilterState_Parms {
};


//  Actor.BeginPlay 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventBeginPlay_Parms {
};


//  Actor.PostTeleport 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventPostTeleport_Parms {
  class ATeleporter* OutTeleporter;  // 0 80 CPF_Parm
};


//  Actor.PreTeleport 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventPreTeleport_Parms {
  class ATeleporter* InTeleporter;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.SuggestFallVelocity 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSuggestFallVelocity_Parms {
  class FVector Destination;  // 0 80 CPF_Parm
  class FVector Start;  // C 80 CPF_Parm
  FLOAT MaxZ;  // 18 80 CPF_Parm
  FLOAT MaxXYSpeed;  // 1C 80 CPF_Parm
  class FVector ReturnValue;  // 20 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.PlayerCanSeeMe 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execPlayerCanSeeMe_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.MakeNoise 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execMakeNoise_Parms {
  FLOAT Loudness;  // 0 80 CPF_Parm
};


//  Actor.ForceFeedbackSupported 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execForceFeedbackSupported_Parms {
  BITFIELD Enable : 1;  // 0 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.ChangeBaseParamsFeedbackEffect 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execChangeBaseParamsFeedbackEffect_Parms {
  class FString EffectName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  FLOAT DirectionX;  // 8 90 CPF_OptionalParm CPF_Parm
  FLOAT DirectionY;  // C 90 CPF_OptionalParm CPF_Parm
  FLOAT Gain;  // 10 90 CPF_OptionalParm CPF_Parm
};


//  Actor.ChangeSpringFeedbackEffect 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execChangeSpringFeedbackEffect_Parms {
  class FString EffectName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  FLOAT CenterX;  // 8 80 CPF_Parm
  FLOAT CenterY;  // C 80 CPF_Parm
};


//  Actor.StopFeedbackEffect 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execStopFeedbackEffect_Parms {
  class FString EffectName;  // 0 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
};


//  Actor.PlayFeedbackEffect 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execPlayFeedbackEffect_Parms {
  class FString EffectName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
};


//  Actor.GetSoundDuration 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execGetSoundDuration_Parms {
  class USound* Sound;  // 0 80 CPF_Parm
  FLOAT ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.DemoPlaySound 20D00 0 ( FUNC_Simulated FUNC_Native FUNC_Event FUNC_Public )
struct AActor_eventDemoPlaySound_Parms {
  class USound* Sound;  // 0 80 CPF_Parm
  BYTE Slot;  // 4 90 CPF_OptionalParm CPF_Parm
  FLOAT Volume;  // 8 90 CPF_OptionalParm CPF_Parm
  BITFIELD bNoOverride : 1;  // C 90 CPF_OptionalParm CPF_Parm
  FLOAT Radius;  // 10 90 CPF_OptionalParm CPF_Parm
  FLOAT Pitch;  // 14 90 CPF_OptionalParm CPF_Parm
  BITFIELD Attenuate : 1;  // 18 90 CPF_OptionalParm CPF_Parm
};


//  Actor.PlayOwnedSound 20501 0 ( FUNC_Final FUNC_Simulated FUNC_Native FUNC_Public )
struct AActor_execPlayOwnedSound_Parms {
  class USound* Sound;  // 0 80 CPF_Parm
  BYTE Slot;  // 4 90 CPF_OptionalParm CPF_Parm
  FLOAT Volume;  // 8 90 CPF_OptionalParm CPF_Parm
  BITFIELD bNoOverride : 1;  // C 90 CPF_OptionalParm CPF_Parm
  FLOAT Radius;  // 10 90 CPF_OptionalParm CPF_Parm
  FLOAT Pitch;  // 14 90 CPF_OptionalParm CPF_Parm
  BITFIELD Attenuate : 1;  // 18 90 CPF_OptionalParm CPF_Parm
};


//  Actor.PlaySound 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execPlaySound_Parms {
  class USound* Sound;  // 0 80 CPF_Parm
  BYTE Slot;  // 4 90 CPF_OptionalParm CPF_Parm
  FLOAT Volume;  // 8 90 CPF_OptionalParm CPF_Parm
  BITFIELD bNoOverride : 1;  // C 90 CPF_OptionalParm CPF_Parm
  FLOAT Radius;  // 10 90 CPF_OptionalParm CPF_Parm
  FLOAT Pitch;  // 14 90 CPF_OptionalParm CPF_Parm
  BITFIELD Attenuate : 1;  // 18 90 CPF_OptionalParm CPF_Parm
};


//  Actor.StopSBSoundTypes 20400 0 ( FUNC_Native FUNC_Public )
struct AActor_execStopSBSoundTypes_Parms {
  BYTE aSoundType;  // 0 80 CPF_Parm
};


//  Actor.StopAudio 20400 0 ( FUNC_Native FUNC_Public )
struct AActor_execStopAudio_Parms {
  INT aTrackHandle;  // 0 80 CPF_Parm
  class AActor* aOwner;  // 4 90 CPF_OptionalParm CPF_Parm
  FLOAT aFadeOutTime;  // 8 90 CPF_OptionalParm CPF_Parm
};


//  Actor.PlaySBSound 20400 0 ( FUNC_Native FUNC_Public )
struct AActor_execPlaySBSound_Parms {
  class USound* Sound;  // 0 80 CPF_Parm
  FLOAT Volume;  // 4 80 CPF_Parm
  FLOAT Pitch;  // 8 80 CPF_Parm
  FLOAT Radius;  // C 80 CPF_Parm
  class FVector SoundSourceOffset;  // 10 90 CPF_OptionalParm CPF_Parm
  BYTE AudioType;  // 1C 90 CPF_OptionalParm CPF_Parm
  INT ReturnValue;  // 20 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.PostLoadSavedGame 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventPostLoadSavedGame_Parms {
};


//  Actor.PreSaveGame 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventPreSaveGame_Parms {
};


//  Actor.SetTimer 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSetTimer_Parms {
  FLOAT NewTimerRate;  // 0 80 CPF_Parm
  BITFIELD bLoop : 1;  // 4 80 CPF_Parm
};


//  Actor.TornOff 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventTornOff_Parms {
};


//  Actor.Destroy 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execDestroy_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.Spawn 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSpawn_Parms {
  class UClass* SpawnClass;  // 0 80 CPF_Parm
  class AActor* SpawnOwner;  // 4 90 CPF_OptionalParm CPF_Parm
  FName SpawnTag;  // 8 90 CPF_OptionalParm CPF_Parm
  class FVector SpawnLocation;  // C 90 CPF_OptionalParm CPF_Parm
  class FRotator SpawnRotation;  // 18 90 CPF_OptionalParm CPF_Parm
  INT InstanceID;  // 24 90 CPF_OptionalParm CPF_Parm
  class AActor* ReturnValue;  // 28 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.TraceThisActor 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execTraceThisActor_Parms {
  class FVector HitLocation;  // 0 180 CPF_Parm CPF_OutParm
  class FVector HitNormal;  // C 180 CPF_Parm CPF_OutParm
  class FVector TraceEnd;  // 18 80 CPF_Parm
  class FVector TraceStart;  // 24 80 CPF_Parm
  class FVector Extent;  // 30 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 3C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.FastTrace 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execFastTrace_Parms {
  class FVector TraceEnd;  // 0 80 CPF_Parm
  class FVector TraceStart;  // C 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 18 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.Trace 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execTrace_Parms {
  class FVector HitLocation;  // 0 180 CPF_Parm CPF_OutParm
  class FVector HitNormal;  // C 180 CPF_Parm CPF_OutParm
  class FVector TraceEnd;  // 18 80 CPF_Parm
  class FVector TraceStart;  // 24 90 CPF_OptionalParm CPF_Parm
  BITFIELD bTraceActors : 1;  // 30 90 CPF_OptionalParm CPF_Parm
  class FVector Extent;  // 34 90 CPF_OptionalParm CPF_Parm
  class UMaterial* Material;  // 40 190 CPF_OptionalParm CPF_Parm CPF_OutParm
  class AActor* ReturnValue;  // 44 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.HealDamage 20000 0 ( FUNC_Public )
struct AActor_execHealDamage_Parms {
  INT Amount;  // 0 80 CPF_Parm
  class AController* Healer;  // 4 80 CPF_Parm
  class UClass* DamageType;  // 8 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.TakeDamage 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventTakeDamage_Parms {
  INT Damage;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
  class FVector HitLocation;  // 8 80 CPF_Parm
  class FVector Momentum;  // 14 80 CPF_Parm
  class UClass* DamageType;  // 20 80 CPF_Parm
};


//  Actor.KilledBy 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventKilledBy_Parms {
  class APawn* EventInstigator;  // 0 80 CPF_Parm
};


//  Actor.FellOutOfWorld 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct AActor_eventFellOutOfWorld_Parms {
  BYTE KillType;  // 0 80 CPF_Parm
};


//  Actor.UsedBy 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventUsedBy_Parms {
  class APawn* User;  // 0 80 CPF_Parm
};


//  Actor.EndedRotation 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventEndedRotation_Parms {
};


//  Actor.FinishedInterpolation 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct AActor_eventFinishedInterpolation_Parms {
};


//  Actor.RanInto 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventRanInto_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Actor.EncroachedBy 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventEncroachedBy_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Actor.EncroachingOn 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventEncroachingOn_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.SpecialHandling 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventSpecialHandling_Parms {
  class APawn* Other;  // 0 80 CPF_Parm
  class AActor* ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.Detach 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventDetach_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Actor.Attach 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventAttach_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Actor.BaseChange 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventBaseChange_Parms {
};


//  Actor.Bump 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventBump_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Actor.UnTouch 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventUnTouch_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Actor.PostTouch 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventPostTouch_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Actor.Touch 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventTouch_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Actor.PhysicsVolumeChange 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventPhysicsVolumeChange_Parms {
  class APhysicsVolume* NewVolume;  // 0 80 CPF_Parm
};


//  Actor.ZoneChange 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventZoneChange_Parms {
  class AZoneInfo* NewZone;  // 0 80 CPF_Parm
};


//  Actor.Landed 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventLanded_Parms {
  class FVector HitNormal;  // 0 80 CPF_Parm
};


//  Actor.Falling 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventFalling_Parms {
};


//  Actor.HitWall 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventHitWall_Parms {
  class FVector HitNormal;  // 0 80 CPF_Parm
  class AActor* HitWall;  // C 80 CPF_Parm
};


//  Actor.Timer 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventTimer_Parms {
};


//  Actor.TimerPop 20100 0 ( FUNC_Simulated FUNC_Public )
struct AActor_execTimerPop_Parms {
  class AVolumeTimer* t;  // 0 80 CPF_Parm
};


//  Actor.EndEvent 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventEndEvent_Parms {
};


//  Actor.BeginEvent 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventBeginEvent_Parms {
};


//  Actor.UnTrigger 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventUnTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


//  Actor.Trigger 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


//  Actor.PostNetReceive 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventPostNetReceive_Parms {
};


//  Actor.Tick 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventTick_Parms {
  FLOAT DeltaTime;  // 0 80 CPF_Parm
};


//  Actor.LostChild 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventLostChild_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Actor.GainedChild 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventGainedChild_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Actor.Destroyed 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventDestroyed_Parms {
};


//  Actor.GetAllowedAudioRepeatTime 20C01 0 ( FUNC_Final FUNC_Native FUNC_Event FUNC_Public )
struct AActor_eventGetAllowedAudioRepeatTime_Parms {
  INT aSoundType;  // 0 80 CPF_Parm
  FLOAT ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.NotifySoundStopped 20C01 0 ( FUNC_Final FUNC_Native FUNC_Event FUNC_Public )
struct AActor_eventNotifySoundStopped_Parms {
  class USound* aSoundStopped;  // 0 80 CPF_Parm
};


//  Actor.StopAllMusic 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execStopAllMusic_Parms {
  FLOAT FadeOutTime;  // 0 90 CPF_OptionalParm CPF_Parm
};


//  Actor.StopMusic 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execStopMusic_Parms {
  INT SongHandle;  // 0 80 CPF_Parm
  FLOAT FadeOutTime;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  Actor.PlayMusic 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execPlayMusic_Parms {
  class FString Song;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  FLOAT FadeInTime;  // 8 90 CPF_OptionalParm CPF_Parm
  INT ReturnValue;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.PauseStream 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execPauseStream_Parms {
  INT Handle;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.AdjustVolume 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execAdjustVolume_Parms {
  INT Handle;  // 0 80 CPF_Parm
  FLOAT NewVolume;  // 4 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.SeekStream 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSeekStream_Parms {
  INT Handle;  // 0 80 CPF_Parm
  FLOAT Seconds;  // 4 80 CPF_Parm
  INT ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.StopStream 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execStopStream_Parms {
  INT Handle;  // 0 80 CPF_Parm
  FLOAT FadeOutTime;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  Actor.PlayStream 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execPlayStream_Parms {
  class FString Song;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD UseMusicVolume : 1;  // 8 90 CPF_OptionalParm CPF_Parm
  FLOAT Volume;  // C 90 CPF_OptionalParm CPF_Parm
  FLOAT FadeInTime;  // 10 90 CPF_OptionalParm CPF_Parm
  FLOAT SeekTime;  // 14 90 CPF_OptionalParm CPF_Parm
  INT ReturnValue;  // 18 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.AllowMusicPlayback 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execAllowMusicPlayback_Parms {
  BITFIELD Allow : 1;  // 0 80 CPF_Parm
};


//  Actor.UnClock 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execUnClock_Parms {
  FLOAT Time;  // 0 180 CPF_Parm CPF_OutParm
};


//  Actor.Clock 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execClock_Parms {
  FLOAT Time;  // 0 180 CPF_Parm CPF_OutParm
};


//  Actor.OnlyAffectPawns 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execOnlyAffectPawns_Parms {
  BITFIELD B : 1;  // 0 80 CPF_Parm
};


//  Actor.SetPhysics 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSetPhysics_Parms {
  BYTE newPhysics;  // 0 80 CPF_Parm
};


//  Actor.FinishInterpolation 20409 0 ( FUNC_Final FUNC_Latent FUNC_Native FUNC_Public )
struct AActor_execFinishInterpolation_Parms {
};


//  Actor.DebugUnclock 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execDebugUnclock_Parms {
};


//  Actor.DebugClock 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execDebugClock_Parms {
};


//  Actor.ClearStayingDebugLines 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execClearStayingDebugLines_Parms {
};


//  Actor.DrawDebugCapsule 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execDrawDebugCapsule_Parms {
  class FVector Base;  // 0 80 CPF_Parm
  FLOAT AxisLength;  // C 80 CPF_Parm
  FLOAT Radius;  // 10 80 CPF_Parm
  BYTE R;  // 14 80 CPF_Parm
  BYTE G;  // 15 80 CPF_Parm
  BYTE B;  // 16 80 CPF_Parm
};


//  Actor.DrawDebugSphere 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execDrawDebugSphere_Parms {
  class FVector Base;  // 0 80 CPF_Parm
  FLOAT Radius;  // C 80 CPF_Parm
  INT NumDivisions;  // 10 80 CPF_Parm
  BYTE R;  // 14 80 CPF_Parm
  BYTE G;  // 15 80 CPF_Parm
  BYTE B;  // 16 80 CPF_Parm
};


//  Actor.DrawDebugCircle 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execDrawDebugCircle_Parms {
  class FVector Base;  // 0 80 CPF_Parm
  class FVector X;  // C 80 CPF_Parm
  class FVector Y;  // 18 80 CPF_Parm
  FLOAT Radius;  // 24 80 CPF_Parm
  INT NumSides;  // 28 80 CPF_Parm
  BYTE R;  // 2C 80 CPF_Parm
  BYTE G;  // 2D 80 CPF_Parm
  BYTE B;  // 2E 80 CPF_Parm
};


//  Actor.DrawStayingDebugLine 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execDrawStayingDebugLine_Parms {
  class FVector LineStart;  // 0 80 CPF_Parm
  class FVector LineEnd;  // C 80 CPF_Parm
  BYTE R;  // 18 80 CPF_Parm
  BYTE G;  // 19 80 CPF_Parm
  BYTE B;  // 1A 80 CPF_Parm
};


//  Actor.DrawDebugLine 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execDrawDebugLine_Parms {
  class FVector LineStart;  // 0 80 CPF_Parm
  class FVector LineEnd;  // C 80 CPF_Parm
  BYTE R;  // 18 80 CPF_Parm
  BYTE G;  // 19 80 CPF_Parm
  BYTE B;  // 1A 80 CPF_Parm
};


//  Actor.GetRenderBoundingSphere 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execGetRenderBoundingSphere_Parms {
  class FPlane ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.GetUrlOption 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execGetUrlOption_Parms {
  class FString Option;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString ReturnValue;  // 8 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  Actor.UpdateURL 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execUpdateURL_Parms {
  class FString NewOption;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString NewValue;  // 8 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD bSaveDefault : 1;  // 10 80 CPF_Parm
};


//  Actor.GetClosestBone 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execGetClosestBone_Parms {
  class FVector loc;  // 0 80 CPF_Parm
  class FVector ray;  // C 80 CPF_Parm
  FLOAT boneDist;  // 18 180 CPF_Parm CPF_OutParm
  FName BiasBone;  // 1C 90 CPF_OptionalParm CPF_Parm
  FLOAT BiasDistance;  // 20 90 CPF_OptionalParm CPF_Parm
  FName ReturnValue;  // 24 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.AnimIsInGroup 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execAnimIsInGroup_Parms {
  INT Channel;  // 0 80 CPF_Parm
  FName GroupName;  // 4 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.GetAnimParams 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execGetAnimParams_Parms {
  INT Channel;  // 0 80 CPF_Parm
  FName OutSeqName;  // 4 180 CPF_Parm CPF_OutParm
  FLOAT OutAnimFrame;  // 8 180 CPF_Parm CPF_OutParm
  FLOAT OutAnimRate;  // C 180 CPF_Parm CPF_OutParm
};


//  Actor.SetBoneRotation 20501 0 ( FUNC_Final FUNC_Simulated FUNC_Native FUNC_Public )
struct AActor_execSetBoneRotation_Parms {
  FName BoneName;  // 0 80 CPF_Parm
  class FRotator BoneTurn;  // 4 90 CPF_OptionalParm CPF_Parm
  INT Space;  // 10 90 CPF_OptionalParm CPF_Parm
  FLOAT Alpha;  // 14 90 CPF_OptionalParm CPF_Parm
};


//  Actor.SetBoneLocation 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSetBoneLocation_Parms {
  FName BoneName;  // 0 80 CPF_Parm
  class FVector BoneTrans;  // 4 90 CPF_OptionalParm CPF_Parm
  FLOAT Alpha;  // 10 90 CPF_OptionalParm CPF_Parm
};


//  Actor.SetBoneDirection 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSetBoneDirection_Parms {
  FName BoneName;  // 0 80 CPF_Parm
  class FRotator BoneTurn;  // 4 80 CPF_Parm
  class FVector BoneTrans;  // 10 90 CPF_OptionalParm CPF_Parm
  FLOAT Alpha;  // 1C 90 CPF_OptionalParm CPF_Parm
  INT Space;  // 20 90 CPF_OptionalParm CPF_Parm
};


//  Actor.SetBoneScale 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSetBoneScale_Parms {
  INT Slot;  // 0 80 CPF_Parm
  FLOAT BoneScale;  // 4 90 CPF_OptionalParm CPF_Parm
  FName BoneName;  // 8 90 CPF_OptionalParm CPF_Parm
};


//  Actor.LockRootMotion 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execLockRootMotion_Parms {
  INT Lock;  // 0 80 CPF_Parm
};


//  Actor.FindAttachment 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execFindAttachment_Parms {
  FName ActorName;  // 0 80 CPF_Parm
  FName BoneName;  // 4 80 CPF_Parm
  class AActor* ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.DetachFromBone 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execDetachFromBone_Parms {
  class AActor* Attachment;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.AttachToBone 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execAttachToBone_Parms {
  class AActor* Attachment;  // 0 80 CPF_Parm
  FName BoneName;  // 4 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.GetRootRotationDelta 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execGetRootRotationDelta_Parms {
  class FRotator ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.GetRootLocationDelta 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execGetRootLocationDelta_Parms {
  class FVector ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.GetRootRotation 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execGetRootRotation_Parms {
  class FRotator ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.GetRootLocation 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execGetRootLocation_Parms {
  class FVector ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.GetBoneRotation 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execGetBoneRotation_Parms {
  FName BoneName;  // 0 80 CPF_Parm
  INT Space;  // 4 90 CPF_OptionalParm CPF_Parm
  class FRotator ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.GetBoneCoords 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execGetBoneCoords_Parms {
  FName BoneName;  // 0 80 CPF_Parm
  class FCoords ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.AnimBlendToAlpha 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execAnimBlendToAlpha_Parms {
  INT Stage;  // 0 80 CPF_Parm
  FLOAT TargetAlpha;  // 4 80 CPF_Parm
  FLOAT TimeInterval;  // 8 80 CPF_Parm
};


//  Actor.AnimBlendParams 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execAnimBlendParams_Parms {
  INT Stage;  // 0 80 CPF_Parm
  FLOAT BlendAlpha;  // 4 90 CPF_OptionalParm CPF_Parm
  FLOAT InTime;  // 8 90 CPF_OptionalParm CPF_Parm
  FLOAT OutTime;  // C 90 CPF_OptionalParm CPF_Parm
  FName BoneName;  // 10 90 CPF_OptionalParm CPF_Parm
  BITFIELD bGlobalPose : 1;  // 14 90 CPF_OptionalParm CPF_Parm
};


//  Actor.BoneRefresh 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execBoneRefresh_Parms {
};


//  Actor.LinkMesh 20501 0 ( FUNC_Final FUNC_Simulated FUNC_Native FUNC_Public )
struct AActor_execLinkMesh_Parms {
  class UMesh* NewMesh;  // 0 80 CPF_Parm
  BITFIELD bKeepAnim : 1;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  Actor.LinkSkelAnim 20501 0 ( FUNC_Final FUNC_Simulated FUNC_Native FUNC_Public )
struct AActor_execLinkSkelAnim_Parms {
  class UMeshAnimation* Anim;  // 0 80 CPF_Parm
  class UMesh* NewMesh;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  Actor.GetNotifyChannel 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execGetNotifyChannel_Parms {
  INT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.EnableChannelNotify 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execEnableChannelNotify_Parms {
  INT Channel;  // 0 80 CPF_Parm
  INT Switch;  // 4 80 CPF_Parm
};


//  Actor.AnimEnd 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventAnimEnd_Parms {
  INT Channel;  // 0 80 CPF_Parm
};


//  Actor.LIPSincAnimEnd 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventLIPSincAnimEnd_Parms {
};


//  Actor.CurrentLIPSincAnim 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execCurrentLIPSincAnim_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  Actor.IsPlayingLIPSincAnim 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execIsPlayingLIPSincAnim_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.HasLIPSincAnim 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execHasLIPSincAnim_Parms {
  FName LIPSincAnimName;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.StopLIPSincAnim 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execStopLIPSincAnim_Parms {
};


//  Actor.PlayLIPSincAnim 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execPlayLIPSincAnim_Parms {
  FName LIPSincAnimName;  // 0 80 CPF_Parm
  FLOAT Volume;  // 4 90 CPF_OptionalParm CPF_Parm
  FLOAT Radius;  // 8 90 CPF_OptionalParm CPF_Parm
  FLOAT Pitch;  // C 90 CPF_OptionalParm CPF_Parm
};


//  Actor.AnimStopLooping 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execAnimStopLooping_Parms {
  INT Channel;  // 0 90 CPF_OptionalParm CPF_Parm
};


//  Actor.IsTweening 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execIsTweening_Parms {
  INT Channel;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.SetAnimFrame 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSetAnimFrame_Parms {
  FLOAT Time;  // 0 80 CPF_Parm
  INT Channel;  // 4 90 CPF_OptionalParm CPF_Parm
  INT UnitFlag;  // 8 90 CPF_OptionalParm CPF_Parm
};


//  Actor.FreezeAnimAt 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execFreezeAnimAt_Parms {
  FLOAT Time;  // 0 80 CPF_Parm
  INT Channel;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  Actor.StopAnimating 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execStopAnimating_Parms {
  BITFIELD ClearAllButBase : 1;  // 0 90 CPF_OptionalParm CPF_Parm
};


//  Actor.HasAnim 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execHasAnim_Parms {
  FName Sequence;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.FinishAnim 20409 0 ( FUNC_Final FUNC_Latent FUNC_Native FUNC_Public )
struct AActor_execFinishAnim_Parms {
  INT Channel;  // 0 90 CPF_OptionalParm CPF_Parm
};


//  Actor.IsAnimating 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execIsAnimating_Parms {
  INT Channel;  // 0 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.TweenAnim 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execTweenAnim_Parms {
  FName Sequence;  // 0 80 CPF_Parm
  FLOAT Time;  // 4 80 CPF_Parm
  INT Channel;  // 8 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.LoopAnim 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execLoopAnim_Parms {
  FName Sequence;  // 0 80 CPF_Parm
  FLOAT Rate;  // 4 90 CPF_OptionalParm CPF_Parm
  FLOAT TweenTime;  // 8 90 CPF_OptionalParm CPF_Parm
  INT Channel;  // C 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.PlayAnim 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execPlayAnim_Parms {
  FName Sequence;  // 0 80 CPF_Parm
  FLOAT Rate;  // 4 90 CPF_OptionalParm CPF_Parm
  FLOAT TweenTime;  // 8 90 CPF_OptionalParm CPF_Parm
  INT Channel;  // C 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.GetMeshName 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execGetMeshName_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  Actor.IsBehind 20400 0 ( FUNC_Native FUNC_Public )
struct AActor_execIsBehind_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  INT MinYaw;  // 4 90 CPF_OptionalParm CPF_Parm
  INT MaxYaw;  // 8 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.IsJoinedTo 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execIsJoinedTo_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.SetOwner 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSetOwner_Parms {
  class AActor* NewOwner;  // 0 80 CPF_Parm
};


//  Actor.SetBase 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSetBase_Parms {
  class AActor* NewBase;  // 0 80 CPF_Parm
  class FVector NewFloor;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  Actor.IsGrounded 20400 0 ( FUNC_Native FUNC_Public )
struct AActor_execIsGrounded_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.MoveNoChecks 20400 0 ( FUNC_Native FUNC_Public )
struct AActor_execMoveNoChecks_Parms {
  class FVector DeltaLocation;  // 0 80 CPF_Parm
};


//  Actor.AutonomousPhysics 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execAutonomousPhysics_Parms {
  FLOAT DeltaSeconds;  // 0 80 CPF_Parm
};


//  Actor.MoveSmooth 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execMoveSmooth_Parms {
  class FVector delta;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.SetRelativeLocation 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSetRelativeLocation_Parms {
  class FVector NewLocation;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.SetRelativeRotation 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSetRelativeRotation_Parms {
  class FRotator NewRotation;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.SetRotation 20C01 0 ( FUNC_Final FUNC_Native FUNC_Event FUNC_Public )
struct AActor_eventSetRotation_Parms {
  class FRotator NewRotation;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.SetLocation 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSetLocation_Parms {
  class FVector NewLocation;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.Move 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execMove_Parms {
  class FVector delta;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.SetSkeletalMesh 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSetSkeletalMesh_Parms {
  class UMesh* NewSkeletalMesh;  // 0 80 CPF_Parm
};


//  Actor.SetDrawType 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSetDrawType_Parms {
  BYTE NewDrawType;  // 0 80 CPF_Parm
};


//  Actor.SetStaticMesh 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSetStaticMesh_Parms {
  class UStaticMesh* NewStaticMesh;  // 0 80 CPF_Parm
};


//  Actor.SetDrawScale3D 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSetDrawScale3D_Parms {
  class FVector NewScale3D;  // 0 80 CPF_Parm
};


//  Actor.SetDrawScale 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSetDrawScale_Parms {
  FLOAT NewScale;  // 0 80 CPF_Parm
};


//  Actor.SetCollisionSize 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSetCollisionSize_Parms {
  FLOAT NewRadius;  // 0 80 CPF_Parm
  FLOAT NewHeight;  // 4 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.SetCollision 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execSetCollision_Parms {
  BITFIELD NewColActors : 1;  // 0 90 CPF_OptionalParm CPF_Parm
  BITFIELD NewBlockActors : 1;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  Actor.EndLatentFunction 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execEndLatentFunction_Parms {
};


//  Actor.Sleep 20409 0 ( FUNC_Final FUNC_Latent FUNC_Native FUNC_Public )
struct AActor_execSleep_Parms {
  FLOAT Seconds;  // 0 80 CPF_Parm
};


//  Actor.ShouldBeHidden 22401 0 ( FUNC_Final FUNC_Native FUNC_Static FUNC_Public )
struct AActor_execShouldBeHidden_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.Error 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execError_Parms {
  class FString s;  // 0 400880 CPF_Parm CPF_CoerceParm CPF_NeedCtorLink
};


//  Actor.SetAmbientGlow 20400 0 ( FUNC_Native FUNC_Public )
struct AActor_execSetAmbientGlow_Parms {
  INT aNewGlow;  // 0 80 CPF_Parm
};


//  Actor.TextToSpeech 20400 0 ( FUNC_Native FUNC_Public )
struct AActor_execTextToSpeech_Parms {
  class FString Text;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  FLOAT Volume;  // 8 80 CPF_Parm
};


//  Actor.CopyObjectToClipboard 20400 0 ( FUNC_Native FUNC_Public )
struct AActor_execCopyObjectToClipboard_Parms {
  class UObject* Obj;  // 0 80 CPF_Parm
};


//  Actor.ConsoleCommand 20400 0 ( FUNC_Native FUNC_Public )
struct AActor_execConsoleCommand_Parms {
  class FString Command;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD bWriteToLog : 1;  // 8 90 CPF_OptionalParm CPF_Parm
  class FString ReturnValue;  // C 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  Actor.IsValidActor 20002 0 ( FUNC_Defined FUNC_Public )
struct AActor_execIsValidActor_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.ShouldTickPhysics 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct AActor_eventShouldTickPhysics_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.OnCreateComponents 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventOnCreateComponents_Parms {
};


//  Actor.cl_OnGroupChange 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventcl_OnGroupChange_Parms {
  INT newGroupFlags;  // 0 80 CPF_Parm
};


//  Actor.cl_OnUpdate 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventcl_OnUpdate_Parms {
};


//  Actor.cl_OnBaseline 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventcl_OnBaseline_Parms {
};


//  Actor.cl_OnTick 20800 0 ( FUNC_Event FUNC_Public )
struct AActor_eventcl_OnTick_Parms {
  FLOAT delta;  // 0 80 CPF_Parm
};


//  Actor.GetGameEngine 22401 0 ( FUNC_Final FUNC_Native FUNC_Static FUNC_Public )
struct AActor_execGetGameEngine_Parms {
  class UGameEngine* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Actor.TickStatsGroup 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execTickStatsGroup_Parms {
};


//  Actor.InitStatsGroup 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AActor_execInitStatsGroup_Parms {
};


// AActor 813 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_NativeReplication )
class DLL_IMPORT AActor : public UObject {
  public:
    BYTE SBRole;  // 28 0
    class FVector Location;  // 2C 3 CPF_Edit CPF_Const
    class USBSettings* mSBSettings;  // 38 0
    BYTE LightType;  // 3C 1 CPF_Edit
    BYTE LightEffect;  // 3D 1 CPF_Edit
    BYTE LightHue;  // 3E 1 CPF_Edit
    BYTE LightSaturation;  // 3F 1 CPF_Edit
    FLOAT LightBrightness;  // 40 1 CPF_Edit
    FLOAT LightRadius;  // 44 1 CPF_Edit
    BYTE LightPeriod;  // 48 1 CPF_Edit
    BYTE LightPhase;  // 49 1 CPF_Edit
    BYTE LightCone;  // 4A 1 CPF_Edit
    BYTE DrawType;  // 4B 3 CPF_Edit CPF_Const
    BYTE StaticFilterState;  // 4C 1002 CPF_Const CPF_Native
    class UStaticMesh* StaticMesh;  // 50 2000003 CPF_Edit CPF_Const CPF_EditorData
    class AActor* Owner;  // 54 2000002 CPF_Const CPF_EditorData
    class AActor* Base;  // 58 2000002 CPF_Const CPF_EditorData
    struct FActorFrameDataPtr ActorFrameData;  // 5C 1002 CPF_Const CPF_Native
    struct FActorRenderDataPtr ActorRenderData;  // 60 1002 CPF_Const CPF_Native
    struct FLightRenderDataPtr LightRenderData;  // 64 1002 CPF_Const CPF_Native
    INT RenderRevision;  // 68 1002 CPF_Const CPF_Native
    TArray<struct FBatchReference> StaticSectionBatches;  // 6C 1002 CPF_Const CPF_Native
    FName ForcedVisibilityZoneTag;  // 78 2000003 CPF_Edit CPF_Const CPF_EditorData
    FName ForcedLightingZoneTag;  // 7C 2000003 CPF_Edit CPF_Const CPF_EditorData
    FLOAT CullDistance;  // 80 2000001 CPF_Edit CPF_EditorData
    BITFIELD NeverCull : 1;  // 84 1 CPF_Edit
    BITFIELD bSpecialLit : 1;  // 84 2000001 CPF_Edit CPF_EditorData
    BITFIELD bActorShadows : 1;  // 84 2000001 CPF_Edit CPF_EditorData
    BITFIELD bCorona : 1;  // 84 2000001 CPF_Edit CPF_EditorData
    BITFIELD bDirectionalCorona : 1;  // 84 2000001 CPF_Edit CPF_EditorData
    BITFIELD bAttenByLife : 1;  // 84 2000001 CPF_Edit CPF_EditorData
    BITFIELD bLightingVisibility : 1;  // 84 2000001 CPF_Edit CPF_EditorData
    BITFIELD bUseDynamicLights : 1;  // 84 1 CPF_Edit
    BITFIELD bLightChanged : 1;  // 84 2000000 CPF_EditorData
    BITFIELD bDramaticLighting : 1;  // 84 0
    BITFIELD bStatic : 1;  // 84 2000002 CPF_Const CPF_EditorData
    BITFIELD bHidden : 1;  // 84 2000001 CPF_Edit CPF_EditorData
    BITFIELD bNoDelete : 1;  // 84 2000003 CPF_Edit CPF_Const CPF_EditorData
    BITFIELD bDeleteMe : 1;  // 84 2000002 CPF_Const CPF_EditorData
    BITFIELD bTicked : 1;  // 84 2002002 CPF_Const CPF_Transient CPF_EditorData
    BITFIELD bDynamicLight : 1;  // 84 2000001 CPF_Edit CPF_EditorData
    BITFIELD bTimerLoop : 1;  // 84 2000000 CPF_EditorData
    BITFIELD bOnlyOwnerSee : 1;  // 84 2000000 CPF_EditorData
    BITFIELD bHighDetail : 1;  // 84 2000001 CPF_Edit CPF_EditorData
    BITFIELD bSuperHighDetail : 1;  // 84 2000001 CPF_Edit CPF_EditorData
    BITFIELD bOnlyDrawIfAttached : 1;  // 84 2000000 CPF_EditorData
    BITFIELD bStasis : 1;  // 84 2000001 CPF_Edit CPF_EditorData
    BITFIELD bTrailerAllowRotation : 1;  // 84 2000000 CPF_EditorData
    BITFIELD bTrailerSameRotation : 1;  // 84 2000000 CPF_EditorData
    BITFIELD bTrailerPrePivot : 1;  // 84 2000000 CPF_EditorData
    BITFIELD bWorldGeometry : 1;  // 84 2000000 CPF_EditorData
    BITFIELD bAcceptsProjectors : 1;  // 84 2000001 CPF_Edit CPF_EditorData
    BITFIELD bAcceptsDynamicProjectors : 1;  // 84 2000001 CPF_Edit CPF_EditorData
    BITFIELD bOrientOnSlope : 1;  // 84 2000000 CPF_EditorData
    BITFIELD bOnlyAffectPawns : 1;  // 84 2000002 CPF_Const CPF_EditorData
    BITFIELD bDisableSorting : 1;  // 84 2000001 CPF_Edit CPF_EditorData
    BITFIELD bIgnoreEncroachers : 1;  // 84 2000001 CPF_Edit CPF_EditorData
    BITFIELD bShowOctreeNodes : 1;  // 88 0
    BITFIELD bWasSNFiltered : 1;  // 88 2000000 CPF_EditorData
    BITFIELD bDetailAttachment : 1;  // 88 2000002 CPF_Const CPF_EditorData
    BITFIELD bNetTemporary : 1;  // 88 2000002 CPF_Const CPF_EditorData
    BITFIELD bOnlyRelevantToOwner : 1;  // 88 2000000 CPF_EditorData
    BITFIELD bNetDirty : 1;  // 88 2002002 CPF_Const CPF_Transient CPF_EditorData
    BITFIELD bAlwaysRelevant : 1;  // 88 2000000 CPF_EditorData
    BITFIELD bReplicateInstigator : 1;  // 88 2000000 CPF_EditorData
    BITFIELD bReplicateMovement : 1;  // 88 2000000 CPF_EditorData
    BITFIELD bSkipActorPropertyReplication : 1;  // 88 2000000 CPF_EditorData
    BITFIELD bUpdateSimulatedPosition : 1;  // 88 2000000 CPF_EditorData
    BITFIELD bTearOff : 1;  // 88 2000000 CPF_EditorData
    BITFIELD bOnlyDirtyReplication : 1;  // 88 2000000 CPF_EditorData
    BITFIELD bNetInitialRotation : 1;  // 88 2000002 CPF_Const CPF_EditorData
    BITFIELD bCompressedPosition : 1;  // 88 2000000 CPF_EditorData
    BITFIELD bAlwaysZeroBoneOffset : 1;  // 88 2000000 CPF_EditorData
    BITFIELD bIgnoreVehicles : 1;  // 88 2000000 CPF_EditorData
    BITFIELD bDeferRendering : 1;  // 88 2000001 CPF_Edit CPF_EditorData
    BITFIELD bBadStateCode : 1;  // 88 2000000 CPF_EditorData
    BITFIELD bSkipOnMerge : 1;  // 88 2000001 CPF_Edit CPF_EditorData
    BITFIELD SkinsConverted : 1;  // 88 0
    INT MLURefCount;  // 8C 2002002 CPF_Const CPF_Transient CPF_EditorData
    BYTE Residence;  // 90 1 CPF_Edit
    BYTE Physics;  // 91 3 CPF_Edit CPF_Const
    BYTE Role;  // 92 0
    class APawn* Instigator;  // 94 2000000 CPF_EditorData
    class USound* AmbientSound;  // 98 2000001 CPF_Edit CPF_EditorData
    FName AttachmentBone;  // 9C 2000002 CPF_Const CPF_EditorData
    class ALevelInfo* Level;  // A0 2000002 CPF_Const CPF_EditorData
    class ULevel* XLevel;  // A4 2002002 CPF_Const CPF_Transient CPF_EditorData
    INT Instance;  // A8 2002000 CPF_Transient CPF_EditorData
    class AActor* InstanceOriginal;  // AC 2002000 CPF_Transient CPF_EditorData
    FLOAT LifeSpan;  // B0 2000001 CPF_Edit CPF_EditorData
    struct FPointRegion Region;  // B4 2000002 CPF_Const CPF_EditorData
    FLOAT TimerRate;  // C0 2000000 CPF_EditorData
    class UMaterial* OverlayMaterial;  // C4 2000001 CPF_Edit CPF_EditorData
    class FColor OverlayColor;  // C8 2000001 CPF_Edit CPF_EditorData
    class UMesh* Mesh;  // CC 2000001 CPF_Edit CPF_EditorData
    FLOAT LastRenderTime;  // D0 2002000 CPF_Transient CPF_EditorData
    INT IsChainableIndex;  // D4 2000000 CPF_EditorData
    FName Tag;  // D8 2000001 CPF_Edit CPF_EditorData
    TArray<INT> Leaves;  // DC 2402000 CPF_Transient CPF_NeedCtorLink CPF_EditorData
    FName Event;  // E8 2000001 CPF_Edit CPF_EditorData
    FLOAT TimerCounter;  // EC 2000002 CPF_Const CPF_EditorData
    class UMeshInstance* MeshInstance;  // F0 2002000 CPF_Transient CPF_EditorData
    FLOAT LODBias;  // F4 1 CPF_Edit
    FName InitialState;  // F8 1 CPF_Edit
    FName Group;  // FC 1 CPF_Edit
    TArray<class UActorGroup*> ActorGroups;  // 100 2400001 CPF_Edit CPF_NeedCtorLink CPF_EditorData
    TArray<class AActor*> Touching;  // 10C 2400002 CPF_Const CPF_NeedCtorLink CPF_EditorData
    TArray<DWORD> OctreeNodes;  // 118 2402002 CPF_Const CPF_Transient CPF_NeedCtorLink CPF_EditorData
    class FBox OctreeBox;  // 124 2002002 CPF_Const CPF_Transient CPF_EditorData
    class FVector OctreeBoxCenter;  // 140 2002 CPF_Const CPF_Transient
    class FVector OctreeBoxRadii;  // 14C 2002 CPF_Const CPF_Transient
    struct FHashValues HashData;  // 158 400002 CPF_Const CPF_NeedCtorLink
    class AActor* Deleted;  // 16C 2000002 CPF_Const CPF_EditorData
    FLOAT LatentFloat;  // 170 2000002 CPF_Const CPF_EditorData
    INT CollisionTag;  // 174 1002 CPF_Const CPF_Native
    INT JoinedTag;  // 178 2002 CPF_Const CPF_Transient
    class APhysicsVolume* PhysicsVolume;  // 17C 2000002 CPF_Const CPF_EditorData
    class FVector Velocity;  // 180 2000001 CPF_Edit CPF_EditorData
    class FRotator Rotation;  // 18C 2000003 CPF_Edit CPF_Const CPF_EditorData
    class FVector Acceleration;  // 198 2000000 CPF_EditorData
    class FVector CachedLocation;  // 1A4 2 CPF_Const
    class FRotator CachedRotation;  // 1B0 2 CPF_Const
    class FMatrix CachedLocalToWorld;  // 1BC 0
    FName AttachTag;  // 1FC 1 CPF_Edit
    TArray<class AActor*> Attached;  // 200 2400002 CPF_Const CPF_NeedCtorLink CPF_EditorData
    class FVector RelativeLocation;  // 20C 2000002 CPF_Const CPF_EditorData
    class FRotator RelativeRotation;  // 218 2000002 CPF_Const CPF_EditorData
    class FMatrix HardRelMatrix;  // 224 2000002 CPF_Const CPF_EditorData
    TArray<struct FProjectorRenderInfoPtr> Projectors;  // 264 2001002 CPF_Const CPF_Native CPF_EditorData
    TArray<struct FStaticMeshProjectorRenderInfoPtr> StaticMeshProjectors;  // 270 1002 CPF_Const CPF_Native
    TArray<struct FSBProjectorRenderInfoPtr> SBProjectors;  // 27C 1002 CPF_Const CPF_Native
    BITFIELD bUseLightmap : 1;  // 288 2000001 CPF_Edit CPF_EditorData
    BITFIELD bUseSunlights : 1;  // 288 2000001 CPF_Edit CPF_EditorData
    BITFIELD TakeSunlightingFromBase : 1;  // 288 2000000 CPF_EditorData
    FLOAT LightmapContrastAdjust;  // 28C 2000001 CPF_Edit CPF_EditorData
    INT LightmapSize;  // 290 2000001 CPF_Edit CPF_EditorData
    FLOAT LightmapBlurScale;  // 294 2000001 CPF_Edit CPF_EditorData
    FLOAT ZBias;  // 298 2000001 CPF_Edit CPF_EditorData
    FLOAT SunlightsContrastAdjust;  // 29C 2000001 CPF_Edit CPF_EditorData
    FLOAT SunlightsBrightness;  // 2A0 2000001 CPF_Edit CPF_EditorData
    FLOAT StaticLightAmount;  // 2A4 2000001 CPF_Edit CPF_EditorData
    class UMaterial* Texture;  // 2A8 2000001 CPF_Edit CPF_EditorData
    class UStaticMeshInstance* StaticMeshInstance;  // 2AC 2000000 CPF_EditorData
    class UModel* Brush;  // 2B0 200000A CPF_Const CPF_ExportObject CPF_EditorData
    FLOAT DrawScale;  // 2B4 2000003 CPF_Edit CPF_Const CPF_EditorData
    class FVector DrawScale3D;  // 2B8 2000003 CPF_Edit CPF_Const CPF_EditorData
    class FVector PrePivot;  // 2C4 2000001 CPF_Edit CPF_EditorData
    TArray<class UMaterial*> Skins;  // 2D0 2400001 CPF_Edit CPF_NeedCtorLink CPF_EditorData
    class UMaterial* RepSkin;  // 2DC 2000000 CPF_EditorData
    BYTE AmbientGlow;  // 2E0 2000001 CPF_Edit CPF_EditorData
    BYTE MaxLights;  // 2E1 2000001 CPF_Edit CPF_EditorData
    BYTE UV2Mode;  // 2E2 1 CPF_Edit
    class UConvexVolume* AntiPortal;  // 2E4 2000001 CPF_Edit CPF_EditorData
    class UMaterial* UV2Texture;  // 2E8 1 CPF_Edit
    FLOAT ScaleGlow;  // 2EC 1 CPF_Edit
    BYTE SurfaceType;  // 2F0 1 CPF_Edit
    BYTE Style;  // 2F1 1 CPF_Edit
    BITFIELD bUnlit : 1;  // 2F4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bShadowCast : 1;  // 2F4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bStaticLighting : 1;  // 2F4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bUseLightingFromBase : 1;  // 2F4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bHurtEntry : 1;  // 2F4 2000000 CPF_EditorData
    BITFIELD bGameRelevant : 1;  // 2F4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bCollideWhenPlacing : 1;  // 2F4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bTravel : 1;  // 2F4 2000000 CPF_EditorData
    BITFIELD bMovable : 1;  // 2F4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bDestroyInPainVolume : 1;  // 2F4 2000000 CPF_EditorData
    BITFIELD bCanBeDamaged : 1;  // 2F4 2000000 CPF_EditorData
    BITFIELD bShouldBaseAtStartup : 1;  // 2F4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bPendingDelete : 1;  // 2F4 2000000 CPF_EditorData
    BITFIELD bAnimByOwner : 1;  // 2F4 2000000 CPF_EditorData
    BITFIELD bOwnerNoSee : 1;  // 2F4 2000000 CPF_EditorData
    BITFIELD bCanTeleport : 1;  // 2F4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bClientAnim : 1;  // 2F4 2000000 CPF_EditorData
    BITFIELD bDisturbFluidSurface : 1;  // 2F4 2000000 CPF_EditorData
    BITFIELD bAlwaysTick : 1;  // 2F4 2000002 CPF_Const CPF_EditorData
    BITFIELD bFullVolume : 1;  // 2F4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bNotifyLocalPlayerTeamReceived : 1;  // 2F4 2000000 CPF_EditorData
    BITFIELD bHardAttach : 1;  // 2F4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bForceSkelUpdate : 1;  // 2F4 2000000 CPF_EditorData
    BITFIELD bClientAuthoritative : 1;  // 2F4 2000002 CPF_Const CPF_EditorData
    FLOAT FluidSurfaceShootStrengthMod;  // 2F8 2000000 CPF_EditorData
    BYTE SoundVolume;  // 2FC 2000001 CPF_Edit CPF_EditorData
    BYTE SoundPitch;  // 2FD 2000001 CPF_Edit CPF_EditorData
    BYTE SoundOcclusion;  // 2FE 2000001 CPF_Edit CPF_EditorData
    FLOAT SoundRadius;  // 300 2000001 CPF_Edit CPF_EditorData
    FLOAT TransientSoundVolume;  // 304 2000001 CPF_Edit CPF_EditorData
    FLOAT TransientSoundRadius;  // 308 2000001 CPF_Edit CPF_EditorData
    TArray<struct FSBSoundGroupParams> SoundGroupsPlaying;  // 30C 402000 CPF_Transient CPF_NeedCtorLink
    TArray<struct FSBSoundTypeParams> SoundTypesPlaying;  // 318 402000 CPF_Transient CPF_NeedCtorLink
    FLOAT CollisionRadius;  // 324 2000001 CPF_Edit CPF_EditorData
    FLOAT CollisionHeight;  // 328 2000001 CPF_Edit CPF_EditorData
    BITFIELD bCollideActors : 1;  // 32C 2000003 CPF_Edit CPF_Const CPF_EditorData
    BITFIELD bCollideWorld : 1;  // 32C 2000000 CPF_EditorData
    BITFIELD bBlockActors : 1;  // 32C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bBlockProjectiles : 1;  // 32C 2000000 CPF_EditorData
    BITFIELD bProjTarget : 1;  // 32C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bBlockZeroExtentTraces : 1;  // 32C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bBlockNonZeroExtentTraces : 1;  // 32C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bAutoAlignToTerrain : 1;  // 32C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bUseCylinderCollision : 1;  // 32C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bBlockKarma : 1;  // 32C 2000003 CPF_Edit CPF_Const CPF_EditorData
    BITFIELD bBlocksTeleport : 1;  // 32C 0
    BITFIELD bAlwaysFaceCamera : 1;  // 32C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bUseCollisionStaticMesh : 1;  // 32C 0
    BITFIELD bIgnoreOutOfWorld : 1;  // 32C 2000000 CPF_EditorData
    BITFIELD bBounce : 1;  // 32C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bFixedRotationDir : 1;  // 32C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bRotateToDesired : 1;  // 32C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bIgnoreTerminalVelocity : 1;  // 32C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bOrientToVelocity : 1;  // 32C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bInterpolating : 1;  // 32C 2000000 CPF_EditorData
    BITFIELD bJustTeleported : 1;  // 32C 2000002 CPF_Const CPF_EditorData
    FLOAT Mass;  // 330 2000001 CPF_Edit CPF_EditorData
    FLOAT Buoyancy;  // 334 2000001 CPF_Edit CPF_EditorData
    class FRotator RotationRate;  // 338 2000001 CPF_Edit CPF_EditorData
    class FRotator DesiredRotation;  // 344 2000001 CPF_Edit CPF_EditorData
    class AActor* PendingTouch;  // 350 2000000 CPF_EditorData
    class FVector ColLocation;  // 354 2000002 CPF_Const CPF_EditorData
    FName ExcludeTag[8];  // 360 2000001 CPF_Edit CPF_EditorData
    class FVector AlignmentNormalSum;  // 380 2000 CPF_Transient
    INT NumberOfNormals;  // 38C 2000 CPF_Transient
    INT CurrentAlignmentCheck;  // 390 2000 CPF_Transient
    class FVector AverageNormal;  // 394 2000 CPF_Transient
    BITFIELD bAlignToFloor : 1;  // 3A0 20000000 CPF_Deprecated
    BITFIELD bAlignToFloorRoll : 1;  // 3A0 0
    BITFIELD bAlignToFloorPitch : 1;  // 3A0 0
    BYTE ForceType;  // 3A4 1 CPF_Edit
    FLOAT ForceRadius;  // 3A8 1 CPF_Edit
    FLOAT ForceScale;  // 3AC 1 CPF_Edit
    FLOAT ForceNoise;  // 3B0 2000001 CPF_Edit CPF_EditorData
    BITFIELD bNetInitial : 1;  // 3B4 2000002 CPF_Const CPF_EditorData
    BITFIELD bNetOwner : 1;  // 3B4 2000002 CPF_Const CPF_EditorData
    BITFIELD bNetRelevant : 1;  // 3B4 2000002 CPF_Const CPF_EditorData
    BITFIELD bDemoRecording : 1;  // 3B4 2000002 CPF_Const CPF_EditorData
    BITFIELD bClientDemoRecording : 1;  // 3B4 2000002 CPF_Const CPF_EditorData
    BITFIELD bRepClientDemo : 1;  // 3B4 2000002 CPF_Const CPF_EditorData
    BITFIELD bClientDemoNetFunc : 1;  // 3B4 2000002 CPF_Const CPF_EditorData
    BITFIELD bNoRepMesh : 1;  // 3B4 2000000 CPF_EditorData
    BITFIELD bNotOnDedServer : 1;  // 3B4 2000000 CPF_EditorData
    BITFIELD bAlreadyPrecachedMaterials : 1;  // 3B4 0
    BITFIELD bAlreadyPrecachedMeshes : 1;  // 3B4 0
    BITFIELD bHiddenEd : 1;  // 3B4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bHiddenEdGroup : 1;  // 3B4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bDirectional : 1;  // 3B4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bSelected : 1;  // 3B4 2000002 CPF_Const CPF_EditorData
    BITFIELD bEdShouldSnap : 1;  // 3B4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bEdSnap : 1;  // 3B4 2002000 CPF_Transient CPF_EditorData
    BITFIELD bTempEditor : 1;  // 3B4 2002002 CPF_Const CPF_Transient CPF_EditorData
    BITFIELD bPathColliding : 1;  // 3B4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bPathTemp : 1;  // 3B4 2002000 CPF_Transient CPF_EditorData
    BITFIELD bScriptInitialized : 1;  // 3B4 2000000 CPF_EditorData
    BITFIELD bLockLocation : 1;  // 3B4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bTraceWater : 1;  // 3B4 2000000 CPF_EditorData
    BITFIELD ShowDebugInfo : 1;  // 3B4 1 CPF_Edit
    BITFIELD ShowActorRelations : 1;  // 3B4 1 CPF_Edit
    TArray<struct FActorRelation> ActorRelations;  // 3B8 402000 CPF_Transient CPF_NeedCtorLink
    BITFIELD SBWantServerFrame : 1;  // 3C4 2000000 CPF_EditorData
    BITFIELD SBWantClientFrame : 1;  // 3C4 2000000 CPF_EditorData
    BITFIELD SBWantClientTick : 1;  // 3C4 2000000 CPF_EditorData
    BITFIELD SBTickDisabled : 1;  // 3C4 2000000 CPF_EditorData
    class UMaterial* HighDetailOverlay;  // 3C8 2000000 CPF_EditorData
    BYTE OwningDepartment;  // 3CC 2000001 CPF_Edit CPF_EditorData
    class FString StatsGroups[10];  // 3D0 400000 CPF_NeedCtorLink
    virtual ~AActor(void);
    virtual void ProcessEvent(class UFunction *,void *,void *);
    virtual void ProcessState(float);
    virtual int ProcessRemoteFunction(class UFunction *,void *,struct FFrame *);
    virtual void PostLoad(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    virtual int IsPendingKill(void)const ;
    virtual void PostRecycled(void);
    virtual void ScriptInit(class ALevelInfo *);
    virtual void InitExecution(void);
    virtual void PostEditChange(void);
    virtual void PreEditUndo(void);
    virtual void PostEditUndo(void);
    virtual class UObject * Clone(bool,bool,class UObject *)const ;
    virtual void ExecutingBadStateCode(struct FFrame &);
    virtual unsigned int GetCPPSize(void);
    virtual void Inspect(class UObject::FInspectInterface *);
    virtual int IsJoinedTo(class AActor const *)const ;
    virtual int ShouldUpdateRelativeLocation(void);
    virtual void DoCleanup(void);
    virtual float GetNetPriority(class FVector &,class FVector &,class AActor *,float,float);
    virtual float WorldLightRadius(void)const ;
    virtual int Tick(float,enum ELevelTick);
    virtual void PostEditMove(void);
    virtual void PostEditLoad(void);
    virtual void PreRaytrace(void);
    virtual void PostRaytrace(void);
    virtual void Spawned(void);
    virtual class UMaterial * GetSkin(int)const ;
    virtual int ShouldTickInEntry(void);
    virtual void GetActorRelations(class TArray<struct FActorRelation> &);
    virtual void GetTaggedRelations(class FName,class FColor,class FString,class TArray<struct FActorRelation> &);
    virtual class FCoords ToLocal(void)const ;
    virtual class FCoords ToWorld(void)const ;
    virtual class FMatrix LocalToWorld(void)const ;
    virtual class FMatrix WorldToLocal(void)const ;
    virtual void PostScriptDestroyed(void);
    virtual void CleanupSubObjects(int);
    virtual int ShouldTrace(class AActor *,unsigned long);
    virtual class UPrimitive * GetPrimitive(void);
    virtual void NotifyBump(class AActor *);
    virtual void SetDrawScale(float);
    virtual void SetDrawScale3D(class FVector);
    virtual void SetBase(class AActor *,class FVector,int);
    virtual void NotifyAnimEnd(int);
    virtual void SetLocalDrawScale(float);
    virtual void UpdateAnimation(float);
    virtual void StartAnimPoll(void);
    virtual int CheckAnimFinished(int);
    virtual int CheckOwnerUpdated(void);
    virtual void sv_OnFrame(float);
    virtual void TickAuthoritative(float);
    virtual void TickSimulated(float);
    virtual void TickSpecial(float);
    virtual int PlayerControlled(void);
    virtual int DelayScriptReplication(float);
    virtual int ShouldDrawDebugInfo(void);
    virtual void RenderEditorInfo(class FLevelSceneNode *,class FRenderInterface *,class FDynamicActor *);
    virtual void RenderEditorSelected(class FLevelSceneNode *,class FRenderInterface *,class FDynamicActor *);
    virtual float GetAmbientVolume(float);
    virtual class FVector GetHearingOrigin(void);
    virtual float GetAllowedAudioRepeatTime(int);
    virtual float GetAudioTypeVolumeFactor(int);
    virtual void PlayVoiceSound(int,float,float,float,class FVector);
    virtual void SetZone(int,int);
    virtual void SetVolumes(void);
    virtual void SetVolumes(class TArray<class AVolume *> const &);
    virtual void PostBeginPlay(void);
    virtual void setPhysics(unsigned char,class AActor *,class FVector);
    virtual void performPhysics(float);
    virtual void BoundProjectileVelocity(void);
    virtual void processHitWall(class FVector,class AActor *);
    virtual void processLanded(class FVector,class AActor *,float,int);
    virtual void physFalling(float,int);
    virtual void physWalking(float,int);
    virtual void physFlying(float,int);
    virtual class FRotator FindSlopeRotation(class FVector,class FRotator);
    virtual void SmoothHitWall(class FVector,class AActor *);
    virtual void stepUp(class FVector,class FVector,class FVector,struct FCheckResult &);
    virtual int ShrinkCollision(class AActor *,class FVector const &);
    virtual int ReachedBy(class APawn *,class FVector);
    virtual int NoReachDistance(void);
    virtual int AddMyMarker(class AActor *);
    virtual void ClearMarker(void);
    virtual class AActor * AssociatedLevelGeometry(void);
    virtual int HasAssociatedLevelGeometry(class AActor *);
    virtual class FVector GetDestination(class AController *);
    virtual int PlayAnim(int,class FName,float,float,int);
    virtual class FVector GetRootLocation(void);
    virtual void CheckForErrors(void);
    virtual void PrePath(void);
    virtual void PostPath(void);
    virtual class AActor * GetProjectorBase(void);
    virtual int IsABrush(void);
    virtual int IsAMover(void);
    virtual int IsAVolume(void);
    virtual void PostRender(class FLevelSceneNode *,class FRenderInterface *);
    virtual class APlayerController * GetAPlayerController(void);
    virtual class APawn * GetAPawn(void);
    virtual class AMover * GetAMover(void);
    virtual class APlayerController * GetTopPlayerController(void);
    virtual void * get_relevance_object_virtual(void);
    virtual class UObject * get_game_effects(void);
    virtual class UObject * get_game_combatstats(void);
    virtual int IsPlayer(void)const ;
    virtual void DrawDebugInfo(class FRenderInterface *);
    virtual class FString GetDescription(void)const ;
    virtual float GetAttachedEffectScale(void);
    virtual void OnEffectNotify(class FName);
    virtual void SoundStopped(class USound *);
    virtual void TriggerEvent(class FName const &,class AActor *,class APawn *);
    virtual void UntriggerEvent(class FName const &,class AActor *,class APawn *);
    AActor(class AActor const &);
    AActor(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AActor & operator=(class AActor const &);
    void AttachProjector(class AProjector *);
    int AttachToBone(class AActor *,class FName);
    void BeginTouch(class AActor *);
    bool CanPlayGroupSound(class FName);
    bool CanPlaySoundType(int);
    bool CanPlayVoiceSound(int);
    void CheckNoiseHearing(float);
    void ClearOctreeData(void);
    void ClearRenderData(int);
    int DetachFromBone(class AActor *);
    void DetachProjector(class AProjector *);
    void EndTouch(class AActor *,int);
    int ExcludeSmallLightsFromLightmaps(int)const ;
    class AActor * FindAttachment(class FName,class FName);
    void FindBase(void);
    struct FSBSoundTypeParams * GetActiveSoundType(int);
    struct FActorFrameData * GetActorFrameData(void);
    class FDynamicActor * GetActorRenderData(void);
    void GetAlignmentCheckVector(class FVector &,class FVector &,bool &);
    class AActor * GetAmbientLightingActor(void);
    class FVector GetCylinderExtent(void)const ;
    class AGameInfo * GetGameInfo(void);
    struct FSBSoundGroupParams * GetGroupSoundParams(class FName);
    class FCollisionHashBase * GetHash(void)const ;
    class AActor * GetHitActor(void);
    class ULevel * GetLevel(void)const ;
    class FDynamicLight * GetLightRenderData(void);
    void GetNetBuoyancy(float &,float &);
    unsigned short const * GetOriginalName(void)const ;
    class APawn * GetPlayerPawn(void)const ;
    class FSphere GetRenderBoundingSphere(void);
    void GetRotatorAxes(class FRotator const &,class FVector &,class FVector &,class FVector &);
    class AActor * GetTopOwner(void);
    class FRotator GetViewRotation(void);
    void InitGroupSound(class FName,float);
    void InitSoundType(int);
    void InitStatsGroup(void);
    static void CDECL InternalConstructor(void *);
    int IsAnimating(int)const ;
    int IsBasedOn(class AActor const *)const ;
    int IsBehind(class AActor *,int,int);
    int IsBlockedBy(class AActor const *)const ;
    int IsBrush(void)const ;
    int IsEncroacher(void)const ;
    bool IsGrounded(void);
    int IsHiddenEd(void);
    int IsInOctree(void);
    int IsInZone(class AZoneInfo const *)const ;
    int IsMovingBrush(void)const ;
    int IsOverlapping(class AActor *,struct FCheckResult *);
    int IsOwnedBy(class AActor const *)const ;
    int IsStaticBrush(void)const ;
    int IsVolumeBrush(void)const ;
    float LifeFraction(void);
    void MoveNoChecks(class FVector &,class FRotator &);
    void NetDirty(class UProperty *);
    int PlaySBSound(class USound *,float,float,float,class FVector,int,int);
    void ProcessDemoRecFunction(class UFunction *,void *,struct FFrame *);
    void Relink(class std::map<class UObject *,class UObject *,struct std::less<class UObject *>,class std::allocator<struct std::pair<class UObject * const,class UObject *> > > &);
    void SetCollision(int,int);
    void SetCollisionSize(float,float);
    void SetDrawType(enum EDrawType);
    bool SetLocation(class FVector &);
    void SetOwner(class AActor *);
    bool SetRotation(class FRotator &);
    void SetSkeletalMesh(class UMesh *);
    void SetStaticMesh(class UStaticMesh *);
    static class UClass * CDECL StaticClass(void);
    void StopSBSound(int,class AActor *,float);
    void StopSBSoundTypes(int);
    class FVector SuggestFallVelocity(class FVector,class FVector,float,float,float,float);
    int TestCanSeeMe(class APlayerController *);
    void TextToSpeech(class FString const &,float);
    void TickStatsGroup(void);
    void TwoWallAdjust(class FVector &,class FVector &,class FVector &,class FVector &,float);
    void UpdateActiveSounds(float);
    void UpdateAlignment(void);
    void UpdateRelativeRotation(void);
    void UpdateRenderData(void);
    void UpdateSBRenderData(void);
    void UpdateTimers(float);
    int UsesLightmaps(int)const ;
    int UsesLightmapsForSmallLights(int)const ;
    int UsesLightmapsForSunlights(int)const ;
    void eventAnimEnd(int);
    void eventAttach(class AActor *);
    void eventBaseChange(void);
    void eventBeginEvent(void);
    void eventBeginPlay(void);
    void eventBump(class AActor *);
    void eventDemoPlaySound(class USound *,unsigned char,float,unsigned long,float,float,unsigned long);
    void eventDestroyed(void);
    void eventDetach(class AActor *);
    void eventEncroachedBy(class AActor *);
    unsigned long eventEncroachingOn(class AActor *);
    void eventEndEvent(void);
    void eventEndedRotation(void);
    void eventFalling(void);
    void eventFellOutOfWorld(unsigned char);
    void eventFinishedInterpolation(void);
    void eventGainedChild(class AActor *);
    float eventGetAllowedAudioRepeatTime(int);
    void eventHitWall(class FVector,class AActor *);
    void eventKilledBy(class APawn *);
    void eventLIPSincAnimEnd(void);
    void eventLanded(class FVector);
    void eventLostChild(class AActor *);
    void eventNotifySoundStopped(class USound *);
    void eventOnCreateComponents(void);
    void eventOnSettingsChanged(void);
    void eventPhysicsVolumeChange(class APhysicsVolume *);
    void eventPostBeginPlay(void);
    void eventPostLoadSavedGame(void);
    void eventPostNetReceive(void);
    void eventPostTeleport(class ATeleporter *);
    void eventPostTouch(class AActor *);
    void eventPreBeginPlay(void);
    void eventPreSaveGame(void);
    unsigned long eventPreTeleport(class ATeleporter *);
    void eventRadialMenuCollect(class APawn *,unsigned char,class TArray<unsigned char> &);
    void eventRadialMenuSelect(class APawn *,unsigned char,unsigned char);
    void eventRanInto(class AActor *);
    void eventRecoverFromBadStateCode(void);
    void eventRenderTexture(class UScriptedTexture *);
    void eventSetInitialState(void);
    unsigned long eventSetRotation(class FRotator);
    unsigned long eventShouldTickPhysics(void);
    class AActor * eventSpecialHandling(class APawn *);
    void eventTakeDamage(int,class APawn *,class FVector,class FVector,class UClass *);
    void eventTick(float);
    void eventTimer(void);
    void eventTornOff(void);
    void eventTouch(class AActor *);
    void eventTravelPostAccept(void);
    void eventTravelPreAccept(void);
    void eventTrigger(class AActor *,class APawn *);
    void eventUnTouch(class AActor *);
    void eventUnTrigger(class AActor *,class APawn *);
    void eventUsedBy(class APawn *);
    void eventZoneChange(class AZoneInfo *);
    void eventcl_NotifyUnderCursor(unsigned long);
    void eventcl_OnBaseline(void);
    void eventcl_OnGroupChange(int);
    void eventcl_OnTick(float);
    void eventcl_OnUpdate(void);
    void execAdd_ColorColor(struct FFrame &,void * const);
    void execAdjustVolume(struct FFrame &,void * const);
    void execAllActors(struct FFrame &,void * const);
    void execAllowMusicPlayback(struct FFrame &,void * const);
    void execAnimBlendParams(struct FFrame &,void * const);
    void execAnimBlendToAlpha(struct FFrame &,void * const);
    void execAnimIsInGroup(struct FFrame &,void * const);
    void execAnimStopLooping(struct FFrame &,void * const);
    void execAttachToBone(struct FFrame &,void * const);
    void execAutonomousPhysics(struct FFrame &,void * const);
    void execBasedActors(struct FFrame &,void * const);
    void execBoneRefresh(struct FFrame &,void * const);
    void execChangeBaseParamsFeedbackEffect(struct FFrame &,void * const);
    void execChangeSpringFeedbackEffect(struct FFrame &,void * const);
    void execChildActors(struct FFrame &,void * const);
    void execClearStayingDebugLines(struct FFrame &,void * const);
    void execClock(struct FFrame &,void * const);
    void execCollidingActors(struct FFrame &,void * const);
    void execConsoleCommand(struct FFrame &,void * const);
    void execCopyObjectToClipboard(struct FFrame &,void * const);
    void execCurrentLIPSincAnim(struct FFrame &,void * const);
    void execDebugClock(struct FFrame &,void * const);
    void execDebugUnclock(struct FFrame &,void * const);
    void execDemoPlaySound(struct FFrame &,void * const);
    void execDestroy(struct FFrame &,void * const);
    void execDetachFromBone(struct FFrame &,void * const);
    void execDrawDebugCapsule(struct FFrame &,void * const);
    void execDrawDebugCircle(struct FFrame &,void * const);
    void execDrawDebugLine(struct FFrame &,void * const);
    void execDrawDebugSphere(struct FFrame &,void * const);
    void execDrawStayingDebugLine(struct FFrame &,void * const);
    void execDynamicActors(struct FFrame &,void * const);
    void execEnableChannelNotify(struct FFrame &,void * const);
    void execEndLatentFunction(struct FFrame &,void * const);
    void execError(struct FFrame &,void * const);
    void execFastTrace(struct FFrame &,void * const);
    void execFindAttachment(struct FFrame &,void * const);
    void execFinishAnim(struct FFrame &,void * const);
    void execFinishInterpolation(struct FFrame &,void * const);
    void execForceFeedbackSupported(struct FFrame &,void * const);
    void execFreezeAnimAt(struct FFrame &,void * const);
    void execGetAllowedAudioRepeatTime(struct FFrame &,void * const);
    void execGetAnimParams(struct FFrame &,void * const);
    void execGetBoneCoords(struct FFrame &,void * const);
    void execGetBoneRotation(struct FFrame &,void * const);
    void execGetClosestBone(struct FFrame &,void * const);
    void execGetGameEngine(struct FFrame &,void * const);
    void execGetGameInfo(struct FFrame &,void * const);
    void execGetMeshName(struct FFrame &,void * const);
    void execGetNotifyChannel(struct FFrame &,void * const);
    void execGetRenderBoundingSphere(struct FFrame &,void * const);
    void execGetRootLocation(struct FFrame &,void * const);
    void execGetRootLocationDelta(struct FFrame &,void * const);
    void execGetRootRotation(struct FFrame &,void * const);
    void execGetRootRotationDelta(struct FFrame &,void * const);
    void execGetSoundDuration(struct FFrame &,void * const);
    void execGetTaggedRelations(struct FFrame &,void * const);
    void execGetUrlOption(struct FFrame &,void * const);
    void execHasAnim(struct FFrame &,void * const);
    void execHasLIPSincAnim(struct FFrame &,void * const);
    void execInitStatsGroup(struct FFrame &,void * const);
    void execIsAnimating(struct FFrame &,void * const);
    void execIsBehind(struct FFrame &,void * const);
    void execIsGrounded(struct FFrame &,void * const);
    void execIsJoinedTo(struct FFrame &,void * const);
    void execIsPlayingLIPSincAnim(struct FFrame &,void * const);
    void execIsTweening(struct FFrame &,void * const);
    void execLinkMesh(struct FFrame &,void * const);
    void execLinkSkelAnim(struct FFrame &,void * const);
    void execLockRootMotion(struct FFrame &,void * const);
    void execLoopAnim(struct FFrame &,void * const);
    void execMakeNoise(struct FFrame &,void * const);
    void execMove(struct FFrame &,void * const);
    void execMoveNoChecks(struct FFrame &,void * const);
    void execMoveSmooth(struct FFrame &,void * const);
    void execMultiply_ColorFloat(struct FFrame &,void * const);
    void execMultiply_FloatColor(struct FFrame &,void * const);
    void execNotifySoundStopped(struct FFrame &,void * const);
    void execOnlyAffectPawns(struct FFrame &,void * const);
    void execPauseStream(struct FFrame &,void * const);
    void execPlayAnim(struct FFrame &,void * const);
    void execPlayFeedbackEffect(struct FFrame &,void * const);
    void execPlayLIPSincAnim(struct FFrame &,void * const);
    void execPlayMusic(struct FFrame &,void * const);
    void execPlayOwnedSound(struct FFrame &,void * const);
    void execPlaySBSound(struct FFrame &,void * const);
    void execPlaySound(struct FFrame &,void * const);
    void execPlayStream(struct FFrame &,void * const);
    void execPlayerCanSeeMe(struct FFrame &,void * const);
    void execPollFinishAnim(struct FFrame &,void * const);
    void execPollFinishInterpolation(struct FFrame &,void * const);
    void execPollSleep(struct FFrame &,void * const);
    void execRadiusActors(struct FFrame &,void * const);
    void execResetStaticFilterState(struct FFrame &,void * const);
    void execSeekStream(struct FFrame &,void * const);
    void execSetAmbientGlow(struct FFrame &,void * const);
    void execSetAnimFrame(struct FFrame &,void * const);
    void execSetBase(struct FFrame &,void * const);
    void execSetBoneDirection(struct FFrame &,void * const);
    void execSetBoneLocation(struct FFrame &,void * const);
    void execSetBoneRotation(struct FFrame &,void * const);
    void execSetBoneScale(struct FFrame &,void * const);
    void execSetCollision(struct FFrame &,void * const);
    void execSetCollisionSize(struct FFrame &,void * const);
    void execSetDrawScale3D(struct FFrame &,void * const);
    void execSetDrawScale(struct FFrame &,void * const);
    void execSetDrawType(struct FFrame &,void * const);
    void execSetLocation(struct FFrame &,void * const);
    void execSetOwner(struct FFrame &,void * const);
    void execSetPhysics(struct FFrame &,void * const);
    void execSetRelativeLocation(struct FFrame &,void * const);
    void execSetRelativeRotation(struct FFrame &,void * const);
    void execSetRotation(struct FFrame &,void * const);
    void execSetSkeletalMesh(struct FFrame &,void * const);
    void execSetStaticMesh(struct FFrame &,void * const);
    void execSetTimer(struct FFrame &,void * const);
    void execShouldBeHidden(struct FFrame &,void * const);
    void execSleep(struct FFrame &,void * const);
    void execSpawn(struct FFrame &,void * const);
    void execStopAllMusic(struct FFrame &,void * const);
    void execStopAnimating(struct FFrame &,void * const);
    void execStopAudio(struct FFrame &,void * const);
    void execStopFeedbackEffect(struct FFrame &,void * const);
    void execStopLIPSincAnim(struct FFrame &,void * const);
    void execStopMusic(struct FFrame &,void * const);
    void execStopSBSoundTypes(struct FFrame &,void * const);
    void execStopStream(struct FFrame &,void * const);
    void execSubtract_ColorColor(struct FFrame &,void * const);
    void execSuggestFallVelocity(struct FFrame &,void * const);
    void execTextToSpeech(struct FFrame &,void * const);
    void execTickStatsGroup(struct FFrame &,void * const);
    void execTouchingActors(struct FFrame &,void * const);
    void execTrace(struct FFrame &,void * const);
    void execTraceActors(struct FFrame &,void * const);
    void execTraceThisActor(struct FFrame &,void * const);
    void execTriggerEvent(struct FFrame &,void * const);
    void execTweenAnim(struct FFrame &,void * const);
    void execUnClock(struct FFrame &,void * const);
    void execUntriggerEvent(struct FFrame &,void * const);
    void execUpdateURL(struct FFrame &,void * const);
    void execVisibleActors(struct FFrame &,void * const);
    void execVisibleCollidingActors(struct FFrame &,void * const);
    int fixedTurn(int,int,int);
    int moveSmooth(class FVector);
    void physProjectile(float,int);
    void physRootMotion(float);
    void physTrailer(float);
    void physicsRotation(float);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(AActor,0,execAdd_ColorColor)
AUTOGENERATE_FUNCTION(AActor,0,execAdjustVolume)
AUTOGENERATE_FUNCTION(AActor,0,execAllActors)
AUTOGENERATE_FUNCTION(AActor,0,execAllowMusicPlayback)
AUTOGENERATE_FUNCTION(AActor,0,execAnimBlendParams)
AUTOGENERATE_FUNCTION(AActor,0,execAnimBlendToAlpha)
AUTOGENERATE_FUNCTION(AActor,0,execAnimIsInGroup)
AUTOGENERATE_FUNCTION(AActor,0,execAnimStopLooping)
AUTOGENERATE_FUNCTION(AActor,0,execAttachToBone)
AUTOGENERATE_FUNCTION(AActor,0,execAutonomousPhysics)
AUTOGENERATE_FUNCTION(AActor,0,execBasedActors)
AUTOGENERATE_FUNCTION(AActor,0,execBoneRefresh)
AUTOGENERATE_FUNCTION(AActor,0,execChangeBaseParamsFeedbackEffect)
AUTOGENERATE_FUNCTION(AActor,0,execChangeSpringFeedbackEffect)
AUTOGENERATE_FUNCTION(AActor,0,execChildActors)
AUTOGENERATE_FUNCTION(AActor,0,execClearStayingDebugLines)
AUTOGENERATE_FUNCTION(AActor,0,execClock)
AUTOGENERATE_FUNCTION(AActor,0,execCollidingActors)
AUTOGENERATE_FUNCTION(AActor,0,execConsoleCommand)
AUTOGENERATE_FUNCTION(AActor,0,execCopyObjectToClipboard)
AUTOGENERATE_FUNCTION(AActor,0,execCurrentLIPSincAnim)
AUTOGENERATE_FUNCTION(AActor,0,execDebugClock)
AUTOGENERATE_FUNCTION(AActor,0,execDebugUnclock)
AUTOGENERATE_FUNCTION(AActor,0,execDemoPlaySound)
AUTOGENERATE_FUNCTION(AActor,0,execDestroy)
AUTOGENERATE_FUNCTION(AActor,0,execDetachFromBone)
AUTOGENERATE_FUNCTION(AActor,0,execDrawDebugCapsule)
AUTOGENERATE_FUNCTION(AActor,0,execDrawDebugCircle)
AUTOGENERATE_FUNCTION(AActor,0,execDrawDebugLine)
AUTOGENERATE_FUNCTION(AActor,0,execDrawDebugSphere)
AUTOGENERATE_FUNCTION(AActor,0,execDrawStayingDebugLine)
AUTOGENERATE_FUNCTION(AActor,0,execDynamicActors)
AUTOGENERATE_FUNCTION(AActor,0,execEnableChannelNotify)
AUTOGENERATE_FUNCTION(AActor,0,execEndLatentFunction)
AUTOGENERATE_FUNCTION(AActor,0,execError)
AUTOGENERATE_FUNCTION(AActor,0,execFastTrace)
AUTOGENERATE_FUNCTION(AActor,0,execFindAttachment)
AUTOGENERATE_FUNCTION(AActor,0,execFinishAnim)
AUTOGENERATE_FUNCTION(AActor,0,execFinishInterpolation)
AUTOGENERATE_FUNCTION(AActor,0,execForceFeedbackSupported)
AUTOGENERATE_FUNCTION(AActor,0,execFreezeAnimAt)
AUTOGENERATE_FUNCTION(AActor,0,execGetAllowedAudioRepeatTime)
AUTOGENERATE_FUNCTION(AActor,0,execGetAnimParams)
AUTOGENERATE_FUNCTION(AActor,0,execGetBoneCoords)
AUTOGENERATE_FUNCTION(AActor,0,execGetBoneRotation)
AUTOGENERATE_FUNCTION(AActor,0,execGetClosestBone)
AUTOGENERATE_FUNCTION(AActor,0,execGetGameEngine)
AUTOGENERATE_FUNCTION(AActor,0,execGetGameInfo)
AUTOGENERATE_FUNCTION(AActor,0,execGetMeshName)
AUTOGENERATE_FUNCTION(AActor,0,execGetNotifyChannel)
AUTOGENERATE_FUNCTION(AActor,0,execGetRenderBoundingSphere)
AUTOGENERATE_FUNCTION(AActor,0,execGetRootLocation)
AUTOGENERATE_FUNCTION(AActor,0,execGetRootLocationDelta)
AUTOGENERATE_FUNCTION(AActor,0,execGetRootRotation)
AUTOGENERATE_FUNCTION(AActor,0,execGetRootRotationDelta)
AUTOGENERATE_FUNCTION(AActor,0,execGetSoundDuration)
AUTOGENERATE_FUNCTION(AActor,0,execGetTaggedRelations)
AUTOGENERATE_FUNCTION(AActor,0,execGetUrlOption)
AUTOGENERATE_FUNCTION(AActor,0,execHasAnim)
AUTOGENERATE_FUNCTION(AActor,0,execHasLIPSincAnim)
AUTOGENERATE_FUNCTION(AActor,0,execInitStatsGroup)
AUTOGENERATE_FUNCTION(AActor,0,execIsAnimating)
AUTOGENERATE_FUNCTION(AActor,0,execIsBehind)
AUTOGENERATE_FUNCTION(AActor,0,execIsGrounded)
AUTOGENERATE_FUNCTION(AActor,0,execIsJoinedTo)
AUTOGENERATE_FUNCTION(AActor,0,execIsPlayingLIPSincAnim)
AUTOGENERATE_FUNCTION(AActor,0,execIsTweening)
AUTOGENERATE_FUNCTION(AActor,0,execLinkMesh)
AUTOGENERATE_FUNCTION(AActor,0,execLinkSkelAnim)
AUTOGENERATE_FUNCTION(AActor,0,execLockRootMotion)
AUTOGENERATE_FUNCTION(AActor,0,execLoopAnim)
AUTOGENERATE_FUNCTION(AActor,0,execMakeNoise)
AUTOGENERATE_FUNCTION(AActor,0,execMove)
AUTOGENERATE_FUNCTION(AActor,0,execMoveNoChecks)
AUTOGENERATE_FUNCTION(AActor,0,execMoveSmooth)
AUTOGENERATE_FUNCTION(AActor,0,execMultiply_ColorFloat)
AUTOGENERATE_FUNCTION(AActor,0,execMultiply_FloatColor)
AUTOGENERATE_FUNCTION(AActor,0,execNotifySoundStopped)
AUTOGENERATE_FUNCTION(AActor,0,execOnlyAffectPawns)
AUTOGENERATE_FUNCTION(AActor,0,execPauseStream)
AUTOGENERATE_FUNCTION(AActor,0,execPlayAnim)
AUTOGENERATE_FUNCTION(AActor,0,execPlayFeedbackEffect)
AUTOGENERATE_FUNCTION(AActor,0,execPlayLIPSincAnim)
AUTOGENERATE_FUNCTION(AActor,0,execPlayMusic)
AUTOGENERATE_FUNCTION(AActor,0,execPlayOwnedSound)
AUTOGENERATE_FUNCTION(AActor,0,execPlaySBSound)
AUTOGENERATE_FUNCTION(AActor,0,execPlaySound)
AUTOGENERATE_FUNCTION(AActor,0,execPlayStream)
AUTOGENERATE_FUNCTION(AActor,0,execPlayerCanSeeMe)
AUTOGENERATE_FUNCTION(AActor,0,execPollFinishAnim)
AUTOGENERATE_FUNCTION(AActor,0,execPollFinishInterpolation)
AUTOGENERATE_FUNCTION(AActor,0,execPollSleep)
AUTOGENERATE_FUNCTION(AActor,0,execRadiusActors)
AUTOGENERATE_FUNCTION(AActor,0,execResetStaticFilterState)
AUTOGENERATE_FUNCTION(AActor,0,execSeekStream)
AUTOGENERATE_FUNCTION(AActor,0,execSetAmbientGlow)
AUTOGENERATE_FUNCTION(AActor,0,execSetAnimFrame)
AUTOGENERATE_FUNCTION(AActor,0,execSetBase)
AUTOGENERATE_FUNCTION(AActor,0,execSetBoneDirection)
AUTOGENERATE_FUNCTION(AActor,0,execSetBoneLocation)
AUTOGENERATE_FUNCTION(AActor,0,execSetBoneRotation)
AUTOGENERATE_FUNCTION(AActor,0,execSetBoneScale)
AUTOGENERATE_FUNCTION(AActor,0,execSetCollision)
AUTOGENERATE_FUNCTION(AActor,0,execSetCollisionSize)
AUTOGENERATE_FUNCTION(AActor,0,execSetDrawScale)
AUTOGENERATE_FUNCTION(AActor,0,execSetDrawScale3D)
AUTOGENERATE_FUNCTION(AActor,0,execSetDrawType)
AUTOGENERATE_FUNCTION(AActor,0,execSetLocation)
AUTOGENERATE_FUNCTION(AActor,0,execSetOwner)
AUTOGENERATE_FUNCTION(AActor,0,execSetPhysics)
AUTOGENERATE_FUNCTION(AActor,0,execSetRelativeLocation)
AUTOGENERATE_FUNCTION(AActor,0,execSetRelativeRotation)
AUTOGENERATE_FUNCTION(AActor,0,execSetRotation)
AUTOGENERATE_FUNCTION(AActor,0,execSetSkeletalMesh)
AUTOGENERATE_FUNCTION(AActor,0,execSetStaticMesh)
AUTOGENERATE_FUNCTION(AActor,0,execSetTimer)
AUTOGENERATE_FUNCTION(AActor,0,execShouldBeHidden)
AUTOGENERATE_FUNCTION(AActor,0,execSleep)
AUTOGENERATE_FUNCTION(AActor,0,execSpawn)
AUTOGENERATE_FUNCTION(AActor,0,execStopAllMusic)
AUTOGENERATE_FUNCTION(AActor,0,execStopAnimating)
AUTOGENERATE_FUNCTION(AActor,0,execStopAudio)
AUTOGENERATE_FUNCTION(AActor,0,execStopFeedbackEffect)
AUTOGENERATE_FUNCTION(AActor,0,execStopLIPSincAnim)
AUTOGENERATE_FUNCTION(AActor,0,execStopMusic)
AUTOGENERATE_FUNCTION(AActor,0,execStopSBSoundTypes)
AUTOGENERATE_FUNCTION(AActor,0,execStopStream)
AUTOGENERATE_FUNCTION(AActor,0,execSubtract_ColorColor)
AUTOGENERATE_FUNCTION(AActor,0,execSuggestFallVelocity)
AUTOGENERATE_FUNCTION(AActor,0,execTextToSpeech)
AUTOGENERATE_FUNCTION(AActor,0,execTickStatsGroup)
AUTOGENERATE_FUNCTION(AActor,0,execTouchingActors)
AUTOGENERATE_FUNCTION(AActor,0,execTrace)
AUTOGENERATE_FUNCTION(AActor,0,execTraceActors)
AUTOGENERATE_FUNCTION(AActor,0,execTraceThisActor)
AUTOGENERATE_FUNCTION(AActor,0,execTriggerEvent)
AUTOGENERATE_FUNCTION(AActor,0,execTweenAnim)
AUTOGENERATE_FUNCTION(AActor,0,execUnClock)
AUTOGENERATE_FUNCTION(AActor,0,execUntriggerEvent)
AUTOGENERATE_FUNCTION(AActor,0,execUpdateURL)
AUTOGENERATE_FUNCTION(AActor,0,execVisibleActors)
AUTOGENERATE_FUNCTION(AActor,0,execVisibleCollidingActors)


//------------------------------------------------------------------------------
//  Pawn
//------------------------------------------------------------------------------

// FHitFXData 0 ( )
struct DLL_IMPORT FHitFXData {
  public:
    FName Bone;  // 0 1 CPF_Edit
    class UClass* damtype;  // 4 1 CPF_Edit
    BITFIELD bSever : 1;  // 8 1 CPF_Edit
    class FRotator rotDir;  // C 1 CPF_Edit
    FHitFXData(void);
    struct FHitFXData & operator=(struct FHitFXData const &);
};

//  Pawn.ClientSetDesiredMovement 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execClientSetDesiredMovement_Parms {
  class FVector aVector;  // 0 80 CPF_Parm
};


//  Pawn.SetDesiredMovement 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execSetDesiredMovement_Parms {
  class FVector aVector;  // 0 80 CPF_Parm
};


//  Pawn.GetTargetLocation 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execGetTargetLocation_Parms {
  class FVector ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.RangedAttackTime 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execRangedAttackTime_Parms {
  FLOAT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.CheatFly 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execCheatFly_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.CheatGhost 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execCheatGhost_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.CheatWalk 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execCheatWalk_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.RawInput 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execRawInput_Parms {
  FLOAT DeltaTime;  // 0 80 CPF_Parm
  FLOAT aBaseX;  // 4 80 CPF_Parm
  FLOAT aBaseY;  // 8 80 CPF_Parm
  FLOAT aBaseZ;  // C 80 CPF_Parm
  FLOAT aMouseX;  // 10 80 CPF_Parm
  FLOAT aMouseY;  // 14 80 CPF_Parm
  FLOAT aForward;  // 18 80 CPF_Parm
  FLOAT aTurn;  // 1C 80 CPF_Parm
  FLOAT aStrafe;  // 20 80 CPF_Parm
  FLOAT aUp;  // 24 80 CPF_Parm
  FLOAT aLookUp;  // 28 80 CPF_Parm
};


//  Pawn.PlayVictoryAnimation 20000 0 ( FUNC_Public )
struct APawn_execPlayVictoryAnimation_Parms {
};


//  Pawn.PlayLandingAnimation 20900 0 ( FUNC_Simulated FUNC_Event FUNC_Public )
struct APawn_eventPlayLandingAnimation_Parms {
  FLOAT impactVel;  // 0 80 CPF_Parm
};


//  Pawn.PlayLanded 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execPlayLanded_Parms {
  FLOAT impactVel;  // 0 80 CPF_Parm
};


//  Pawn.PlayWaiting 20100 0 ( FUNC_Simulated FUNC_Public )
struct APawn_execPlayWaiting_Parms {
};


//  Pawn.PlayMoving 20100 0 ( FUNC_Simulated FUNC_Public )
struct APawn_execPlayMoving_Parms {
};


//  Pawn.PlayFalling 20900 0 ( FUNC_Simulated FUNC_Event FUNC_Public )
struct APawn_eventPlayFalling_Parms {
};


//  Pawn.PlayJump 20900 0 ( FUNC_Simulated FUNC_Event FUNC_Public )
struct APawn_eventPlayJump_Parms {
};


//  Pawn.CannotJumpNow 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execCannotJumpNow_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.AnimEnd 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct APawn_eventAnimEnd_Parms {
  INT Channel;  // 0 80 CPF_Parm
};


//  Pawn.ChangeAnimation 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct APawn_eventChangeAnimation_Parms {
};


//  Pawn.PlayTakeHit 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execPlayTakeHit_Parms {
  class FVector HitLoc;  // 0 80 CPF_Parm
  INT Damage;  // C 80 CPF_Parm
  class UClass* DamageType;  // 10 80 CPF_Parm
};


//  Pawn.PlayFiring 20100 0 ( FUNC_Simulated FUNC_Public )
struct APawn_execPlayFiring_Parms {
  FLOAT Rate;  // 0 90 CPF_OptionalParm CPF_Parm
  FName FiringMode;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  Pawn.PlayDying 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct APawn_eventPlayDying_Parms {
  class UClass* DamageType;  // 0 80 CPF_Parm
  class FVector HitLoc;  // 4 80 CPF_Parm
};


//  Pawn.SetAnimAction 20900 0 ( FUNC_Simulated FUNC_Event FUNC_Public )
struct APawn_eventSetAnimAction_Parms {
  FName NewAction;  // 0 80 CPF_Parm
};


//  Pawn.TurnOff 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execTurnOff_Parms {
};


//  Pawn.PlayHit 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execPlayHit_Parms {
  FLOAT Damage;  // 0 80 CPF_Parm
  class APawn* instigatedBy;  // 4 80 CPF_Parm
  class FVector HitLocation;  // 8 80 CPF_Parm
  class UClass* DamageType;  // 14 80 CPF_Parm
  class FVector Momentum;  // 18 80 CPF_Parm
};


//  Pawn.PlayDyingSound 20000 0 ( FUNC_Public )
struct APawn_execPlayDyingSound_Parms {
};


//  Pawn.PlayMoverHitSound 20000 0 ( FUNC_Public )
struct APawn_execPlayMoverHitSound_Parms {
};


//  Pawn.DoJump 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APawn_eventDoJump_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.GetJumpZ 20C01 0 ( FUNC_Final FUNC_Native FUNC_Event FUNC_Public )
struct APawn_eventGetJumpZ_Parms {
  FLOAT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.CheckWaterJump 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execCheckWaterJump_Parms {
  class FVector WallNormal;  // 0 180 CPF_Parm CPF_OutParm
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.TakeDrowningDamage 20000 0 ( FUNC_Public )
struct APawn_execTakeDrowningDamage_Parms {
};


//  Pawn.BreathTimer 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APawn_eventBreathTimer_Parms {
};


//  Pawn.IsInPain 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execIsInPain_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.TouchingWaterVolume 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execTouchingWaterVolume_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.HeadVolumeChange 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APawn_eventHeadVolumeChange_Parms {
  class APhysicsVolume* newHeadVolume;  // 0 80 CPF_Parm
};


//  Pawn.HitWall 20800 0 ( FUNC_Event FUNC_Public )
struct APawn_eventHitWall_Parms {
  class FVector HitNormal;  // 0 80 CPF_Parm
  class AActor* Wall;  // C 80 CPF_Parm
};


//  Pawn.Falling 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APawn_eventFalling_Parms {
};


//  Pawn.Died 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execDied_Parms {
  class AController* Killer;  // 0 80 CPF_Parm
  class UClass* DamageType;  // 4 80 CPF_Parm
  class FVector HitLocation;  // 8 80 CPF_Parm
};


//  Pawn.GetKillerController 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execGetKillerController_Parms {
  class AController* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.SetDelayedDamageInstigatorController 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execSetDelayedDamageInstigatorController_Parms {
  class AController* C;  // 0 80 CPF_Parm
};


//  Pawn.TakeDamage 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execTakeDamage_Parms {
  INT Damage;  // 0 80 CPF_Parm
  class APawn* instigatedBy;  // 4 80 CPF_Parm
  class FVector HitLocation;  // 8 80 CPF_Parm
  class FVector Momentum;  // 14 80 CPF_Parm
  class UClass* DamageType;  // 20 80 CPF_Parm
};


//  Pawn.ShieldAbsorb 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execShieldAbsorb_Parms {
  INT Damage;  // 0 80 CPF_Parm
  INT ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.HasUDamage 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execHasUDamage_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.GiveHealth 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execGiveHealth_Parms {
  INT HealAmount;  // 0 80 CPF_Parm
  INT HealMax;  // 4 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.SetMovementPhysics 20000 0 ( FUNC_Public )
struct APawn_execSetMovementPhysics_Parms {
};


//  Pawn.Gasp 20000 0 ( FUNC_Public )
struct APawn_execGasp_Parms {
};


//  Pawn.SetMesh 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execSetMesh_Parms {
};


//  Pawn.PostBeginPlay 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APawn_eventPostBeginPlay_Parms {
};


//  Pawn.PreBeginPlay 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APawn_eventPreBeginPlay_Parms {
};


//  Pawn.Destroyed 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct APawn_eventDestroyed_Parms {
};


//  Pawn.EyePosition 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execEyePosition_Parms {
  class FVector ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.BaseChange 20822 0 ( FUNC_Defined FUNC_Singular FUNC_Event FUNC_Public )
struct APawn_eventBaseChange_Parms {
};


//  Pawn.JumpOffPawn 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execJumpOffPawn_Parms {
};


//  Pawn.GibbedBy 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execGibbedBy_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Pawn.EncroachedBy 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APawn_eventEncroachedBy_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Pawn.EncroachingOn 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APawn_eventEncroachingOn_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.LimitPitchFirstPersonView 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execLimitPitchFirstPersonView_Parms {
  INT Pitch;  // 0 80 CPF_Parm
  INT ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.LimitPitchBehindView 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execLimitPitchBehindView_Parms {
  INT Pitch;  // 0 80 CPF_Parm
  INT ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.FaceRotation 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execFaceRotation_Parms {
  class FRotator NewRotation;  // 0 80 CPF_Parm
  FLOAT DeltaTime;  // C 80 CPF_Parm
};


//  Pawn.IsRotationFrozen 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APawn_eventIsRotationFrozen_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.KilledBy 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execKilledBy_Parms {
  class APawn* EventInstigator;  // 0 80 CPF_Parm
};


//  Pawn.AddVelocity 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execAddVelocity_Parms {
  class FVector newVelocity;  // 0 80 CPF_Parm
};


//  Pawn.RestartPlayer 20000 0 ( FUNC_Public )
struct APawn_execRestartPlayer_Parms {
};


//  Pawn.StartCrouch 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APawn_eventStartCrouch_Parms {
  FLOAT HeightAdjust;  // 0 80 CPF_Parm
};


//  Pawn.EndCrouch 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APawn_eventEndCrouch_Parms {
  FLOAT HeightAdjust;  // 0 80 CPF_Parm
};


//  Pawn.ShouldCrouch 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execShouldCrouch_Parms {
  BITFIELD Crouch : 1;  // 0 80 CPF_Parm
};


//  Pawn.FellOutOfWorld 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APawn_eventFellOutOfWorld_Parms {
  BYTE KillType;  // 0 80 CPF_Parm
};


//  Pawn.ModifyVelocity 20900 0 ( FUNC_Simulated FUNC_Event FUNC_Public )
struct APawn_eventModifyVelocity_Parms {
  FLOAT DeltaTime;  // 0 80 CPF_Parm
  class FVector OldVelocity;  // 4 80 CPF_Parm
};


//  Pawn.JumpOutOfWater 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execJumpOutOfWater_Parms {
  class FVector jumpDir;  // 0 80 CPF_Parm
};


//  Pawn.FinishedInterpolation 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execFinishedInterpolation_Parms {
};


//  Pawn.SetDefaultDisplayProperties 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execSetDefaultDisplayProperties_Parms {
};


//  Pawn.SetDisplayProperties 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execSetDisplayProperties_Parms {
  BYTE NewStyle;  // 0 80 CPF_Parm
  class UMaterial* NewTexture;  // 4 80 CPF_Parm
  BITFIELD bLighting : 1;  // 8 80 CPF_Parm
};


//  Pawn.CanTrigger 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execCanTrigger_Parms {
  class ATrigger* t;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.Trigger 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


//  Pawn.AdjustedStrength 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execAdjustedStrength_Parms {
  FLOAT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.LineOfSightTo 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execLineOfSightTo_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.SetMoveTarget 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execSetMoveTarget_Parms {
  class AActor* NewTarget;  // 0 80 CPF_Parm
};


//  Pawn.GetMoveTarget 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execGetMoveTarget_Parms {
  class AActor* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.PressingAltFire 20103 0 ( FUNC_Final FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execPressingAltFire_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.PressingFire 20103 0 ( FUNC_Final FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execPressingFire_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.NearMoveTarget 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execNearMoveTarget_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.InGodMode 20003 0 ( FUNC_Final FUNC_Defined FUNC_Public )
struct APawn_execInGodMode_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.SetViewRotation 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execSetViewRotation_Parms {
  class FRotator NewRotation;  // 0 80 CPF_Parm
};


//  Pawn.GetViewRotation 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execGetViewRotation_Parms {
  class FRotator ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.IsFirstPerson 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execIsFirstPerson_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.IsLocallyControlled 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execIsLocallyControlled_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.IsHumanControlled 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execIsHumanControlled_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.WasPlayerPawn 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execWasPlayerPawn_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.IsPlayerPawn 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct APawn_eventIsPlayerPawn_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.IsNPC 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct APawn_execIsNPC_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.IsRemotePlayer 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct APawn_execIsRemotePlayer_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.IsLocalPlayer 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct APawn_execIsLocalPlayer_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.DisplayDebug 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execDisplayDebug_Parms {
  class UCanvas* Canvas;  // 0 80 CPF_Parm
  FLOAT YL;  // 4 180 CPF_Parm CPF_OutParm
  FLOAT YPos;  // 8 180 CPF_Parm CPF_OutParm
};


//  Pawn.ClimbLadder 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execClimbLadder_Parms {
  class ALadderVolume* L;  // 0 80 CPF_Parm
};


//  Pawn.EndClimbLadder 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execEndClimbLadder_Parms {
  class ALadderVolume* OldLadder;  // 0 80 CPF_Parm
};


//  Pawn.AddAcceleration 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execAddAcceleration_Parms {
  class FVector newAcceleration;  // 0 80 CPF_Parm
};


//  Pawn.SetVelocity 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execSetVelocity_Parms {
  class FVector newVelocity;  // 0 80 CPF_Parm
};


//  Pawn.SetAcceleration 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execSetAcceleration_Parms {
  class FVector newAcceleration;  // 0 80 CPF_Parm
};


//  Pawn.CanSplash 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execCanSplash_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.SetWalking 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APawn_eventSetWalking_Parms {
  BITFIELD bNewIsWalking : 1;  // 0 80 CPF_Parm
};


//  Pawn.CanGrabLadder 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execCanGrabLadder_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.DropToGround 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execDropToGround_Parms {
};


//  Pawn.BecomeViewTarget 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execBecomeViewTarget_Parms {
};


//  Pawn.PointOfView 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execPointOfView_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.PlayTeleportEffect 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execPlayTeleportEffect_Parms {
  BITFIELD bOut : 1;  // 0 80 CPF_Parm
  BITFIELD bSound : 1;  // 4 80 CPF_Parm
};


//  Pawn.SpectatorSpecialCalcView 20000 0 ( FUNC_Public )
struct APawn_execSpectatorSpecialCalcView_Parms {
  class APlayerController* Viewer;  // 0 80 CPF_Parm
  class AActor* ViewActor;  // 4 180 CPF_Parm CPF_OutParm
  class FVector CameraLocation;  // 8 180 CPF_Parm CPF_OutParm
  class FRotator CameraRotation;  // 14 180 CPF_Parm CPF_OutParm
  BITFIELD ReturnValue : 1;  // 20 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.SpecialCalcView 20000 0 ( FUNC_Public )
struct APawn_execSpecialCalcView_Parms {
  class AActor* ViewActor;  // 0 180 CPF_Parm CPF_OutParm
  class FVector CameraLocation;  // 4 180 CPF_Parm CPF_OutParm
  class FRotator CameraRotation;  // 10 180 CPF_Parm CPF_OutParm
  BITFIELD ReturnValue : 1;  // 1C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.SpecialDrawCrosshair 20100 0 ( FUNC_Simulated FUNC_Public )
struct APawn_execSpecialDrawCrosshair_Parms {
  class UCanvas* C;  // 0 80 CPF_Parm
};


//  Pawn.DrawHUD 20000 0 ( FUNC_Public )
struct APawn_execDrawHUD_Parms {
  class UCanvas* Canvas;  // 0 80 CPF_Parm
};


//  Pawn.ModifyThreat 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execModifyThreat_Parms {
  FLOAT current;  // 0 80 CPF_Parm
  class APawn* Threat;  // 4 80 CPF_Parm
  FLOAT ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.NeedToTurn 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execNeedToTurn_Parms {
  class FVector targ;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.FireOnRelease 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execFireOnRelease_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.IsFiring 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execIsFiring_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.RefireRate 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execRefireRate_Parms {
  FLOAT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.TooCloseToAttack 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execTooCloseToAttack_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.CanAttack 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execCanAttack_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.RecommendLongRangedAttack 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execRecommendLongRangedAttack_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.AltFire 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execAltFire_Parms {
  FLOAT F;  // 0 90 CPF_OptionalParm CPF_Parm
};


//  Pawn.Fire 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execFire_Parms {
  FLOAT F;  // 0 90 CPF_OptionalParm CPF_Parm
};


//  Pawn.GetPathTo 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execGetPathTo_Parms {
  class AActor* Dest;  // 0 80 CPF_Parm
  class AActor* ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.DeactivateSpawnProtection 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execDeactivateSpawnProtection_Parms {
};


//  Pawn.GetAimTarget 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execGetAimTarget_Parms {
  class APawn* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.SetBaseEyeheight 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APawn_execSetBaseEyeheight_Parms {
};


//  Pawn.ForceCrouch 20400 0 ( FUNC_Native FUNC_Public )
struct APawn_execForceCrouch_Parms {
};


//  Pawn.ReachedDestination 20400 0 ( FUNC_Native FUNC_Public )
struct APawn_execReachedDestination_Parms {
  class AActor* Goal;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.PostRender2D 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct APawn_eventPostRender2D_Parms {
  class UCanvas* C;  // 0 80 CPF_Parm
  FLOAT ScreenLocX;  // 4 80 CPF_Parm
  FLOAT ScreenLocY;  // 8 80 CPF_Parm
};


//  Pawn.SetHealth 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execSetHealth_Parms {
  FLOAT aHealth;  // 0 80 CPF_Parm
};


//  Pawn.IncreaseHealth 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execIncreaseHealth_Parms {
  FLOAT aDelta;  // 0 80 CPF_Parm
};


//  Pawn.GetHealth 20002 0 ( FUNC_Defined FUNC_Public )
struct APawn_execGetHealth_Parms {
  FLOAT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.SetHeadScale 20900 0 ( FUNC_Simulated FUNC_Event FUNC_Public )
struct APawn_eventSetHeadScale_Parms {
  FLOAT NewScale;  // 0 80 CPF_Parm
};


//  Pawn.Get4WayDirection 20500 0 ( FUNC_Simulated FUNC_Native FUNC_Public )
struct APawn_execGet4WayDirection_Parms {
  INT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Pawn.SetTwistLook 20500 0 ( FUNC_Simulated FUNC_Native FUNC_Public )
struct APawn_execSetTwistLook_Parms {
  INT twist;  // 0 80 CPF_Parm
  INT look;  // 4 80 CPF_Parm
};


//  Pawn.SetViewPitch 20500 0 ( FUNC_Simulated FUNC_Native FUNC_Public )
struct APawn_execSetViewPitch_Parms {
  INT NewPitch;  // 0 80 CPF_Parm
};


//  Pawn.StaticPrecache 22000 0 ( FUNC_Static FUNC_Public )
struct APawn_execStaticPrecache_Parms {
  class ALevelInfo* L;  // 0 80 CPF_Parm
};


// APawn 4A36 ( CLASS_Compiled CLASS_Config CLASS_Parsed CLASS_Localized CLASS_NoUserCreate CLASS_NativeReplication CLASS_ExportStructs )
class DLL_IMPORT APawn : public AActor {
  public:
    class AController* Controller;  // 420 0
    FLOAT NetRelevancyTime;  // 424 0
    class APlayerController* LastRealViewer;  // 428 0
    class AActor* LastViewer;  // 42C 0
    FLOAT LastLocTime;  // 430 2000002 CPF_Const CPF_EditorData
    BITFIELD bJustLanded : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bLandRecovery : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bUpAndOut : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bIsWalking : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bWarping : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bWantsToCrouch : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bIsCrouched : 1;  // 434 2000002 CPF_Const CPF_EditorData
    BITFIELD bTryToUncrouch : 1;  // 434 2000002 CPF_Const CPF_EditorData
    BITFIELD bCanCrouch : 1;  // 434 2000001 CPF_Edit CPF_EditorData
    BITFIELD bCrawler : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bReducedSpeed : 1;  // 434 2000002 CPF_Const CPF_EditorData
    BITFIELD bJumpCapable : 1;  // 434 0
    BITFIELD bCanJump : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bCanWalk : 1;  // 434 0
    BITFIELD bCanSwim : 1;  // 434 0
    BITFIELD bCanFly : 1;  // 434 0
    BITFIELD bCanClimbLadders : 1;  // 434 0
    BITFIELD bCanStrafe : 1;  // 434 0
    BITFIELD bCanRest : 1;  // 434 0
    BITFIELD bCanWalkBackwards : 1;  // 434 0
    BITFIELD bAvoidLedges : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bStopAtLedges : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bNoJumpAdjust : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bCountJumps : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bSimulateGravity : 1;  // 434 2000002 CPF_Const CPF_EditorData
    BITFIELD bUpdateEyeheight : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bIgnoreForces : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bNoVelocityUpdate : 1;  // 434 2000002 CPF_Const CPF_EditorData
    BITFIELD bCanWalkOffLedges : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bCanBeBaseForPawns : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bClientCollision : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bSimGravityDisabled : 1;  // 434 2000002 CPF_Const CPF_EditorData
    BITFIELD bDirectHitWall : 1;  // 438 2000000 CPF_EditorData
    BITFIELD bServerMoveSetPawnRot : 1;  // 438 0
    BITFIELD bDrawCorona : 1;  // 438 0
    BITFIELD bNoCoronas : 1;  // 438 44000 CPF_Config CPF_GlobalConfig
    BITFIELD bThumped : 1;  // 438 0
    BITFIELD bInvulnerableBody : 1;  // 438 0
    class FVector desiredMovement;  // 43C 0
    FLOAT lastUpdateTime;  // 448 0
    BITFIELD bIsFemale : 1;  // 44C 0
    BITFIELD bAutoActivate : 1;  // 44C 2000000 CPF_EditorData
    BITFIELD bCanPickupInventory : 1;  // 44C 2000000 CPF_EditorData
    BITFIELD bUpdatingDisplay : 1;  // 44C 2000000 CPF_EditorData
    BITFIELD bAmbientCreature : 1;  // 44C 2000000 CPF_EditorData
    BITFIELD bLOSHearing : 1;  // 44C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bSameZoneHearing : 1;  // 44C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bAdjacentZoneHearing : 1;  // 44C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bMuffledHearing : 1;  // 44C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bAroundCornerHearing : 1;  // 44C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bRollToDesired : 1;  // 44C 2000000 CPF_EditorData
    BITFIELD bIgnorePlayFiring : 1;  // 44C 2000000 CPF_EditorData
    BITFIELD bStationary : 1;  // 44C 2000000 CPF_EditorData
    BITFIELD bCachedRelevant : 1;  // 44C 2000000 CPF_EditorData
    BITFIELD bUseCompressedPosition : 1;  // 44C 2000000 CPF_EditorData
    BITFIELD bHideRegularHUD : 1;  // 44C 0
    BITFIELD bSpecialHUD : 1;  // 44C 0
    BITFIELD bSpecialCrosshair : 1;  // 44C 0
    BITFIELD bSpecialCalcView : 1;  // 44C 2000000 CPF_EditorData
    BITFIELD bIsTyping : 1;  // 44C 2000000 CPF_EditorData
    BITFIELD bScriptPostRender : 1;  // 44C 2000000 CPF_EditorData
    BITFIELD bCanUse : 1;  // 44C 2000000 CPF_EditorData
    BITFIELD bSuperSize : 1;  // 44C 2000000 CPF_EditorData
    BYTE FlashCount;  // 450 2000000 CPF_EditorData
    BYTE Visibility;  // 451 2000000 CPF_EditorData
    BYTE LastRelevantValue;  // 452 2000 CPF_Transient
    FLOAT DesiredSpeed;  // 454 0
    FLOAT MaxDesiredSpeed;  // 458 0
    FName AIScriptTag;  // 45C 2000001 CPF_Edit CPF_EditorData
    FLOAT HearingThreshold;  // 460 2000001 CPF_Edit CPF_EditorData
    FLOAT Alertness;  // 464 2000001 CPF_Edit CPF_EditorData
    FLOAT SightRadius;  // 468 2000001 CPF_Edit CPF_EditorData
    FLOAT PeripheralVision;  // 46C 2000001 CPF_Edit CPF_EditorData
    FLOAT SkillModifier;  // 470 2000001 CPF_Edit CPF_EditorData
    FLOAT AvgPhysicsTime;  // 474 2000002 CPF_Const CPF_EditorData
    FLOAT MeleeRange;  // 478 2000000 CPF_EditorData
    FLOAT NavigationPointRange;  // 47C 2000000 CPF_EditorData
    class ANavigationPoint* Anchor;  // 480 2000000 CPF_EditorData
    class ANavigationPoint* LastAnchor;  // 484 2000002 CPF_Const CPF_EditorData
    FLOAT FindAnchorFailedTime;  // 488 2000000 CPF_EditorData
    FLOAT LastValidAnchorTime;  // 48C 2000000 CPF_EditorData
    FLOAT DestinationOffset;  // 490 2000000 CPF_EditorData
    FLOAT NextPathRadius;  // 494 2000000 CPF_EditorData
    class FVector SerpentineDir;  // 498 2000000 CPF_EditorData
    FLOAT SerpentineDist;  // 4A4 0
    FLOAT SerpentineTime;  // 4A8 2000000 CPF_EditorData
    FLOAT UncrouchTime;  // 4AC 2000002 CPF_Const CPF_EditorData
    FLOAT SpawnTime;  // 4B0 0
    INT LastRelevantTick;  // 4B4 2000 CPF_Transient
    FLOAT GroundSpeed;  // 4B8 2000000 CPF_EditorData
    FLOAT WaterSpeed;  // 4BC 2000000 CPF_EditorData
    FLOAT AirSpeed;  // 4C0 2000000 CPF_EditorData
    FLOAT LadderSpeed;  // 4C4 2000000 CPF_EditorData
    FLOAT AccelRate;  // 4C8 2000000 CPF_EditorData
    FLOAT JumpZ;  // 4CC 2000000 CPF_EditorData
    FLOAT AirControl;  // 4D0 2000000 CPF_EditorData
    FLOAT WalkingPct;  // 4D4 2000000 CPF_EditorData
    FLOAT CrouchedPct;  // 4D8 2000000 CPF_EditorData
    FLOAT MaxFallSpeed;  // 4DC 2000000 CPF_EditorData
    class FVector ConstantAcceleration;  // 4E0 2000000 CPF_EditorData
    INT PitchUpLimitBehindView;  // 4EC 1 CPF_Edit
    INT PitchUpLimitFirstPersonView;  // 4F0 1 CPF_Edit
    INT PitchDownLimit;  // 4F4 1 CPF_Edit
    class FString OwnerName;  // 4F8 2400000 CPF_NeedCtorLink CPF_EditorData
    FLOAT BaseEyeHeight;  // 500 2000000 CPF_EditorData
    FLOAT EyeHeight;  // 504 2000000 CPF_EditorData
    class FVector Floor;  // 508 2000000 CPF_EditorData
    FLOAT SplashTime;  // 514 2000000 CPF_EditorData
    FLOAT CrouchHeight;  // 518 2000000 CPF_EditorData
    FLOAT CrouchRadius;  // 51C 2000000 CPF_EditorData
    FLOAT OldZ;  // 520 2000000 CPF_EditorData
    class APhysicsVolume* HeadVolume;  // 524 2000000 CPF_EditorData
    FLOAT BreathTime;  // 528 2000000 CPF_EditorData
    FLOAT UnderWaterTime;  // 52C 2000000 CPF_EditorData
    FLOAT LastPainTime;  // 530 2000000 CPF_EditorData
    class UClass* ReducedDamageType;  // 534 2000000 CPF_EditorData
    FLOAT HeadRadius;  // 538 2000000 CPF_EditorData
    FLOAT HeadHeight;  // 53C 2000000 CPF_EditorData
    FLOAT HeadScale;  // 540 0
    class FVector noise1spot;  // 544 2 CPF_Const
    FLOAT noise1time;  // 550 2 CPF_Const
    class APawn* noise1other;  // 554 2 CPF_Const
    FLOAT noise1loudness;  // 558 2 CPF_Const
    class FVector noise2spot;  // 55C 2 CPF_Const
    FLOAT noise2time;  // 568 2 CPF_Const
    class APawn* noise2other;  // 56C 2 CPF_Const
    FLOAT noise2loudness;  // 570 2 CPF_Const
    FLOAT LastPainSound;  // 574 0
    FLOAT Bob;  // 578 44000 CPF_Config CPF_GlobalConfig
    FLOAT LandBob;  // 57C 0
    FLOAT AppliedBob;  // 580 0
    FLOAT bobtime;  // 584 0
    class FVector WalkBob;  // 588 0
    FLOAT SoundDampening;  // 594 0
    FLOAT DamageScaling;  // 598 0
    FLOAT AmbientSoundScaling;  // 59C 44000 CPF_Config CPF_GlobalConfig
    class FString MenuName;  // 5A0 2408000 CPF_Localized CPF_NeedCtorLink CPF_EditorData
    class AProjector* Shadow;  // 5A8 0
    class UClass* BloodEffect;  // 5AC 0
    class UClass* LowGoreBlood;  // 5B0 0
    class UClass* ControllerClass;  // 5B4 2000000 CPF_EditorData
    class ALadderVolume* OnLadder;  // 5B8 2000000 CPF_EditorData
    FName LandMovementState;  // 5BC 2000000 CPF_EditorData
    FName WaterMovementState;  // 5C0 2000000 CPF_EditorData
    class APlayerStart* LastStartSpot;  // 5C4 2000000 CPF_EditorData
    FLOAT LastStartTime;  // 5C8 0
    class FVector TakeHitLocation;  // 5CC 2000000 CPF_EditorData
    class UClass* HitDamageType;  // 5D8 2000000 CPF_EditorData
    class FVector TearOffMomentum;  // 5DC 2000000 CPF_EditorData
    BYTE OldPhysics;  // 5E8 0
    BITFIELD bPhysicsAnimUpdate : 1;  // 5EC 0
    BITFIELD bWasCrouched : 1;  // 5EC 0
    BITFIELD bWasWalking : 1;  // 5EC 0
    BITFIELD bWasOnGround : 1;  // 5EC 0
    BITFIELD bInitializeAnimation : 1;  // 5EC 0
    BITFIELD bPlayedDeath : 1;  // 5EC 0
    BITFIELD bIsIdle : 1;  // 5EC 2000000 CPF_EditorData
    BITFIELD bWaitForAnim : 1;  // 5EC 2000000 CPF_EditorData
    BITFIELD bReverseRun : 1;  // 5EC 2 CPF_Const
    BITFIELD bDoTorsoTwist : 1;  // 5EC 0
    BITFIELD FootTurning : 1;  // 5EC 2 CPF_Const
    BITFIELD FootStill : 1;  // 5EC 2 CPF_Const
    BYTE ViewPitch;  // 5F0 2000002 CPF_Const CPF_EditorData
    INT SmoothViewPitch;  // 5F4 0
    INT SmoothViewYaw;  // 5F8 0
    INT OldRotYaw;  // 5FC 2000000 CPF_EditorData
    class FVector OldAcceleration;  // 600 0
    FLOAT BlendChangeTime;  // 60C 2000001 CPF_Edit CPF_EditorData
    FLOAT MovementBlendStartTime;  // 610 2000000 CPF_EditorData
    FLOAT ForwardStrafeBias;  // 614 2000000 CPF_EditorData
    FLOAT BackwardStrafeBias;  // 618 2000000 CPF_EditorData
    INT OldAnimDir;  // 61C 2 CPF_Const
    class FVector OldVelocity;  // 620 2 CPF_Const
    FLOAT IdleTime;  // 62C 0
    INT FootRot;  // 630 2000002 CPF_Const CPF_EditorData
    INT TurnDir;  // 634 2 CPF_Const
    FLOAT ShieldStrength;  // 638 2002001 CPF_Edit CPF_Transient CPF_EditorData
    struct FHitFXData HitFx[8];  // 63C 1 CPF_Edit
    INT HitFxTicker;  // 6FC 2000 CPF_Transient
    struct FCompressedPosition PawnPosition;  // 700 2000 CPF_Transient
    class AController* DelayedDamageInstigatorController;  // 724 0
    class AController* LastHitBy;  // 728 2000000 CPF_EditorData
    FLOAT MinFlySpeed;  // 72C 0
    FLOAT MaxRotation;  // 730 2000000 CPF_EditorData
    BITFIELD bIsPreviewPawn : 1;  // 734 0
    BITFIELD bIsJumping : 1;  // 734 2000 CPF_Transient
    virtual ~APawn(void);
    virtual unsigned int GetCPPSize(void);
    virtual int ShouldUpdateRelativeLocation(void);
    virtual float GetNetPriority(class FVector &,class FVector &,class AActor *,float,float);
    virtual int ShouldTrace(class AActor *,unsigned long);
    virtual void NotifyBump(class AActor *);
    virtual void SetBase(class AActor *,class FVector,int);
    virtual void NotifyAnimEnd(int);
    virtual int CheckOwnerUpdated(void);
    virtual void TickAuthoritative(float);
    virtual void TickSimulated(float);
    virtual void TickSpecial(float);
    virtual int PlayerControlled(void);
    virtual int DelayScriptReplication(float);
    virtual void RenderEditorSelected(class FLevelSceneNode *,class FRenderInterface *,class FDynamicActor *);
    virtual float GetAmbientVolume(float);
    virtual void SetZone(int,int);
    virtual void performPhysics(float);
    virtual void processHitWall(class FVector,class AActor *);
    virtual void processLanded(class FVector,class AActor *,float,int);
    virtual void physFalling(float,int);
    virtual void physWalking(float,int);
    virtual void physFlying(float,int);
    virtual class FRotator FindSlopeRotation(class FVector,class FRotator);
    virtual void SmoothHitWall(class FVector,class AActor *);
    virtual void stepUp(class FVector,class FVector,class FVector,struct FCheckResult &);
    virtual void CheckForErrors(void);
    virtual void PostRender(class FLevelSceneNode *,class FRenderInterface *);
    virtual class APawn * GetAPawn(void);
    virtual int IsPlayer(void)const ;
    virtual float GetHealth(void);
    virtual void SetMoveTimer(class FVector);
    virtual int MoveToward(class FVector const &,class AActor *,float);
    virtual void RotateToward(class AActor *,class FVector);
    virtual int ReachedDesiredRotation(void);
    virtual int SharingVehicleWith(class APawn *);
    virtual int pointReachable(class FVector,int);
    virtual int actorReachable(class AActor *,int,int);
    virtual int HurtByVolume(class AActor *);
    virtual void physLadder(float,int);
    virtual void physicsRotation(float,class FVector);
    virtual void UpdateMovementAnimation(float);
    virtual int IsLocalPlayer(void);
    virtual int IsRemotePlayer(void);
    virtual int IsNPC(void);
    virtual float GetJumpZ(void);
  private:
    virtual void PlayIdle(void);
  public:
    APawn(class APawn const &);
    APawn(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class APawn & operator=(class APawn const &);
    int CanCrouchWalk(class FVector const &,class FVector const &,class AActor *);
    class ANavigationPoint * CheckDetour(class ANavigationPoint *,class ANavigationPoint *,int);
    class FVector CheckForLedges(class FVector,class FVector,class FVector,int &,int &);
    void ClearSerpentine(void);
    void Crouch(int);
    enum ETestMoveResult FindBestJump(class FVector);
    enum ETestMoveResult FindJumpUp(class FVector);
    int Get4WayDirection(void);
    float GetMaxSpeed(void);
    enum ETestMoveResult HitGoal(class AActor *);
    static void CDECL InternalConstructor(void *);
    int IsHumanControlled(void)const ;
    int IsLocallyControlled(void)const ;
    class FVector NewFallVelocity(class FVector,class FVector,float);
    int PickWallAdjust(class FVector,class AActor *);
    int Reachable(class FVector,class AActor *);
    int ReachedDestination(class FVector,class AActor *,float);
    void SetAnchor(class ANavigationPoint *);
    void StartNewSerpentine(class FVector,class FVector);
    static class UClass * CDECL StaticClass(void);
    class FVector SuggestJumpVelocity(class FVector,float,float);
    void UnCrouch(int);
    void UpdateEyeHeight(float);
    int ValidAnchor(void);
    void ZeroMovementAlpha(int,int,float);
    class ANavigationPoint * breadthPathTo(float (__cdecl*)(class ANavigationPoint *,class APawn *,float),class ANavigationPoint *,int,float *,int);
    int calcMoveFlags(void);
    void eventBreathTimer(void);
    void eventChangeAnimation(void);
    unsigned long eventDoJump(void);
    void eventEndCrouch(float);
    float eventGetJumpZ(void);
    void eventHeadVolumeChange(class APhysicsVolume *);
    unsigned long eventIsPlayerPawn(void);
    unsigned long eventIsRotationFrozen(void);
    void eventModifyVelocity(float,class FVector);
    void eventPlayDying(class UClass *,class FVector);
    void eventPlayFalling(void);
    void eventPlayJump(void);
    void eventPlayLandingAnimation(float);
    void eventPostRender2D(class UCanvas *,float,float);
    void eventSetAnimAction(class FName);
    void eventSetHeadScale(float);
    void eventSetWalking(unsigned long);
    void eventStartCrouch(float);
    void execForceCrouch(struct FFrame &,void * const);
    void execGet4WayDirection(struct FFrame &,void * const);
    void execGetJumpZ(struct FFrame &,void * const);
    void execIsLocalPlayer(struct FFrame &,void * const);
    void execIsNPC(struct FFrame &,void * const);
    void execIsRemotePlayer(struct FFrame &,void * const);
    void execReachedDestination(struct FFrame &,void * const);
    void execSetTwistLook(struct FFrame &,void * const);
    void execSetViewPitch(struct FFrame &,void * const);
    float findPathToward(class AActor *,class FVector,float (__cdecl*)(class ANavigationPoint *,class APawn *,float),float,int);
    enum ETestMoveResult flyMove(class FVector,class AActor *,float);
    int flyReachable(class FVector,int,class AActor *);
    enum ETestMoveResult jumpLanding(class FVector,int);
    int ladderReachable(class FVector,int,class AActor *);
    void physHovering(float,int);
    void physJumping(float,int);
    void physSpider(float,int);
    void physSwimming(float,int);
    void startNewPhysics(float,int);
    void startSwimming(class FVector,class FVector,float,float,int);
    enum ETestMoveResult swimMove(class FVector,class AActor *,float);
    int swimReachable(class FVector,int,class AActor *);
    enum ETestMoveResult walkMove(class FVector,struct FCheckResult &,class AActor *,float);
    int walkReachable(class FVector,int,class AActor *);
  private:
    int Pick3DWallAdjust(class FVector,class AActor *);
    void PlayLand(void);
    void PlayRunning(void);
    static class UClass PrivateStaticClass;
    void SetTwistLook(int,int);
    void SpiderstepUp(class FVector,class FVector,struct FCheckResult &);
    float Swim(class FVector,struct FCheckResult &);
    void UpdateInAir(void);
    void UpdateOnGround(void);
    void UpdateSwimming(void);
    void UpdateTwistLook(float);
    void calcVelocity(class FVector,float,float,float,int,int,int);
    int checkFloor(class FVector,struct FCheckResult &);
    int findNewFloor(class FVector,float,float,int);
    class FVector findWaterLine(class FVector,class FVector);
};
AUTOGENERATE_FUNCTION(APawn,0,execForceCrouch)
AUTOGENERATE_FUNCTION(APawn,0,execGet4WayDirection)
AUTOGENERATE_FUNCTION(APawn,0,execGetJumpZ)
AUTOGENERATE_FUNCTION(APawn,0,execIsLocalPlayer)
AUTOGENERATE_FUNCTION(APawn,0,execIsNPC)
AUTOGENERATE_FUNCTION(APawn,0,execIsRemotePlayer)
AUTOGENERATE_FUNCTION(APawn,0,execReachedDestination)
AUTOGENERATE_FUNCTION(APawn,0,execSetTwistLook)
AUTOGENERATE_FUNCTION(APawn,0,execSetViewPitch)


//------------------------------------------------------------------------------
//  SBAnimatedPawn
//------------------------------------------------------------------------------

enum SBAnimationType {
  SBAnimType_None = 0,
  SBAnimType_Idle = 1,
  SBAnimType_Emote = 2,
  SBAnimType_Movement = 3,
  SBAnimType_LightWound = 4,
  SBAnimType_Action = 5,
  SBAnimType_SpecialAction = 6,
  SBAnimType_HeavyWound = 7,
  SBAnimType_Death = 8,
  SBAnimType_AlwaysPlayed = 9,
  SBAnimType_Turning = 10,
  SBAnimType_Emerging = 11
};

enum EPawnSound {
  EPS_Command_Enemies = 0,
  EPS_Command_GetReady = 1,
  EPS_Command_Charge = 2,
  EPS_Command_Attack = 3,
  EPS_Command_Retreat = 4,
  EPS_Command_Follow = 5,
  EPS_Command_Wait = 6,
  EPS_Command_ComeOn = 7,
  EPS_Command_Assistance = 8,
  EPS_Command_OverHere = 9,
  EPS_Command_BackOff = 10,
  EPS_Command_North = 11,
  EPS_Command_East = 12,
  EPS_Command_West = 13,
  EPS_Command_South = 14,
  EPS_Command_Flank = 15,
  EPS_Command_GoRound = 16,
  EPS_Action = 17,
  EPS_CriticalWound = 18,
  EPS_Death = 19,
  EPS_Interaction_No = 20,
  EPS_Interaction_Yes = 21,
  EPS_Interaction_Greet = 22,
  EPS_Interaction_Bye = 23,
  EPS_Interaction_Thanks = 24,
  EPS_Interaction_PwnieQues = 25,
  EPS_Interaction_PwnieExcl = 26,
  EPS_Interaction_Trade = 27,
  EPS_Interaction_Excuse = 28,
  EPS_Interaction_Wait = 29,
  EPS_Interaction_Veto = 30,
  EPS_Interaction_Sarcasm = 31,
  EPS_Interaction_Hey = 32,
  EPS_Interaction_Oldskool = 33,
  EPS_Interaction_Outfit = 34,
  EPS_Interaction_FashionPolice = 35,
  EPS_Interaction_Jazz = 36,
  EPS_Sound_Clap = 37,
  EPS_Sound_Kiss = 38,
  EPS_Sound_Sigh = 39,
  EPS_Sound_Bored = 40,
  EPS_Sound_Pain = 41,
  EPS_Sound_Pst = 42,
  EPS_Sound_Angry = 43,
  EPS_Sound_Cry = 44,
  EPS_Sound_Maniacal = 45,
  EPS_Sound_Laugh = 46,
  EPS_Sound_Cough = 47,
  EPS_Sound_Cheer = 48,
  EPS_Sound_WhistleHappy = 49,
  EPS_Sound_WhistleAttention = 50,
  EPS_Sound_WhistleMusic = 51,
  EPS_Sound_WhistleNote = 52,
  EPS_Sound_Ahh = 53,
  EPS_Sound_Gasp = 54,
  EPS_Sound_Stretch = 55,
  EPS_Sound_Huf = 56,
  EPS_Sound_Bah = 57,
  EPS_Sound_Dismiss = 58,
  EPS_Taunt_Oracle = 59,
  EPS_Taunt_Battle = 60,
  EPS_Taunt_Praise = 61,
  EPS_Taunt_Mock = 62,
  EPS_Taunt_Attention = 63,
  EPS_Taunt_Death = 64,
  EPS_Taunt_Stop = 65,
  EPS_Taunt_AdmireRoom = 66,
  EPS_Taunt_Victory = 67,
  EPS_Taunt_Survive = 68,
  EPS_Taunt_Again = 69,
  EPS_Taunt_Try = 70,
  EPS_Taunt_LetsGo = 71,
  EPS_Taunt_RTFM = 72,
  EPS_Taunt_Unique = 73,
  EPS_Wound = 74,
  EPS_Goodbye = 75,
  EPS_Greet = 76,
  EPS_Thanks = 77,
  EPS_Yay = 78,
  EPS_Weee = 79,
  EPS_NONE = 80
};

// FSBAttachmentInfo 1 ( CLASS_Abstract )
struct DLL_IMPORT FSBAttachmentInfo {
  public:
    class FString AttachmentName;  // 0 400001 CPF_Edit CPF_NeedCtorLink
    class FString meshName;  // 8 400001 CPF_Edit CPF_NeedCtorLink
    FName AttachmentBoneTag;  // 10 1 CPF_Edit
    class FVector ScaleFactor;  // 14 1 CPF_Edit
    class FRotator Orientation;  // 20 1 CPF_Edit
    class FVector PosOffset;  // 2C 1 CPF_Edit
    BITFIELD IgnoreParentRotation : 1;  // 38 1 CPF_Edit
    FSBAttachmentInfo(struct FSBAttachmentInfo const &);
    FSBAttachmentInfo(void);
    ~FSBAttachmentInfo(void);
    struct FSBAttachmentInfo & operator=(struct FSBAttachmentInfo const &);
};

// FSBAnimationParameters 1 ( CLASS_Abstract )
struct DLL_IMPORT FSBAnimationParameters {
  public:
    FLOAT BlendFactor;  // 0 0
    FLOAT BlendInTime;  // 4 0
    FLOAT BlendOutTime;  // 8 0
    FLOAT AnimSpeed;  // C 0
    FLOAT StartFrame;  // 10 0
    BITFIELD Looped : 1;  // 14 0
    BITFIELD Reversed : 1;  // 14 0
    struct FSBAnimationParameters & operator=(struct FSBAnimationParameters const &);
};

// FSBAnimationStackEntry 1 ( CLASS_Abstract )
struct DLL_IMPORT FSBAnimationStackEntry {
  public:
    FName AnimationName;  // 0 0
    TArray<INT> ActionFlags;  // 4 400000 CPF_NeedCtorLink
    BYTE directionFlag;  // 10 0
    BYTE WeaponFlag;  // 11 0
    BYTE VariationNumber;  // 12 0
    struct FSBAnimationParameters AnimParameters;  // 14 0
    BITFIELD OverrideSequenceAnimTypes : 1;  // 2C 0
    BITFIELD IgnoreNotifies : 1;  // 2C 0
    FSBAnimationStackEntry(struct FSBAnimationStackEntry const &);
    FSBAnimationStackEntry(void);
    ~FSBAnimationStackEntry(void);
    struct FSBAnimationStackEntry & operator=(struct FSBAnimationStackEntry const &);
};

// FSBAnimationTypeStack 1 ( CLASS_Abstract )
struct DLL_IMPORT FSBAnimationTypeStack {
  public:
    BYTE AnimType;  // 0 0
    TArray<struct FSBAnimationStackEntry> AnimationStack;  // 4 400000 CPF_NeedCtorLink
    FSBAnimationTypeStack(struct FSBAnimationTypeStack const &);
    FSBAnimationTypeStack(void);
    ~FSBAnimationTypeStack(void);
    struct FSBAnimationTypeStack & operator=(struct FSBAnimationTypeStack const &);
};

// FSBDirectionFlagSet 1 ( CLASS_Abstract )
struct DLL_IMPORT FSBDirectionFlagSet {
  public:
    INT directionFlag;  // 0 0
    FLOAT directionBlendFactor;  // 4 0
    struct FSBDirectionFlagSet & operator=(struct FSBDirectionFlagSet const &);
};

//  SBAnimatedPawn.RemoveAllAttachments 20400 0 ( FUNC_Native FUNC_Public )
struct ASBAnimatedPawn_execRemoveAllAttachments_Parms {
};


//  SBAnimatedPawn.InitializeAttachmentModel 20400 0 ( FUNC_Native FUNC_Public )
struct ASBAnimatedPawn_execInitializeAttachmentModel_Parms {
  class FString attachmentType;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString boneTag;  // 8 400080 CPF_Parm CPF_NeedCtorLink
  class UObject* MeshObject;  // 10 80 CPF_Parm
};


//  SBAnimatedPawn.PauseAnim 20400 0 ( FUNC_Native FUNC_Public )
struct ASBAnimatedPawn_execPauseAnim_Parms {
  BITFIELD pause : 1;  // 0 80 CPF_Parm
  BYTE AnimType;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  SBAnimatedPawn.PlayAnimType 20400 0 ( FUNC_Native FUNC_Public )
struct ASBAnimatedPawn_execPlayAnimType_Parms {
  FName animName;  // 0 80 CPF_Parm
  BYTE AnimType;  // 4 80 CPF_Parm
  FLOAT Rate;  // 8 80 CPF_Parm
  FLOAT TweenTime;  // C 80 CPF_Parm
  BITFIELD loop : 1;  // 10 80 CPF_Parm
  BITFIELD keepLastFrame : 1;  // 14 80 CPF_Parm
};


//  SBAnimatedPawn.ClearAnimsByType 20400 0 ( FUNC_Native FUNC_Public )
struct ASBAnimatedPawn_execClearAnimsByType_Parms {
  BYTE animationTypeId;  // 0 80 CPF_Parm
  FLOAT blendOutRate;  // 4 80 CPF_Parm
};


//  SBAnimatedPawn.ClearPawnAnims 20400 0 ( FUNC_Native FUNC_Public )
struct ASBAnimatedPawn_execClearPawnAnims_Parms {
};


//  SBAnimatedPawn.ClearAnims 20002 0 ( FUNC_Defined FUNC_Public )
struct ASBAnimatedPawn_execClearAnims_Parms {
};


//  SBAnimatedPawn.AnimationFlagsActive 20400 0 ( FUNC_Native FUNC_Public )
struct ASBAnimatedPawn_execAnimationFlagsActive_Parms {
  TArray<INT> ActionFlags;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  INT directionFlag;  // C 90 CPF_OptionalParm CPF_Parm
  INT WeaponFlag;  // 10 90 CPF_OptionalParm CPF_Parm
  INT varNumber;  // 14 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 18 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  SBAnimatedPawn.AnimationPlaying 20400 0 ( FUNC_Native FUNC_Public )
struct ASBAnimatedPawn_execAnimationPlaying_Parms {
  FName AnimationName;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  SBAnimatedPawn.FadeInQueuedAnimations 20400 0 ( FUNC_Native FUNC_Public )
struct ASBAnimatedPawn_execFadeInQueuedAnimations_Parms {
  FLOAT FadeInTime;  // 0 80 CPF_Parm
  BITFIELD keepLastFrame : 1;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  SBAnimatedPawn.PlayQueuedAnimations 20400 0 ( FUNC_Native FUNC_Public )
struct ASBAnimatedPawn_execPlayQueuedAnimations_Parms {
  BITFIELD forceOverwrite : 1;  // 0 80 CPF_Parm
  BITFIELD keepLastFrame : 1;  // 4 80 CPF_Parm
  BITFIELD alowImmediateCull : 1;  // 8 90 CPF_OptionalParm CPF_Parm
};


//  SBAnimatedPawn.QueueAnimation 20400 0 ( FUNC_Native FUNC_Public )
struct ASBAnimatedPawn_execQueueAnimation_Parms {
  TArray<INT> ActionFlags;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  INT variationNr;  // C 80 CPF_Parm
  FLOAT AnimSpeed;  // 10 80 CPF_Parm
  FLOAT BlendInTime;  // 14 80 CPF_Parm
  FLOAT BlendOutTime;  // 18 80 CPF_Parm
  BITFIELD isLooping : 1;  // 1C 80 CPF_Parm
  INT AnimationType;  // 20 890 CPF_OptionalParm CPF_Parm CPF_CoerceParm
};


//  SBAnimatedPawn.GetMovementDirectionVector 20400 0 ( FUNC_Native FUNC_Public )
struct ASBAnimatedPawn_execGetMovementDirectionVector_Parms {
  class FVector ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  SBAnimatedPawn.GetAnimationDuration 20400 0 ( FUNC_Native FUNC_Public )
struct ASBAnimatedPawn_execGetAnimationDuration_Parms {
  TArray<INT> ActionFlags;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  INT variationNr;  // C 80 CPF_Parm
  FLOAT AnimSpeed;  // 10 80 CPF_Parm
  FLOAT ReturnValue;  // 14 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  SBAnimatedPawn.OnSheatheWeapon 20800 0 ( FUNC_Event FUNC_Public )
struct ASBAnimatedPawn_eventOnSheatheWeapon_Parms {
  BYTE WeaponFlag;  // 0 80 CPF_Parm
};


//  SBAnimatedPawn.OnDrawWeapon 20800 0 ( FUNC_Event FUNC_Public )
struct ASBAnimatedPawn_eventOnDrawWeapon_Parms {
  BYTE WeaponFlag;  // 0 80 CPF_Parm
};


//  SBAnimatedPawn.PlayTopLevelAnim 20002 0 ( FUNC_Defined FUNC_Public )
struct ASBAnimatedPawn_execPlayTopLevelAnim_Parms {
  FName animName;  // 0 80 CPF_Parm
  FLOAT Rate;  // 4 80 CPF_Parm
  FLOAT TweenTime;  // 8 80 CPF_Parm
  BITFIELD loop : 1;  // C 80 CPF_Parm
  BITFIELD keepLastFrame : 1;  // 10 80 CPF_Parm
};


//  SBAnimatedPawn.GetEquippedWeaponFlag 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ASBAnimatedPawn_eventGetEquippedWeaponFlag_Parms {
  BYTE ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  SBAnimatedPawn.sv_HackDamageActions 20000 0 ( FUNC_Public )
struct ASBAnimatedPawn_execsv_HackDamageActions_Parms {
  FLOAT aDamageFactor;  // 0 80 CPF_Parm
};


//  SBAnimatedPawn.FreezeRotation 20800 0 ( FUNC_Event FUNC_Public )
struct ASBAnimatedPawn_eventFreezeRotation_Parms {
  BITFIELD aFreezeFlag : 1;  // 0 80 CPF_Parm
};


//  SBAnimatedPawn.FreezeMovement 20800 0 ( FUNC_Event FUNC_Public )
struct ASBAnimatedPawn_eventFreezeMovement_Parms {
  BITFIELD aFreezeFlag : 1;  // 0 80 CPF_Parm
};


//  SBAnimatedPawn.ExecuteDeath 20002 0 ( FUNC_Defined FUNC_Public )
struct ASBAnimatedPawn_execExecuteDeath_Parms {
  class APawn* instigatedBy;  // 0 80 CPF_Parm
  class FVector HitLocation;  // 4 80 CPF_Parm
  class FVector Momentum;  // 10 80 CPF_Parm
  class UClass* DamageType;  // 1C 80 CPF_Parm
};


//  SBAnimatedPawn.TakeDamage 20002 0 ( FUNC_Defined FUNC_Public )
struct ASBAnimatedPawn_execTakeDamage_Parms {
  INT Damage;  // 0 80 CPF_Parm
  class APawn* instigatedBy;  // 4 80 CPF_Parm
  class FVector HitLocation;  // 8 80 CPF_Parm
  class FVector Momentum;  // 14 80 CPF_Parm
  class UClass* DamageType;  // 20 80 CPF_Parm
};


//  SBAnimatedPawn.Died 20002 0 ( FUNC_Defined FUNC_Public )
struct ASBAnimatedPawn_execDied_Parms {
  class AController* Killer;  // 0 80 CPF_Parm
  class UClass* DamageType;  // 4 80 CPF_Parm
  class FVector HitLocation;  // 8 80 CPF_Parm
};


// ASBAnimatedPawn 236 ( CLASS_Compiled CLASS_Config CLASS_Parsed CLASS_Localized CLASS_NoUserCreate )
class DLL_IMPORT ASBAnimatedPawn : public APawn {
  public:
    TArray<struct FSBAttachmentInfo> Attachments;  // 738 402000 CPF_Transient CPF_NeedCtorLink
    TArray<struct FSBDirectionFlagSet> animDirectionSet;  // 744 402000 CPF_Transient CPF_NeedCtorLink
    TArray<struct FSBAnimationTypeStack> AnimTypeStacks;  // 750 400000 CPF_NeedCtorLink
    INT xMovement;  // 75C 2000 CPF_Transient
    INT yMovement;  // 760 2000 CPF_Transient
    INT zMovement;  // 764 2000 CPF_Transient
    INT oldXMovement;  // 768 2000 CPF_Transient
    INT oldYMovement;  // 76C 2000 CPF_Transient
    INT oldZMovement;  // 770 2000 CPF_Transient
    BITFIELD bSittingOnChair : 1;  // 774 2002000 CPF_Transient CPF_EditorData
    BITFIELD bAnimationPaused : 1;  // 774 2002000 CPF_Transient CPF_EditorData
    BITFIELD bPreviouslyRunning : 1;  // 774 2000 CPF_Transient
    virtual ~ASBAnimatedPawn(void);
    virtual unsigned int GetCPPSize(void);
    ASBAnimatedPawn(class ASBAnimatedPawn const &);
    ASBAnimatedPawn(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ASBAnimatedPawn & operator=(class ASBAnimatedPawn const &);
    bool ActiveAnimationHasActionFlag(int,int,float);
    bool ActiveAnimationHasActionFlag(int,float);
    class ASBAttachment * AddAttachmentModel(class UObject *,class FName &);
    void AddDirection(unsigned long,float);
    int AnimationPlaying(class TArray<int> const &,int,int,int,int);
    int AnimationPlaying(class FName const &,int);
    int AnimationPlaying(class SBAnimationDescriptor const &,int);
    bool AnimationTypePlaying(int);
    bool AnimationUsesDirection(class SBAnimationDescriptor const &);
    void BlendToAlpha(int,float,float);
    class ASBAttachment * CreateAttachment(class FString &);
    static bool CDECL DescriptorWeaponFlagsCompatible(class SBAnimationDescriptor const &,class SBAnimationDescriptor const &);
    bool DirectionalAnimationsActive(class SBAnimationDescriptor &,int);
    void FadeInQueuedAnimations(float,bool);
    int GetActiveAnimationWithActionFlag(int,int,float);
    int GetActiveAnimationWithActionFlag(int,float);
    void GetAnimDirectionFlagX(int &,int);
    void GetAnimDirectionFlagY(int &,int);
    void GetAnimDirectionFlagZ(int &,int);
    float GetAnimationDuration(class TArray<int> const &,int,float);
    float GetAnimationLength(class SBAnimationDescriptor const &,float);
    class FName GetAnimationName(class SBAnimationDescriptor &);
    int GetAnimationTypeStackIndex(int);
    class TArray<int> const & GetAnimationVariations(class TArray<int> const &);
    class ASBAttachment * GetAttachment(class FName const &,class FName const &);
    float GetCurrentAnimTypeFrame(int);
    float GetDirectionSpeedFactor(float);
    struct FMeshAnimSeq * GetMeshAnim(class SBAnimationDescriptor &);
    void GetMovementDirectionVector(class FVector &);
    bool GetMovementSettings(bool,int &,float &);
    int GetTurnDirectionFlag(int);
    float GetTurnSpeed(int,float);
    void GetXYDirectionIndicators(class FVector const &,int &,int &,float,float);
    void GetXYJumpMovement(class FVector const &);
    void GetXYMovement(class FVector const &);
    void GetXYZMovement(class FVector const &);
    class ASBAttachment * InitializeAttachment(class FString &,class FName const &,class UObject *);
    class ASBAttachment * InitializeAttachment(class FName const &,class FName const &,class FString const &);
    int InsertEmptyAnimationsByType(int,int);
    static void CDECL InternalConstructor(void *);
    bool IsAnimationFinished(int);
    bool NameHasPackageName(class FString const &);
    void PauseAnim(int,bool);
    void PauseAnimation(int,enum SBAnimationType);
    bool PawnIsAnimating(void);
    void PlayQueuedAnims(bool,bool,bool);
    void PurgeAnimAfterTime(struct MeshAnimChannel &,float,float);
    void PurgeAnimTypeAfterTime(int,float,float);
    void PurgeAnimationsByType(int,float);
    void QueueActionAnimation(class TArray<unsigned long> const &,int,struct FSBAnimationParameters const &);
    void QueueAnimation(class SBAnimationDescriptor &,struct FSBAnimationParameters const &,bool,int);
    void QueueAnimation(struct FMeshAnimSeq *,class SBAnimationDescriptor &,struct FSBAnimationParameters const &,bool,int);
    void QueueDirectionalAnimation(class SBAnimationDescriptor &,struct FSBAnimationParameters const &,enum SBAnimationType);
    void RemoveAllAttachments(void);
    void RemoveAttachment(int,bool);
    void RemoveAttachment(class ASBAttachment *,bool);
    void ResetAnimDirectionFlags(void);
    void ReverseAnim(int,bool);
    void SetAnimSpeed(int,float);
    void SetupBlendParameters(class USkeletalMeshInstance *,int,float,float,float,int,bool,bool);
    void SetupDescriptionFromFlags(class SBAnimationDescriptor &,class TArray<int> const &,int,int,int);
    void SetupEntryFlagsFromDescription(struct FSBAnimationStackEntry &,class SBAnimationDescriptor const &);
    class ASBAttachment * SpawnAttachment(int);
    static class UClass * CDECL StaticClass(void);
    bool UseForwardMovementFactor(void);
    int ValidatedActionFlag(int);
    int ValidatedDirectionFlag(int);
    int ValidatedWeaponFlag(int);
    void eventFreezeMovement(unsigned long);
    void eventFreezeRotation(unsigned long);
    unsigned char eventGetEquippedWeaponFlag(void);
    void eventOnDrawWeapon(unsigned char);
    void eventOnSheatheWeapon(unsigned char);
    void execAnimationFlagsActive(struct FFrame &,void * const);
    void execAnimationPlaying(struct FFrame &,void * const);
    void execClearAnimsByType(struct FFrame &,void * const);
    void execClearPawnAnims(struct FFrame &,void * const);
    void execFadeInQueuedAnimations(struct FFrame &,void * const);
    void execGetAnimationDuration(struct FFrame &,void * const);
    void execGetMovementDirectionVector(struct FFrame &,void * const);
    void execInitializeAttachmentModel(struct FFrame &,void * const);
    void execPauseAnim(struct FFrame &,void * const);
    void execPlayAnimType(struct FFrame &,void * const);
    void execPlayQueuedAnimations(struct FFrame &,void * const);
    void execQueueAnimation(struct FFrame &,void * const);
    void execRemoveAllAttachments(struct FFrame &,void * const);
  protected:
    bool BuildHitDirectionFlags(class FVector const &);
    bool BuildJumpDirectionFlags(void);
    bool BuildRunDirectionFlags(void);
  private:
    void AddBoneWeights(struct MeshAnimChannel &,class TArray<float> &,float &);
    void AdjustExistingAnimation(struct FSBAnimationStackEntry &,int,int,bool);
    bool BonesAlreadyInUse(struct MeshAnimChannel &,class TArray<float> &);
    void BuildPurgeList(int,class TArray<int> &);
    void CheckForRunningAnimations(class TArray<struct FSBAnimationStackEntry> &,int);
    void CullRedundantAnimations(class USkeletalMeshInstance *,class TArray<int> &);
    void PlayStackedAnims(class USkeletalMeshInstance *,class TArray<struct FSBAnimationStackEntry> &,bool,bool,int,float,bool);
    static class UClass PrivateStaticClass;
    void PurgeAnimTypes(class TArray<int> const &,float);
    void ResolveBlendWeights(class USkeletalMeshInstance *,class TArray<int> &);
};
AUTOGENERATE_FUNCTION(ASBAnimatedPawn,0,execAnimationFlagsActive)
AUTOGENERATE_FUNCTION(ASBAnimatedPawn,0,execAnimationPlaying)
AUTOGENERATE_FUNCTION(ASBAnimatedPawn,0,execClearAnimsByType)
AUTOGENERATE_FUNCTION(ASBAnimatedPawn,0,execClearPawnAnims)
AUTOGENERATE_FUNCTION(ASBAnimatedPawn,0,execFadeInQueuedAnimations)
AUTOGENERATE_FUNCTION(ASBAnimatedPawn,0,execGetAnimationDuration)
AUTOGENERATE_FUNCTION(ASBAnimatedPawn,0,execGetMovementDirectionVector)
AUTOGENERATE_FUNCTION(ASBAnimatedPawn,0,execInitializeAttachmentModel)
AUTOGENERATE_FUNCTION(ASBAnimatedPawn,0,execPauseAnim)
AUTOGENERATE_FUNCTION(ASBAnimatedPawn,0,execPlayAnimType)
AUTOGENERATE_FUNCTION(ASBAnimatedPawn,0,execPlayQueuedAnimations)
AUTOGENERATE_FUNCTION(ASBAnimatedPawn,0,execQueueAnimation)
AUTOGENERATE_FUNCTION(ASBAnimatedPawn,0,execRemoveAllAttachments)


//------------------------------------------------------------------------------
//  Triggers
//------------------------------------------------------------------------------

// ATriggers 213 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT ATriggers : public AActor {
  public:
    virtual ~ATriggers(void);
    virtual unsigned int GetCPPSize(void);
    virtual void RenderEditorInfo(class FLevelSceneNode *,class FRenderInterface *,class FDynamicActor *);
    virtual int ReachedBy(class APawn *,class FVector);
    ATriggers(class ATriggers const &);
    ATriggers(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ATriggers & operator=(class ATriggers const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Trigger
//------------------------------------------------------------------------------

enum ETriggerType {
  TT_PlayerProximity = 0,
  TT_PawnProximity = 1,
  TT_ClassProximity = 2,
  TT_AnyProximity = 3,
  TT_Shoot = 4,
  TT_HumanPlayerProximity = 5,
  TT_LivePlayerProximity = 6
};

//  Trigger.UnTouch 20002 0 ( FUNC_Defined FUNC_Public )
struct ATrigger_execUnTouch_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Trigger.TakeDamage 20002 0 ( FUNC_Defined FUNC_Public )
struct ATrigger_execTakeDamage_Parms {
  INT Damage;  // 0 80 CPF_Parm
  class APawn* instigatedBy;  // 4 80 CPF_Parm
  class FVector HitLocation;  // 8 80 CPF_Parm
  class FVector Momentum;  // 14 80 CPF_Parm
  class UClass* DamageType;  // 20 80 CPF_Parm
};


//  Trigger.Timer 20002 0 ( FUNC_Defined FUNC_Public )
struct ATrigger_execTimer_Parms {
};


//  Trigger.Touch 20002 0 ( FUNC_Defined FUNC_Public )
struct ATrigger_execTouch_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Trigger.FindInstigator 20002 0 ( FUNC_Defined FUNC_Public )
struct ATrigger_execFindInstigator_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class AActor* ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Trigger.IsRelevant 20002 0 ( FUNC_Defined FUNC_Public )
struct ATrigger_execIsRelevant_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Trigger.UnTrigger 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ATrigger_eventUnTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


//  Trigger.Trigger 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ATrigger_eventTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


//  Trigger.CheckTouchList 20002 0 ( FUNC_Defined FUNC_Public )
struct ATrigger_execCheckTouchList_Parms {
};


//  Trigger.SpecialHandling 20002 0 ( FUNC_Defined FUNC_Public )
struct ATrigger_execSpecialHandling_Parms {
  class APawn* Other;  // 0 80 CPF_Parm
  class AActor* ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Trigger.FindTriggerActor 20002 0 ( FUNC_Defined FUNC_Public )
struct ATrigger_execFindTriggerActor_Parms {
};


//  Trigger.Reset 20002 0 ( FUNC_Defined FUNC_Public )
struct ATrigger_execReset_Parms {
};


//  Trigger.PostBeginPlay 20002 0 ( FUNC_Defined FUNC_Public )
struct ATrigger_execPostBeginPlay_Parms {
};


//  Trigger.PreBeginPlay 20002 0 ( FUNC_Defined FUNC_Public )
struct ATrigger_execPreBeginPlay_Parms {
};


//  Trigger.SelfTriggered 20002 0 ( FUNC_Defined FUNC_Public )
struct ATrigger_execSelfTriggered_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Trigger.PlayerToucherDied 20002 0 ( FUNC_Defined FUNC_Public )
struct ATrigger_execPlayerToucherDied_Parms {
  class APawn* P;  // 0 80 CPF_Parm
};


// ATrigger 232 ( CLASS_Compiled CLASS_Parsed CLASS_Localized CLASS_NoUserCreate )
class DLL_IMPORT ATrigger : public ATriggers {
  public:
    BYTE TriggerType;  // 420 1 CPF_Edit
    class FString Message;  // 424 408001 CPF_Edit CPF_Localized CPF_NeedCtorLink
    BITFIELD bTriggerOnceOnly : 1;  // 42C 1 CPF_Edit
    BITFIELD bInitiallyActive : 1;  // 42C 1 CPF_Edit
    class UClass* ClassProximityType;  // 430 1 CPF_Edit
    FLOAT RepeatTriggerTime;  // 434 2000001 CPF_Edit CPF_EditorData
    FLOAT ReTriggerDelay;  // 438 2000001 CPF_Edit CPF_EditorData
    FLOAT TriggerTime;  // 43C 0
    FLOAT DamageThreshold;  // 440 2000001 CPF_Edit CPF_EditorData
    class AActor* TriggerActor;  // 444 2000000 CPF_EditorData
    class AActor* TriggerActor2;  // 448 0
    BITFIELD bSavedInitialCollision : 1;  // 44C 0
    BITFIELD bSavedInitialActive : 1;  // 44C 0
    virtual ~ATrigger(void);
    virtual unsigned int GetCPPSize(void);
    ATrigger(class ATrigger const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ATrigger & operator=(class ATrigger const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    ATrigger(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Controller
//------------------------------------------------------------------------------

#define UCONST_Controller_LATENT_MOVETOWARD  503
//  Controller.NotifyTakeHit 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventNotifyTakeHit_Parms {
  class APawn* instigatedBy;  // 0 80 CPF_Parm
  class FVector HitLocation;  // 4 80 CPF_Parm
  INT actualDamage;  // 10 80 CPF_Parm
  class UClass* DamageType;  // 14 80 CPF_Parm
  class FVector Momentum;  // 18 80 CPF_Parm
};


//  Controller.EnemyNotVisible 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventEnemyNotVisible_Parms {
};


//  Controller.SeeMonster 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventSeeMonster_Parms {
  class APawn* Seen;  // 0 80 CPF_Parm
};


//  Controller.SeePlayer 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventSeePlayer_Parms {
  class APawn* Seen;  // 0 80 CPF_Parm
};


//  Controller.HearNoise 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventHearNoise_Parms {
  FLOAT Loudness;  // 0 80 CPF_Parm
  class AActor* NoiseMaker;  // 4 80 CPF_Parm
};


//  Controller.SetupSpecialPathAbilities 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventSetupSpecialPathAbilities_Parms {
};


//  Controller.FearThisSpot 20002 0 ( FUNC_Defined FUNC_Public )
struct AController_execFearThisSpot_Parms {
  class AAvoidMarker* aSpot;  // 0 80 CPF_Parm
};


//  Controller.UnderLift 20000 0 ( FUNC_Public )
struct AController_execUnderLift_Parms {
  class AMover* M;  // 0 80 CPF_Parm
};


//  Controller.MoverFinished 20000 0 ( FUNC_Public )
struct AController_execMoverFinished_Parms {
};


//  Controller.WaitForMover 20000 0 ( FUNC_Public )
struct AController_execWaitForMover_Parms {
  class AMover* M;  // 0 80 CPF_Parm
};


//  Controller.PrepareForMove 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventPrepareForMove_Parms {
  class ANavigationPoint* Goal;  // 0 80 CPF_Parm
  class UReachSpec* Path;  // 4 80 CPF_Parm
};


//  Controller.AdjustToss 20002 0 ( FUNC_Defined FUNC_Public )
struct AController_execAdjustToss_Parms {
  FLOAT TSpeed;  // 0 80 CPF_Parm
  class FVector Start;  // 4 80 CPF_Parm
  class FVector End;  // 10 80 CPF_Parm
  BITFIELD bNormalize : 1;  // 1C 80 CPF_Parm
  class FVector ReturnValue;  // 20 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.WouldReactToSeeing 20002 0 ( FUNC_Defined FUNC_Public )
struct AController_execWouldReactToSeeing_Parms {
  class APawn* Seen;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.WouldReactToNoise 20002 0 ( FUNC_Defined FUNC_Public )
struct AController_execWouldReactToNoise_Parms {
  FLOAT Loudness;  // 0 80 CPF_Parm
  class AActor* NoiseMaker;  // 4 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.GetMessageIndex 20002 0 ( FUNC_Defined FUNC_Public )
struct AController_execGetMessageIndex_Parms {
  FName PhraseName;  // 0 80 CPF_Parm
  BYTE ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.GetFacingDirection 20002 0 ( FUNC_Defined FUNC_Public )
struct AController_execGetFacingDirection_Parms {
  INT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.RenderOverlays 20900 0 ( FUNC_Simulated FUNC_Event FUNC_Public )
struct AController_eventRenderOverlays_Parms {
  class UCanvas* Canvas;  // 0 80 CPF_Parm
};


//  Controller.WantsSmoothedView 20002 0 ( FUNC_Defined FUNC_Public )
struct AController_execWantsSmoothedView_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.AllowDetourTo 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct AController_eventAllowDetourTo_Parms {
  class ANavigationPoint* N;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.Destroyed 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct AController_eventDestroyed_Parms {
};


//  Controller.PostBeginPlay 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct AController_eventPostBeginPlay_Parms {
};


//  Controller.PreBeginPlay 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct AController_eventPreBeginPlay_Parms {
};


//  Controller.PawnIsInPain 20000 0 ( FUNC_Public )
struct AController_execPawnIsInPain_Parms {
  class APhysicsVolume* PainVolume;  // 0 80 CPF_Parm
};


//  Controller.SetFall 20000 0 ( FUNC_Public )
struct AController_execSetFall_Parms {
};


//  Controller.SetDoubleJump 20000 0 ( FUNC_Public )
struct AController_execSetDoubleJump_Parms {
};


//  Controller.NotifyMissedJump 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventNotifyMissedJump_Parms {
};


//  Controller.NotifyJumpApex 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventNotifyJumpApex_Parms {
};


//  Controller.NotifyHitMover 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventNotifyHitMover_Parms {
  class FVector HitNormal;  // 0 80 CPF_Parm
  class AMover* Wall;  // C 80 CPF_Parm
};


//  Controller.NotifyBump 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventNotifyBump_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.NotifyFallingHitWall 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventNotifyFallingHitWall_Parms {
  class FVector HitNormal;  // 0 80 CPF_Parm
  class AActor* Wall;  // C 80 CPF_Parm
};


//  Controller.NotifyHitWall 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventNotifyHitWall_Parms {
  class FVector HitNormal;  // 0 80 CPF_Parm
  class AActor* Wall;  // C 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.NotifyPostLanded 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventNotifyPostLanded_Parms {
};


//  Controller.NotifyLanded 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventNotifyLanded_Parms {
  class FVector HitNormal;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.NotifyHeadVolumeChange 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventNotifyHeadVolumeChange_Parms {
  class APhysicsVolume* NewVolume;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.NotifyPhysicsVolumeChange 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventNotifyPhysicsVolumeChange_Parms {
  class APhysicsVolume* NewVolume;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.LongFall 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventLongFall_Parms {
};


//  Controller.WasKilledBy 20000 0 ( FUNC_Public )
struct AController_execWasKilledBy_Parms {
  class AController* Other;  // 0 80 CPF_Parm
};


//  Controller.SoakStop 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventSoakStop_Parms {
  class FString problem;  // 0 400080 CPF_Parm CPF_NeedCtorLink
};


//  Controller.AIHearSBSound 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct AController_eventAIHearSBSound_Parms {
  class AActor* Actor;  // 0 80 CPF_Parm
  class USound* s;  // 4 80 CPF_Parm
  class FVector SoundLocation;  // 8 80 CPF_Parm
  FLOAT Volume;  // 14 80 CPF_Parm
  FLOAT Pitch;  // 18 80 CPF_Parm
  FLOAT Radius;  // 1C 80 CPF_Parm
  BITFIELD Attenuate : 1;  // 20 80 CPF_Parm
  INT ReturnValue;  // 24 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.AIHearSound 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventAIHearSound_Parms {
  class AActor* Actor;  // 0 80 CPF_Parm
  INT Id;  // 4 80 CPF_Parm
  class USound* s;  // 8 80 CPF_Parm
  class FVector SoundLocation;  // C 80 CPF_Parm
  class FVector Parameters;  // 18 80 CPF_Parm
  BITFIELD Attenuate : 1;  // 24 80 CPF_Parm
};


//  Controller.AvoidCertainDeath 20002 0 ( FUNC_Defined FUNC_Public )
struct AController_execAvoidCertainDeath_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.Reset 20002 0 ( FUNC_Defined FUNC_Public )
struct AController_execReset_Parms {
};


//  Controller.GetViewRotation 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AController_execGetViewRotation_Parms {
  class FRotator ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.GetHumanReadableName 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AController_execGetHumanReadableName_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  Controller.DisplayDebug 20002 0 ( FUNC_Defined FUNC_Public )
struct AController_execDisplayDebug_Parms {
  class UCanvas* Canvas;  // 0 80 CPF_Parm
  FLOAT YL;  // 4 180 CPF_Parm CPF_OutParm
  FLOAT YPos;  // 8 180 CPF_Parm CPF_OutParm
};


//  Controller.PendingStasis 20002 0 ( FUNC_Defined FUNC_Public )
struct AController_execPendingStasis_Parms {
};


//  Controller.MissedDodge 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventMissedDodge_Parms {
};


//  Controller.MayDodgeToMoveTarget 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventMayDodgeToMoveTarget_Parms {
};


//  Controller.MayFall 20800 0 ( FUNC_Event FUNC_Public )
struct AController_eventMayFall_Parms {
};


//  Controller.CanMakePathTo 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AController_execCanMakePathTo_Parms {
  class AActor* A;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.EndClimbLadder 20400 0 ( FUNC_Native FUNC_Public )
struct AController_execEndClimbLadder_Parms {
};


//  Controller.StopWaiting 20400 0 ( FUNC_Native FUNC_Public )
struct AController_execStopWaiting_Parms {
};


//  Controller.InLatentExecution 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AController_execInLatentExecution_Parms {
  INT LatentActionNumber;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.RemoveController 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AController_execRemoveController_Parms {
};


//  Controller.AddController 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AController_execAddController_Parms {
};


//  Controller.WaitForLanding 20409 0 ( FUNC_Final FUNC_Latent FUNC_Native FUNC_Public )
struct AController_execWaitForLanding_Parms {
};


//  Controller.PickWallAdjust 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AController_execPickWallAdjust_Parms {
  class FVector HitNormal;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.ActorReachable 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AController_execActorReachable_Parms {
  class AActor* anActor;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.PointReachable 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AController_execPointReachable_Parms {
  class FVector aPoint;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.EAdjustJump 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AController_execEAdjustJump_Parms {
  FLOAT BaseZ;  // 0 80 CPF_Parm
  FLOAT XYSpeed;  // 4 80 CPF_Parm
  class FVector ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.FindRandomDest 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AController_execFindRandomDest_Parms {
  class ANavigationPoint* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.FindPathTowardNearest 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AController_execFindPathTowardNearest_Parms {
  class UClass* GoalClass;  // 0 80 CPF_Parm
  BITFIELD bWeightDetours : 1;  // 4 90 CPF_OptionalParm CPF_Parm
  class AActor* ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.FindPathToIntercept 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AController_execFindPathToIntercept_Parms {
  class APawn* P;  // 0 80 CPF_Parm
  class AActor* RouteGoal;  // 4 80 CPF_Parm
  BITFIELD bWeightDetours : 1;  // 8 90 CPF_OptionalParm CPF_Parm
  class AActor* ReturnValue;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.FindPathToward 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AController_execFindPathToward_Parms {
  class AActor* anActor;  // 0 80 CPF_Parm
  BITFIELD bWeightDetours : 1;  // 4 90 CPF_OptionalParm CPF_Parm
  class AActor* ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.FindPathTo 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AController_execFindPathTo_Parms {
  class FVector aPoint;  // 0 80 CPF_Parm
  class AActor* ReturnValue;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.CanSee 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AController_execCanSee_Parms {
  class APawn* Other;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.LineOfSightTo 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AController_execLineOfSightTo_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Controller.FinishRotation 20409 0 ( FUNC_Final FUNC_Latent FUNC_Native FUNC_Public )
struct AController_execFinishRotation_Parms {
};


//  Controller.MoveToward 20409 0 ( FUNC_Final FUNC_Latent FUNC_Native FUNC_Public )
struct AController_execMoveToward_Parms {
  class AActor* NewTarget;  // 0 80 CPF_Parm
  class AActor* ViewFocus;  // 4 90 CPF_OptionalParm CPF_Parm
  FLOAT DestinationOffset;  // 8 90 CPF_OptionalParm CPF_Parm
  BITFIELD bUseStrafing : 1;  // C 90 CPF_OptionalParm CPF_Parm
  BITFIELD bShouldWalk : 1;  // 10 90 CPF_OptionalParm CPF_Parm
};


//  Controller.MoveTo 20409 0 ( FUNC_Final FUNC_Latent FUNC_Native FUNC_Public )
struct AController_execMoveTo_Parms {
  class FVector NewDestination;  // 0 80 CPF_Parm
  class AActor* ViewFocus;  // C 90 CPF_OptionalParm CPF_Parm
  BITFIELD bShouldWalk : 1;  // 10 90 CPF_OptionalParm CPF_Parm
};


// AController 817 ( CLASS_Abstract CLASS_Compiled CLASS_Config CLASS_Parsed CLASS_NativeReplication )
class DLL_IMPORT AController : public AActor {
  public:
    class APawn* Pawn;  // 420 0
    INT PlayerNum;  // 424 2000002 CPF_Const CPF_EditorData
    FLOAT SightCounter;  // 428 2000000 CPF_EditorData
    FLOAT FovAngle;  // 42C 2000000 CPF_EditorData
    FLOAT Handedness;  // 430 44000 CPF_Config CPF_GlobalConfig
    BITFIELD bIsPlayer : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bGodMode : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bLOSflag : 1;  // 434 2000002 CPF_Const CPF_EditorData
    BITFIELD bAdvancedTactics : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bCanOpenDoors : 1;  // 434 0
    BITFIELD bCanDoSpecial : 1;  // 434 0
    BITFIELD bAdjusting : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bPreparingMove : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bControlAnimations : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bEnemyInfoValid : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bNotifyApex : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bUsePlayerHearing : 1;  // 434 0
    BITFIELD bJumpOverWall : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bEnemyAcquired : 1;  // 434 0
    BITFIELD bSoaking : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bNotifyFallingHitWall : 1;  // 434 0
    BITFIELD bSlowerZAcquire : 1;  // 434 2000000 CPF_EditorData
    BITFIELD bInDodgeMove : 1;  // 434 0
    BITFIELD bVehicleTransition : 1;  // 434 0
    BITFIELD bForceStrafe : 1;  // 434 0
    BITFIELD bNotifyPostLanded : 1;  // 434 0
    BYTE bRun;  // 438 4 CPF_Input
    BYTE bDuck;  // 439 4 CPF_Input
    BYTE bFire;  // 43A 4 CPF_Input
    BYTE bAltFire;  // 43B 4 CPF_Input
    BYTE bVoiceTalk;  // 43C 4 CPF_Input
    class FVector AdjustLoc;  // 440 2000000 CPF_EditorData
    class AController* nextController;  // 44C 2000002 CPF_Const CPF_EditorData
    FLOAT Stimulus;  // 450 2000000 CPF_EditorData
    FLOAT MoveTimer;  // 454 0
    class AActor* MoveTarget;  // 458 2000000 CPF_EditorData
    class FVector Destination;  // 45C 2000000 CPF_EditorData
    class FVector FocalPoint;  // 468 2000000 CPF_EditorData
    class AActor* Focus;  // 474 2000000 CPF_EditorData
    FLOAT FocusLead;  // 478 2000000 CPF_EditorData
    class AMover* PendingMover;  // 47C 2000000 CPF_EditorData
    class AActor* GoalList[4];  // 480 2000000 CPF_EditorData
    class ANavigationPoint* home;  // 490 2000000 CPF_EditorData
    FLOAT MinHitWall;  // 494 2000000 CPF_EditorData
    FLOAT RespawnPredictionTime;  // 498 2000000 CPF_EditorData
    FLOAT DodgeToGoalPct;  // 49C 2000000 CPF_EditorData
    INT AcquisitionYawRate;  // 4A0 0
    FLOAT DodgeLandZ;  // 4A4 2000000 CPF_EditorData
    class APawn* Enemy;  // 4A8 0
    class AActor* Target;  // 4AC 0
    class FVector LastSeenPos;  // 4B0 2000000 CPF_EditorData
    class FVector LastSeeingPos;  // 4BC 2000000 CPF_EditorData
    FLOAT LastSeenTime;  // 4C8 0
    class FString VoiceType;  // 4CC 2400000 CPF_NeedCtorLink CPF_EditorData
    FLOAT OldMessageTime;  // 4D4 2000000 CPF_EditorData
    class AActor* RouteCache[16];  // 4D8 0
    class UReachSpec* CurrentPath;  // 518 0
    class UReachSpec* NextRoutePath;  // 51C 0
    class FVector CurrentPathDir;  // 520 0
    class AActor* RouteGoal;  // 52C 2000000 CPF_EditorData
    FLOAT RouteDist;  // 530 2000000 CPF_EditorData
    FLOAT LastRouteFind;  // 534 2000000 CPF_EditorData
    class FVector DirectionHint;  // 538 2000000 CPF_EditorData
    class UClass* PawnClass;  // 544 2000000 CPF_EditorData
    class UClass* PreviousPawnClass;  // 548 2000000 CPF_EditorData
    FLOAT GroundPitchTime;  // 54C 0
    class FVector ViewX;  // 550 2000000 CPF_EditorData
    class FVector ViewY;  // 55C 2000000 CPF_EditorData
    class FVector ViewZ;  // 568 2000000 CPF_EditorData
    class ANavigationPoint* StartSpot;  // 574 2000000 CPF_EditorData
    class AAvoidMarker* FearSpots[2];  // 578 2000000 CPF_EditorData
    FLOAT WarningDelay;  // 580 2000000 CPF_EditorData
    class APawn* ShotTarget;  // 584 0
    class AActor* LastFailedReach;  // 588 2000002 CPF_Const CPF_EditorData
    FLOAT FailedReachTime;  // 58C 2 CPF_Const
    class FVector FailedReachLocation;  // 590 2 CPF_Const
    virtual ~AController(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Tick(float,enum ELevelTick);
    virtual void Spawned(void);
    virtual void StartAnimPoll(void);
    virtual int CheckAnimFinished(int);
    virtual void CheckHearSound(class AActor *,int,class USound *,class FVector,float,int);
    virtual int CheckHearSBSound(class AActor *,class USound *,class FVector,float,float,float,int,int);
    virtual class AActor * GetViewTarget(void);
    virtual int AcceptNearbyPath(class AActor *);
    virtual void AdjustFromWall(class FVector,class AActor *);
    virtual void SetAdjustLocation(class FVector);
    virtual int LocalPlayerController(void);
    virtual int WantsLedgeCheck(void);
    virtual int StopAtLedge(void);
    virtual void AirSteering(float);
    virtual bool CanSeePawn(class APawn *);
    virtual void sv_OnAddRelevant(class AActor *);
    virtual void sv_OnRemoveRelevant(class AActor *);
    AController(class AController const &);
    AController(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AController & operator=(class AController const &);
    int CanHear(class FVector,float,class AActor *);
    int CanHearSBSound(class FVector,class FVector,class AActor *,float);
    int CanHearSound(class FVector,class AActor *,float);
    void CheckEnemyVisible(void);
    void CheckFears(void);
    class AActor * FindPath(class FVector,class AActor *,int);
    class AActor * HandleSpecial(class AActor *);
    static void CDECL InternalConstructor(void *);
    unsigned long LineOfSightTo(class AActor *,int);
    unsigned long SeePawn(class APawn *,int);
    class AActor * SetPath(int);
    void SetRouteCache(class ANavigationPoint *,float,float);
    void ShowSelf(void);
    static class UClass * CDECL StaticClass(void);
    int eventAIHearSBSound(class AActor *,class USound *,class FVector,float,float,float,unsigned long);
    void eventAIHearSound(class AActor *,int,class USound *,class FVector,class FVector,unsigned long);
    unsigned long eventAllowDetourTo(class ANavigationPoint *);
    void eventEnemyNotVisible(void);
    void eventHearNoise(float,class AActor *);
    void eventLongFall(void);
    void eventMayDodgeToMoveTarget(void);
    void eventMayFall(void);
    void eventMissedDodge(void);
    unsigned long eventNotifyBump(class AActor *);
    void eventNotifyFallingHitWall(class FVector,class AActor *);
    unsigned long eventNotifyHeadVolumeChange(class APhysicsVolume *);
    void eventNotifyHitMover(class FVector,class AMover *);
    unsigned long eventNotifyHitWall(class FVector,class AActor *);
    void eventNotifyJumpApex(void);
    unsigned long eventNotifyLanded(class FVector);
    void eventNotifyMissedJump(void);
    unsigned long eventNotifyPhysicsVolumeChange(class APhysicsVolume *);
    void eventNotifyPostLanded(void);
    void eventNotifyTakeHit(class APawn *,class FVector,int,class UClass *,class FVector);
    void eventPrepareForMove(class ANavigationPoint *,class UReachSpec *);
    void eventSeeMonster(class APawn *);
    void eventSeePlayer(class APawn *);
    void eventSetupSpecialPathAbilities(void);
    void eventSoakStop(class FString const &);
    void execActorReachable(struct FFrame &,void * const);
    void execAddController(struct FFrame &,void * const);
    void execCanMakePathTo(struct FFrame &,void * const);
    void execCanSee(struct FFrame &,void * const);
    void execEAdjustJump(struct FFrame &,void * const);
    void execEndClimbLadder(struct FFrame &,void * const);
    void execFindPathTo(struct FFrame &,void * const);
    void execFindPathToIntercept(struct FFrame &,void * const);
    void execFindPathToward(struct FFrame &,void * const);
    void execFindPathTowardNearest(struct FFrame &,void * const);
    void execFindRandomDest(struct FFrame &,void * const);
    void execFinishRotation(struct FFrame &,void * const);
    void execInLatentExecution(struct FFrame &,void * const);
    void execLineOfSightTo(struct FFrame &,void * const);
    void execMoveTo(struct FFrame &,void * const);
    void execMoveToward(struct FFrame &,void * const);
    void execPickWallAdjust(struct FFrame &,void * const);
    void execPointReachable(struct FFrame &,void * const);
    void execPollFinishRotation(struct FFrame &,void * const);
    void execPollMoveTo(struct FFrame &,void * const);
    void execPollMoveToward(struct FFrame &,void * const);
    void execPollWaitForLanding(struct FFrame &,void * const);
    void execRemoveController(struct FFrame &,void * const);
    void execStopWaiting(struct FFrame &,void * const);
    void execWaitForLanding(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(AController,0,execActorReachable)
AUTOGENERATE_FUNCTION(AController,0,execAddController)
AUTOGENERATE_FUNCTION(AController,0,execCanMakePathTo)
AUTOGENERATE_FUNCTION(AController,0,execCanSee)
AUTOGENERATE_FUNCTION(AController,0,execEAdjustJump)
AUTOGENERATE_FUNCTION(AController,0,execEndClimbLadder)
AUTOGENERATE_FUNCTION(AController,0,execFindPathTo)
AUTOGENERATE_FUNCTION(AController,0,execFindPathToIntercept)
AUTOGENERATE_FUNCTION(AController,0,execFindPathToward)
AUTOGENERATE_FUNCTION(AController,0,execFindPathTowardNearest)
AUTOGENERATE_FUNCTION(AController,0,execFindRandomDest)
AUTOGENERATE_FUNCTION(AController,0,execFinishRotation)
AUTOGENERATE_FUNCTION(AController,0,execInLatentExecution)
AUTOGENERATE_FUNCTION(AController,0,execLineOfSightTo)
AUTOGENERATE_FUNCTION(AController,0,execMoveTo)
AUTOGENERATE_FUNCTION(AController,0,execMoveToward)
AUTOGENERATE_FUNCTION(AController,0,execPickWallAdjust)
AUTOGENERATE_FUNCTION(AController,0,execPointReachable)
AUTOGENERATE_FUNCTION(AController,0,execPollFinishRotation)
AUTOGENERATE_FUNCTION(AController,0,execPollMoveTo)
AUTOGENERATE_FUNCTION(AController,0,execPollMoveToward)
AUTOGENERATE_FUNCTION(AController,0,execPollWaitForLanding)
AUTOGENERATE_FUNCTION(AController,0,execRemoveController)
AUTOGENERATE_FUNCTION(AController,0,execStopWaiting)
AUTOGENERATE_FUNCTION(AController,0,execWaitForLanding)


//------------------------------------------------------------------------------
//  PlayerController
//------------------------------------------------------------------------------

#define UCONST_PlayerController_UNREAL_UNIT_PI  32768
//  PlayerController.LostChild 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct APlayerController_eventLostChild_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  PlayerController.GainedChild 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct APlayerController_eventGainedChild_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  PlayerController.InvertLook 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execInvertLook_Parms {
};


//  PlayerController.InvertMouse 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execInvertMouse_Parms {
  class FString Invert;  // 0 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
};


//  PlayerController.IsMouseInverted 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APlayerController_execIsMouseInverted_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayerController.ClientCloseMenu 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APlayerController_eventClientCloseMenu_Parms {
  BITFIELD bCloseAll : 1;  // 0 90 CPF_OptionalParm CPF_Parm
  BITFIELD bCancel : 1;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  PlayerController.ClientReplaceMenu 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APlayerController_eventClientReplaceMenu_Parms {
  class FString Menu;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD bDisconnect : 1;  // 8 90 CPF_OptionalParm CPF_Parm
  class FString Msg1;  // C 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
  class FString Msg2;  // 14 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
};


//  PlayerController.ClientOpenMenu 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APlayerController_eventClientOpenMenu_Parms {
  class FString Menu;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString Msg1;  // 8 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
  class FString Msg2;  // 10 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
};


//  PlayerController.UnPressButtons 20822 0 ( FUNC_Defined FUNC_Singular FUNC_Event FUNC_Public )
struct APlayerController_eventUnPressButtons_Parms {
};


//  PlayerController.ChangeAlwaysMouseLook 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execChangeAlwaysMouseLook_Parms {
  BITFIELD B : 1;  // 0 80 CPF_Parm
};


//  PlayerController.ChangeStairLook 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execChangeStairLook_Parms {
  BITFIELD B : 1;  // 0 80 CPF_Parm
};


//  PlayerController.UpdateRotation 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execUpdateRotation_Parms {
  FLOAT DeltaTime;  // 0 80 CPF_Parm
  FLOAT maxPitch;  // 4 80 CPF_Parm
};


//  PlayerController.TurnAround 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execTurnAround_Parms {
};


//  PlayerController.TurnTowardNearestEnemy 20000 0 ( FUNC_Public )
struct APlayerController_execTurnTowardNearestEnemy_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayerController.BlendRot 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execBlendRot_Parms {
  FLOAT DeltaTime;  // 0 80 CPF_Parm
  INT BlendC;  // 4 80 CPF_Parm
  INT NewC;  // 8 80 CPF_Parm
  INT ReturnValue;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayerController.CalcFirstPersonView 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execCalcFirstPersonView_Parms {
  class FVector CameraLocation;  // 0 180 CPF_Parm CPF_OutParm
  class FRotator CameraRotation;  // C 180 CPF_Parm CPF_OutParm
};


//  PlayerController.PlayerCalcView 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APlayerController_eventPlayerCalcView_Parms {
  class AActor* ViewActor;  // 0 180 CPF_Parm CPF_OutParm
  class FVector CameraLocation;  // 4 180 CPF_Parm CPF_OutParm
  class FRotator CameraRotation;  // 10 180 CPF_Parm CPF_OutParm
};


//  PlayerController.CacheCalcView 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execCacheCalcView_Parms {
  class AActor* ViewActor;  // 0 80 CPF_Parm
  class FVector CameraLocation;  // 4 80 CPF_Parm
  class FRotator CameraRotation;  // 10 80 CPF_Parm
};


//  PlayerController.GetViewRotation 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APlayerController_execGetViewRotation_Parms {
  class FRotator ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayerController.RemoveAllCameraEffects 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execRemoveAllCameraEffects_Parms {
};


//  PlayerController.CreateCameraEffect 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execCreateCameraEffect_Parms {
  class UClass* EffectClass;  // 0 80 CPF_Parm
};


//  PlayerController.RemoveCameraEffect 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APlayerController_eventRemoveCameraEffect_Parms {
  class UCameraEffect* ExEffect;  // 0 80 CPF_Parm
};


//  PlayerController.AddCameraEffect 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APlayerController_eventAddCameraEffect_Parms {
  class UCameraEffect* NewEffect;  // 0 80 CPF_Parm
  BITFIELD RemoveExisting : 1;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  PlayerController.CalcBehindView 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execCalcBehindView_Parms {
  class FVector CameraLocation;  // 0 180 CPF_Parm CPF_OutParm
  class FRotator CameraRotation;  // C 180 CPF_Parm CPF_OutParm
  FLOAT dist;  // 18 80 CPF_Parm
};


//  PlayerController.NotifyLanded 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execNotifyLanded_Parms {
  class FVector HitNormal;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayerController.ClientSetHUD 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APlayerController_execClientSetHUD_Parms {
  class UClass* newHUDClass;  // 0 80 CPF_Parm
};


//  PlayerController.BehindView 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execBehindView_Parms {
  BITFIELD B : 1;  // 0 80 CPF_Parm
};


//  PlayerController.EnterStartState 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execEnterStartState_Parms {
};


//  PlayerController.Typing 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execTyping_Parms {
  BITFIELD bTyping : 1;  // 0 80 CPF_Parm
};


//  PlayerController.DamageAttitudeTo 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execDamageAttitudeTo_Parms {
  class APawn* Other;  // 0 80 CPF_Parm
  FLOAT Damage;  // 4 80 CPF_Parm
};


//  PlayerController.ClientAdjustGlow 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execClientAdjustGlow_Parms {
  FLOAT Scale;  // 0 80 CPF_Parm
  class FVector fog;  // 4 80 CPF_Parm
};


//  PlayerController.ClientFlash 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execClientFlash_Parms {
  FLOAT Scale;  // 0 80 CPF_Parm
  class FVector fog;  // 4 80 CPF_Parm
};


//  PlayerController.SetFOVAngle 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execSetFOVAngle_Parms {
  FLOAT newFOV;  // 0 80 CPF_Parm
};


//  PlayerController.HandleWalking 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execHandleWalking_Parms {
};


//  PlayerController.CompressAccel 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execCompressAccel_Parms {
  INT C;  // 0 80 CPF_Parm
  INT ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayerController.DetermineMaxPitchMultiplier 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execDetermineMaxPitchMultiplier_Parms {
  INT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayerController.ForceDeathUpdate 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execForceDeathUpdate_Parms {
};


//  PlayerController.ClientSetBehindView 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execClientSetBehindView_Parms {
  BITFIELD B : 1;  // 0 80 CPF_Parm
};


//  PlayerController.ClientSetFixedCamera 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execClientSetFixedCamera_Parms {
  BITFIELD B : 1;  // 0 80 CPF_Parm
};


//  PlayerController.IsDead 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APlayerController_eventIsDead_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayerController.SetMouseAccel 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execSetMouseAccel_Parms {
  FLOAT F;  // 0 80 CPF_Parm
};


//  PlayerController.SetMouseSmoothing 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execSetMouseSmoothing_Parms {
  INT Mode;  // 0 80 CPF_Parm
};


//  PlayerController.SetSensitivity 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execSetSensitivity_Parms {
  FLOAT F;  // 0 80 CPF_Parm
};


//  PlayerController.FixFOV 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APlayerController_execFixFOV_Parms {
};


//  PlayerController.EndZoom 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execEndZoom_Parms {
};


//  PlayerController.StopZoom 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execStopZoom_Parms {
};


//  PlayerController.StartZoom 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execStartZoom_Parms {
};


//  PlayerController.ToggleZoom 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execToggleZoom_Parms {
};


//  PlayerController.StartZoomWithMax 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execStartZoomWithMax_Parms {
  FLOAT MaxZoomLevel;  // 0 80 CPF_Parm
};


//  PlayerController.ToggleZoomWithMax 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execToggleZoomWithMax_Parms {
  FLOAT MaxZoomLevel;  // 0 80 CPF_Parm
};


//  PlayerController.ClientSetInitialMusic 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execClientSetInitialMusic_Parms {
  class FString NewSong;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BYTE NewTransition;  // 8 80 CPF_Parm
};


//  PlayerController.ClientSetMusic 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execClientSetMusic_Parms {
  class FString NewSong;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BYTE NewTransition;  // 8 80 CPF_Parm
};


//  PlayerController.Destroyed 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct APlayerController_eventDestroyed_Parms {
};


//  PlayerController.ClientReliablePlaySound 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APlayerController_execClientReliablePlaySound_Parms {
  class USound* ASound;  // 0 80 CPF_Parm
  BITFIELD bVolumeControl : 1;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  PlayerController.ClientPlaySound 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APlayerController_execClientPlaySound_Parms {
  class USound* ASound;  // 0 80 CPF_Parm
  BITFIELD bVolumeControl : 1;  // 4 90 CPF_OptionalParm CPF_Parm
  FLOAT inAtten;  // 8 90 CPF_OptionalParm CPF_Parm
  BYTE Slot;  // C 90 CPF_OptionalParm CPF_Parm
};


//  PlayerController.ViewFlash 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execViewFlash_Parms {
  FLOAT DeltaTime;  // 0 80 CPF_Parm
};


//  PlayerController.UpdateFlashComponent 20003 0 ( FUNC_Final FUNC_Defined FUNC_Public )
struct APlayerController_execUpdateFlashComponent_Parms {
  FLOAT current;  // 0 80 CPF_Parm
  FLOAT Step;  // 4 80 CPF_Parm
  FLOAT Goal;  // 8 80 CPF_Parm
  FLOAT ReturnValue;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayerController.GetFacingDirection 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execGetFacingDirection_Parms {
  INT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayerController.ClientGotoState 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execClientGotoState_Parms {
  FName newState;  // 0 80 CPF_Parm
  FName NewLabel;  // 4 80 CPF_Parm
};


//  PlayerController.InitInputSystem 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APlayerController_eventInitInputSystem_Parms {
};


//  PlayerController.SpawnDefaultHUD 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execSpawnDefaultHUD_Parms {
};


//  PlayerController.ServerVerifyViewTarget 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execServerVerifyViewTarget_Parms {
};


//  PlayerController.ClientSetViewTarget 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APlayerController_eventClientSetViewTarget_Parms {
  class AActor* A;  // 0 80 CPF_Parm
};


//  PlayerController.ClientSetClassicView 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execClientSetClassicView_Parms {
};


//  PlayerController.DSM 20202 0 ( FUNC_Defined FUNC_Exec FUNC_Public )
struct APlayerController_execDSM_Parms {
};


//  PlayerController.DecreaseScreenShotMode 20202 0 ( FUNC_Defined FUNC_Exec FUNC_Public )
struct APlayerController_execDecreaseScreenShotMode_Parms {
};


//  PlayerController.ISM 20202 0 ( FUNC_Defined FUNC_Exec FUNC_Public )
struct APlayerController_execISM_Parms {
};


//  PlayerController.IncreaseScreenShotMode 20202 0 ( FUNC_Defined FUNC_Exec FUNC_Public )
struct APlayerController_execIncreaseScreenShotMode_Parms {
};


//  PlayerController.TSM 20202 0 ( FUNC_Defined FUNC_Exec FUNC_Public )
struct APlayerController_execTSM_Parms {
};


//  PlayerController.ToggleScreenShotMode 20202 0 ( FUNC_Defined FUNC_Exec FUNC_Public )
struct APlayerController_execToggleScreenShotMode_Parms {
};


//  PlayerController.StreamFinished 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct APlayerController_eventStreamFinished_Parms {
  INT StreamHandle;  // 0 80 CPF_Parm
  BYTE Reason;  // 4 80 CPF_Parm
};


//  PlayerController.GetPathTo 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execGetPathTo_Parms {
  class AActor* Dest;  // 0 80 CPF_Parm
  class AActor* ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayerController.BeyondViewDistance 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APlayerController_execBeyondViewDistance_Parms {
  class FVector OtherLocation;  // 0 80 CPF_Parm
  FLOAT CullDistance;  // C 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayerController.PostBeginPlay 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct APlayerController_eventPostBeginPlay_Parms {
};


//  PlayerController.ClientHearSBSound 20C00 0 ( FUNC_Native FUNC_Event FUNC_Public )
struct APlayerController_eventClientHearSBSound_Parms {
  class AActor* Actor;  // 0 80 CPF_Parm
  class USound* s;  // 4 80 CPF_Parm
  class FVector SoundLocation;  // 8 80 CPF_Parm
  FLOAT Volume;  // 14 80 CPF_Parm
  FLOAT Pitch;  // 18 80 CPF_Parm
  FLOAT Radius;  // 1C 80 CPF_Parm
  INT AudioType;  // 20 80 CPF_Parm
  BITFIELD Attenuate : 1;  // 24 80 CPF_Parm
  INT ReturnValue;  // 28 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayerController.ClientHearSound 20C00 0 ( FUNC_Native FUNC_Event FUNC_Public )
struct APlayerController_eventClientHearSound_Parms {
  class AActor* Actor;  // 0 80 CPF_Parm
  INT Id;  // 4 80 CPF_Parm
  class USound* s;  // 8 80 CPF_Parm
  class FVector SoundLocation;  // C 80 CPF_Parm
  class FVector Parameters;  // 18 80 CPF_Parm
  BITFIELD Attenuate : 1;  // 24 80 CPF_Parm
};


//  PlayerController.FindStairRotation 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct APlayerController_execFindStairRotation_Parms {
  FLOAT DeltaTime;  // 0 80 CPF_Parm
  INT ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayerController.PasteFromClipboard 20400 0 ( FUNC_Native FUNC_Public )
struct APlayerController_execPasteFromClipboard_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  PlayerController.CopyToClipboard 20400 0 ( FUNC_Native FUNC_Public )
struct APlayerController_execCopyToClipboard_Parms {
  class FString Text;  // 0 400080 CPF_Parm CPF_NeedCtorLink
};


//  PlayerController.SetViewTarget 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct APlayerController_execSetViewTarget_Parms {
  class AActor* NewViewTarget;  // 0 80 CPF_Parm
};


//  PlayerController.ResetInput 40401 0 ( FUNC_Final FUNC_Native FUNC_Private )
struct APlayerController_execResetInput_Parms {
};


//  PlayerController.ResetKeyboard 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct APlayerController_execResetKeyboard_Parms {
};


//  PlayerController.ConsoleCommand 20400 0 ( FUNC_Native FUNC_Public )
struct APlayerController_execConsoleCommand_Parms {
  class FString Command;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD bWriteToLog : 1;  // 8 90 CPF_OptionalParm CPF_Parm
  class FString ReturnValue;  // C 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  PlayerController.IsViewingCinematic 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APlayerController_eventIsViewingCinematic_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayerController.SetViewingCinematic 20002 0 ( FUNC_Defined FUNC_Public )
struct APlayerController_execSetViewingCinematic_Parms {
  BITFIELD aViewingFlag : 1;  // 0 80 CPF_Parm
};


//  PlayerController.cl_OnSceneEnded 20800 0 ( FUNC_Event FUNC_Public )
struct APlayerController_eventcl_OnSceneEnded_Parms {
};


//  PlayerController.cl_OnSceneStarted 20800 0 ( FUNC_Event FUNC_Public )
struct APlayerController_eventcl_OnSceneStarted_Parms {
};


//  PlayerController.SV_PlayerTick 20800 0 ( FUNC_Event FUNC_Public )
struct APlayerController_eventSV_PlayerTick_Parms {
  FLOAT DeltaTime;  // 0 80 CPF_Parm
};


//  PlayerController.cl_OnPlayerTick 20800 0 ( FUNC_Event FUNC_Public )
struct APlayerController_eventcl_OnPlayerTick_Parms {
  FLOAT delta;  // 0 80 CPF_Parm
};


// APlayerController 4816 ( CLASS_Compiled CLASS_Config CLASS_Parsed CLASS_NativeReplication CLASS_ExportStructs )
class DLL_IMPORT APlayerController : public AController {
  public:
    class UPlayer* Player;  // 59C 2 CPF_Const
    BITFIELD bLookUpStairs : 1;  // 5A0 2044000 CPF_Config CPF_GlobalConfig CPF_EditorData
    BITFIELD bSnapToLevel : 1;  // 5A0 2044000 CPF_Config CPF_GlobalConfig CPF_EditorData
    BITFIELD bAlwaysMouseLook : 1;  // 5A0 44000 CPF_Config CPF_GlobalConfig
    BITFIELD bKeyboardLook : 1;  // 5A0 2044000 CPF_Config CPF_GlobalConfig CPF_EditorData
    BITFIELD bCenterView : 1;  // 5A0 0
    BITFIELD bBehindView : 1;  // 5A0 2000000 CPF_EditorData
    BITFIELD bPressedJump : 1;  // 5A0 0
    BITFIELD bIsTyping : 1;  // 5A0 0
    BITFIELD bFixedCamera : 1;  // 5A0 2000000 CPF_EditorData
    BITFIELD bUpdating : 1;  // 5A0 0
    BITFIELD bHideSpectatorBeacons : 1;  // 5A0 0
    BITFIELD bZooming : 1;  // 5A0 0
    BITFIELD bSetTurnRot : 1;  // 5A0 0
    BITFIELD bCheatFlying : 1;  // 5A0 2000000 CPF_EditorData
    BITFIELD bFreeCamera : 1;  // 5A0 2000000 CPF_EditorData
    BITFIELD bZeroRoll : 1;  // 5A0 0
    BITFIELD bCameraPositionLocked : 1;  // 5A0 0
    BITFIELD bViewBot : 1;  // 5A0 0
    BITFIELD UseFixedVisibility : 1;  // 5A0 0
    BITFIELD bFreeCam : 1;  // 5A0 2000000 CPF_EditorData
    BITFIELD bFreeCamZoom : 1;  // 5A0 2000000 CPF_EditorData
    BITFIELD bFreeCamSwivel : 1;  // 5A0 2000000 CPF_EditorData
    BITFIELD bBlockCloseCamera : 1;  // 5A0 0
    BITFIELD bValidBehindCamera : 1;  // 5A0 0
    BITFIELD bForcePrecache : 1;  // 5A0 0
    BITFIELD bClientDemo : 1;  // 5A0 0
    BITFIELD bAllActorsRelevant : 1;  // 5A0 2000002 CPF_Const CPF_EditorData
    BITFIELD bShortConnectTimeOut : 1;  // 5A0 2000000 CPF_EditorData
    BITFIELD bPendingDestroy : 1;  // 5A0 2000000 CPF_EditorData
    BITFIELD bEnableAmbientShake : 1;  // 5A0 0
    class FRotator ShakeRot;  // 5A4 0
    class FVector ShakeOffset;  // 5B0 2000000 CPF_EditorData
    BITFIELD bLandingShake : 1;  // 5BC 44000 CPF_Config CPF_GlobalConfig
    BITFIELD bAimingHelp : 1;  // 5BC 44000 CPF_Config CPF_GlobalConfig
    BITFIELD bViewingMatineeCinematic : 1;  // 5BC 0
    BITFIELD bCustomListener : 1;  // 5BC 0
    BITFIELD bAcuteHearing : 1;  // 5BC 2000000 CPF_EditorData
    FLOAT FOVBias;  // 5C0 0
    class FRotator currentClientView;  // 5C4 0
    BYTE bStrafe;  // 5D0 4 CPF_Input
    BYTE bSnapLevel;  // 5D1 4 CPF_Input
    BYTE bLook;  // 5D2 4 CPF_Input
    BYTE bFreeLook;  // 5D3 4 CPF_Input
    BYTE bTurn180;  // 5D4 4 CPF_Input
    BYTE bTurnToNearest;  // 5D5 4 CPF_Input
    BYTE bXAxis;  // 5D6 4 CPF_Input
    BYTE bYAxis;  // 5D7 4 CPF_Input
    FLOAT aBaseX;  // 5D8 4 CPF_Input
    FLOAT aBaseY;  // 5DC 4 CPF_Input
    FLOAT aBaseZ;  // 5E0 4 CPF_Input
    FLOAT aMouseX;  // 5E4 4 CPF_Input
    FLOAT aMouseY;  // 5E8 4 CPF_Input
    FLOAT aForward;  // 5EC 4 CPF_Input
    FLOAT aTurn;  // 5F0 4 CPF_Input
    FLOAT aStrafe;  // 5F4 4 CPF_Input
    FLOAT aUp;  // 5F8 4 CPF_Input
    FLOAT aLookUp;  // 5FC 4 CPF_Input
    INT ShowFlags;  // 600 0
    INT Misc1;  // 604 0
    INT Misc2;  // 608 0
    INT RendMap;  // 60C 0
    FLOAT OrthoZoom;  // 610 2000000 CPF_EditorData
    class AActor* ViewTarget;  // 614 2 CPF_Const
    class AController* RealViewTarget;  // 618 2 CPF_Const
    class APlayerController* DemoViewer;  // 61C 0
    FLOAT CameraDist;  // 620 2000000 CPF_EditorData
    class FRange CameraDistRange;  // 624 0
    class FVector OldCameraLoc;  // 62C 2000000 CPF_EditorData
    class FRotator OldCameraRot;  // 638 0
    TArray<class UCameraEffect*> CameraEffects;  // 644 2402000 CPF_Transient CPF_NeedCtorLink CPF_EditorData
    FLOAT DesiredFOV;  // 650 44000 CPF_Config CPF_GlobalConfig
    FLOAT DefaultFOV;  // 654 44000 CPF_Config CPF_GlobalConfig
    FLOAT ZoomLevel;  // 658 0
    FLOAT DesiredZoomLevel;  // 65C 0
    FLOAT CameraTiltAngle;  // 660 2044000 CPF_Config CPF_GlobalConfig CPF_EditorData
    class FVector ListenerLocation;  // 664 0
    class FRotator ListenerRotation;  // 670 0
    class FVector FixedLocation;  // 67C 0
    class FRotator FixedRotation;  // 688 0
    class FMatrix RenderWorldToCamera;  // 694 0
    class FVector FlashScale;  // 6D4 0
    class FVector FlashFog;  // 6E0 0
    FLOAT ConstantGlowScale;  // 6EC 0
    class FVector ConstantGlowFog;  // 6F0 0
    FLOAT ScreenFlashScaling;  // 6FC 44000 CPF_Config CPF_GlobalConfig
    class FColor LastDistanceFogColor;  // 700 0
    class FColor CurrentDistanceFogColor;  // 704 2000000 CPF_EditorData
    FLOAT LastDistanceFogStart;  // 708 0
    FLOAT LastDistanceFogEnd;  // 70C 0
    FLOAT CurrentDistanceFogEnd;  // 710 0
    FLOAT TimeSinceLastFogChange;  // 714 0
    INT LastZone;  // 718 0
    class APhysicsVolume* LastVolume;  // 71C 0
    class FRotator TargetViewRotation;  // 720 0
    class FRotator BlendedTargetViewRotation;  // 72C 0
    FLOAT TargetEyeHeight;  // 738 0
    class AHUD* myHUD;  // 73C 2000000 CPF_EditorData
    FLOAT LastPlaySound;  // 740 0
    FLOAT LastPlaySpeech;  // 744 0
    class FString Song;  // 748 400000 CPF_NeedCtorLink
    BYTE Transition;  // 750 0
    FLOAT CurrentTimeStamp;  // 754 0
    FLOAT lastUpdateTime;  // 758 0
    FLOAT ServerTimeStamp;  // 75C 0
    FLOAT TimeMargin;  // 760 0
    FLOAT ClientUpdateTime;  // 764 0
    FLOAT TimeMarginSlack;  // 768 2044000 CPF_Config CPF_GlobalConfig CPF_EditorData
    class FString ProgressMessage[4];  // 76C 400000 CPF_NeedCtorLink
    class FColor ProgressColor[4];  // 78C 0
    FLOAT ProgressTimeOut;  // 79C 0
    class FString StatsUsername;  // 7A0 444000 CPF_Config CPF_GlobalConfig CPF_NeedCtorLink
    class FString StatsPassword;  // 7A8 444000 CPF_Config CPF_GlobalConfig CPF_NeedCtorLink
    FLOAT AmbientShakeFalloffStartTime;  // 7B0 0
    FLOAT AmbientShakeFalloffTime;  // 7B4 2000000 CPF_EditorData
    class FVector AmbientShakeOffsetMag;  // 7B8 0
    FLOAT AmbientShakeOffsetFreq;  // 7C4 0
    class FRotator AmbientShakeRotMag;  // 7C8 0
    FLOAT AmbientShakeRotFreq;  // 7D4 0
    class APawn* TurnTarget;  // 7D8 0
    INT EnemyTurnSpeed;  // 7DC 4000 CPF_Config
    INT GroundPitch;  // 7E0 0
    class FRotator TurnRot180;  // 7E4 0
    class FVector OldFloor;  // 7F0 2000000 CPF_EditorData
    class UPlayerInput* PlayerInput;  // 7FC 2002000 CPF_Transient CPF_EditorData
    class FVector FailedPathStart;  // 800 2 CPF_Const
    FLOAT CameraDeltaYaw;  // 80C 2000000 CPF_EditorData
    FLOAT CameraDeltaRad;  // 810 2000000 CPF_EditorData
    class FRotator CameraSwivel;  // 814 2000000 CPF_EditorData
    INT DemoViewPitch;  // 820 0
    INT DemoViewYaw;  // 824 0
    class AActor* CalcViewActor;  // 828 2000000 CPF_EditorData
    class FVector CalcViewActorLocation;  // 82C 0
    class FVector CalcViewLocation;  // 838 0
    class FRotator CalcViewRotation;  // 844 0
    FLOAT LastPlayerCalcView;  // 850 0
    INT mPreviousSimFrame;  // 854 0
    FLOAT mNetDeltaSeconds;  // 858 0
    INT ShowDepartmentFlags;  // 85C 0
    INT SBShowFlags;  // 860 0
    virtual ~APlayerController(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Tick(float,enum ELevelTick);
    virtual void CleanupSubObjects(int);
    virtual class APlayerController * GetAPlayerController(void);
    virtual void CheckHearSound(class AActor *,int,class USound *,class FVector,float,int);
    virtual int CheckHearSBSound(class AActor *,class USound *,class FVector,float,float,float,int,int);
    virtual class AActor * GetViewTarget(void);
    virtual int LocalPlayerController(void);
    virtual int WantsLedgeCheck(void);
    virtual int StopAtLedge(void);
    virtual void PostRender(class FSceneNode *);
    virtual class APawn * GetPawn(void);
    APlayerController(class APlayerController const &);
    APlayerController(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class APlayerController & operator=(class APlayerController const &);
    static void CDECL InternalConstructor(void *);
    void SetPlayer(class UPlayer *);
    static class UClass * CDECL StaticClass(void);
    void eventAddCameraEffect(class UCameraEffect *,unsigned long);
    void eventClientCloseMenu(unsigned long,unsigned long);
    int eventClientHearSBSound(class AActor *,class USound *,class FVector,float,float,float,int,unsigned long);
    void eventClientHearSound(class AActor *,int,class USound *,class FVector,class FVector,unsigned long);
    void eventClientOpenMenu(class FString const &,class FString const &,class FString const &);
    void eventClientReplaceMenu(class FString const &,unsigned long,class FString const &,class FString const &);
    void eventClientSetViewTarget(class AActor *);
    void eventInitInputSystem(void);
    unsigned long eventIsDead(void);
    unsigned long eventIsViewingCinematic(void);
    void eventPlayerCalcView(class AActor * &,class FVector &,class FRotator &);
    void eventRemoveCameraEffect(class UCameraEffect *);
    void eventSV_PlayerTick(float);
    void eventStreamFinished(int,unsigned char);
    void eventUnPressButtons(void);
    void eventcl_OnPlayerTick(float);
    void eventcl_OnSceneEnded(void);
    void eventcl_OnSceneStarted(void);
    void execClientHearSBSound(struct FFrame &,void * const);
    void execClientHearSound(struct FFrame &,void * const);
    void execConsoleCommand(struct FFrame &,void * const);
    void execCopyToClipboard(struct FFrame &,void * const);
    void execFindStairRotation(struct FFrame &,void * const);
    void execPasteFromClipboard(struct FFrame &,void * const);
    void execResetInput(struct FFrame &,void * const);
    void execResetKeyboard(struct FFrame &,void * const);
    void execSetViewTarget(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(APlayerController,0,execClientHearSBSound)
AUTOGENERATE_FUNCTION(APlayerController,0,execClientHearSound)
AUTOGENERATE_FUNCTION(APlayerController,0,execConsoleCommand)
AUTOGENERATE_FUNCTION(APlayerController,0,execCopyToClipboard)
AUTOGENERATE_FUNCTION(APlayerController,0,execFindStairRotation)
AUTOGENERATE_FUNCTION(APlayerController,0,execPasteFromClipboard)
AUTOGENERATE_FUNCTION(APlayerController,0,execResetInput)
AUTOGENERATE_FUNCTION(APlayerController,0,execResetKeyboard)
AUTOGENERATE_FUNCTION(APlayerController,0,execSetViewTarget)


//------------------------------------------------------------------------------
//  AudioSubsystem
//------------------------------------------------------------------------------

// UAudioSubsystem 1E ( CLASS_Compiled CLASS_Config CLASS_Transient CLASS_Parsed )
class DLL_IMPORT UAudioSubsystem : public USubsystem/*,FExec*/  {
  public:
    char Unknown0[52];
    FLOAT AmbientStreamVolume;  // 60 4000 CPF_Config
    FLOAT SoundVolume;  // 64 4000 CPF_Config
    FLOAT VoiceVolume;  // 68 4000 CPF_Config
    FLOAT MusicVolume;  // 6C 4000 CPF_Config
    FLOAT VolumeScaleRec;  // 70 4000 CPF_Config
    FLOAT InterfaceVolume;  // 74 4000 CPF_Config
    BITFIELD UseVoIP : 1;  // 78 4000 CPF_Config
    char Unknown1[4];
    INT AmbientPriority;  // 80 4000 CPF_Config
    INT MusicPriority;  // 84 4000 CPF_Config
    INT SoundPriority;  // 88 4000 CPF_Config
    INT VoicePriority;  // 8C 4000 CPF_Config
    INT InterfacePriority;  // 90 4000 CPF_Config
    FLOAT Own_FootstepsVolume;  // 94 4000 CPF_Config
    FLOAT Own_VoicesVolume;  // 98 4000 CPF_Config
    FLOAT Own_FXVolume;  // 9C 4000 CPF_Config
    FLOAT Other_FootstepsVolume;  // A0 4000 CPF_Config
    FLOAT Other_VoicesVolume;  // A4 4000 CPF_Config
    FLOAT Other_FXVolume;  // A8 4000 CPF_Config
    FLOAT NPC_FootstepsVolume;  // AC 4000 CPF_Config
    FLOAT NPC_VoicesVolume;  // B0 4000 CPF_Config
    FLOAT NPC_FXVolume;  // B4 4000 CPF_Config
    FLOAT MonsterVolume;  // B8 4000 CPF_Config
    FLOAT WildlifeVolume;  // BC 4000 CPF_Config
    FLOAT AmbientFXVolume;  // C0 4000 CPF_Config
    INT Own_VoiceRepeatTime;  // C4 4000 CPF_Config
    INT Other_VoiceRepeatTime;  // C8 4000 CPF_Config
    INT NPC_VoiceRepeatTime;  // CC 4000 CPF_Config
    INT Wildlife_IdleFX_RepeatTime;  // D0 4000 CPF_Config
    INT Wildlife_CombatFX_RepeatTime;  // D4 4000 CPF_Config
    INT Monster_IdleFX_RepeatTime;  // D8 4000 CPF_Config
    INT Monster_CombatFX_RepeatTime;  // DC 4000 CPF_Config
    char Unknown2[24];
    FLOAT MainVolume;  // F8 4000 CPF_Config
    INT CurrentPreferenceIndex;  // FC 4000 CPF_Config
    char Unknown3[4];
    BITFIELD MuteAll : 1;  // 104 4000 CPF_Config
    BITFIELD MuteMusic : 1;  // 108 4000 CPF_Config
    BITFIELD MuteInterface : 1;  // 10C 4000 CPF_Config
    BITFIELD MuteAmbientStream : 1;  // 110 4000 CPF_Config
    BITFIELD MuteAmbientFX : 1;  // 114 4000 CPF_Config
    BITFIELD MuteFootsteps : 1;  // 118 4000 CPF_Config
    BITFIELD MuteFX : 1;  // 11C 4000 CPF_Config
    BITFIELD MuteVoices : 1;  // 120 4000 CPF_Config
    BITFIELD MuteMonsters : 1;  // 124 4000 CPF_Config
    BITFIELD UseAmbientSound : 1;  // 128 4000 CPF_Config
    char Unknown4[28];
    //virtual int Exec(unsigned short const *,class FOutputDevice &);
    virtual ~UAudioSubsystem(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Init(void);
    virtual void SetViewport(class UViewport *);
    virtual void Flush(int);
    virtual int Update(class FSceneNode *);
    virtual void PlaySound(class FSoundSource *);
    virtual int StopSound(class AActor const *,class USound *,int);
    virtual int PlayVoicePacket(struct FVoiceInfo *);
    virtual void NoteDestroy(class USound *,class AActor *,int);
    virtual void NoteDestroy(class USound *,int);
    virtual void NoteDestroy(class AActor *);
    virtual int FindSource(void);
    virtual void SetTransientSource(class FSoundSource *);
    virtual class FSoundSource * GetSource(int);
    virtual class FSoundSource * GetTransientSource(void);
    virtual int GetNumSources(void);
    virtual int GetNumActiveSources(void);
    virtual class FSoundSource * GetOwnedSource(int,class AActor *);
    virtual int LinkSource(int,class AActor *);
    virtual class FSoundSource * GetSourceById(int);
    virtual void CheckActiveSources(void);
    virtual float GetSoundDuration(class USound *);
    virtual int LowQualitySound(void);
    virtual int SeekStream(int,float);
    virtual int Seek(int,float);
    virtual int ReverseStereoSelected(void);
    virtual void UseReverseStereo(int);
    virtual void DrawSourceInfo(class UViewport *);
    virtual void UpdateStats(void);
    UAudioSubsystem(class UAudioSubsystem const &);
    UAudioSubsystem(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UAudioSubsystem & operator=(class UAudioSubsystem const &);
    void AllowMusicPlayback(int);
    static class FAudioCaptureDevice * CaptureDevice;
    static int * CodecFrameSize;
    static int * CodecFrequency;
    static int * CodecPacketSize;
    static int * CodecPacketTime;
    float GetAmbientFXVolume(void)const ;
    int GetAmbientPriority(void)const ;
    float GetAmbientStreamVolume(void)const ;
    float GetClientFXVolume(void)const ;
    float GetClientFootstepVolume(void)const ;
    float GetClientVoiceVolume(void)const ;
    int GetCurrentPreferenceIndex(void)const ;
    float GetDuration(int);
    int GetInterfacePriority(void)const ;
    float GetInterfaceVolume(void)const ;
    class FListener * GetListener(void);
    class AActor * GetListenerActor(void);
    float GetMainVolume(void)const ;
    float GetMonsterCombatFrequency(void)const ;
    float GetMonsterIdleFrequency(void)const ;
    float GetMonsterVolume(void)const ;
    int GetMusicPriority(void)const ;
    float GetMusicVolume(void)const ;
    float GetNPCFXVolume(void)const ;
    float GetNPCFootstepVolume(void)const ;
    float GetNPCVoiceRepeatTime(void)const ;
    float GetNPCVoiceVolume(void)const ;
    float GetOtherVoiceRepeatTime(void)const ;
    float GetPlayerFXVolume(void)const ;
    float GetPlayerFootstepVolume(void)const ;
    float GetPlayerVoiceRepeatTime(void)const ;
    float GetPlayerVoiceVolume(void)const ;
    int GetSoundPriority(void)const ;
    float GetSoundVolume(void)const ;
    class UViewport * GetViewport(void);
    int GetVoicePriority(void)const ;
    float GetVoiceVolume(void)const ;
    float GetWildlifeCombatFrequency(void)const ;
    float GetWildlifeIdleFrequency(void)const ;
    float GetWildlifeVolume(void)const ;
    static void CDECL InternalConstructor(void *);
    int IsAudioMuted(int);
    int IsPaused(int);
    int IsQueued(class USound *);
    void MuteAllAudio(int);
    void MuteAudioType(int,int);
    int PauseStream(int);
    int PlayMusic(class FString,float);
    int PlayOggStream(class FString &,class FVector &,int,int,float,float,float);
    void PlaySound(class AActor *,int,class USound *,class FVector,float,float,float,int,float);
    int PlayStream(class FString,int,float,float,float);
    void RestoreDefaults(void);
    void RestorePreference(int);
    void SaveDefaults(void);
    void SavePreference(int);
    void SetAmbientFXVolume(float);
    void SetAmbientStreamVolume(float);
    void SetClientFXVolume(float);
    void SetClientFootstepVolume(float);
    void SetClientVoiceVolume(float);
    void SetCurrentPreferenceIndex(int);
    void SetInterfaceVolume(float);
    void SetMainVolume(float);
    void SetMonsterCombatRepeatType(int);
    void SetMonsterIdleRepeatType(int);
    void SetMonsterVolume(float);
    void SetMusicVolume(float);
    void SetNPCFXVolume(float);
    void SetNPCFootstepVolume(float);
    void SetNPCVoiceRepeatType(int);
    void SetNPCVoiceVolume(float);
    void SetOtherVoiceRepeatType(int);
    int SetPitch(int,int);
    void SetPlayerFXVolume(float);
    void SetPlayerFootstepVolume(float);
    void SetPlayerVoiceRepeatType(int);
    void SetPlayerVoiceVolume(float);
    void SetSoundVolume(float);
    void SetVoiceVolume(float);
    int SetVolume(int,float);
    void SetWildlifeCombatRepeatType(int);
    void SetWildlifeIdleRepeatType(int);
    void SetWildlifeVolume(float);
    static class UClass * CDECL StaticClass(void);
    void StaticConstructor(void);
    void StopAllMusic(float);
    void StopAllSounds(void);
    void StopSound(int);
    void StopStream(int,float);
  protected:
    float GetRepeatTime(int)const ;
    void GetRepeatTimeConfigName(int,class FString &);
    void RestorePreferences(class FString &);
    void SavePreferences(class FString &);
    void ValidatePreferences(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  EnvironmentEffect
//------------------------------------------------------------------------------

// AEnvironmentEffect 4212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate CLASS_ExportStructs )
class DLL_IMPORT AEnvironmentEffect : public AActor {
  public:
    BITFIELD bAttachedToManager : 1;  // 420 2000 CPF_Transient
    BITFIELD Preview : 1;  // 420 2001 CPF_Edit CPF_Transient
    INT Priority;  // 424 1 CPF_Edit
    virtual ~AEnvironmentEffect(void);
    virtual unsigned int GetCPPSize(void);
    virtual void ApplyTo(class UEnvironmentSettings *);
    virtual void Update(void);
    AEnvironmentEffect(class AEnvironmentEffect const &);
    AEnvironmentEffect(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AEnvironmentEffect & operator=(class AEnvironmentEffect const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Brush
//------------------------------------------------------------------------------

enum ECsgOper {
  CSG_Active = 0,
  CSG_Add = 1,
  CSG_Subtract = 2,
  CSG_Intersect = 3,
  CSG_Deintersect = 4
};

// ABrush 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT ABrush : public AActor {
  public:
    BYTE CsgOper;  // 420 1 CPF_Edit
    class UObject* UnusedLightMesh;  // 424 2 CPF_Const
    class FVector PostPivot;  // 428 0
    class FScale MainScale;  // 434 0
    class FScale PostScale;  // 448 0
    class FScale TempScale;  // 45C 0
    class FColor BrushColor;  // 470 1 CPF_Edit
    INT PolyFlags;  // 474 1 CPF_Edit
    BITFIELD bColored : 1;  // 478 1 CPF_Edit
    virtual ~ABrush(void);
    virtual void PostLoad(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FCoords ToLocal(void)const ;
    virtual class FCoords ToWorld(void)const ;
    virtual class UPrimitive * GetPrimitive(void);
    virtual void CheckForErrors(void);
    virtual int IsABrush(void);
    virtual void CopyPosRotScaleFrom(class ABrush *);
    virtual void InitPosRotScale(void);
    ABrush(class ABrush const &);
    ABrush(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ABrush & operator=(class ABrush const &);
    float BuildCoords(class FModelCoords *,class FModelCoords *);
    static void CDECL InternalConstructor(void *);
    float OldBuildCoords(class FModelCoords *,class FModelCoords *);
    class FCoords OldToLocal(void)const ;
    class FCoords OldToWorld(void)const ;
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Volume
//------------------------------------------------------------------------------

//  Volume.DisplayDebug 20002 0 ( FUNC_Defined FUNC_Public )
struct AVolume_execDisplayDebug_Parms {
  class UCanvas* Canvas;  // 0 80 CPF_Parm
  FLOAT YL;  // 4 180 CPF_Parm CPF_OutParm
  FLOAT YPos;  // 8 180 CPF_Parm CPF_OutParm
};


//  Volume.PostBeginPlay 20002 0 ( FUNC_Defined FUNC_Public )
struct AVolume_execPostBeginPlay_Parms {
};


//  Volume.Encompasses 20400 0 ( FUNC_Native FUNC_Public )
struct AVolume_execEncompasses_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


// AVolume 32 ( CLASS_Compiled CLASS_Parsed CLASS_Localized )
class DLL_IMPORT AVolume : public ABrush {
  public:
    class AActor* AssociatedActor;  // 47C 2000000 CPF_EditorData
    FName AssociatedActorTag;  // 480 2000001 CPF_Edit CPF_EditorData
    INT LocationPriority;  // 484 2000001 CPF_Edit CPF_EditorData
    class FString LocationName;  // 488 408001 CPF_Edit CPF_Localized CPF_NeedCtorLink
    class ADecorationList* DecoList;  // 490 A000001 CPF_Edit CPF_EditorData CPF_Unk_08000000
    virtual ~AVolume(void);
    virtual unsigned int GetCPPSize(void);
    virtual int ShouldTrace(class AActor *,unsigned long);
    virtual void SetVolumes(void);
    virtual void SetVolumes(class TArray<class AVolume *> const &);
    virtual void PostBeginPlay(void);
    virtual int IsAVolume(void);
    AVolume(class AVolume const &);
    AVolume(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AVolume & operator=(class AVolume const &);
    int Encompasses(class FVector);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void execEncompasses(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(AVolume,0,execEncompasses)


//------------------------------------------------------------------------------
//  NavigationPoint
//------------------------------------------------------------------------------

//  NavigationPoint.PlayerToucherDied 20000 0 ( FUNC_Public )
struct ANavigationPoint_execPlayerToucherDied_Parms {
  class APawn* P;  // 0 80 CPF_Parm
};


//  NavigationPoint.MoverClosed 20000 0 ( FUNC_Public )
struct ANavigationPoint_execMoverClosed_Parms {
};


//  NavigationPoint.MoverOpened 20000 0 ( FUNC_Public )
struct ANavigationPoint_execMoverOpened_Parms {
};


//  NavigationPoint.ProceedWithMove 20002 0 ( FUNC_Defined FUNC_Public )
struct ANavigationPoint_execProceedWithMove_Parms {
  class APawn* Other;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  NavigationPoint.SuggestMovePreparation 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ANavigationPoint_eventSuggestMovePreparation_Parms {
  class APawn* Other;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  NavigationPoint.DetourWeight 20800 0 ( FUNC_Event FUNC_Public )
struct ANavigationPoint_eventDetourWeight_Parms {
  class APawn* Other;  // 0 80 CPF_Parm
  FLOAT PathWeight;  // 4 80 CPF_Parm
  FLOAT ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  NavigationPoint.Accept 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ANavigationPoint_eventAccept_Parms {
  class AActor* Incoming;  // 0 80 CPF_Parm
  class AActor* Source;  // 4 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  NavigationPoint.SpecialCost 20800 0 ( FUNC_Event FUNC_Public )
struct ANavigationPoint_eventSpecialCost_Parms {
  class APawn* Seeker;  // 0 80 CPF_Parm
  class UReachSpec* Path;  // 4 80 CPF_Parm
  INT ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  NavigationPoint.SetBaseVisibility 20002 0 ( FUNC_Defined FUNC_Public )
struct ANavigationPoint_execSetBaseVisibility_Parms {
  INT BaseNum;  // 0 80 CPF_Parm
};


//  NavigationPoint.SetBaseDistance 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct ANavigationPoint_execSetBaseDistance_Parms {
  INT BaseNum;  // 0 80 CPF_Parm
};


//  NavigationPoint.PostBeginPlay 20002 0 ( FUNC_Defined FUNC_Public )
struct ANavigationPoint_execPostBeginPlay_Parms {
};


// ANavigationPoint 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT ANavigationPoint : public AActor {
  public:
    BITFIELD bEndPoint : 1;  // 420 2002000 CPF_Transient CPF_EditorData
    BITFIELD bTransientEndPoint : 1;  // 420 2002000 CPF_Transient CPF_EditorData
    BITFIELD bHideEditorPaths : 1;  // 420 2002000 CPF_Transient CPF_EditorData
    BITFIELD bCanReach : 1;  // 420 2002000 CPF_Transient CPF_EditorData
    BITFIELD taken : 1;  // 420 2000000 CPF_EditorData
    BITFIELD bBlocked : 1;  // 420 2000001 CPF_Edit CPF_EditorData
    BITFIELD bPropagatesSound : 1;  // 420 2000001 CPF_Edit CPF_EditorData
    BITFIELD bOneWayPath : 1;  // 420 2000001 CPF_Edit CPF_EditorData
    BITFIELD bNeverUseStrafing : 1;  // 420 2000001 CPF_Edit CPF_EditorData
    BITFIELD bAlwaysUseStrafing : 1;  // 420 2000001 CPF_Edit CPF_EditorData
    BITFIELD bForceNoStrafing : 1;  // 420 2000002 CPF_Const CPF_EditorData
    BITFIELD bAutoBuilt : 1;  // 420 2000002 CPF_Const CPF_EditorData
    BITFIELD bSpecialMove : 1;  // 420 2000000 CPF_EditorData
    BITFIELD bNoAutoConnect : 1;  // 420 2000000 CPF_EditorData
    BITFIELD bNotBased : 1;  // 420 2000002 CPF_Const CPF_EditorData
    BITFIELD bPathsChanged : 1;  // 420 2000002 CPF_Const CPF_EditorData
    BITFIELD bDestinationOnly : 1;  // 420 2000000 CPF_EditorData
    BITFIELD bSourceOnly : 1;  // 420 2000000 CPF_EditorData
    BITFIELD bSpecialForced : 1;  // 420 2000000 CPF_EditorData
    BITFIELD bMustBeReachable : 1;  // 420 2000000 CPF_EditorData
    BITFIELD bBlockable : 1;  // 420 2000000 CPF_EditorData
    BITFIELD bFlyingPreferred : 1;  // 420 2000000 CPF_EditorData
    BITFIELD bMayCausePain : 1;  // 420 2000000 CPF_EditorData
    BITFIELD bReceivePlayerToucherDiedNotify : 1;  // 420 0
    BITFIELD bAlreadyVisited : 1;  // 420 2000000 CPF_EditorData
    BITFIELD bVehicleDestination : 1;  // 420 2000001 CPF_Edit CPF_EditorData
    BITFIELD bMakeSourceOnly : 1;  // 420 1 CPF_Edit
    BITFIELD bNoSuperSize : 1;  // 420 2000001 CPF_Edit CPF_EditorData
    BITFIELD bForcedOnly : 1;  // 420 2000000 CPF_EditorData
    TArray<class UReachSpec*> PathList;  // 424 2400002 CPF_Const CPF_NeedCtorLink CPF_EditorData
    FName ProscribedPaths[4];  // 430 2000001 CPF_Edit CPF_EditorData
    FName ForcedPaths[4];  // 440 2000001 CPF_Edit CPF_EditorData
    INT visitedWeight;  // 450 0
    INT bestPathWeight;  // 454 2 CPF_Const
    class ANavigationPoint* nextNavigationPoint;  // 458 2 CPF_Const
    class ANavigationPoint* nextOrdered;  // 45C 2000002 CPF_Const CPF_EditorData
    class ANavigationPoint* prevOrdered;  // 460 2000002 CPF_Const CPF_EditorData
    class ANavigationPoint* previousPath;  // 464 2 CPF_Const
    INT cost;  // 468 2000000 CPF_EditorData
    INT ExtraCost;  // 46C 2000001 CPF_Edit CPF_EditorData
    INT TransientCost;  // 470 2002000 CPF_Transient CPF_EditorData
    INT FearCost;  // 474 2002000 CPF_Transient CPF_EditorData
    FLOAT LastDetourWeight;  // 478 2 CPF_Const
    BYTE BaseVisible[2];  // 47C 2000000 CPF_EditorData
    FLOAT BaseDist[2];  // 480 2000000 CPF_EditorData
    class FVector MaxPathSize;  // 488 0
    virtual ~ANavigationPoint(void);
    virtual void Destroy(void);
    virtual unsigned int GetCPPSize(void);
    virtual void PostEditMove(void);
    virtual void Spawned(void);
    virtual void SetVolumes(void);
    virtual void SetVolumes(class TArray<class AVolume *> const &);
    virtual int AddMyMarker(class AActor *);
    virtual void CheckForErrors(void);
    virtual void PrePath(void);
    virtual void PostPath(void);
    virtual int ProscribedPathTo(class ANavigationPoint *);
    virtual void addReachSpecs(class APawn *,int);
    virtual void PostaddReachSpecs(class APawn *);
    virtual void InitForPathFinding(void);
    virtual void SetupForcedPath(class APawn *,class UReachSpec *);
    virtual void ClearPaths(void);
    virtual void FindBase(void);
    virtual int ShouldBeBased(void);
    virtual int IsIdentifiedAs(class FName);
    virtual int ReviewPath(class APawn *);
    virtual void CheckSymmetry(class ANavigationPoint *);
    virtual void ClearForPathFinding(void);
    virtual class AInventorySpot * GetAInventorySpot(void);
    virtual int BigAnchor(class APawn *,class FVector);
    virtual int NotReachableBy(class APawn *);
    ANavigationPoint(class ANavigationPoint const &);
    ANavigationPoint(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ANavigationPoint & operator=(class ANavigationPoint const &);
    int CanReach(class ANavigationPoint *,float,int);
    void CleanUpPruned(void);
    int FindAlternatePath(class UReachSpec *,int);
    class UReachSpec * GetReachSpecTo(class ANavigationPoint *);
    static void CDECL InternalConstructor(void *);
    int PrunePaths(void);
    void SetBaseDistance(int,float);
    static class UClass * CDECL StaticClass(void);
    unsigned long eventAccept(class AActor *,class AActor *);
    float eventDetourWeight(class APawn *,float);
    int eventSpecialCost(class APawn *,class UReachSpec *);
    unsigned long eventSuggestMovePreparation(class APawn *);
    void execSetBaseDistance(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(ANavigationPoint,0,execSetBaseDistance)


//------------------------------------------------------------------------------
//  Scout
//------------------------------------------------------------------------------

//  Scout.PreBeginPlay 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AScout_execPreBeginPlay_Parms {
};


// AScout 36 ( CLASS_Compiled CLASS_Config CLASS_Parsed CLASS_Localized )
class DLL_IMPORT AScout : public APawn {
  public:
    FLOAT MaxLandingVelocity;  // 738 2 CPF_Const
    virtual ~AScout(void);
    virtual unsigned int GetCPPSize(void);
    virtual int HurtByVolume(class AActor *);
    AScout(class AScout const &);
    AScout(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AScout & operator=(class AScout const &);
    void InitForPathing(void);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    int findStart(class FVector);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Info
//------------------------------------------------------------------------------

//  Info.GetDescriptionText 22802 0 ( FUNC_Defined FUNC_Event FUNC_Static FUNC_Public )
struct AInfo_eventGetDescriptionText_Parms {
  class FString PropName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString ReturnValue;  // 8 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  Info.GetSecurityLevel 22802 0 ( FUNC_Defined FUNC_Event FUNC_Static FUNC_Public )
struct AInfo_eventGetSecurityLevel_Parms {
  class FString PropName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BYTE ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Info.AllowClassRemoval 22802 0 ( FUNC_Defined FUNC_Event FUNC_Static FUNC_Public )
struct AInfo_eventAllowClassRemoval_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Info.AcceptPlayInfoProperty 22802 0 ( FUNC_Defined FUNC_Event FUNC_Static FUNC_Public )
struct AInfo_eventAcceptPlayInfoProperty_Parms {
  class FString PropertyName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Info.FillPlayInfo 22002 0 ( FUNC_Defined FUNC_Static FUNC_Public )
struct AInfo_execFillPlayInfo_Parms {
  class UPlayInfo* PlayInfo;  // 0 80 CPF_Parm
};


// AInfo 13 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT AInfo : public AActor {
  public:
    virtual ~AInfo(void);
    virtual unsigned int GetCPPSize(void);
    AInfo(class AInfo const &);
    AInfo(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AInfo & operator=(class AInfo const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    unsigned long eventAcceptPlayInfoProperty(class FString const &);
    unsigned long eventAllowClassRemoval(void);
    class FString eventGetDescriptionText(class FString const &);
    unsigned char eventGetSecurityLevel(class FString const &);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  GameInfo
//------------------------------------------------------------------------------

//  GameInfo.PlayerRespawned 20000 0 ( FUNC_Public )
struct AGameInfo_execPlayerRespawned_Parms {
  class AController* aContoller;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GameInfo.PlayerDied 20000 0 ( FUNC_Public )
struct AGameInfo_execPlayerDied_Parms {
  class AController* aContoller;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GameInfo.FindPlayerStart 20002 0 ( FUNC_Defined FUNC_Public )
struct AGameInfo_execFindPlayerStart_Parms {
  class ANavigationPoint* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GameInfo.cl_OnUpdate 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct AGameInfo_eventcl_OnUpdate_Parms {
};


//  GameInfo.cl_OnBaseline 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct AGameInfo_eventcl_OnBaseline_Parms {
};


//  GameInfo.cl_OnShutdown 20800 0 ( FUNC_Event FUNC_Public )
struct AGameInfo_eventcl_OnShutdown_Parms {
};


//  GameInfo.cl_OnInit 20800 0 ( FUNC_Event FUNC_Public )
struct AGameInfo_eventcl_OnInit_Parms {
};


//  GameInfo.sv_OnShutdown 20800 0 ( FUNC_Event FUNC_Public )
struct AGameInfo_eventsv_OnShutdown_Parms {
};


//  GameInfo.sv_OnInit 20800 0 ( FUNC_Event FUNC_Public )
struct AGameInfo_eventsv_OnInit_Parms {
};


// AGameInfo C00013 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT AGameInfo : public AInfo {
  public:
    virtual ~AGameInfo(void);
    virtual unsigned int GetCPPSize(void);
    AGameInfo(class AGameInfo const &);
    AGameInfo(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AGameInfo & operator=(class AGameInfo const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void eventcl_OnInit(void);
    void eventcl_OnShutdown(void);
    void eventsv_OnInit(void);
    void eventsv_OnShutdown(void);
    bool handleACCData(int,class d_std::buffer &);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  EnvironmentSettings
//------------------------------------------------------------------------------

// FEmitterModifier 1 ( CLASS_Abstract )
struct DLL_IMPORT FEmitterModifier {
  public:
    FLOAT DensityMultiplier;  // 0 1 CPF_Edit
    FLOAT SizeMultiplier;  // 4 1 CPF_Edit
    FLOAT VelocityMultiplier;  // 8 1 CPF_Edit
    BYTE HueModifier;  // C 1 CPF_Edit
    FLOAT SaturationMultiplier;  // 10 1 CPF_Edit
    FLOAT BrightnessMultiplier;  // 14 1 CPF_Edit
    FLOAT OpacityMultiplier;  // 18 1 CPF_Edit
    struct FEmitterModifier & operator=(struct FEmitterModifier const &);
};

// FLightHSB 1 ( CLASS_Abstract )
struct DLL_IMPORT FLightHSB {
  public:
    BYTE LightHue;  // 0 1 CPF_Edit
    BYTE LightSaturation;  // 1 1 CPF_Edit
    FLOAT LightBrightness;  // 4 1 CPF_Edit
    struct FLightHSB & operator=(struct FLightHSB const &);
};

// UEnvironmentSettings 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UEnvironmentSettings : public UObject {
  public:
    FLOAT BloomContrast;  // 28 1 CPF_Edit
    FLOAT BloomScreenAmount;  // 2C 1 CPF_Edit
    FLOAT OriginalScreenAmount;  // 30 1 CPF_Edit
    FLOAT BlurScreenAmount;  // 34 1 CPF_Edit
    class FColor DistanceFogColor;  // 38 1 CPF_Edit
    FLOAT DistanceFogEnd;  // 3C 1 CPF_Edit
    FLOAT DistanceFogEndMin;  // 40 1 CPF_Edit
    FLOAT DistanceFogStart;  // 44 1 CPF_Edit
    BYTE AmbientBrightness;  // 48 1 CPF_Edit
    BYTE AmbientHue;  // 49 1 CPF_Edit
    BYTE AmbientSaturation;  // 4A 1 CPF_Edit
    FLOAT SunlightsBrightness;  // 4C 1 CPF_Edit
    FLOAT SunlightsContrastAdjust;  // 50 1 CPF_Edit
    FLOAT LightmapContrastAdjust;  // 54 1 CPF_Edit
    class FColor HUDColorModifier;  // 58 1 CPF_Edit
    struct FLightHSB LightColor[8];  // 5C 1 CPF_Edit
    struct FEmitterModifier EmitterMod[8];  // 9C 1 CPF_Edit
    virtual ~UEnvironmentSettings(void);
    virtual unsigned int GetCPPSize(void);
    UEnvironmentSettings(class UEnvironmentSettings const &);
    UEnvironmentSettings(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UEnvironmentSettings & operator=(class UEnvironmentSettings const &);
    static void CDECL Copy(class UEnvironmentSettings *,class UEnvironmentSettings const *);
    static void CDECL InternalConstructor(void *);
    static void CDECL Lerp(class UEnvironmentSettings *,class UEnvironmentSettings const *,float,class UEnvironmentSettings const *);
    static void CDECL LerpAmbient(unsigned char *,unsigned char *,unsigned char *,unsigned char,unsigned char,unsigned char,float,unsigned char,unsigned char,unsigned char);
    static void CDECL LerpColor(class FColor *,class FColor const &,float,class FColor const &);
    static class UClass * CDECL StaticClass(void);
  protected:
    static void CDECL CopyEmitter(int,class UEnvironmentSettings *,class UEnvironmentSettings const *);
    static void CDECL CopyHUD(class UEnvironmentSettings *,class UEnvironmentSettings const *);
    static void CDECL CopyLight(int,class UEnvironmentSettings *,class UEnvironmentSettings const *);
    static void CDECL CopyZoneInfo(class UEnvironmentSettings *,class UEnvironmentSettings const *);
    static void CDECL LerpEmitter(struct FEmitterModifier *,struct FEmitterModifier const *,float,struct FEmitterModifier const *);
    static void CDECL LerpHUD(class UEnvironmentSettings *,class UEnvironmentSettings const *,float,class UEnvironmentSettings const *);
    static void CDECL LerpLight(int,class UEnvironmentSettings *,class UEnvironmentSettings const *,float,class UEnvironmentSettings const *);
    static void CDECL LerpZoneInfo(class UEnvironmentSettings *,class UEnvironmentSettings const *,float,class UEnvironmentSettings const *);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  TimedEnvironmentEffect
//------------------------------------------------------------------------------

// FEventRange 0 ( )
struct DLL_IMPORT FEventRange {
  public:
    FName Event;  // 0 1 CPF_Edit
    FName InRangeEvent;  // 4 1 CPF_Edit
    FName OutOfRangeEvent;  // 8 1 CPF_Edit
    FLOAT RangeBeginTime;  // C 1 CPF_Edit
    FLOAT RangeEndTime;  // 10 1 CPF_Edit
    INT WasInRange;  // 14 2000 CPF_Transient
    FEventRange(void);
    struct FEventRange & operator=(struct FEventRange const &);
};

// ATimedEnvironmentEffect 4212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate CLASS_ExportStructs )
class DLL_IMPORT ATimedEnvironmentEffect : public AEnvironmentEffect {
  public:
    FLOAT PreviewSpeed;  // 428 2001 CPF_Edit CPF_Transient
    BYTE PreviewProgress;  // 42C 2001 CPF_Edit CPF_Transient
    FLOAT PreviewRelative;  // 430 0
    FLOAT UpdateSpeed;  // 434 1 CPF_Edit
    FLOAT UpdateTimer;  // 438 0
    TArray<struct FEventRange> Events;  // 43C 400001 CPF_Edit CPF_NeedCtorLink
    FLOAT mDefaultTime;  // 448 2000000 CPF_EditorData
    virtual ~ATimedEnvironmentEffect(void);
    virtual void PostLoad(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Tick(float,enum ELevelTick);
  private:
    virtual void Update(void);
  public:
    virtual void TickPreview(float);
    virtual float GetTime(void);
    virtual void UpdateAtTime(float);
    ATimedEnvironmentEffect(class ATimedEnvironmentEffect const &);
    ATimedEnvironmentEffect(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ATimedEnvironmentEffect & operator=(class ATimedEnvironmentEffect const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  GameEngine
//------------------------------------------------------------------------------

// FURL 0 ( )
class DLL_IMPORT FURL {
  public:
    class FString Protocol;  // 0 400000 CPF_NeedCtorLink
    class FString Host;  // 8 400000 CPF_NeedCtorLink
    INT Port;  // 10 0
    class FString Map;  // 14 400000 CPF_NeedCtorLink
    TArray<class FString> Op;  // 1C 400000 CPF_NeedCtorLink
    class FString Portal;  // 28 400000 CPF_NeedCtorLink
    INT Valid;  // 30 0
    FURL(class FURL const &);
    FURL(class FURL *,unsigned short const *,enum ETravelType);
    FURL(unsigned short const *);
    ~FURL(void);
    class FURL & operator=(class FURL const &);
    friend class FArchive & CDECL operator<<(class FArchive &,class FURL &);
    int operator==(class FURL const &)const ;
    void AddOption(unsigned short const *);
    static class FString DefaultHost;
    static class FString DefaultLocalMap;
    static class FString DefaultMap;
    static class FString DefaultMapExt;
    static class FString DefaultName;
    static class FString DefaultNetBrowseMap;
    static int DefaultPort;
    static class FString DefaultPortal;
    static class FString DefaultProtocol;
    static class FString DefaultProtocolDescription;
    static class FString DefaultSaveExt;
    unsigned short const * GetOption(unsigned short const *,unsigned short const *)const ;
    int HasOption(unsigned short const *)const ;
    int IsInternal(void)const ;
    int IsLocalInternal(void)const ;
    void LoadURLConfig(unsigned short const *,unsigned short const *);
    class FString OptionString(int)const ;
    void RemoveOption(unsigned short const *,unsigned short const *,unsigned short const *);
    void SaveURLConfig(unsigned short const *,unsigned short const *,unsigned short const *)const ;
    static void CDECL StaticExit(void);
    static void CDECL StaticInit(void);
    class FString String(int,int)const ;
};

//  GameEngine.GetInstanceID 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UGameEngine_execGetInstanceID_Parms {
  INT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GameEngine.IsInstance 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UGameEngine_execIsInstance_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GameEngine.GetUniverseID 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UGameEngine_execGetUniverseID_Parms {
  INT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GameEngine.GetWorldID 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UGameEngine_execGetWorldID_Parms {
  INT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GameEngine.GetPlayerController 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UGameEngine_execGetPlayerController_Parms {
  class APlayerController* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GameEngine.AllActors 20405 0 ( FUNC_Final FUNC_Iterator FUNC_Native FUNC_Public )
struct UGameEngine_execAllActors_Parms {
  class UClass* BaseClass;  // 0 80 CPF_Parm
  class AActor* Actor;  // 4 180 CPF_Parm CPF_OutParm
  FName MatchTag;  // 8 90 CPF_OptionalParm CPF_Parm
};


//  GameEngine.Spawn 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UGameEngine_execSpawn_Parms {
  class UClass* SpawnClass;  // 0 80 CPF_Parm
  class AActor* SpawnOwner;  // 4 90 CPF_OptionalParm CPF_Parm
  FName SpawnTag;  // 8 90 CPF_OptionalParm CPF_Parm
  class FVector SpawnLocation;  // C 90 CPF_OptionalParm CPF_Parm
  class FRotator SpawnRotation;  // 18 90 CPF_OptionalParm CPF_Parm
  INT InstanceID;  // 24 90 CPF_OptionalParm CPF_Parm
  class AActor* ReturnValue;  // 28 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


// UGameEngine 11E ( CLASS_Compiled CLASS_Config CLASS_Transient CLASS_Parsed CLASS_NoExport )
class DLL_IMPORT UGameEngine : public UEngine/*,FExec*/  {
  public:
    class FString mGameType;  // 130 400000 CPF_NeedCtorLink
    class FString mWorldFile;  // 138 400000 CPF_NeedCtorLink
    class FURL LastURL;  // 140 400000 CPF_NeedCtorLink
    TArray<class FString> ServerActors;  // 174 404000 CPF_Config CPF_NeedCtorLink
    TArray<class FString> ServerPackages;  // 180 404000 CPF_Config CPF_NeedCtorLink
    BITFIELD ColorHighDetailMeshes : 1;  // 18C 4001 CPF_Edit CPF_Config
    BITFIELD ColorSlowCollisionMeshes : 1;  // 18C 4001 CPF_Edit CPF_Config
    BITFIELD ColorNoCollisionMeshes : 1;  // 18C 4001 CPF_Edit CPF_Config
    BITFIELD ColorWorldTextures : 1;  // 18C 4001 CPF_Edit CPF_Config
    BITFIELD ColorPlayerAndWeaponTextures : 1;  // 18C 4001 CPF_Edit CPF_Config
    BITFIELD ColorInterfaceTextures : 1;  // 18C 4001 CPF_Edit CPF_Config
    BITFIELD VoIPAllowVAD : 1;  // 18C 44001 CPF_Edit CPF_Config CPF_GlobalConfig
    class ALevelInfo* LevelInfo;  // 190 2000002 CPF_Const CPF_EditorData
    class ULevel* GLevel;  // 194 2 CPF_Const
    class AGameInfo* GGameInfo;  // 198 2 CPF_Const
    INT DetailMode;  // 19C 2000002 CPF_Const CPF_EditorData
    //virtual int Exec(unsigned short const *,class FOutputDevice &);
    virtual ~UGameEngine(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual void Init(void);
    virtual void Loop(float);
    virtual void Draw(class UViewport *,int,unsigned char *,int *);
    virtual void MouseDelta(class UViewport *,unsigned long,float,float);
    virtual void MousePosition(class UViewport *,unsigned long,float,float);
    virtual void MouseWheel(class UViewport *,unsigned long,int);
    virtual void Click(class UViewport *,unsigned long,float,float);
    virtual void UnClick(class UViewport *,unsigned long,int,int);
    virtual int shutdown(void);
    virtual class APlayerController * GetPlayerController(void);
    virtual void on_create(class AActor *);
    virtual void on_destroy(class AActor *);
    virtual void register_special(class AActor *);
    virtual void unregister_special(class AActor *);
    virtual bool is_server(void)const ;
    virtual bool is_client(void)const ;
    virtual bool is_launcher(void)const ;
    virtual void InitActors(class ULevel *,int,int);
    virtual void PostLevelLoad(void);
    virtual void CreateGameInfo(void);
    virtual void InitLevelInfo(void);
    virtual void InitGameInfo(void);
    virtual int GetWorldID(void);
    virtual int GetUniverseID(void);
    virtual int GetInstanceID(void);
    virtual bool IsInstance(void)const ;
    virtual void OutputVersionInfo(class FOutputDevice &);
    UGameEngine(class UGameEngine const &);
    UGameEngine(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UGameEngine & operator=(class UGameEngine const &);
    void CallGarbageCollector(void);
    void InitActorPhysics(class ULevel *,int,int);
    static void CDECL InternalConstructor(void *);
    void LoadLevel(unsigned short const *);
    void LoadLevel(void);
    static class UClass * CDECL StaticClass(void);
    static void CDECL UnExec(int,char const * *);
    static class UGameEngine * _instance;
    static void CDECL actor_list(int,char const * *);
    static void CDECL actor_stats(int,char const * *);
    void execAllActors(struct FFrame &,void * const);
    void execGetInstanceID(struct FFrame &,void * const);
    void execGetPlayerController(struct FFrame &,void * const);
    void execGetUniverseID(struct FFrame &,void * const);
    void execGetWorldID(struct FFrame &,void * const);
    void execIsInstance(struct FFrame &,void * const);
    void execSpawn(struct FFrame &,void * const);
    static unsigned int CDECL find_levelobject_index(class AActor const *);
    static class AGameInfo * CDECL get_gameinfo(int);
    static class AActor * CDECL get_levelobject(unsigned int,int);
    static class std::vector<class AActor *,class std::allocator<class AActor *> > const CDECL get_levelobjects(int);
    static class std::map<int,class AGameInfo *,struct std::less<int>,class std::allocator<struct std::pair<int const ,class AGameInfo *> > > mGameInfos;
    static class std::map<int,class std::vector<class AActor *,class std::allocator<class AActor *> >,struct std::less<int>,class std::allocator<struct std::pair<int const ,class std::vector<class AActor *,class std::allocator<class AActor *> > > > > mLevelObjects;
    static void CDECL register_gameinfo(class AGameInfo *);
    static void CDECL register_levelobject(class AActor *);
    static void CDECL remove_gameinfos(int);
    static void CDECL remove_levelobjects(int);
    static void CDECL unregister_gameinfo(class AGameInfo *);
    static void CDECL unregister_levelobject(class AActor *);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(UGameEngine,0,execAllActors)
AUTOGENERATE_FUNCTION(UGameEngine,0,execGetInstanceID)
AUTOGENERATE_FUNCTION(UGameEngine,0,execGetPlayerController)
AUTOGENERATE_FUNCTION(UGameEngine,0,execGetUniverseID)
AUTOGENERATE_FUNCTION(UGameEngine,0,execGetWorldID)
AUTOGENERATE_FUNCTION(UGameEngine,0,execIsInstance)
AUTOGENERATE_FUNCTION(UGameEngine,0,execSpawn)


//------------------------------------------------------------------------------
//  Engine
//------------------------------------------------------------------------------

// UEngine 11E ( CLASS_Compiled CLASS_Config CLASS_Transient CLASS_Parsed CLASS_NoExport )
class DLL_IMPORT UEngine : public USubsystem/*,FExec*/  {
  public:
    class UPrimitive* Cylinder;  // 2C 0
    class UClient* Client;  // 30 2 CPF_Const
    class UAudioSubsystem* Audio;  // 34 2 CPF_Const
    class URenderDevice* GRenDev;  // 38 2 CPF_Const
    class USBAudioManager* AudioManager;  // 3C 2000002 CPF_Const CPF_EditorData
    INT bShowFrameRate;  // 40 0
    INT bShowRenderStats;  // 44 0
    INT bShowHardwareStats;  // 48 0
    INT bShowGameStats;  // 4C 0
    INT bShowAnimStats;  // 50 2000000 CPF_EditorData
    INT bShowLIPSincStats;  // 54 2000000 CPF_EditorData
    INT bShowHistograph;  // 58 0
    INT bShowXboxMemStats;  // 5C 0
    INT bShowMatineeStats;  // 60 2000000 CPF_EditorData
    INT bShowAudioStats;  // 64 0
    INT bShowLightStats;  // 68 2000000 CPF_EditorData
    INT bShowClothStats;  // 6C 2000000 CPF_EditorData
    INT bShowSkillStats;  // 70 2000000 CPF_EditorData
    INT bShowCombatStats;  // 74 2000000 CPF_EditorData
    INT bShowBacthStats;  // 78 2000000 CPF_EditorData
    INT bShowRenDevStats;  // 7C 2000000 CPF_EditorData
    INT bShowStatWindow;  // 80 2000000 CPF_EditorData
    INT bShowSBClock;  // 84 2000000 CPF_EditorData
    INT TickCycles;  // 88 0
    INT GameCycles;  // 8C 0
    INT ClientCycles;  // 90 0
    INT TickCounter;  // 94 0
    INT DetectedVideoMemory;  // 98 4000 CPF_Config
    INT CacheSizeMegs;  // 9C 4001 CPF_Edit CPF_Config
    INT MultiSampleQL;  // A0 4001 CPF_Edit CPF_Config
    BITFIELD UseSound : 1;  // A4 4001 CPF_Edit CPF_Config
    BITFIELD UseStaticMeshBatching : 1;  // A4 4001 CPF_Edit CPF_Config
    BITFIELD ServerReadsStdin : 1;  // A4 4001 CPF_Edit CPF_Config
    BITFIELD UseDynamicTicking : 1;  // A4 2004001 CPF_Edit CPF_Config CPF_EditorData
    BITFIELD RenderBSP : 1;  // A4 4001 CPF_Edit CPF_Config
    BITFIELD UseHQSun : 1;  // A4 4001 CPF_Edit CPF_Config
    BITFIELD UseLightmapping : 1;  // A4 4001 CPF_Edit CPF_Config
    BITFIELD UseMultiSample : 1;  // A4 4001 CPF_Edit CPF_Config
    FLOAT CurrentTickRate;  // A8 1 CPF_Edit
    class FColor C_WorldBox;  // AC 4001 CPF_Edit CPF_Config
    class FColor C_GroundPlane;  // B0 4001 CPF_Edit CPF_Config
    class FColor C_GroundHighlight;  // B4 4001 CPF_Edit CPF_Config
    class FColor C_BrushWire;  // B8 4001 CPF_Edit CPF_Config
    class FColor C_Pivot;  // BC 4001 CPF_Edit CPF_Config
    class FColor C_Select;  // C0 4001 CPF_Edit CPF_Config
    class FColor C_Current;  // C4 4001 CPF_Edit CPF_Config
    class FColor C_AddWire;  // C8 4001 CPF_Edit CPF_Config
    class FColor C_SubtractWire;  // CC 4001 CPF_Edit CPF_Config
    class FColor C_GreyWire;  // D0 4001 CPF_Edit CPF_Config
    class FColor C_BrushVertex;  // D4 4001 CPF_Edit CPF_Config
    class FColor C_BrushSnap;  // D8 4001 CPF_Edit CPF_Config
    class FColor C_Invalid;  // DC 4001 CPF_Edit CPF_Config
    class FColor C_ActorWire;  // E0 4001 CPF_Edit CPF_Config
    class FColor C_ActorHiWire;  // E4 4001 CPF_Edit CPF_Config
    class FColor C_Black;  // E8 4001 CPF_Edit CPF_Config
    class FColor C_White;  // EC 4001 CPF_Edit CPF_Config
    class FColor C_Mask;  // F0 4001 CPF_Edit CPF_Config
    class FColor C_SemiSolidWire;  // F4 4001 CPF_Edit CPF_Config
    class FColor C_NonSolidWire;  // F8 4001 CPF_Edit CPF_Config
    class FColor C_WireBackground;  // FC 4001 CPF_Edit CPF_Config
    class FColor C_WireGridAxis;  // 100 4001 CPF_Edit CPF_Config
    class FColor C_ActorArrow;  // 104 4001 CPF_Edit CPF_Config
    class FColor C_ScaleBox;  // 108 4001 CPF_Edit CPF_Config
    class FColor C_ScaleBoxHi;  // 10C 4001 CPF_Edit CPF_Config
    class FColor C_ZoneWire;  // 110 4001 CPF_Edit CPF_Config
    class FColor C_Mover;  // 114 4001 CPF_Edit CPF_Config
    class FColor C_OrthoBackground;  // 118 4001 CPF_Edit CPF_Config
    class FColor C_StaticMesh;  // 11C 4001 CPF_Edit CPF_Config
    class FColor C_VolumeBrush;  // 120 4001 CPF_Edit CPF_Config
    class FColor C_ConstraintLine;  // 124 4001 CPF_Edit CPF_Config
    class FColor C_AnimMesh;  // 128 4001 CPF_Edit CPF_Config
    class FColor C_TerrainWire;  // 12C 4001 CPF_Edit CPF_Config
    //virtual int Exec(unsigned short const *,class FOutputDevice &);
    virtual ~UEngine(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    virtual void BreakCompatibility(void);
    virtual void Init(void);
    virtual void ReInit(void);
    virtual void Flush(int,enum EFlushType);
    virtual void UpdateGamma(void);
    virtual void RestoreGamma(void);
    virtual int Key(class UViewport *,enum EInputKey,unsigned short);
    virtual int InputEvent(class UViewport *,enum EInputKey,enum EInputAction,float);
    virtual float GetMaxTickRate(void);
    virtual void SetProgress(unsigned short const *,unsigned short const *,unsigned short const *,float);
    virtual void edSetClickLocation(class FVector &);
    virtual void edDrawAxisIndicator(class FSceneNode *);
    virtual int edcamMode(class UViewport *);
    virtual int edcamTerrainBrush(void);
    virtual int edcamMouseControl(class UViewport *);
    virtual void EdCallback(unsigned long,int,unsigned long);
    virtual int AnotherDummyFunctionToBreakCompatibility(int);
    virtual int ReallyBreakCompatibility(int);
    virtual void DrawGameStats(class UViewport *,int);
    UEngine(class UEngine const &);
    UEngine(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UEngine & operator=(class UEngine const &);
    void InitAudio(void);
    static class UClass * CDECL StaticClass(void);
    void StaticConstructor(void);
    static class UEngine * _instance;
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Interactions
//------------------------------------------------------------------------------

enum EStreamFinishReason {
  STREAMFINISH_EOF = 0,
  STREAMFINISH_Error = 1
};

enum EInputKey {
  IK_None = 0,
  IK_LeftMouse = 1,
  IK_RightMouse = 2,
  IK_Cancel = 3,
  IK_MiddleMouse = 4,
  IK_Unknown05 = 5,
  IK_Unknown06 = 6,
  IK_Unknown07 = 7,
  IK_Backspace = 8,
  IK_Tab = 9,
  IK_Unknown0A = 10,
  IK_Unknown0B = 11,
  IK_Unknown0C = 12,
  IK_Enter = 13,
  IK_Unknown0E = 14,
  IK_Unknown0F = 15,
  IK_Shift = 16,
  IK_Ctrl = 17,
  IK_Alt = 18,
  IK_Pause = 19,
  IK_CapsLock = 20,
  IK_Unknown15 = 21,
  IK_Unknown16 = 22,
  IK_Unknown17 = 23,
  IK_Unknown18 = 24,
  IK_Unknown19 = 25,
  IK_Unknown1A = 26,
  IK_Escape = 27,
  IK_Unknown1C = 28,
  IK_Unknown1D = 29,
  IK_Unknown1E = 30,
  IK_Unknown1F = 31,
  IK_Space = 32,
  IK_PageUp = 33,
  IK_PageDown = 34,
  IK_End = 35,
  IK_Home = 36,
  IK_Left = 37,
  IK_Up = 38,
  IK_Right = 39,
  IK_Down = 40,
  IK_Select = 41,
  IK_Print = 42,
  IK_Execute = 43,
  IK_PrintScrn = 44,
  IK_Insert = 45,
  IK_Delete = 46,
  IK_Help = 47,
  IK_0 = 48,
  IK_1 = 49,
  IK_2 = 50,
  IK_3 = 51,
  IK_4 = 52,
  IK_5 = 53,
  IK_6 = 54,
  IK_7 = 55,
  IK_8 = 56,
  IK_9 = 57,
  IK_Unknown3A = 58,
  IK_Unknown3B = 59,
  IK_Unknown3C = 60,
  IK_Unknown3D = 61,
  IK_Unknown3E = 62,
  IK_Unknown3F = 63,
  IK_Unknown40 = 64,
  IK_A = 65,
  IK_B = 66,
  IK_C = 67,
  IK_D = 68,
  IK_E = 69,
  IK_F = 70,
  IK_G = 71,
  IK_H = 72,
  IK_I = 73,
  IK_J = 74,
  IK_K = 75,
  IK_L = 76,
  IK_M = 77,
  IK_N = 78,
  IK_O = 79,
  IK_P = 80,
  IK_Q = 81,
  IK_R = 82,
  IK_S = 83,
  IK_T = 84,
  IK_U = 85,
  IK_V = 86,
  IK_W = 87,
  IK_X = 88,
  IK_Y = 89,
  IK_Z = 90,
  IK_Unknown5B = 91,
  IK_Unknown5C = 92,
  IK_Unknown5D = 93,
  IK_Unknown5E = 94,
  IK_Unknown5F = 95,
  IK_NumPad0 = 96,
  IK_NumPad1 = 97,
  IK_NumPad2 = 98,
  IK_NumPad3 = 99,
  IK_NumPad4 = 100,
  IK_NumPad5 = 101,
  IK_NumPad6 = 102,
  IK_NumPad7 = 103,
  IK_NumPad8 = 104,
  IK_NumPad9 = 105,
  IK_GreyStar = 106,
  IK_GreyPlus = 107,
  IK_Separator = 108,
  IK_GreyMinus = 109,
  IK_NumPadPeriod = 110,
  IK_GreySlash = 111,
  IK_F1 = 112,
  IK_F2 = 113,
  IK_F3 = 114,
  IK_F4 = 115,
  IK_F5 = 116,
  IK_F6 = 117,
  IK_F7 = 118,
  IK_F8 = 119,
  IK_F9 = 120,
  IK_F10 = 121,
  IK_F11 = 122,
  IK_F12 = 123,
  IK_F13 = 124,
  IK_F14 = 125,
  IK_F15 = 126,
  IK_F16 = 127,
  IK_F17 = 128,
  IK_F18 = 129,
  IK_F19 = 130,
  IK_F20 = 131,
  IK_F21 = 132,
  IK_F22 = 133,
  IK_F23 = 134,
  IK_F24 = 135,
  IK_Unknown88 = 136,
  IK_Unknown89 = 137,
  IK_Unknown8A = 138,
  IK_Unknown8B = 139,
  IK_Unknown8C = 140,
  IK_Unknown8D = 141,
  IK_Unknown8E = 142,
  IK_Unknown8F = 143,
  IK_NumLock = 144,
  IK_ScrollLock = 145,
  IK_Unknown92 = 146,
  IK_Unknown93 = 147,
  IK_Unknown94 = 148,
  IK_Unknown95 = 149,
  IK_Unknown96 = 150,
  IK_Unknown97 = 151,
  IK_Unknown98 = 152,
  IK_Unknown99 = 153,
  IK_Unknown9A = 154,
  IK_Unknown9B = 155,
  IK_Unknown9C = 156,
  IK_Unknown9D = 157,
  IK_Unknown9E = 158,
  IK_Unknown9F = 159,
  IK_LShift = 160,
  IK_RShift = 161,
  IK_LControl = 162,
  IK_RControl = 163,
  IK_UnknownA4 = 164,
  IK_UnknownA5 = 165,
  IK_UnknownA6 = 166,
  IK_UnknownA7 = 167,
  IK_UnknownA8 = 168,
  IK_UnknownA9 = 169,
  IK_UnknownAA = 170,
  IK_UnknownAB = 171,
  IK_UnknownAC = 172,
  IK_UnknownAD = 173,
  IK_UnknownAE = 174,
  IK_UnknownAF = 175,
  IK_UnknownB0 = 176,
  IK_UnknownB1 = 177,
  IK_UnknownB2 = 178,
  IK_UnknownB3 = 179,
  IK_UnknownB4 = 180,
  IK_UnknownB5 = 181,
  IK_UnknownB6 = 182,
  IK_UnknownB7 = 183,
  IK_UnknownB8 = 184,
  IK_Unicode = 185,
  IK_Semicolon = 186,
  IK_Equals = 187,
  IK_Comma = 188,
  IK_Minus = 189,
  IK_Period = 190,
  IK_Slash = 191,
  IK_Tilde = 192,
  IK_Mouse4 = 193,
  IK_Mouse5 = 194,
  IK_Mouse6 = 195,
  IK_Mouse7 = 196,
  IK_Mouse8 = 197,
  IK_UnknownC6 = 198,
  IK_UnknownC7 = 199,
  IK_Joy1 = 200,
  IK_Joy2 = 201,
  IK_Joy3 = 202,
  IK_Joy4 = 203,
  IK_Joy5 = 204,
  IK_Joy6 = 205,
  IK_Joy7 = 206,
  IK_Joy8 = 207,
  IK_Joy9 = 208,
  IK_Joy10 = 209,
  IK_Joy11 = 210,
  IK_Joy12 = 211,
  IK_Joy13 = 212,
  IK_Joy14 = 213,
  IK_Joy15 = 214,
  IK_Joy16 = 215,
  IK_UnknownD8 = 216,
  IK_UnknownD9 = 217,
  IK_UnknownDA = 218,
  IK_LeftBracket = 219,
  IK_Backslash = 220,
  IK_RightBracket = 221,
  IK_SingleQuote = 222,
  IK_UnknownDF = 223,
  IK_UnknownE0 = 224,
  IK_UnknownE1 = 225,
  IK_UnknownE2 = 226,
  IK_UnknownE3 = 227,
  IK_MouseX = 228,
  IK_MouseY = 229,
  IK_MouseZ = 230,
  IK_MouseW = 231,
  IK_JoyU = 232,
  IK_JoyV = 233,
  IK_JoySlider1 = 234,
  IK_JoySlider2 = 235,
  IK_MouseWheelUp = 236,
  IK_MouseWheelDown = 237,
  IK_Unknown10E = 238,
  UK_Unknown10F = 239,
  IK_JoyX = 240,
  IK_JoyY = 241,
  IK_JoyZ = 242,
  IK_JoyR = 243,
  IK_UnknownF4 = 244,
  IK_UnknownF5 = 245,
  IK_Attn = 246,
  IK_CrSel = 247,
  IK_ExSel = 248,
  IK_ErEof = 249,
  IK_Play = 250,
  IK_Zoom = 251,
  IK_NoName = 252,
  IK_PA1 = 253,
  IK_OEMClear = 254
};

enum EInputAction {
  IST_None = 0,
  IST_Press = 1,
  IST_Hold = 2,
  IST_Release = 3,
  IST_Axis = 4
};

//  Interactions.GetFriendlyName 22002 0 ( FUNC_Defined FUNC_Static FUNC_Public )
struct UInteractions_execGetFriendlyName_Parms {
  BYTE iKey;  // 0 80 CPF_Parm
  class FString ReturnValue;  // 4 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


// UInteractions 13 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UInteractions : public UObject {
  public:
    virtual ~UInteractions(void);
    virtual unsigned int GetCPPSize(void);
    UInteractions(class UInteractions const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UInteractions & operator=(class UInteractions const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    UInteractions(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Interaction
//------------------------------------------------------------------------------

//  Interaction.NotifyMusicChange 20800 0 ( FUNC_Event FUNC_Public )
struct UInteraction_eventNotifyMusicChange_Parms {
};


//  Interaction.StreamFinished 20000 0 ( FUNC_Public )
struct UInteraction_execStreamFinished_Parms {
  INT Handle;  // 0 80 CPF_Parm
  BYTE Reason;  // 4 80 CPF_Parm
};


//  Interaction.Tick 20000 0 ( FUNC_Public )
struct UInteraction_execTick_Parms {
  FLOAT DeltaTime;  // 0 80 CPF_Parm
};


//  Interaction.SetFocus 20002 0 ( FUNC_Defined FUNC_Public )
struct UInteraction_execSetFocus_Parms {
};


//  Interaction.PostRender 20000 0 ( FUNC_Public )
struct UInteraction_execPostRender_Parms {
  class UCanvas* Canvas;  // 0 80 CPF_Parm
};


//  Interaction.PreRender 20000 0 ( FUNC_Public )
struct UInteraction_execPreRender_Parms {
  class UCanvas* Canvas;  // 0 80 CPF_Parm
};


//  Interaction.KeyEvent 20002 0 ( FUNC_Defined FUNC_Public )
struct UInteraction_execKeyEvent_Parms {
  BYTE Key;  // 0 180 CPF_Parm CPF_OutParm
  BYTE Action;  // 1 180 CPF_Parm CPF_OutParm
  FLOAT delta;  // 4 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Interaction.KeyType 20002 0 ( FUNC_Defined FUNC_Public )
struct UInteraction_execKeyType_Parms {
  BYTE Key;  // 0 180 CPF_Parm CPF_OutParm
  class FString Unicode;  // 4 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Interaction.Message 20002 0 ( FUNC_Defined FUNC_Public )
struct UInteraction_execMessage_Parms {
  class FString Msg;  // 0 400880 CPF_Parm CPF_CoerceParm CPF_NeedCtorLink
  FLOAT MsgLife;  // 8 80 CPF_Parm
};


//  Interaction.NotifyLevelChange 20800 0 ( FUNC_Event FUNC_Public )
struct UInteraction_eventNotifyLevelChange_Parms {
};


//  Interaction.Initialized 20800 0 ( FUNC_Event FUNC_Public )
struct UInteraction_eventInitialized_Parms {
};


//  Interaction.ScreenToWorld 20400 0 ( FUNC_Native FUNC_Public )
struct UInteraction_execScreenToWorld_Parms {
  class FVector Location;  // 0 80 CPF_Parm
  class FVector CameraLocation;  // C 90 CPF_OptionalParm CPF_Parm
  class FRotator CameraRotation;  // 18 90 CPF_OptionalParm CPF_Parm
  class FVector ReturnValue;  // 24 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Interaction.WorldToScreen 20400 0 ( FUNC_Native FUNC_Public )
struct UInteraction_execWorldToScreen_Parms {
  class FVector Location;  // 0 80 CPF_Parm
  class FVector CameraLocation;  // C 90 CPF_OptionalParm CPF_Parm
  class FRotator CameraRotation;  // 18 90 CPF_OptionalParm CPF_Parm
  class FVector ReturnValue;  // 24 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Interaction.ConsoleCommand 20400 0 ( FUNC_Native FUNC_Public )
struct UInteraction_execConsoleCommand_Parms {
  class FString s;  // 0 400880 CPF_Parm CPF_CoerceParm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Interaction.Initialize 20400 0 ( FUNC_Native FUNC_Public )
struct UInteraction_execInitialize_Parms {
};


// UInteraction 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UInteraction : public UInteractions {
  public:
    BITFIELD bActive : 1;  // 28 2000000 CPF_EditorData
    BITFIELD bVisible : 1;  // 28 2000000 CPF_EditorData
    BITFIELD bRequiresTick : 1;  // 28 2000000 CPF_EditorData
    BITFIELD bNativeEvents : 1;  // 28 2000000 CPF_EditorData
    class UPlayer* ViewportOwner;  // 2C 2000000 CPF_EditorData
    class UInteractionMaster* Master;  // 30 2000000 CPF_EditorData
    virtual ~UInteraction(void);
    virtual unsigned int GetCPPSize(void);
    virtual void NativeMessage(class FString,float);
    virtual bool NativeKeyType(unsigned char &,unsigned short);
    virtual bool NativeKeyEvent(unsigned char &,unsigned char &,float);
    virtual void NativeTick(float);
    virtual void NativePreRender(class UCanvas *);
    virtual void NativePostRender(class UCanvas *);
    UInteraction(class UInteraction const &);
    UInteraction(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UInteraction & operator=(class UInteraction const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void eventInitialized(void);
    void eventNotifyLevelChange(void);
    void eventNotifyMusicChange(void);
    void execConsoleCommand(struct FFrame &,void * const);
    void execInitialize(struct FFrame &,void * const);
    void execScreenToWorld(struct FFrame &,void * const);
    void execWorldToScreen(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(UInteraction,0,execConsoleCommand)
AUTOGENERATE_FUNCTION(UInteraction,0,execInitialize)
AUTOGENERATE_FUNCTION(UInteraction,0,execScreenToWorld)
AUTOGENERATE_FUNCTION(UInteraction,0,execWorldToScreen)


//------------------------------------------------------------------------------
//  GUI_BaseDesktop
//------------------------------------------------------------------------------

#define UCONST_GUI_BaseDesktop_GUI_MBS_WHEEL_DOWN 16
#define UCONST_GUI_BaseDesktop_GUI_MBS_WHEEL_UP 8
#define UCONST_GUI_BaseDesktop_GUI_MBS_CENTER 4
#define UCONST_GUI_BaseDesktop_GUI_MBS_RIGHT 2
#define UCONST_GUI_BaseDesktop_GUI_MBS_LEFT 1
#define UCONST_GUI_BaseDesktop_GUI_SW_RESTORE 32
#define UCONST_GUI_BaseDesktop_GUI_SW_MINIMIZE 16
#define UCONST_GUI_BaseDesktop_GUI_SW_MAXIMIZE 8
#define UCONST_GUI_BaseDesktop_GUI_SW_TOGGLE 4
#define UCONST_GUI_BaseDesktop_GUI_SW_HIDE 2
#define UCONST_GUI_BaseDesktop_GUI_SW_SHOWNORMAL 1
#define UCONST_GUI_BaseDesktop_GUI_WDS_SNAP_ALL -16777216
#define UCONST_GUI_BaseDesktop_GUI_WDS_SNAP_BOTTOM 134217728
#define UCONST_GUI_BaseDesktop_GUI_WDS_SNAP_RIGHT 67108864
#define UCONST_GUI_BaseDesktop_GUI_WDS_SNAP_TOP 33554432
#define UCONST_GUI_BaseDesktop_GUI_WDS_SNAP_LEFT 16777216
#define UCONST_GUI_BaseDesktop_GUI_WDS_DOCK_ALL 16646144
#define UCONST_GUI_BaseDesktop_GUI_WDS_DOCK_BOTTOM 4194304
#define UCONST_GUI_BaseDesktop_GUI_WDS_DOCK_CENTER_Y 2097152
#define UCONST_GUI_BaseDesktop_GUI_WDS_DOCK_TOP 1048576
#define UCONST_GUI_BaseDesktop_GUI_WDS_DOCK_RIGHT 524288
#define UCONST_GUI_BaseDesktop_GUI_WDS_DOCK_CENTER_X 262144
#define UCONST_GUI_BaseDesktop_GUI_WDS_DOCK_LEFT 131072
#define UCONST_GUI_BaseDesktop_GUI_WDS_FORCE_DOCKING 65536
#define UCONST_GUI_BaseDesktop_GUI_WS_OVERLAPPED 12
#define UCONST_GUI_BaseDesktop_GUI_WS_SOUND_ON_SHOW 8388608
#define UCONST_GUI_BaseDesktop_GUI_WS_SELF_REVEAL 4194304
#define UCONST_GUI_BaseDesktop_GUI_WS_ATTACH_AUTO_Y 2097152
#define UCONST_GUI_BaseDesktop_GUI_WS_ATTACH_AUTO_X 1048576
#define UCONST_GUI_BaseDesktop_GUI_WS_ATTACH_BOTTOM 524288
#define UCONST_GUI_BaseDesktop_GUI_WS_ATTACH_TOP 262144
#define UCONST_GUI_BaseDesktop_GUI_WS_ATTACH_RIGHT 131072
#define UCONST_GUI_BaseDesktop_GUI_WS_ATTACH_LEFT 65536
#define UCONST_GUI_BaseDesktop_GUI_WS_TEMP_MODAL 32768
#define UCONST_GUI_BaseDesktop_GUI_WS_NO_FOCUS 16384
#define UCONST_GUI_BaseDesktop_GUI_WS_AUTO_POS 8192
#define UCONST_GUI_BaseDesktop_GUI_WS_NOCLOSE 4096
#define UCONST_GUI_BaseDesktop_GUI_WS_BARE_WINDOW 2048
#define UCONST_GUI_BaseDesktop_GUI_WS_FANCY_BORDER 1024
#define UCONST_GUI_BaseDesktop_GUI_WS_LARGE_ORNAMENT 512
#define UCONST_GUI_BaseDesktop_GUI_WS_ACTIVATE_DESKTOP 256
#define UCONST_GUI_BaseDesktop_GUI_WS_PERSISTENT_POS 128
#define UCONST_GUI_BaseDesktop_GUI_WS_CUSTOM 64
#define UCONST_GUI_BaseDesktop_GUI_WS_MODAL 32
#define UCONST_GUI_BaseDesktop_GUI_WS_TOPMOST 16
#define UCONST_GUI_BaseDesktop_GUI_WS_SIZEABLE 8
#define UCONST_GUI_BaseDesktop_GUI_WS_MOVABLE 4
#define UCONST_GUI_BaseDesktop_GUI_WS_NOMINIMIZE 2
#define UCONST_GUI_BaseDesktop_GUI_WS_TITLEBAR 1
#define UCONST_GUI_BaseDesktop_GUI_MB_MODAL 32
#define UCONST_GUI_BaseDesktop_GUI_MB_HELP 16
#define UCONST_GUI_BaseDesktop_GUI_MB_NO 8
#define UCONST_GUI_BaseDesktop_GUI_MB_YES 4
#define UCONST_GUI_BaseDesktop_GUI_MB_CANCEL 2
#define UCONST_GUI_BaseDesktop_GUI_MB_OK 1
#define UCONST_GUI_BaseDesktop_GUI_PS_CONTROL_SCROLL_SURFACE 16
#define UCONST_GUI_BaseDesktop_GUI_PS_ALWAYS_VSCROLL 8
#define UCONST_GUI_BaseDesktop_GUI_PS_ALWAYS_HSCROLL 4
#define UCONST_GUI_BaseDesktop_GUI_PS_VSCROLL 2
#define UCONST_GUI_BaseDesktop_GUI_PS_HSCROLL 1
#define UCONST_GUI_BaseDesktop_GUI_CBS_DROPDOWN  1
#define UCONST_GUI_BaseDesktop_GUI_BS_MENU_CHECKBOX 4194304
#define UCONST_GUI_BaseDesktop_GUI_BS_SUBMENU 2097152
#define UCONST_GUI_BaseDesktop_GUI_BS_MENU_ITEM 1048576
#define UCONST_GUI_BaseDesktop_GUI_BS_SHADOW 65536
#define UCONST_GUI_BaseDesktop_GUI_BS_TOGGLE 4096
#define UCONST_GUI_BaseDesktop_GUI_BS_CONVERSATION 16
#define UCONST_GUI_BaseDesktop_GUI_BS_RADIO 8
#define UCONST_GUI_BaseDesktop_GUI_BS_CHECKBOX 4
#define UCONST_GUI_BaseDesktop_GUI_BS_DEFAULT 2
#define UCONST_GUI_BaseDesktop_GUI_BS_CUSTOM 1
#define UCONST_GUI_BaseDesktop_GUI_LS_PASSWORD 8192
#define UCONST_GUI_BaseDesktop_GUI_LS_SHADOW 4096
#define UCONST_GUI_BaseDesktop_GUI_LS_ALIGN_MIDDLE 2048
#define UCONST_GUI_BaseDesktop_GUI_LS_ALIGN_RIGHT 1024
#define UCONST_GUI_BaseDesktop_GUI_LS_ALIGN_CENTER 512
#define UCONST_GUI_BaseDesktop_GUI_LS_ALIGN_LEFT 256
#define UCONST_GUI_BaseDesktop_GUI_LS_WORD_WRAP 4
#define UCONST_GUI_BaseDesktop_GUI_LS_AUTO_HEIGHT 2
#define UCONST_GUI_BaseDesktop_GUI_LS_AUTO_WIDTH 1
#define UCONST_GUI_BaseDesktop_GUI_CS_TABSTOP 4194304
#define UCONST_GUI_BaseDesktop_GUI_CS_DRAGNDROP 2097152
#define UCONST_GUI_BaseDesktop_GUI_CS_CAN_PRESS 1048576
#define UCONST_GUI_BaseDesktop_GUI_CS_NO_FOCUS 524288
#define UCONST_GUI_BaseDesktop_GUI_CS_NO_HILITE 262144
#define UCONST_GUI_BaseDesktop_GUI_CS_CAN_DISABLE 131072
#define UCONST_GUI_BaseDesktop_GUI_CS_CAN_NORMAL 65536
#define UCONST_GUI_BaseDesktop_GUI_CS_SELF_VALIDATE 4096
#define UCONST_GUI_BaseDesktop_GUI_CS_OWNER_DRAW 2048
#define UCONST_GUI_BaseDesktop_GUI_CS_OWNER_VALIDATE 1024
#define UCONST_GUI_BaseDesktop_GUI_CS_OWNER_EVENTS 768
#define UCONST_GUI_BaseDesktop_GUI_CS_OWNER_KEY_EVENTS 512
#define UCONST_GUI_BaseDesktop_GUI_CS_OWNER_MOUSE_EVENTS 256
#define UCONST_GUI_BaseDesktop_GUI_ICON_MATERIAL  5
#define UCONST_GUI_BaseDesktop_GUI_ICON_CLOSE  4
#define UCONST_GUI_BaseDesktop_GUI_ICON_MAZIMIZE  3
#define UCONST_GUI_BaseDesktop_GUI_ICON_MINIMIZE  2
#define UCONST_GUI_BaseDesktop_GUI_ICON_CUSTOM  1
#define UCONST_GUI_BaseDesktop_GUI_ICON_NONE  0
#define UCONST_GUI_BaseDesktop_GUI_BORDER_SIZABLE  4
#define UCONST_GUI_BaseDesktop_GUI_BORDER_TICK  3
#define UCONST_GUI_BaseDesktop_GUI_BORDER_THIN  2
#define UCONST_GUI_BaseDesktop_GUI_BORDER_CUSTOM  1
#define UCONST_GUI_BaseDesktop_GUI_BORDER_NONE  0
#define UCONST_GUI_BaseDesktop_GUI_BACKGROUND_POPUP  9
#define UCONST_GUI_BaseDesktop_GUI_BACKGROUND_CUSTOM_SCALED  8
#define UCONST_GUI_BaseDesktop_GUI_BACKGROUND_PANE  7
#define UCONST_GUI_BaseDesktop_GUI_BACKGROUND_CUSTOM_TILED  6
#define UCONST_GUI_BaseDesktop_GUI_BACKGROUND_TITLE  5
#define UCONST_GUI_BaseDesktop_GUI_BACKGROUND_CALIGRAPH  4
#define UCONST_GUI_BaseDesktop_GUI_BACKGROUND_PAPER_OVERLAPPED  3
#define UCONST_GUI_BaseDesktop_GUI_BACKGROUND_PAPER  2
#define UCONST_GUI_BaseDesktop_GUI_BACKGROUND_CUSTOM  1
#define UCONST_GUI_BaseDesktop_GUI_BACKGROUND_NONE  0
#define UCONST_GUI_BaseDesktop_GUI_STATE_COUNT  6
#define UCONST_GUI_BaseDesktop_GUI_STATE_DRAGGED  5
#define UCONST_GUI_BaseDesktop_GUI_STATE_PRESSED  4
#define UCONST_GUI_BaseDesktop_GUI_STATE_FOCUSSED  3
#define UCONST_GUI_BaseDesktop_GUI_STATE_HILITED  2
#define UCONST_GUI_BaseDesktop_GUI_STATE_DISABLED  1
#define UCONST_GUI_BaseDesktop_GUI_STATE_NORMAL  0
#define UCONST_GUI_BaseDesktop_GUI_WND_COUNT  88
#define UCONST_GUI_BaseDesktop_GUI_WND_PROGRESS  87
#define UCONST_GUI_BaseDesktop_GUI_WND_UPGRADE_SKILL_WINDOW  86
#define UCONST_GUI_BaseDesktop_GUI_WND_LEARN_SKILL_WINDOW  85
#define UCONST_GUI_BaseDesktop_GUI_WND_SKILL_LIBRARY  84
#define UCONST_GUI_BaseDesktop_GUI_WND_PARTY_TRAVEL_CONFIRMATION  83
#define UCONST_GUI_BaseDesktop_GUI_WND_PARTY_TRAVEL_OVERVIEW  82
#define UCONST_GUI_BaseDesktop_GUI_WND_PING  81
#define UCONST_GUI_BaseDesktop_GUI_WND_ITEMCONTEXTMENU  80
#define UCONST_GUI_BaseDesktop_GUI_WND_RULES  79
#define UCONST_GUI_BaseDesktop_GUI_WND_FRIENDIGNORE_LIST  78
#define UCONST_GUI_BaseDesktop_GUI_WND_PET  77
#define UCONST_GUI_BaseDesktop_GUI_WND_ONSCREENMESSAGES  76
#define UCONST_GUI_BaseDesktop_GUI_WND_CREDITSWINDOW  75
#define UCONST_GUI_BaseDesktop_GUI_WND_TIMER  74
#define UCONST_GUI_BaseDesktop_GUI_WND_MINIGAME_GAMEWINDOW  73
#define UCONST_GUI_BaseDesktop_GUI_WND_MINIGAME_SETTINGS  72
#define UCONST_GUI_BaseDesktop_GUI_WND_MINIGAME_INVITATION  71
#define UCONST_GUI_BaseDesktop_GUI_WND_MINIGAMEWINDOW  70
#define UCONST_GUI_BaseDesktop_GUI_WND_TUTORIAL  69
#define UCONST_GUI_BaseDesktop_GUI_WND_HELP  68
#define UCONST_GUI_BaseDesktop_GUI_WND_GUILD_LIST  67
#define UCONST_GUI_BaseDesktop_GUI_WND_GUILD_JOIN  66
#define UCONST_GUI_BaseDesktop_GUI_WND_GUILD_CREATE  65
#define UCONST_GUI_BaseDesktop_GUI_WND_ARENASCOREWINDOW  64
#define UCONST_GUI_BaseDesktop_GUI_WND_ARENASTATUSWINDOW  63
#define UCONST_GUI_BaseDesktop_GUI_WND_ARENALISTENER  62
#define UCONST_GUI_BaseDesktop_GUI_WND_ARENAWINDOW  61
#define UCONST_GUI_BaseDesktop_GUI_WND_SHEATH_WEAPON_WINDOW  60
#define UCONST_GUI_BaseDesktop_GUI_WND_CONFIRM_SKILL_SELECTION  59
#define UCONST_GUI_BaseDesktop_GUI_WND_QUEST_COMPLETED  58
#define UCONST_GUI_BaseDesktop_GUI_WND_BODY_SLOTS  57
#define UCONST_GUI_BaseDesktop_GUI_WND_SHOP_PAINTING  56
#define UCONST_GUI_BaseDesktop_GUI_WND_SHOP_CRAFTING  54
#define UCONST_GUI_BaseDesktop_GUI_WND_SHOP_BUYING  53
#define UCONST_GUI_BaseDesktop_GUI_WND_MAILBOX  52
#define UCONST_GUI_BaseDesktop_GUI_WND_TRAVEL  51
#define UCONST_GUI_BaseDesktop_GUI_WND_TRADING  49
#define UCONST_GUI_BaseDesktop_GUI_WND_REQUEST_TRADING  48
#define UCONST_GUI_BaseDesktop_GUI_WND_LOADING_SCREEN  47
#define UCONST_GUI_BaseDesktop_GUI_WND_TEAM_NOTIFICATION  46
#define UCONST_GUI_BaseDesktop_GUI_WND_EDITOR  45
#define UCONST_GUI_BaseDesktop_GUI_WND_SKILL_DEBUG_LOG  44
#define UCONST_GUI_BaseDesktop_GUI_WND_NDA  43
#define UCONST_GUI_BaseDesktop_GUI_WND_MASTER_LOOT  42
#define UCONST_GUI_BaseDesktop_GUI_WND_GROUP_LOOT  41
#define UCONST_GUI_BaseDesktop_GUI_WND_SINGLE_LOOT  40
#define UCONST_GUI_BaseDesktop_GUI_WND_NEW_LOOT  39
#define UCONST_GUI_BaseDesktop_GUI_WND_CHARACTER_STATS  38
#define UCONST_GUI_BaseDesktop_GUI_WND_CS_DELETE_CONFIRMATION  37
#define UCONST_GUI_BaseDesktop__GUI_WND_CC_LAST  36
#define UCONST_GUI_BaseDesktop_GUI_WND_CC_STATUS  36
#define UCONST_GUI_BaseDesktop_GUI_WND_CC_CREATE  35
#define UCONST_GUI_BaseDesktop_GUI_WND_CC_NAME  34
#define UCONST_GUI_BaseDesktop_GUI_WND_CC_ARMOUR  33
#define UCONST_GUI_BaseDesktop_GUI_WND_CC_CLOTHING  32
#define UCONST_GUI_BaseDesktop_GUI_WND_CC_TATTOOS  31
#define UCONST_GUI_BaseDesktop_GUI_WND_CC_HEAD  30
#define UCONST_GUI_BaseDesktop_GUI_WND_CC_BODY  29
#define UCONST_GUI_BaseDesktop_GUI_WND_CC_CHOOSECLASS  28
#define UCONST_GUI_BaseDesktop_GUI_WND_CC_CLASSINFO  27
#define UCONST_GUI_BaseDesktop_GUI_WND_CC_SELECTSKILLS  26
#define UCONST_GUI_BaseDesktop_GUI_WND_CHARACTERCREATION  25
#define UCONST_GUI_BaseDesktop__GUI_WND_CC_FIRST  25
#define UCONST_GUI_BaseDesktop_GUI_WND_MAP  24
#define UCONST_GUI_BaseDesktop_GUI_WND_CHARACTERSELECTION  22
#define UCONST_GUI_BaseDesktop_GUI_WND_UNIVERSESELECTION  21
#define UCONST_GUI_BaseDesktop_GUI_WND_LOGIN  20
#define UCONST_GUI_BaseDesktop_GUI_WND_OPTIONS  19
#define UCONST_GUI_BaseDesktop_GUI_WND_RADIALMENU  18
#define UCONST_GUI_BaseDesktop_GUI_WND_SKILLBOOK  17
#define UCONST_GUI_BaseDesktop_GUI_WND_SKILLDECK  16
#define UCONST_GUI_BaseDesktop_GUI_WND_DEATHRESPAWN  15
#define UCONST_GUI_BaseDesktop_GUI_WND_NETSTATS  14
#define UCONST_GUI_BaseDesktop_GUI_WND_CHAT  13
#define UCONST_GUI_BaseDesktop_GUI_WND_TEAM  12
#define UCONST_GUI_BaseDesktop_GUI_WND_FRIENDS  11
#define UCONST_GUI_BaseDesktop_GUI_WND_EQUIPMENT  10
#define UCONST_GUI_BaseDesktop_GUI_WND_INVENTORY  9
#define UCONST_GUI_BaseDesktop_GUI_WND_BUGREPORT  8
#define UCONST_GUI_BaseDesktop_GUI_WND_CONVERSATION  7
#define UCONST_GUI_BaseDesktop_GUI_WND_QUESTLOG  6
#define UCONST_GUI_BaseDesktop_GUI_WND_SYSTEMMENU  5
#define UCONST_GUI_BaseDesktop_GUI_WND_GAMEMENU  4
#define UCONST_GUI_BaseDesktop_GUI_WND_COMBATBAR  3
#define UCONST_GUI_BaseDesktop_GUI_WND_TARGETAVATAR  2
#define UCONST_GUI_BaseDesktop_GUI_WND_PLAYERAVATAR  1
#define UCONST_GUI_BaseDesktop_GUI_WND_MINIMAP  0
//  GUI_BaseDesktop.IsMouseInsideWindow 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execIsMouseInsideWindow_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GUI_BaseDesktop.HasHiliteComponent 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execHasHiliteComponent_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GUI_BaseDesktop.IsRadialInteractionPossible 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execIsRadialInteractionPossible_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GUI_BaseDesktop.AddScreenMessage 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventAddScreenMessage_Parms {
  class FString aMessage;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FColor aColour;  // 8 90 CPF_OptionalParm CPF_Parm
};


//  GUI_BaseDesktop.IsPlayingVideo 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventIsPlayingVideo_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GUI_BaseDesktop.StopVideo 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventStopVideo_Parms {
  class FString fileName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
};


//  GUI_BaseDesktop.PlayVideo 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventPlayVideo_Parms {
  class FString fileName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD fadeInWhenStopped : 1;  // 8 90 CPF_OptionalParm CPF_Parm
};


//  GUI_BaseDesktop.CancelAction 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execCancelAction_Parms {
};


//  GUI_BaseDesktop.Clear 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execClear_Parms {
};


//  GUI_BaseDesktop.InLoadingScreen 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventInLoadingScreen_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GUI_BaseDesktop.StopLoadingScreen 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventStopLoadingScreen_Parms {
};


//  GUI_BaseDesktop.UpdateLoadingScreen 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventUpdateLoadingScreen_Parms {
  FLOAT percentage;  // 0 80 CPF_Parm
  class FString Text;  // 4 400080 CPF_Parm CPF_NeedCtorLink
};


//  GUI_BaseDesktop.StartLoadingScreen 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventStartLoadingScreen_Parms {
  class FString loadingTexture;  // 0 400080 CPF_Parm CPF_NeedCtorLink
};


//  GUI_BaseDesktop.ParseEditorString 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventParseEditorString_Parms {
  class FString editorString;  // 0 400080 CPF_Parm CPF_NeedCtorLink
};


//  GUI_BaseDesktop.ToggleMap 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventToggleMap_Parms {
};


//  GUI_BaseDesktop.ShowMessageBox 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventShowMessageBox_Parms {
  class FString Title;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString Message;  // 8 400080 CPF_Parm CPF_NeedCtorLink
};


//  GUI_BaseDesktop.ShowTutorialWindow 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventShowTutorialWindow_Parms {
  INT articleID;  // 0 80 CPF_Parm
};


//  GUI_BaseDesktop.ShowPartyTravelConfirmation 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventShowPartyTravelConfirmation_Parms {
};


//  GUI_BaseDesktop.ShowPartyTravelOverview 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventShowPartyTravelOverview_Parms {
};


//  GUI_BaseDesktop.ShowLevelAreaName 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventShowLevelAreaName_Parms {
  class FString aName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD newArea : 1;  // 8 80 CPF_Parm
};


//  GUI_BaseDesktop.ClearSavedWindows 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventClearSavedWindows_Parms {
};


//  GUI_BaseDesktop.RestoreSavedWindows 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventRestoreSavedWindows_Parms {
};


//  GUI_BaseDesktop.SaveOpenWindows 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventSaveOpenWindows_Parms {
};


//  GUI_BaseDesktop.HideAllWindows 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventHideAllWindows_Parms {
};


//  GUI_BaseDesktop.OnLogin 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventOnLogin_Parms {
};


//  GUI_BaseDesktop.PreLogin 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventPreLogin_Parms {
};


//  GUI_BaseDesktop.UpdateStdWindow 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventUpdateStdWindow_Parms {
  INT windowType;  // 0 80 CPF_Parm
  INT intParam;  // 4 90 CPF_OptionalParm CPF_Parm
  class UObject* objParam;  // 8 90 CPF_OptionalParm CPF_Parm
  class FString stringParam;  // C 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
  INT intParam2;  // 14 90 CPF_OptionalParm CPF_Parm
};


//  GUI_BaseDesktop.ShowStdWindow 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventShowStdWindow_Parms {
  INT wndType;  // 0 80 CPF_Parm
  INT flags;  // 4 80 CPF_Parm
  INT ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GUI_BaseDesktop.ShowWindow 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execShowWindow_Parms {
  INT windowHandle;  // 0 80 CPF_Parm
  INT flags;  // 4 80 CPF_Parm
};


//  GUI_BaseDesktop.IsStdWindowVisible 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execIsStdWindowVisible_Parms {
  INT windowID;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GUI_BaseDesktop.IsWindowVisible 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execIsWindowVisible_Parms {
  INT windowHandle;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GUI_BaseDesktop.FindWindow 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execFindWindow_Parms {
  class FString windowTitle;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  INT ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GUI_BaseDesktop.DestroyWindow 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execDestroyWindow_Parms {
  INT windowHandle;  // 0 80 CPF_Parm
};


//  GUI_BaseDesktop.CreateWindow 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execCreateWindow_Parms {
  class FString windowClass;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  INT componentStyle;  // 8 80 CPF_Parm
  INT pageStyle;  // C 80 CPF_Parm
  INT windowStyle;  // 10 80 CPF_Parm
  INT Left;  // 14 80 CPF_Parm
  INT top;  // 18 80 CPF_Parm
  INT width;  // 1C 80 CPF_Parm
  INT Height;  // 20 80 CPF_Parm
  class FString windowTitle;  // 24 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
  INT ReturnValue;  // 2C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GUI_BaseDesktop.PreviousTabStop 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execPreviousTabStop_Parms {
};


//  GUI_BaseDesktop.NextTabStop 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execNextTabStop_Parms {
};


//  GUI_BaseDesktop.IsTempInactive 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execIsTempInactive_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GUI_BaseDesktop.IsTempActive 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execIsTempActive_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GUI_BaseDesktop.IsActive 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execIsActive_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  GUI_BaseDesktop.SetTempInactive 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execSetTempInactive_Parms {
  BITFIELD OnOff : 1;  // 0 80 CPF_Parm
};


//  GUI_BaseDesktop.SetTempActive 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execSetTempActive_Parms {
  BITFIELD OnOff : 1;  // 0 80 CPF_Parm
};


//  GUI_BaseDesktop.ForceActive 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execForceActive_Parms {
};


//  GUI_BaseDesktop.ToggleActive 20000 0 ( FUNC_Public )
struct UGUI_BaseDesktop_execToggleActive_Parms {
};


//  GUI_BaseDesktop.Shutdown 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventShutdown_Parms {
};


//  GUI_BaseDesktop.frame 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventframe_Parms {
};


//  GUI_BaseDesktop.Test 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventTest_Parms {
};


//  GUI_BaseDesktop.Init 20800 0 ( FUNC_Event FUNC_Public )
struct UGUI_BaseDesktop_eventInit_Parms {
};


// UGUI_BaseDesktop 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UGUI_BaseDesktop : public UInteraction {
  public:
    class UMaterial* mDefaultPens[3];  // 34 0
    BITFIELD mDesktopActive : 1;  // 40 0
    virtual ~UGUI_BaseDesktop(void);
    virtual unsigned int GetCPPSize(void);
    virtual void ResolutionChanged(int,int);
    virtual void ResetInput(void);
    virtual void Initialize(void);
    virtual void FocusChanged(bool);
    virtual void SetColorModifier(class FPlane const &);
    UGUI_BaseDesktop(class UGUI_BaseDesktop const &);
    UGUI_BaseDesktop(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UGUI_BaseDesktop & operator=(class UGUI_BaseDesktop const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void eventAddScreenMessage(class FString const &,class FColor);
    void eventClearSavedWindows(void);
    void eventHideAllWindows(void);
    unsigned long eventInLoadingScreen(void);
    void eventInit(void);
    unsigned long eventIsPlayingVideo(void);
    void eventOnLogin(void);
    void eventParseEditorString(class FString const &);
    void eventPlayVideo(class FString const &,unsigned long);
    void eventPreLogin(void);
    void eventRestoreSavedWindows(void);
    void eventSaveOpenWindows(void);
    void eventShowLevelAreaName(class FString const &,unsigned long);
    void eventShowMessageBox(class FString const &,class FString const &);
    void eventShowPartyTravelConfirmation(void);
    void eventShowPartyTravelOverview(void);
    int eventShowStdWindow(int,int);
    void eventShowTutorialWindow(int);
    void eventShutdown(void);
    void eventStartLoadingScreen(class FString const &);
    void eventStopLoadingScreen(void);
    void eventStopVideo(class FString const &);
    void eventTest(void);
    void eventToggleMap(void);
    void eventUpdateLoadingScreen(float,class FString const &);
    void eventUpdateStdWindow(int,int,class UObject *,class FString const &,int);
    void eventframe(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Client
//------------------------------------------------------------------------------

// UClient 17 ( CLASS_Abstract CLASS_Compiled CLASS_Config CLASS_Parsed )
class DLL_IMPORT UClient : public UObject {
  public:
    char Unknown0[12];
    BITFIELD CaptureMouse : 1;  // 34 4000 CPF_Config
    BITFIELD ScreenFlashes : 1;  // 38 4000 CPF_Config
    BITFIELD NoLighting : 1;  // 3C 4000 CPF_Config
    BITFIELD Decals : 1;  // 40 4000 CPF_Config
    BITFIELD NoDynamicLights : 1;  // 44 4000 CPF_Config
    BITFIELD NoFractalAnim : 1;  // 48 4000 CPF_Config
    BITFIELD Coronas : 1;  // 4C 4000 CPF_Config
    BITFIELD DecoLayers : 1;  // 50 4000 CPF_Config
    BITFIELD Projectors : 1;  // 54 4000 CPF_Config
    BITFIELD ReportDynamicUploads : 1;  // 58 4000 CPF_Config
    BITFIELD WeatherEffects : 1;  // 5C 4000 CPF_Config
    INT WindowedViewportX;  // 60 4000 CPF_Config
    INT WindowedViewportY;  // 64 4000 CPF_Config
    INT FullscreenViewportX;  // 68 4000 CPF_Config
    INT FullscreenViewportY;  // 6C 4000 CPF_Config
    INT MenuViewportX;  // 70 4000 CPF_Config
    INT MenuViewportY;  // 74 4000 CPF_Config
    FLOAT Brightness;  // 78 4000 CPF_Config
    FLOAT Contrast;  // 7C 4000 CPF_Config
    FLOAT Gamma;  // 80 4000 CPF_Config
    char Unknown1[4];
    BYTE TextureDetailWorld;  // 88 4000 CPF_Config
    char Unknown2[3];
    BYTE TextureDetailPlayerSkin;  // 8C 4000 CPF_Config
    char Unknown3[3];
    BYTE TextureDetailWeaponSkin;  // 90 4000 CPF_Config
    char Unknown4[3];
    BYTE TextureDetailTerrain;  // 94 4000 CPF_Config
    char Unknown5[3];
    BYTE TextureDetailInterface;  // 98 4000 CPF_Config
    char Unknown6[3];
    BYTE TextureDetailRenderMap;  // 9C 4000 CPF_Config
    char Unknown7[3];
    BYTE TextureDetailLightmap;  // A0 4000 CPF_Config
    FLOAT MinDesiredFrameRate;  // A4 4000 CPF_Config
    char Unknown8[4];
    FLOAT ScaleHUDX;  // AC 4000 CPF_Config
    FLOAT AnimMeshDynamicLOD;  // B0 4000 CPF_Config
    FLOAT DrawDistanceLOD;  // B4 4000 CPF_Config
    char Unknown9[8];
    virtual ~UClient(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    virtual void PostEditChange(void);
    virtual void Flush(int,enum EFlushType);
    virtual void UpdateGamma(void);
    virtual void RestoreGamma(void);
    //virtual int Exec(unsigned short const *,class FOutputDevice &);
    //virtual void Init(class UEngine *);
    UClient(class UClient const &);
    UClient(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UClient & operator=(class UClient const &);
    int GetTextureLODBias(enum ELODSet);
    static class UClass * CDECL StaticClass(void);
    void StaticConstructor(void);
    static class UClient * _instance;
    class UInteractionMaster * get_interaction_master(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Player
//------------------------------------------------------------------------------

#define UCONST_Player_IDC_WAIT 6
#define UCONST_Player_IDC_SIZEWE 5
#define UCONST_Player_IDC_SIZENWSE 4
#define UCONST_Player_IDC_SIZENS 3
#define UCONST_Player_IDC_SIZENESW 2
#define UCONST_Player_IDC_SIZEALL 1
#define UCONST_Player_IDC_ARROW 0
// UPlayer 116 ( CLASS_Compiled CLASS_Config CLASS_Parsed CLASS_NoExport )
class DLL_IMPORT UPlayer : public UObject/*,FExec*/ /*,FOutputDevice*/  {
  public:
    DWORD vfOut;  // 28 3002 CPF_Const CPF_Native CPF_Transient
    DWORD vfExec;  // 2C 3002 CPF_Const CPF_Native CPF_Transient
    class APlayerController* Actor;  // 30 2002 CPF_Const CPF_Transient
    class APlayerController* OldActor;  // 34 2002 CPF_Const CPF_Transient
    class UConsole* Console;  // 38 2000 CPF_Transient
    BITFIELD bWindowsMouseAvailable : 1;  // 3C 2002 CPF_Const CPF_Transient
    BITFIELD bShowWindowsMouse : 1;  // 3C 0
    FLOAT WindowsMouseX;  // 40 2002 CPF_Const CPF_Transient
    FLOAT WindowsMouseY;  // 44 2002 CPF_Const CPF_Transient
    INT CurrentVoiceBandwidth;  // 48 2000 CPF_Transient
    INT CurrentNetSpeed;  // 4C 2 CPF_Const
    INT ConfiguredInternetSpeed;  // 50 44000 CPF_Config CPF_GlobalConfig
    INT ConfiguredLanSpeed;  // 54 44000 CPF_Config CPF_GlobalConfig
    BYTE SelectedCursor;  // 58 0
    class UInteractionMaster* InteractionMaster;  // 5C 2002000 CPF_Transient CPF_EditorData
    TArray<class UInteraction*> LocalInteractions;  // 60 2402000 CPF_Transient CPF_NeedCtorLink CPF_EditorData
    class UBaseGUIController* GUIController;  // 6C 2002000 CPF_Transient CPF_EditorData
    class UGUI_BaseDesktop* GUIDesktop;  // 70 2002000 CPF_Transient CPF_EditorData
    //virtual int Exec(unsigned short const *,class FOutputDevice &);
    virtual ~UPlayer(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    UPlayer(class UPlayer const &);
    UPlayer(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UPlayer & operator=(class UPlayer const &);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Viewport
//------------------------------------------------------------------------------

// UViewport 1F ( CLASS_Abstract CLASS_Compiled CLASS_Config CLASS_Transient CLASS_Parsed )
class DLL_IMPORT UViewport : public UPlayer/*,FExec*/ /*,FOutputDevice*/  {
  public:
    char Unknown0[332];
    //virtual int Exec(unsigned short const *,class FOutputDevice &);
    //virtual void Serialize(unsigned short const *,enum EName);
    virtual ~UViewport(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    virtual void ReadInput(float);
    virtual int Lock(unsigned char *,int *);
    virtual void Unlock(void);
    virtual void Present(void);
    virtual int SetDrag(int);
    virtual void * GetServer(void);
    virtual void UpdateMousePosition(void);
    virtual int ExecCheatAndQACommands(unsigned short const *,class FOutputDevice &);
    virtual void MovieEncodeStart(class FString,float,int,int);
    virtual void MovieEncodeFrame(void);
    virtual void MovieEncodeStop(void);
    virtual int UsingHardwareCursor(void)const ;
    virtual int HardwareCursorAvailable(void)const ;
    virtual void SetHardwareCursorTexture(int,int,class UTexture *);
    UViewport(class UViewport const &);
    UViewport(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UViewport & operator=(class UViewport const &);
    void ExecMacro(unsigned short const *,class FOutputDevice &);
    void ExecuteHits(struct FHitCause const &,unsigned char *,int,unsigned short *,class FColor *,class AActor * *);
    class UClient * GetOuterUClient(void)const ;
    int IsDepthComplexity(void);
    int IsEditing(void);
    int IsLit(void);
    int IsOrtho(void);
    int IsOrthoView(void);
    int IsPerspective(void);
    int IsPostProcessable(void);
    int IsRealtime(void);
    int IsTopView(void);
    int IsWire(void);
    void LockOnActor(class AActor *);
    void PopHit(int);
    int Precaching(void)const ;
    void PushHit(struct HHitProxy const &,int);
    static void CDECL RefreshAll(void);
    static class UClass * CDECL StaticClass(void);
    static unsigned short const * CDECL StaticConfigName(void);
    unsigned char * _Screen(int,int);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBActor
//------------------------------------------------------------------------------

//  SBActor.cl_OnTick 20800 0 ( FUNC_Event FUNC_Public )
struct ASBActor_eventcl_OnTick_Parms {
  FLOAT delta;  // 0 80 CPF_Parm
};


//  SBActor.cl_OnFrame 20800 0 ( FUNC_Event FUNC_Public )
struct ASBActor_eventcl_OnFrame_Parms {
  FLOAT delta;  // 0 80 CPF_Parm
};


// ASBActor 813 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_NativeReplication )
class DLL_IMPORT ASBActor : public AActor {
  public:
    virtual ~ASBActor(void);
    virtual unsigned int GetCPPSize(void);
    ASBActor(class ASBActor const &);
    ASBActor(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ASBActor & operator=(class ASBActor const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void eventcl_OnFrame(float);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  PvPSettings
//------------------------------------------------------------------------------

enum EPvPTypes {
  PVP_None = 0,
  PVP_Off = 1,
  PVP_Guildwars = 2,
  PVP_HouseVSHouse = 3,
  PVP_GuildVSGuild = 4,
  PVP_Deprecated_DO_NOT_USE = 5,
  PVP_FFA = 6
};

// UPvPSettings 1012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew )
class DLL_IMPORT UPvPSettings : public UObject {
  public:
    BITFIELD AllowDrawWeapon : 1;  // 28 1 CPF_Edit
    BYTE Type;  // 2C 1 CPF_Edit
    BITFIELD FriendlyFire : 1;  // 30 2000001 CPF_Edit CPF_EditorData
    INT EnableTimeOut;  // 34 1 CPF_Edit
    BITFIELD PvPServerOnly : 1;  // 38 2000001 CPF_Edit CPF_EditorData
    virtual ~UPvPSettings(void);
    virtual unsigned int GetCPPSize(void);
    UPvPSettings(class UPvPSettings const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UPvPSettings & operator=(class UPvPSettings const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    UPvPSettings(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBAttachment
//------------------------------------------------------------------------------

enum SBAttachment_AnimType {
  SBAttachAnim_None = 0,
  SBAttachAnim_UseOwnerBones = 1,
  SBAttachAnim_HasOwnAnim = 2,
  SBAttachAnim_ClothSim = 3
};

// FSBGameInfoPtr 1 ( CLASS_Abstract )
struct DLL_IMPORT FSBGameInfoPtr {
  public:
    DWORD Ptr;  // 0 2000 CPF_Transient
    struct FSBGameInfoPtr & operator=(struct FSBGameInfoPtr const &);
};

// FSBSoftBodyPtr 1 ( CLASS_Abstract )
struct DLL_IMPORT FSBSoftBodyPtr {
  public:
    DWORD Ptr;  // 0 2000 CPF_Transient
    struct FSBSoftBodyPtr & operator=(struct FSBSoftBodyPtr const &);
};

//  SBAttachment.PostBeginPlay 20002 0 ( FUNC_Defined FUNC_Public )
struct ASBAttachment_execPostBeginPlay_Parms {
};


//  SBAttachment.SetupParameters 20002 0 ( FUNC_Defined FUNC_Public )
struct ASBAttachment_execSetupParameters_Parms {
};


//  SBAttachment.SetAnimType 20002 0 ( FUNC_Defined FUNC_Public )
struct ASBAttachment_execSetAnimType_Parms {
  BYTE newType;  // 0 80 CPF_Parm
};


//  SBAttachment.SetSkin 20400 0 ( FUNC_Native FUNC_Public )
struct ASBAttachment_execSetSkin_Parms {
  class FString skinName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
};


//  SBAttachment.SetMesh 20400 0 ( FUNC_Native FUNC_Public )
struct ASBAttachment_execSetMesh_Parms {
  class FString meshName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
};


//  SBAttachment.Initialize 20400 0 ( FUNC_Native FUNC_Public )
struct ASBAttachment_execInitialize_Parms {
};


//  SBAttachment.UpdateOffsetTransform 20400 0 ( FUNC_Native FUNC_Public )
struct ASBAttachment_execUpdateOffsetTransform_Parms {
};


//  SBAttachment.AttachTo 20400 0 ( FUNC_Native FUNC_Public )
struct ASBAttachment_execAttachTo_Parms {
  class AActor* Actor;  // 0 80 CPF_Parm
};


// ASBAttachment 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT ASBAttachment : public AActor {
  public:
    BYTE AnimationType;  // 420 0
    FName AttachmentTag;  // 424 0
    class FVector PositionOffset;  // 428 0
    class FRotator OrientationOffset;  // 434 0
    FLOAT LocalDrawScale;  // 440 2000000 CPF_EditorData
    class FVector LocalDrawScale3D;  // 444 2000000 CPF_EditorData
    struct FSBSoftBodyPtr softBody;  // 450 1002 CPF_Const CPF_Native
    struct FSBGameInfoPtr localGameInfo;  // 454 1002 CPF_Const CPF_Native
    BITFIELD Initialized : 1;  // 458 0
    BITFIELD bIgnoreTagRotation : 1;  // 458 0
    BITFIELD bIsBaked : 1;  // 458 2000000 CPF_EditorData
    INT RealBoneIndex;  // 45C 2000000 CPF_EditorData
    BITFIELD AddScaleFromBase : 1;  // 460 2000000 CPF_EditorData
    virtual ~ASBAttachment(void);
    virtual void Destroy(void);
    virtual unsigned int GetCPPSize(void);
    virtual void SetDrawScale(float);
    virtual void SetDrawScale3D(class FVector);
    virtual void SetBase(class AActor *,class FVector,int);
    virtual void SetLocalDrawScale(float);
    virtual void UpdateAnimation(float);
    virtual void Initialize(void);
    virtual bool SetMesh(class UObject *);
    virtual bool SetMesh(class FString &);
    virtual void OnBaseDrawScaleChanged(void);
    ASBAttachment(class ASBAttachment const &);
    ASBAttachment(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ASBAttachment & operator=(class ASBAttachment const &);
    void AddSkin(class FString const &);
    bool AttachToActor(class AActor *);
    void ClearSkinList(void);
    static void CDECL InternalConstructor(void *);
    bool IsAttachedTo(class FName const &);
    bool MeshHasName(class FName const &);
    void RemoveSkin(class FName const &);
    void SetSkin(class FString const &);
    static class UClass * CDECL StaticClass(void);
    void UpdateOffsetTransform(void);
    void execAttachTo(struct FFrame &,void * const);
    void execInitialize(struct FFrame &,void * const);
    void execSetMesh(struct FFrame &,void * const);
    void execSetSkin(struct FFrame &,void * const);
    void execUpdateOffsetTransform(struct FFrame &,void * const);
  protected:
    void UpdateBakeIfNeeded(void);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(ASBAttachment,0,execAttachTo)
AUTOGENERATE_FUNCTION(ASBAttachment,0,execInitialize)
AUTOGENERATE_FUNCTION(ASBAttachment,0,execSetMesh)
AUTOGENERATE_FUNCTION(ASBAttachment,0,execSetSkin)
AUTOGENERATE_FUNCTION(ASBAttachment,0,execUpdateOffsetTransform)


//------------------------------------------------------------------------------
//  RigidAttachment
//------------------------------------------------------------------------------

//  RigidAttachment.SetAnimType 20002 0 ( FUNC_Defined FUNC_Public )
struct ARigidAttachment_execSetAnimType_Parms {
  BYTE newType;  // 0 80 CPF_Parm
};


// ARigidAttachment 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT ARigidAttachment : public ASBAttachment {
  public:
    virtual ~ARigidAttachment(void);
    virtual unsigned int GetCPPSize(void);
    virtual bool SetMesh(class UObject *);
    virtual bool SetMesh(class FString &);
    ARigidAttachment(class ARigidAttachment const &);
    ARigidAttachment(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ARigidAttachment & operator=(class ARigidAttachment const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  DeformableAttachment
//------------------------------------------------------------------------------

// ADeformableAttachment 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT ADeformableAttachment : public ASBAttachment {
  public:
    virtual ~ADeformableAttachment(void);
    virtual unsigned int GetCPPSize(void);
    virtual bool SetMesh(class UObject *);
    virtual bool SetMesh(class FString &);
    ADeformableAttachment(class ADeformableAttachment const &);
    ADeformableAttachment(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ADeformableAttachment & operator=(class ADeformableAttachment const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  GUI_BaseWindow
//------------------------------------------------------------------------------

// UGUI_BaseWindow 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UGUI_BaseWindow : public UObject {
  public:
    virtual ~UGUI_BaseWindow(void);
    virtual unsigned int GetCPPSize(void);
    UGUI_BaseWindow(class UGUI_BaseWindow const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UGUI_BaseWindow & operator=(class UGUI_BaseWindow const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    UGUI_BaseWindow(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Light
//------------------------------------------------------------------------------

enum ELightIndex {
  LI_NONE = 0,
  LI_LIGHT0 = 1,
  LI_LIGHT1 = 2,
  LI_LIGHT2 = 3,
  LI_LIGHT3 = 4,
  LI_LIGHT4 = 5,
  LI_LIGHT5 = 6,
  LI_LIGHT6 = 7,
  LI_LIGHT7 = 8
};

enum ELightShadingEffect {
  LSE_Default = 0,
  LSE_NoShadows = 1,
  LSE_NoShading = 2
};

// ALight 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT ALight : public AActor {
  public:
    FLOAT MinCoronaSize;  // 420 1 CPF_Edit
    FLOAT MaxCoronaSize;  // 424 1 CPF_Edit
    FLOAT CoronaRotation;  // 428 1 CPF_Edit
    FLOAT CoronaRotationOffset;  // 42C 1 CPF_Edit
    BITFIELD UseOwnFinalBlend : 1;  // 430 1 CPF_Edit
    BYTE LightShadingEffect;  // 434 1 CPF_Edit
    BYTE DayLightCycleLightIndex;  // 435 0
    BYTE EnvironmentIndex;  // 436 1 CPF_Edit
    FLOAT ProjectorBrightness;  // 438 1 CPF_Edit
    FLOAT LightmapBlur;  // 43C 1 CPF_Edit
    class USBShadowMap* ShadowMap;  // 440 2002 CPF_Const CPF_Transient
    virtual ~ALight(void);
    virtual void PostLoad(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    ALight(class ALight const &);
    ALight(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ALight & operator=(class ALight const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBSunlight
//------------------------------------------------------------------------------

//  SBSunlight.PostBeginPlay 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct ASBSunlight_eventPostBeginPlay_Parms {
};


//  SBSunlight.DetachProjector 20400 0 ( FUNC_Native FUNC_Public )
struct ASBSunlight_execDetachProjector_Parms {
};


//  SBSunlight.AttachProjector 20400 0 ( FUNC_Native FUNC_Public )
struct ASBSunlight_execAttachProjector_Parms {
};


// ASBSunlight 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT ASBSunlight : public ALight {
  public:
    BITFIELD ProjectShadow : 1;  // 444 1 CPF_Edit
    INT FOV;  // 448 1 CPF_Edit
    INT MaxTraceDistance;  // 44C 1 CPF_Edit
    BYTE BlendingOp;  // 450 1 CPF_Edit
    class ASBProjector* AttachedSBProjector;  // 454 1 CPF_Edit
    INT ProjWidth;  // 458 2 CPF_Const
    INT ProjHeight;  // 45C 2 CPF_Const
    class FPlane FrustumPlanes[6];  // 460 2002 CPF_Const CPF_Transient
    class FVector FrustumVertices[8];  // 4C0 2002 CPF_Const CPF_Transient
    class FVector FrustumOrigin;  // 520 2002 CPF_Const CPF_Transient
    class FBox Box;  // 52C 2002 CPF_Const CPF_Transient
    DWORD TextureInterface;  // 548 2002 CPF_Const CPF_Transient
    TArray<class AActor*> InfluencedActors;  // 54C 402002 CPF_Const CPF_Transient CPF_NeedCtorLink
    class FVector OldLocation;  // 558 2000 CPF_Transient
    class FMatrix Matrix;  // 564 2000 CPF_Transient
    virtual ~ASBSunlight(void);
    virtual void Destroy(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual void PostEditMove(void);
    virtual void PostEditLoad(void);
    virtual int ShouldTrace(class AActor *,unsigned long);
    virtual class UPrimitive * GetPrimitive(void);
    virtual void TickSpecial(float);
    virtual void RenderEditorSelected(class FLevelSceneNode *,class FRenderInterface *,class FDynamicActor *);
    ASBSunlight(class ASBSunlight const &);
    ASBSunlight(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ASBSunlight & operator=(class ASBSunlight const &);
    void Attach(void);
    void CalcMatrix(void);
    void Detach(void);
    static void CDECL InternalConstructor(void *);
    void MarkInfluencedActors(void);
    void RenderWireframe(class FRenderInterface *);
    static class UClass * CDECL StaticClass(void);
    void UpdateInfluencedActorList(void);
    void execAttachProjector(struct FFrame &,void * const);
    void execDetachProjector(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(ASBSunlight,0,execAttachProjector)
AUTOGENERATE_FUNCTION(ASBSunlight,0,execDetachProjector)


//------------------------------------------------------------------------------
//  Primitive
//------------------------------------------------------------------------------

// UPrimitive 12 ( CLASS_Compiled CLASS_Parsed )
/*
class DLL_IMPORT UPrimitive : public UObject {
  public:
    char Unknown0[44];
    virtual ~UPrimitive(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual int PointCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,unsigned long);
    virtual int LineCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,class FVector const &,unsigned long,unsigned long);
    virtual class FBox GetRenderBoundingBox(class AActor const *);
    virtual class FSphere GetRenderBoundingSphere(class AActor const *);
    virtual class FBox GetCollisionBoundingBox(class AActor const *)const ;
    virtual int UseCylinderCollision(class AActor const *);
    virtual void PreIlluminate(class AActor *,int,class FSBLightMapGenerator *);
    virtual void Illuminate(class AActor *,int,class FSBLightMapGenerator *);
    virtual void CleanLightmap(class AActor *);
    virtual class FVector GetEncroachExtent(class AActor *);
    virtual class FVector GetEncroachCenter(class AActor *);
    UPrimitive(class UPrimitive const &);
    UPrimitive(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UPrimitive & operator=(class UPrimitive const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};
*/


//------------------------------------------------------------------------------
//  SBSunlightPrimitive
//------------------------------------------------------------------------------

// USBSunlightPrimitive 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT USBSunlightPrimitive : public UPrimitive {
  public:
    virtual ~USBSunlightPrimitive(void);
    virtual void Destroy(void);
    virtual unsigned int GetCPPSize(void);
    virtual int PointCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,unsigned long);
    virtual int LineCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,class FVector const &,unsigned long,unsigned long);
    virtual class FBox GetCollisionBoundingBox(class AActor const *)const ;
    virtual int UseCylinderCollision(class AActor const *);
    virtual class FVector GetEncroachExtent(class AActor *);
    virtual class FVector GetEncroachCenter(class AActor *);
    USBSunlightPrimitive(class USBSunlightPrimitive const &);
    USBSunlightPrimitive(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBSunlightPrimitive & operator=(class USBSunlightPrimitive const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBShadowMap
//------------------------------------------------------------------------------

// USBShadowMap 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT USBShadowMap : public UObject {
  public:
    FLOAT mMaxTraceDistance;  // 28 2002 CPF_Const CPF_Transient
    FLOAT mProjWidth;  // 2C 2002 CPF_Const CPF_Transient
    FLOAT mProjHeight;  // 30 2002 CPF_Const CPF_Transient
    class FVector mFrustumOrigin;  // 34 2002 CPF_Const CPF_Transient
    class FVector mLocation;  // 40 2002 CPF_Const CPF_Transient
    class FRotator mRotation;  // 4C 2002 CPF_Const CPF_Transient
    class ALight* mLight;  // 58 2 CPF_Const
    class FMatrix mWorldToCamera;  // 5C 2002002 CPF_Const CPF_Transient CPF_EditorData
    class FMatrix mCameraToScreen;  // 9C 2002002 CPF_Const CPF_Transient CPF_EditorData
    FLOAT mViewportScale;  // DC 2002002 CPF_Const CPF_Transient CPF_EditorData
    FLOAT mNearClippingPlane;  // E0 2002002 CPF_Const CPF_Transient CPF_EditorData
    FLOAT mFarClippingPlane;  // E4 2002002 CPF_Const CPF_Transient CPF_EditorData
    FLOAT mPCFRadiusInTexels;  // E8 2002002 CPF_Const CPF_Transient CPF_EditorData
    FLOAT mProjectorScale;  // EC 2002002 CPF_Const CPF_Transient CPF_EditorData
    DWORD mTextureInterface;  // F0 2002 CPF_Const CPF_Transient
    DWORD mCubemapFaces[6];  // F4 2002 CPF_Const CPF_Transient
    virtual ~USBShadowMap(void);
    virtual void Destroy(void);
    virtual unsigned int GetCPPSize(void);
    USBShadowMap(class USBShadowMap const &);
    USBShadowMap(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBShadowMap & operator=(class USBShadowMap const &);
    void AttachToLight(class ALight *);
    void DisplayTexture(class UViewport *,class FBaseTexture *,int);
    class FMatrix const & GetCameraToScreenMatrix(void)const ;
    float GetFarClippingPlane(void)const ;
    float GetNearClippingPlane(void)const ;
    float GetPCFRadiusInTexels(void)const ;
    class FBaseTexture * GetTexture(void);
    float GetViewportScale(void);
    class FMatrix const & GetWorldToCameraMatrix(void)const ;
    static void CDECL InternalConstructor(void *);
    void Precache(void);
    void ReleaseTextures(int);
    static class UClass * CDECL StaticClass(void);
    int Update(double,class UViewport *,class ULevel *,class FBox const &,int);
    int UpdateDepthMap(double,class UViewport *,class ULevel *,class FBox const &,class FAuxRenderTarget *,int,int);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBProjector
//------------------------------------------------------------------------------

//  SBProjector.PostBeginPlay 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct ASBProjector_eventPostBeginPlay_Parms {
};


//  SBProjector.DetachProjector 20400 0 ( FUNC_Native FUNC_Public )
struct ASBProjector_execDetachProjector_Parms {
};


//  SBProjector.AttachProjector 20400 0 ( FUNC_Native FUNC_Public )
struct ASBProjector_execAttachProjector_Parms {
};


// ASBProjector 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT ASBProjector : public AActor {
  public:
    INT FOV;  // 420 1 CPF_Edit
    INT MaxTraceDistance;  // 424 1 CPF_Edit
    BYTE BlendingOp;  // 428 1 CPF_Edit
    INT ProjWidth;  // 42C 0
    INT ProjHeight;  // 430 0
    class FPlane FrustumPlanes[6];  // 434 2002 CPF_Const CPF_Transient
    class FVector FrustumVertices[8];  // 494 2002 CPF_Const CPF_Transient
    class FVector FrustumOrigin;  // 4F4 2002 CPF_Const CPF_Transient
    class FBox Box;  // 500 2002 CPF_Const CPF_Transient
    DWORD TextureInterface;  // 51C 2002 CPF_Const CPF_Transient
    TArray<class AActor*> InfluencedActors;  // 520 402002 CPF_Const CPF_Transient CPF_NeedCtorLink
    class FVector OldLocation;  // 52C 2000 CPF_Transient
    class FMatrix Matrix;  // 538 2000 CPF_Transient
    virtual ~ASBProjector(void);
    virtual void Destroy(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual void PostEditMove(void);
    virtual void PostEditLoad(void);
    virtual int ShouldTrace(class AActor *,unsigned long);
    virtual class UPrimitive * GetPrimitive(void);
    virtual void TickSpecial(float);
    virtual void RenderEditorSelected(class FLevelSceneNode *,class FRenderInterface *,class FDynamicActor *);
    ASBProjector(class ASBProjector const &);
    ASBProjector(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ASBProjector & operator=(class ASBProjector const &);
    void Attach(void);
    void CalcMatrix(void);
    void Detach(void);
    static void CDECL InternalConstructor(void *);
    void MarkInfluencedActors(void);
    void RenderWireframe(class FRenderInterface *);
    static class UClass * CDECL StaticClass(void);
    void UpdateInfluencedActorList(void);
    void execAttachProjector(struct FFrame &,void * const);
    void execDetachProjector(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(ASBProjector,0,execAttachProjector)
AUTOGENERATE_FUNCTION(ASBProjector,0,execDetachProjector)


//------------------------------------------------------------------------------
//  SBProjectorPrimitive
//------------------------------------------------------------------------------

// USBProjectorPrimitive 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT USBProjectorPrimitive : public UPrimitive {
  public:
    virtual ~USBProjectorPrimitive(void);
    virtual void Destroy(void);
    virtual unsigned int GetCPPSize(void);
    virtual int PointCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,unsigned long);
    virtual int LineCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,class FVector const &,unsigned long,unsigned long);
    virtual class FBox GetCollisionBoundingBox(class AActor const *)const ;
    virtual int UseCylinderCollision(class AActor const *);
    virtual class FVector GetEncroachExtent(class AActor *);
    virtual class FVector GetEncroachCenter(class AActor *);
    USBProjectorPrimitive(class USBProjectorPrimitive const &);
    USBProjectorPrimitive(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBProjectorPrimitive & operator=(class USBProjectorPrimitive const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  CameraEffect
//------------------------------------------------------------------------------

// UCameraEffect 113 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_NoExport )
class DLL_IMPORT UCameraEffect : public UObject {
  public:
    FLOAT Alpha;  // 28 2000000 CPF_EditorData
    BITFIELD FinalEffect : 1;  // 2C 2000000 CPF_EditorData
    INT cameraeffect_dummy;  // 30 2000000 CPF_EditorData
    virtual ~UCameraEffect(void);
    virtual void PreRender(class UViewport *,class FRenderInterface *);
    virtual void PostRender(class UViewport *,class FRenderInterface *);
    UCameraEffect(class UCameraEffect const &);
    UCameraEffect(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UCameraEffect & operator=(class UCameraEffect const &);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBSimpleEffect
//------------------------------------------------------------------------------

// USBSimpleEffect 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT USBSimpleEffect : public UCameraEffect {
  public:
    virtual ~USBSimpleEffect(void);
    virtual void Destroy(void);
    virtual unsigned int GetCPPSize(void);
    virtual void PreRender(class UViewport *,class FRenderInterface *);
    virtual void PostRender(class UViewport *,class FRenderInterface *);
    USBSimpleEffect(class USBSimpleEffect const &);
    USBSimpleEffect(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBSimpleEffect & operator=(class USBSimpleEffect const &);
    void FillViewport(class UViewport *,class FRenderInterface *);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBBloomEffect
//------------------------------------------------------------------------------

// USBBloomEffect 3112 ( CLASS_Compiled CLASS_Parsed CLASS_NoExport CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT USBBloomEffect : public UCameraEffect {
  public:
    FLOAT BloomContrast;  // 34 2000001 CPF_Edit CPF_EditorData
    FLOAT OriginalScreenAmount;  // 38 2000001 CPF_Edit CPF_EditorData
    FLOAT BloomScreenAmount;  // 3C 2000001 CPF_Edit CPF_EditorData
    FLOAT BlurScreenAmount;  // 40 2000001 CPF_Edit CPF_EditorData
    INT NumBlurPasses;  // 44 1 CPF_Edit
    DWORD RenderTargets[4];  // 48 2002 CPF_Const CPF_Transient
    virtual ~USBBloomEffect(void);
    virtual void Destroy(void);
    virtual unsigned int GetCPPSize(void);
    virtual void PreRender(class UViewport *,class FRenderInterface *);
    virtual void PostRender(class UViewport *,class FRenderInterface *);
    USBBloomEffect(class USBBloomEffect const &);
    USBBloomEffect(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBBloomEffect & operator=(class USBBloomEffect const &);
    void Blur(class UViewport *,class FRenderInterface *,int,int);
    void FillViewport(class UViewport *,class FRenderInterface *,class UMaterial *,enum EFrameBufferBlending,int,int,int,unsigned char);
    void HorizontalBlur(class UViewport *,class FRenderInterface *,int,int);
    static void CDECL InternalConstructor(void *);
    void LuminanceDownsample(class UViewport *,class FRenderInterface *,int,int,float);
    static class UClass * CDECL StaticClass(void);
    void ToneMapCombine(class UViewport *,class FRenderInterface *,int,float,float);
    void VerticalBlur(class UViewport *,class FRenderInterface *,int,int);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Material
//------------------------------------------------------------------------------

enum ESurfaceTypes {
  EST_Default = 0,
  EST_Rock = 1,
  EST_Dirt = 2,
  EST_Metal = 3,
  EST_Wood = 4,
  EST_Plant = 5,
  EST_Flesh = 6,
  EST_Ice = 7,
  EST_Snow = 8,
  EST_Water = 9,
  EST_Glass = 10,
  EST_CreakyWood = 11,
  EST_Grass = 12,
  EST_Gravel = 13,
  EST_HardRock = 14,
  EST_Mud = 15,
  EST_Stone = 16,
  EST_Hardwood = 17,
  EST_WoodRug = 18,
  EST_Custom08 = 19,
  EST_Custom09 = 20,
  EST_Custom10 = 21,
  EST_Custom11 = 22,
  EST_Custom12 = 23,
  EST_Custom13 = 24,
  EST_Custom14 = 25,
  EST_Custom15 = 26,
  EST_Custom16 = 27,
  EST_Custom17 = 28,
  EST_Custom18 = 29,
  EST_Custom19 = 30,
  EST_Custom20 = 31,
  EST_Custom21 = 32,
  EST_Custom22 = 33,
  EST_Custom23 = 34,
  EST_Custom24 = 35,
  EST_Custom25 = 36,
  EST_Custom26 = 37,
  EST_Custom27 = 38,
  EST_Custom28 = 39,
  EST_Custom29 = 40,
  EST_Custom30 = 41,
  EST_Custom31 = 42
};

//  Material.MaterialVSize 20400 0 ( FUNC_Native FUNC_Public )
struct UMaterial_execMaterialVSize_Parms {
  INT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Material.MaterialUSize 20400 0 ( FUNC_Native FUNC_Public )
struct UMaterial_execMaterialUSize_Parms {
  INT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Material.Trigger 20002 0 ( FUNC_Defined FUNC_Public )
struct UMaterial_execTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class AActor* EventInstigator;  // 4 80 CPF_Parm
};


//  Material.Reset 20002 0 ( FUNC_Defined FUNC_Public )
struct UMaterial_execReset_Parms {
};


// UMaterial 2112 ( CLASS_Compiled CLASS_Parsed CLASS_NoExport CLASS_CollapseCategories )
class DLL_IMPORT UMaterial : public UObject {
  public:
    class UMaterial* FallbackMaterial;  // 28 1 CPF_Edit
    class UMaterial* DefaultMaterial;  // 2C 0
    BITFIELD UseFallback : 1;  // 30 2002002 CPF_Const CPF_Transient CPF_EditorData
    BITFIELD Validated : 1;  // 30 2002002 CPF_Const CPF_Transient CPF_EditorData
    BYTE SurfaceType;  // 34 1 CPF_Edit
    INT MaterialType;  // 38 2000000 CPF_EditorData
    virtual ~UMaterial(void);
    virtual void Serialize(class FArchive &);
    virtual int CheckCircularReferences(class TArray<class UMaterial *> &);
    virtual int GetValidated(void);
    virtual void SetValidated(int);
    virtual void PreSetMaterial(float);
    virtual int MaterialUSize(void);
    virtual int MaterialVSize(void);
    virtual int RequiresSorting(void)const ;
    virtual int IsTransparent(void)const ;
    virtual int IsMasked(void)const ;
    virtual int IsDoubleSided(void)const ;
    virtual unsigned char RequiredUVStreams(void)const ;
    virtual int RequiresNormal(void)const ;
    virtual int IsEmissive(void)const ;
    virtual int RequiresAlphaStream(void)const ;
    virtual class UMaterial * CheckFallback(void);
    virtual int HasFallback(void);
    virtual int UpdateCache(class URenderDevice *,int);
    UMaterial(class UMaterial const &);
    UMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UMaterial & operator=(class UMaterial const &);
    static void CDECL ClearFallbacks(void);
    class UMaterial * ConvertPolyFlagsToMaterial(class UMaterial *,unsigned long);
    static class UClass * CDECL StaticClass(void);
    void execMaterialUSize(struct FFrame &,void * const);
    void execMaterialVSize(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(UMaterial,0,execMaterialUSize)
AUTOGENERATE_FUNCTION(UMaterial,0,execMaterialVSize)


//------------------------------------------------------------------------------
//  SBMaterial
//------------------------------------------------------------------------------

// USBMaterial 3013 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT USBMaterial : public UMaterial {
  public:
    class UMaterial* InternalUnrealMaterial;  // 3C 0
    virtual ~USBMaterial(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual int CheckCircularReferences(class TArray<class UMaterial *> &);
    virtual void ApplySBMaterial(class FRenderInterface *);
    virtual class UMaterial * GetSamplerMaterial(int);
    virtual bool AlphaBlending(void)const ;
    virtual bool TwoSided(void);
    virtual bool AlphaTesting(void);
    virtual unsigned char AlphaRef(void);
    USBMaterial(class USBMaterial const &);
    USBMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBMaterial & operator=(class USBMaterial const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBToneMapMaterial
//------------------------------------------------------------------------------

// USBToneMapMaterial 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT USBToneMapMaterial : public USBMaterial {
  public:
    class UBitmapMaterial* BlurredMaterial;  // 40 16000001 CPF_Edit CPF_EditorData CPF_EditInline CPF_Unk_10000000
    FLOAT OriginalMaterialAmount;  // 44 0
    FLOAT BlurredMaterialAmount;  // 48 0
    virtual ~USBToneMapMaterial(void);
    virtual unsigned int GetCPPSize(void);
    virtual int MaterialUSize(void);
    virtual int MaterialVSize(void);
    virtual unsigned char RequiredUVStreams(void)const ;
    virtual void ApplySBMaterial(class FRenderInterface *);
    virtual class UMaterial * GetSamplerMaterial(int);
    USBToneMapMaterial(class USBToneMapMaterial const &);
    USBToneMapMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBToneMapMaterial & operator=(class USBToneMapMaterial const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBStandardMaterial
//------------------------------------------------------------------------------

// USBStandardMaterial 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT USBStandardMaterial : public USBMaterial {
  public:
    FLOAT LightmapContrastAdjust;  // 40 2000001 CPF_Edit CPF_EditorData
    FLOAT SunlightsContrastAdjust;  // 44 2000001 CPF_Edit CPF_EditorData
    FLOAT SunlightsBrightness;  // 48 2000001 CPF_Edit CPF_EditorData
    FLOAT StaticLightAmount;  // 4C 2000001 CPF_Edit CPF_EditorData
    virtual ~USBStandardMaterial(void);
    virtual unsigned int GetCPPSize(void);
    virtual void ApplySBMaterial(class FRenderInterface *);
    USBStandardMaterial(class USBStandardMaterial const &);
    USBStandardMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBStandardMaterial & operator=(class USBStandardMaterial const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBSkyMaterial
//------------------------------------------------------------------------------

// USBSkyMaterial 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT USBSkyMaterial : public USBMaterial {
  public:
    class FColor EnvColor;  // 40 0
    class UMaterial* Material;  // 44 0
    virtual ~USBSkyMaterial(void);
    virtual unsigned int GetCPPSize(void);
    virtual void ApplySBMaterial(class FRenderInterface *);
    virtual class UMaterial * GetSamplerMaterial(int);
    USBSkyMaterial(class USBSkyMaterial const &);
    USBSkyMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBSkyMaterial & operator=(class USBSkyMaterial const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBShadowmapGenerationMaterial
//------------------------------------------------------------------------------

// USBShadowmapGenerationMaterial 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT USBShadowmapGenerationMaterial : public USBMaterial {
  public:
    BYTE LightEffect;  // 40 1 CPF_Edit
    class FVector LightPosition;  // 44 1 CPF_Edit
    virtual ~USBShadowmapGenerationMaterial(void);
    virtual unsigned int GetCPPSize(void);
    virtual void ApplySBMaterial(class FRenderInterface *);
    USBShadowmapGenerationMaterial(class USBShadowmapGenerationMaterial const &);
    USBShadowmapGenerationMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBShadowmapGenerationMaterial & operator=(class USBShadowmapGenerationMaterial const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBSeparatedGaussMaterial
//------------------------------------------------------------------------------

// USBSeparatedGaussMaterial 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT USBSeparatedGaussMaterial : public USBMaterial {
  public:
    class UBitmapMaterial* Material;  // 40 16000001 CPF_Edit CPF_EditorData CPF_EditInline CPF_Unk_10000000
    BITFIELD Horizontal : 1;  // 44 2000001 CPF_Edit CPF_EditorData
    virtual ~USBSeparatedGaussMaterial(void);
    virtual unsigned int GetCPPSize(void);
    virtual unsigned char RequiredUVStreams(void)const ;
    virtual void ApplySBMaterial(class FRenderInterface *);
    virtual class UMaterial * GetSamplerMaterial(int);
    USBSeparatedGaussMaterial(class USBSeparatedGaussMaterial const &);
    USBSeparatedGaussMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBSeparatedGaussMaterial & operator=(class USBSeparatedGaussMaterial const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBLuminancePassMaterial
//------------------------------------------------------------------------------

// USBLuminancePassMaterial 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT USBLuminancePassMaterial : public USBMaterial {
  public:
    class UBitmapMaterial* Material;  // 40 16000001 CPF_Edit CPF_EditorData CPF_EditInline CPF_Unk_10000000
    FLOAT LuminancePower;  // 44 2000001 CPF_Edit CPF_EditorData
    virtual ~USBLuminancePassMaterial(void);
    virtual unsigned int GetCPPSize(void);
    virtual unsigned char RequiredUVStreams(void)const ;
    virtual void ApplySBMaterial(class FRenderInterface *);
    virtual class UMaterial * GetSamplerMaterial(int);
    USBLuminancePassMaterial(class USBLuminancePassMaterial const &);
    USBLuminancePassMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBLuminancePassMaterial & operator=(class USBLuminancePassMaterial const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBLightmapGenerationMaterial
//------------------------------------------------------------------------------

// USBLightmapGenerationMaterial 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT USBLightmapGenerationMaterial : public USBMaterial {
  public:
    FLOAT ZBias;  // 40 1 CPF_Edit
    FLOAT PCFRadius;  // 44 2000001 CPF_Edit CPF_EditorData
    FLOAT ProjectorBrightness;  // 48 2000001 CPF_Edit CPF_EditorData
    class FPlane LightColor;  // 4C 1 CPF_Edit
    class FVector LightPosition;  // 5C 1 CPF_Edit
    class FVector LightDirection;  // 68 1 CPF_Edit
    FLOAT LightRadius;  // 74 1 CPF_Edit
    BYTE LightEffect;  // 78 2000001 CPF_Edit CPF_EditorData
    BYTE LightShadingEffect;  // 79 2000001 CPF_Edit CPF_EditorData
    virtual ~USBLightmapGenerationMaterial(void);
    virtual unsigned int GetCPPSize(void);
    virtual void ApplySBMaterial(class FRenderInterface *);
    USBLightmapGenerationMaterial(class USBLightmapGenerationMaterial const &);
    USBLightmapGenerationMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBLightmapGenerationMaterial & operator=(class USBLightmapGenerationMaterial const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  RenderedMaterial
//------------------------------------------------------------------------------

// URenderedMaterial 2112 ( CLASS_Compiled CLASS_Parsed CLASS_NoExport CLASS_CollapseCategories )
class DLL_IMPORT URenderedMaterial : public UMaterial {
  public:
    INT renderedmaterial_dummy;  // 3C 2000000 CPF_EditorData
    virtual ~URenderedMaterial(void);
    URenderedMaterial(class URenderedMaterial const &);
    URenderedMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class URenderedMaterial & operator=(class URenderedMaterial const &);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  ConstantMaterial
//------------------------------------------------------------------------------

// UConstantMaterial 3013 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UConstantMaterial : public URenderedMaterial {
  public:
    virtual ~UConstantMaterial(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FColor GetColor(float);
    UConstantMaterial(class UConstantMaterial const &);
    UConstantMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UConstantMaterial & operator=(class UConstantMaterial const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBLightColorMaterial
//------------------------------------------------------------------------------

// USBLightColorMaterial 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT USBLightColorMaterial : public UConstantMaterial {
  public:
    class ALight* LightActor;  // 40 14000001 CPF_Edit CPF_EditInline CPF_Unk_10000000
    INT BrightnessOffset;  // 44 1 CPF_Edit
    INT HueOffset;  // 48 1 CPF_Edit
    INT SaturationOffset;  // 4C 1 CPF_Edit
    FLOAT BrightnessMultiplier;  // 50 1 CPF_Edit
    FLOAT HueMultiplier;  // 54 1 CPF_Edit
    FLOAT SaturationMultiplier;  // 58 1 CPF_Edit
    virtual ~USBLightColorMaterial(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FColor GetColor(float);
    USBLightColorMaterial(class USBLightColorMaterial const &);
    USBLightColorMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBLightColorMaterial & operator=(class USBLightColorMaterial const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBFogColorMaterial
//------------------------------------------------------------------------------

// USBFogColorMaterial 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT USBFogColorMaterial : public UConstantMaterial {
  public:
    virtual ~USBFogColorMaterial(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FColor GetColor(float);
    USBFogColorMaterial(class USBFogColorMaterial const &);
    USBFogColorMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBFogColorMaterial & operator=(class USBFogColorMaterial const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBDecoMaterial
//------------------------------------------------------------------------------

// USBDecoMaterial 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT USBDecoMaterial : public USBMaterial {
  public:
    FLOAT LightmapContrastAdjust;  // 40 2000001 CPF_Edit CPF_EditorData
    FLOAT SunlightsContrastAdjust;  // 44 2000001 CPF_Edit CPF_EditorData
    FLOAT SunlightsBrightness;  // 48 2000001 CPF_Edit CPF_EditorData
    class UMaterial* Material;  // 4C 14000001 CPF_Edit CPF_EditInline CPF_Unk_10000000
    class FRange FadeinRadius;  // 50 1 CPF_Edit
    class FRange FadeoutRadius;  // 58 1 CPF_Edit
    FLOAT CoordinateScale;  // 60 2000001 CPF_Edit CPF_EditorData
    virtual ~USBDecoMaterial(void);
    virtual unsigned int GetCPPSize(void);
    virtual unsigned char RequiredUVStreams(void)const ;
    virtual void ApplySBMaterial(class FRenderInterface *);
    virtual class UMaterial * GetSamplerMaterial(int);
    virtual bool TwoSided(void);
    virtual bool AlphaTesting(void);
    USBDecoMaterial(class USBDecoMaterial const &);
    USBDecoMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBDecoMaterial & operator=(class USBDecoMaterial const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBCharacterMaterial
//------------------------------------------------------------------------------

enum ECharacterPostProcess {
  CPP_None = 0,
  CPP_Statue = 1,
  CPP_Ghost = 2
};

// USBCharacterMaterial 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT USBCharacterMaterial : public USBMaterial {
  public:
    FLOAT SunlightsContrastAdjust;  // 40 2000001 CPF_Edit CPF_EditorData
    FLOAT SunlightsBrightness;  // 44 2000001 CPF_Edit CPF_EditorData
    class FColor SkinColor;  // 48 1 CPF_Edit
    class UTexture* SkinTexture;  // 4C 16000001 CPF_Edit CPF_EditorData CPF_EditInline CPF_Unk_10000000
    class UTexture* TattooTexture;  // 50 16000001 CPF_Edit CPF_EditorData CPF_EditInline CPF_Unk_10000000
    class UTexture* MainTexture[2];  // 54 16000001 CPF_Edit CPF_EditorData CPF_EditInline CPF_Unk_10000000
    class FColor MainColor1[2];  // 5C 2000001 CPF_Edit CPF_EditorData
    class FColor MainColor2[2];  // 64 2000001 CPF_Edit CPF_EditorData
    class UTexture* GuildLogoTexture;  // 6C 16000001 CPF_Edit CPF_EditorData CPF_EditInline CPF_Unk_10000000
    class FColor GuildLogoColor;  // 70 2000001 CPF_Edit CPF_EditorData
    BITFIELD GuildLogoUsesCylindricalMapping : 1;  // 74 1 CPF_Edit
    INT GuildLogoAngle;  // 78 1 CPF_Edit
    FLOAT GuildLogoScale;  // 7C 1 CPF_Edit
    FLOAT GuildLogoCenterU;  // 80 1 CPF_Edit
    FLOAT GuildLogoCenterV;  // 84 1 CPF_Edit
    class FColor ColorModifier;  // 88 2000001 CPF_Edit CPF_EditorData
    BYTE PostProcess;  // 8C 1 CPF_Edit
    class UTexture* StatueTexture;  // 90 1 CPF_Edit
    class UTexture* EnvMapTexture;  // 94 1 CPF_Edit
    class UTexture* OverlayTexture;  // 98 1 CPF_Edit
    BITFIELD UseSkinTextureColoring : 1;  // 9C 2000001 CPF_Edit CPF_EditorData
    BITFIELD UseMainTextureColoring : 1;  // 9C 2000001 CPF_Edit CPF_EditorData
    FLOAT SpecularLevel;  // A0 1 CPF_Edit
    class FColor SpecularColor;  // A4 1 CPF_Edit
    BITFIELD mIsBaked : 1;  // A8 2002 CPF_Const CPF_Transient
    virtual ~USBCharacterMaterial(void);
    virtual void Destroy(void);
    virtual unsigned int GetCPPSize(void);
    virtual int RequiresSorting(void)const ;
    virtual void ApplySBMaterial(class FRenderInterface *);
    virtual class UMaterial * GetSamplerMaterial(int);
    virtual bool AlphaBlending(void)const ;
    virtual bool TwoSided(void);
    virtual bool AlphaTesting(void);
    virtual unsigned char AlphaRef(void);
    USBCharacterMaterial(class USBCharacterMaterial const &);
    USBCharacterMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBCharacterMaterial & operator=(class USBCharacterMaterial const &);
    static void CDECL InternalConstructor(void *);
    void Invalidate(void);
    bool IsInvalidated(void)const ;
    static class UClass * CDECL StaticClass(void);
    void Validate(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  EnvironmentManager
//------------------------------------------------------------------------------

//  EnvironmentManager.SetDefaultHUDColor 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AEnvironmentManager_execSetDefaultHUDColor_Parms {
  class FColor aColor;  // 0 80 CPF_Parm
};


//  EnvironmentManager.PostBeginPlay 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct AEnvironmentManager_eventPostBeginPlay_Parms {
};


//  EnvironmentManager.AddEffect 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AEnvironmentManager_execAddEffect_Parms {
  class AEnvironmentEffect* effect;  // 0 80 CPF_Parm
};


//  EnvironmentManager.BuildListOfEnvironmentActors 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AEnvironmentManager_execBuildListOfEnvironmentActors_Parms {
};


// AEnvironmentManager 1A ( CLASS_Compiled CLASS_Transient CLASS_Parsed )
class DLL_IMPORT AEnvironmentManager : public AActor {
  public:
    TArray<class AZoneInfo*> mZoneInfos;  // 420 2400000 CPF_NeedCtorLink CPF_EditorData
    TArray<class ALight*> mLights;  // 42C 2400000 CPF_NeedCtorLink CPF_EditorData
    TArray<class UParticleEmitter*> mEmitters;  // 438 400000 CPF_NeedCtorLink
    TArray<class AEnvironmentEffect*> mEffects;  // 444 2400000 CPF_NeedCtorLink CPF_EditorData
    class UEnvironmentSettings* mCurrentSettings;  // 450 0
    class FColor mDefaultColor;  // 454 0
    virtual ~AEnvironmentManager(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Tick(float,enum ELevelTick);
    AEnvironmentManager(class AEnvironmentManager const &);
    AEnvironmentManager(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AEnvironmentManager & operator=(class AEnvironmentManager const &);
    void AddEffect(class AEnvironmentEffect *);
    void ApplyDefaultHUDColor(void);
    void BuildListOfEnvironmentActors(void);
    float GetTime(void);
    static void CDECL InternalConstructor(void *);
    void RetrieveCurrentSettings(class UEnvironmentSettings *);
    void SetDefaultHUDColor(class FColor);
    static class UClass * CDECL StaticClass(void);
    void execAddEffect(struct FFrame &,void * const);
    void execBuildListOfEnvironmentActors(struct FFrame &,void * const);
    void execSetDefaultHUDColor(struct FFrame &,void * const);
  private:
    void ApplyCurrentSettingsToEmitter(class UParticleEmitter *);
    void ApplyCurrentSettingsToEmitters(void);
    void ApplyCurrentSettingsToHUD(void);
    void ApplyCurrentSettingsToLight(class ALight *);
    void ApplyCurrentSettingsToLights(void);
    void ApplyCurrentSettingsToZoneInfo(class AZoneInfo *);
    static class UClass PrivateStaticClass;
    void RemoveDeletedEffectsFromList(void);
    void RetrieveLightSettings(class UEnvironmentSettings *);
    void RetrieveLightSettings(class UEnvironmentSettings *,class ALight const *);
    void RetrieveZoneInfoSettings(class UEnvironmentSettings *,class AZoneInfo const *);
};
AUTOGENERATE_FUNCTION(AEnvironmentManager,0,execAddEffect)
AUTOGENERATE_FUNCTION(AEnvironmentManager,0,execBuildListOfEnvironmentActors)
AUTOGENERATE_FUNCTION(AEnvironmentManager,0,execSetDefaultHUDColor)


//------------------------------------------------------------------------------
//  BitmapMaterial
//------------------------------------------------------------------------------

enum ETexClampMode {
  TC_Wrap = 0,
  TC_Clamp = 1,
  TC_BlackBorder = 2
};

enum ETextureFormat {
  TEXF_P8 = 0,
  TEXF_RGBA7 = 1,
  TEXF_RGB16 = 2,
  TEXF_DXT1 = 3,
  TEXF_RGB8 = 4,
  TEXF_RGBA8 = 5,
  TEXF_NODATA = 6,
  TEXF_DXT3 = 7,
  TEXF_DXT5 = 8,
  TEXF_L8 = 9,
  TEXF_G16 = 10,
  TEXF_RRRGGGBBB = 11,
  TEXF_RGBA32F = 12
};

// UBitmapMaterial 2113 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_NoExport CLASS_CollapseCategories )
class DLL_IMPORT UBitmapMaterial : public URenderedMaterial {
  public:
    BYTE Format;  // 40 20003 CPF_Edit CPF_Const CPF_EditConst
    BYTE UClampMode;  // 41 1 CPF_Edit
    BYTE VClampMode;  // 42 1 CPF_Edit
    BYTE UBits;  // 43 2 CPF_Const
    BYTE VBits;  // 44 2 CPF_Const
    INT USize;  // 48 2 CPF_Const
    INT VSize;  // 4C 2 CPF_Const
    INT UClamp;  // 50 3 CPF_Edit CPF_Const
    INT VClamp;  // 54 3 CPF_Edit CPF_Const
    virtual ~UBitmapMaterial(void);
    virtual int MaterialUSize(void);
    virtual int MaterialVSize(void);
    virtual int UpdateCache(class URenderDevice *,int);
    virtual class UBitmapMaterial * Get(double,class UViewport *);
    virtual void SetCache(int);
    UBitmapMaterial(class UBitmapMaterial const &);
    UBitmapMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UBitmapMaterial & operator=(class UBitmapMaterial const &);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Texture
//------------------------------------------------------------------------------

enum ELODSet {
  LODSET_None = 0,
  LODSET_World = 1,
  LODSET_PlayerSkin = 2,
  LODSET_WeaponSkin = 3,
  LODSET_Terrain = 4,
  LODSET_Interface = 5,
  LODSET_RenderMap = 6,
  LODSET_Lightmap = 7
};

enum EEnvMapTransformType {
  EMTT_ViewSpace = 0,
  EMTT_WorldSpace = 1,
  EMTT_LightSpace = 2
};

//  Texture.GetPalColorAtIndex 20400 0 ( FUNC_Native FUNC_Public )
struct UTexture_execGetPalColorAtIndex_Parms {
  BYTE PixelIndex;  // 0 80 CPF_Parm
  class FColor ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


// UTexture 152 ( CLASS_Compiled CLASS_Parsed CLASS_SafeReplace CLASS_NoExport )
class DLL_IMPORT UTexture : public UBitmapMaterial {
  public:
    class UPalette* Palette;  // 58 1 CPF_Edit
    class UMaterial* Detail;  // 5C 1 CPF_Edit
    FLOAT DetailScale;  // 60 1 CPF_Edit
    class FColor MipZero;  // 64 2 CPF_Const
    class FColor MaxColor;  // 68 2 CPF_Const
    INT InternalTime[2];  // 6C 2 CPF_Const
    class UTexture* DetailTexture;  // 74 22000000 CPF_EditorData CPF_Deprecated
    class UTexture* EnvironmentMap;  // 78 22000000 CPF_EditorData CPF_Deprecated
    BYTE EnvMapTransformType;  // 7C 20000000 CPF_Deprecated
    FLOAT Specular;  // 80 22000000 CPF_EditorData CPF_Deprecated
    BITFIELD bMasked : 1;  // 84 1 CPF_Edit
    BITFIELD bAlphaTexture : 1;  // 84 1 CPF_Edit
    BITFIELD bTwoSided : 1;  // 84 1 CPF_Edit
    BITFIELD bHighColorQuality : 1;  // 84 2000001 CPF_Edit CPF_EditorData
    BITFIELD bHighTextureQuality : 1;  // 84 2000001 CPF_Edit CPF_EditorData
    BITFIELD bRealtime : 1;  // 84 2000000 CPF_EditorData
    BITFIELD bParametric : 1;  // 84 2000000 CPF_EditorData
    BITFIELD bRealtimeChanged : 1;  // 84 2002000 CPF_Transient CPF_EditorData
    BITFIELD bHasComp : 1;  // 84 2020002 CPF_Const CPF_EditConst CPF_EditorData
    BYTE LODSet;  // 88 1 CPF_Edit
    INT NormalLOD;  // 8C 1 CPF_Edit
    INT MinLOD;  // 90 0
    INT MaxLOD;  // 94 2000 CPF_Transient
    class UTexture* AnimNext;  // 98 1 CPF_Edit
    class UTexture* AnimCurrent;  // 9C 2000 CPF_Transient
    BYTE PrimeCount;  // A0 1 CPF_Edit
    BYTE PrimeCurrent;  // A1 2000 CPF_Transient
    FLOAT MinFrameRate;  // A4 1 CPF_Edit
    FLOAT MaxFrameRate;  // A8 1 CPF_Edit
    FLOAT Accumulator;  // AC 2000 CPF_Transient
    TArray<INT> Mips;  // B0 1002 CPF_Const CPF_Native
    BYTE CompFormat;  // BC 2020002 CPF_Const CPF_EditConst CPF_EditorData
    BYTE PS2FirstMip;  // BD 0
    BYTE PS2NumMips;  // BE 0
    DWORD RenderInterface;  // C0 2002 CPF_Const CPF_Transient
    INT __LastUpdateTime[2];  // C4 2002 CPF_Const CPF_Transient
    virtual ~UTexture(void);
    virtual void PostLoad(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual int RequiresSorting(void)const ;
    virtual int IsTransparent(void)const ;
    virtual int IsMasked(void)const ;
    virtual class FBaseTexture * GetRenderInterface(void);
    virtual class UBitmapMaterial * Get(double,class UViewport *);
    virtual void Clear(class FColor);
    virtual void Clear(unsigned long);
    virtual void Init(int,int);
    virtual void Tick(float);
    virtual void ConstantTimeTick(void);
    virtual void MousePosition(unsigned long,float,float);
    virtual void Click(unsigned long,float,float);
    virtual void Update(double);
    virtual void Prime(void);
    virtual void ArithOp(class UTexture *,enum ETextureArithOp);
    UTexture(class UTexture const &);
    UTexture(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UTexture & operator=(class UTexture const &);
    int Compress(enum ETextureFormat,int,struct FDXTCompressionOptions *);
    enum ETextureFormat ConvertDXT(int,int,int,unsigned char * *);
    enum ETextureFormat ConvertDXT(void);
    void CreateColorRange(void);
    void CreateMips(int,int,int,class FColor);
    int Decompress(enum ETextureFormat);
    int DefaultLOD(void);
    unsigned char GetClosestColor(class FColor const &);
    class FColor * GetColors(void);
    unsigned long GetColorsIndex(void);
    class FString GetFormatDesc(void);
    double GetLastUpdateTime(void);
    struct FMipmapBase * GetMip(int);
    int GetNumMips(void);
    class FColor GetPalColorAtIndex(unsigned char);
    class FColor GetTexel(float,float,float,float);
    static void CDECL InternalConstructor(void *);
    void SetLastUpdateTime(double);
    static class UClass * CDECL StaticClass(void);
    void execGetPalColorAtIndex(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(UTexture,0,execGetPalColorAtIndex)


//------------------------------------------------------------------------------
//  DynamicCubemap
//------------------------------------------------------------------------------

// UDynamicCubemap 152 ( CLASS_Compiled CLASS_Parsed CLASS_SafeReplace CLASS_NoExport )
class DLL_IMPORT UDynamicCubemap : public UTexture {
  public:
    class UTexture* Faces[6];  // CC 1 CPF_Edit
    DWORD CubemapRenderInterface;  // E4 2000 CPF_Transient
    virtual ~UDynamicCubemap(void);
    virtual void Destroy(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FBaseTexture * GetRenderInterface(void);
    UDynamicCubemap(class UDynamicCubemap const &);
    UDynamicCubemap(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UDynamicCubemap & operator=(class UDynamicCubemap const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBLightingCubemap
//------------------------------------------------------------------------------

// USBLightingCubemap 152 ( CLASS_Compiled CLASS_Parsed CLASS_SafeReplace CLASS_NoExport )
class DLL_IMPORT USBLightingCubemap : public UDynamicCubemap {
  public:
    TArray<INT> __Sunlights;  // E8 2402000 CPF_Transient CPF_NeedCtorLink CPF_EditorData
    virtual ~USBLightingCubemap(void);
    virtual void Destroy(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Update(class AActor * * const,int);
    USBLightingCubemap(class USBLightingCubemap const &);
    USBLightingCubemap(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBLightingCubemap & operator=(class USBLightingCubemap const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AnimNotify
//------------------------------------------------------------------------------

// UAnimNotify 3013 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UAnimNotify : public UObject {
  public:
    INT Revision;  // 28 2000 CPF_Transient
    BITFIELD AlwaysNotify : 1;  // 2C 1 CPF_Edit
    virtual ~UAnimNotify(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Notify(class UMeshInstance *,class AActor *);
    UAnimNotify(class UAnimNotify const &);
    UAnimNotify(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UAnimNotify & operator=(class UAnimNotify const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AnimNotify_ModifyMovement
//------------------------------------------------------------------------------

// UAnimNotify_ModifyMovement 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UAnimNotify_ModifyMovement : public UAnimNotify {
  public:
    BITFIELD FreezeMovement : 1;  // 30 1 CPF_Edit
    BITFIELD FreezeRotation : 1;  // 30 1 CPF_Edit
    virtual ~UAnimNotify_ModifyMovement(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Notify(class UMeshInstance *,class AActor *);
    UAnimNotify_ModifyMovement(class UAnimNotify_ModifyMovement const &);
    UAnimNotify_ModifyMovement(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UAnimNotify_ModifyMovement & operator=(class UAnimNotify_ModifyMovement const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AnimNotify_Voice
//------------------------------------------------------------------------------

// UAnimNotify_Voice 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UAnimNotify_Voice : public UAnimNotify {
  public:
    BYTE VoiceType;  // 30 1 CPF_Edit
    INT Radius;  // 34 1 CPF_Edit
    FName MeshSoundPropertiesGroup;  // 38 1 CPF_Edit
    virtual ~UAnimNotify_Voice(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Notify(class UMeshInstance *,class AActor *);
    UAnimNotify_Voice(class UAnimNotify_Voice const &);
    UAnimNotify_Voice(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UAnimNotify_Voice & operator=(class UAnimNotify_Voice const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AnimNotify_SBSound
//------------------------------------------------------------------------------

// UAnimNotify_SBSound 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UAnimNotify_SBSound : public UAnimNotify {
  public:
    class USound* Sound;  // 30 1 CPF_Edit
    INT Radius;  // 34 1 CPF_Edit
    FName MeshSoundPropertiesGroup;  // 38 1 CPF_Edit
    BYTE SoundType;  // 3C 1 CPF_Edit
    virtual ~UAnimNotify_SBSound(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Notify(class UMeshInstance *,class AActor *);
    virtual class USound * SelectSound(class USound *,class UMeshInstance *,class AActor *);
    virtual class USound * GetDefaultSound(class USound *);
    UAnimNotify_SBSound(class UAnimNotify_SBSound const &);
    UAnimNotify_SBSound(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UAnimNotify_SBSound & operator=(class UAnimNotify_SBSound const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AnimNotify_Impact
//------------------------------------------------------------------------------

// UAnimNotify_Impact 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UAnimNotify_Impact : public UAnimNotify_SBSound {
  public:
    virtual ~UAnimNotify_Impact(void);
    virtual unsigned int GetCPPSize(void);
    virtual class USound * SelectSound(class USound *,class UMeshInstance *,class AActor *);
    UAnimNotify_Impact(class UAnimNotify_Impact const &);
    UAnimNotify_Impact(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UAnimNotify_Impact & operator=(class UAnimNotify_Impact const &);
    class USound * GetMaterialSound(class USound *,int);
    class USound * GetMaterialSound(class USound *,class UMaterial *);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    class FName GetMaterialSoundTag(class UMaterial *);
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AnimNotify_Footstep
//------------------------------------------------------------------------------

// UAnimNotify_Footstep 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UAnimNotify_Footstep : public UAnimNotify_Impact {
  public:
    virtual ~UAnimNotify_Footstep(void);
    virtual unsigned int GetCPPSize(void);
    virtual class USound * SelectSound(class USound *,class UMeshInstance *,class AActor *);
    UAnimNotify_Footstep(class UAnimNotify_Footstep const &);
    UAnimNotify_Footstep(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UAnimNotify_Footstep & operator=(class UAnimNotify_Footstep const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBAnimationFlags
//------------------------------------------------------------------------------

enum SBAnimWeaponFlags {
  AnimWeapon_None = 0,
  AnimWeapon_Unarmed = 1,
  AnimWeapon_SingleHanded = 2,
  AnimWeapon_DoubleHanded = 3,
  AnimWeapon_DualWielding = 4,
  AnimWeapon_Bow = 5,
  AnimWeapon_Armed = 6,
  AnimWeapon_SingleShield = 7
};

enum SBAnimDirectionFlags {
  AnimDirection_None = 0,
  AnimDirection_Forwards = 1,
  AnimDirection_Backwards = 2,
  AnimDirection_Left = 3,
  AnimDirection_Right = 4,
  AnimDirection_Up = 5,
  AnimDirection_Down = 6
};

enum SBAnimActionFlags {
  AnimAction_None = 0,
  AnimAction_Aimed = 1,
  AnimAction_Allies = 2,
  AnimAction_Area = 3,
  AnimAction_Carriage = 4,
  AnimAction_Carry = 5,
  AnimAction_Cast = 6,
  AnimAction_Casual = 7,
  AnimAction_Chair = 8,
  AnimAction_Combat = 9,
  AnimAction_Contact = 10,
  AnimAction_Crash = 11,
  AnimAction_Crawl = 12,
  AnimAction_DanceOfBlades = 13,
  AnimAction_Dazed = 14,
  AnimAction_Death = 15,
  AnimAction_DefensiveSkill = 16,
  AnimAction_DoubleScratch = 17,
  AnimAction_DrawWeapon = 18,
  AnimAction_Emote = 19,
  AnimAction_End = 20,
  AnimAction_ExtensiveHack = 21,
  AnimAction_Fall = 22,
  AnimAction_FlickFlack = 23,
  AnimAction_Fly = 24,
  AnimAction_FocusSkill = 25,
  AnimAction_Gallop = 26,
  AnimAction_GetUp = 27,
  AnimAction_Glide = 28,
  AnimAction_Ground = 29,
  AnimAction_Hack = 30,
  AnimAction_HighKick = 31,
  AnimAction_Horse = 32,
  AnimAction_Idle = 33,
  AnimAction_ImpaleSelf = 34,
  AnimAction_Jump = 35,
  AnimAction_Kick = 36,
  AnimAction_KickHooves = 37,
  AnimAction_Knockdown = 38,
  AnimAction_Land = 39,
  AnimAction_LowKick = 40,
  AnimAction_Mid = 41,
  AnimAction_OffensiveSkill = 42,
  AnimAction_Parry = 43,
  AnimAction_Pull = 44,
  AnimAction_Ranged = 45,
  AnimAction_ReverseHack = 46,
  AnimAction_Ride = 47,
  AnimAction_Run = 48,
  AnimAction_Scratch = 49,
  AnimAction_SheatheWeapon = 50,
  AnimAction_Shoot = 51,
  AnimAction_Sit = 52,
  AnimAction_Slash = 53,
  AnimAction_Special = 54,
  AnimAction_Start = 55,
  AnimAction_Step = 56,
  AnimAction_Summon = 57,
  AnimAction_Swing = 58,
  AnimAction_Takeoff = 59,
  AnimAction_Thrust = 60,
  AnimAction_ToIdle = 61,
  AnimAction_Touch = 62,
  AnimAction_Turn = 63,
  AnimAction_Vaylarian = 64,
  AnimAction_Vomit = 65,
  AnimAction_Walk = 66,
  AnimAction_Hit = 67,
  AnimAction_Headbutt = 68,
  AnimAction_Throw = 69,
  AnimAction_Tornado = 70,
  AnimAction_Descend = 71,
  AnimAction_Climb = 72,
  AnimAction_Scared = 73,
  AnimAction_Swim = 74,
  AnimAction_Statue = 75,
  AnimAction_Submerge = 76,
  AnimAction_Emerge = 77,
  AnimAction_Dodge = 78
};

// USBAnimationFlags 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT USBAnimationFlags : public UObject {
  public:
    virtual ~USBAnimationFlags(void);
    virtual unsigned int GetCPPSize(void);
    USBAnimationFlags(class USBAnimationFlags const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBAnimationFlags & operator=(class USBAnimationFlags const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    USBAnimationFlags(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBAudioManager
//------------------------------------------------------------------------------

#define UCONST_SBAudioManager_SBMIN_ALLOWED_VOLUME  0.001f
#define UCONST_SBAudioManager_SBFADER_INVALID  -1
enum SBAM_DayNightPeriod {
  SBDNP_Day = 0,
  SBDNP_Dawn = 1,
  SBDNP_Night = 2,
  SBDNP_Dusk = 3
};

enum SBAM_CharacterType {
  SBCT_None = 0,
  SBCT_Player = 1,
  SBCT_Client = 2,
  SBCT_NPC = 3
};

enum SBAM_AudioType {
  SBAM_AmbientStream = 0,
  SBAM_AmbientFX = 1,
  SBAM_MonsterFX = 2,
  SBAM_WildlifeFX = 3,
  SBAM_CharacterFX = 4,
  SBAM_CharacterFootstep = 5,
  SBAM_CharacterVoice = 6,
  SBAM_Music = 7,
  SBAM_Interface = 8,
  SBAM_SpecialMusic = 9
};

// FFaderInfo 1 ( CLASS_Abstract )
struct DLL_IMPORT FFaderInfo {
  public:
    BITFIELD GroupFader : 1;  // 0 0
    INT FaderHandle;  // 4 0
    INT FaderID;  // 8 0
    FLOAT FadeOutTime;  // C 0
    FLOAT FadeInTime;  // 10 0
    FLOAT FadeOutDelay;  // 14 0
    FLOAT FadeInDelay;  // 18 0
    struct FFaderInfo & operator=(struct FFaderInfo const &);
};

// FGroupFadeProperties 1 ( CLASS_Abstract )
struct DLL_IMPORT FGroupFadeProperties {
  public:
    BYTE AudioType;  // 0 0
    FLOAT FadeOutTime;  // 4 0
    FLOAT FadeInTime;  // 8 0
    FLOAT FadeOutDelay;  // C 0
    FLOAT FadeInDelay;  // 10 0
    struct FGroupFadeProperties & operator=(struct FGroupFadeProperties const &);
};

// FMusicTrackInfo 1 ( CLASS_Abstract )
struct DLL_IMPORT FMusicTrackInfo {
  public:
    INT MusicHandle;  // 0 0
    TArray<struct FFaderInfo> ActiveFaders;  // 4 400000 CPF_NeedCtorLink
    FMusicTrackInfo(struct FMusicTrackInfo const &);
    FMusicTrackInfo(void);
    ~FMusicTrackInfo(void);
    struct FMusicTrackInfo & operator=(struct FMusicTrackInfo const &);
};

// FSBExemptFromFade 1 ( CLASS_Abstract )
struct DLL_IMPORT FSBExemptFromFade {
  public:
    FName ActorTagName;  // 0 0
    BITFIELD TimerActive : 1;  // 4 0
    FLOAT RemoveExemptionTimer;  // 8 0
    FSBExemptFromFade(void);
    struct FSBExemptFromFade & operator=(struct FSBExemptFromFade const &);
};

// FSBAudioTypeParams 1 ( CLASS_Abstract )
struct DLL_IMPORT FSBAudioTypeParams {
  public:
    BYTE AudioType;  // 0 0
    INT Priority;  // 4 0
    FLOAT MaximumVolumeFactor;  // 8 0
    FLOAT CurrentVolumeFactor;  // C 0
    BITFIELD Mute : 1;  // 10 0
    struct FSBAudioTypeParams & operator=(struct FSBAudioTypeParams const &);
};

// FSBAudioStream 1 ( CLASS_Abstract )
struct DLL_IMPORT FSBAudioStream {
  public:
    BYTE AudioType;  // 0 0
    BYTE OwnerType;  // 1 0
    FLOAT Volume;  // 4 0
    FLOAT Pitch;  // 8 0
    INT StreamHandle;  // C 0
    INT Priority;  // 10 0
    class USound* SoundObject;  // 14 0
    class AActor* SoundOwner;  // 18 0
    class FVector Location;  // 1C 0
    FLOAT MaxRadius;  // 28 0
    INT SoundFlags;  // 2C 0
    FLOAT CurrentTime;  // 30 0
    FLOAT TotalDuration;  // 34 0
    INT AudioStreamId;  // 38 0
    BITFIELD Initialized : 1;  // 3C 0
    BITFIELD Looped : 1;  // 3C 0
    FSBAudioStream(void);
    struct FSBAudioStream & operator=(struct FSBAudioStream const &);
};

// FSBAudioFader 1 ( CLASS_Abstract )
struct DLL_IMPORT FSBAudioFader {
  public:
    INT Handle;  // 0 0
    FName TrackOwnerTag;  // 4 0
    INT Id;  // 8 0
    FLOAT CurrentFadeTime;  // C 0
    FLOAT TotalFadeTime;  // 10 0
    FLOAT StartFactor;  // 14 0
    FLOAT TargetFactor;  // 18 0
    FLOAT FadeFactor;  // 1C 0
    BITFIELD CullAtTarget : 1;  // 20 0
    FSBAudioFader(void);
    struct FSBAudioFader & operator=(struct FSBAudioFader const &);
};

//  SBAudioManager.OnShutdown 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct USBAudioManager_execOnShutdown_Parms {
};


//  SBAudioManager.ResetExplorationMusicTimer 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct USBAudioManager_execResetExplorationMusicTimer_Parms {
};


//  SBAudioManager.GetExplorationMusicTimerValue 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct USBAudioManager_execGetExplorationMusicTimerValue_Parms {
  FLOAT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  SBAudioManager.SetDefaultExplorationMusicTimeout 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct USBAudioManager_execSetDefaultExplorationMusicTimeout_Parms {
  FLOAT aNewValue;  // 0 80 CPF_Parm
};


//  SBAudioManager.GetDefaultExplorationMusicTimeout 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct USBAudioManager_execGetDefaultExplorationMusicTimeout_Parms {
  FLOAT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  SBAudioManager.StopMusicTrack 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct USBAudioManager_execStopMusicTrack_Parms {
  INT aTrackHandle;  // 0 80 CPF_Parm
  FLOAT aFadeOutTime;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  SBAudioManager.StopMusicFile 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct USBAudioManager_execStopMusicFile_Parms {
  class FString anOggFilename;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  FLOAT aFadeOutTime;  // 8 90 CPF_OptionalParm CPF_Parm
};


//  SBAudioManager.PlayMusic 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct USBAudioManager_execPlayMusic_Parms {
  class FString anOggFilename;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  FLOAT aVolume;  // 8 80 CPF_Parm
  BITFIELD aLooped : 1;  // C 80 CPF_Parm
  FLOAT aFadeInTime;  // 10 90 CPF_OptionalParm CPF_Parm
  BITFIELD aSpecialMusic : 1;  // 14 90 CPF_OptionalParm CPF_Parm
  TArray<struct FGroupFadeProperties> aGroupFaders;  // 18 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
  INT ReturnValue;  // 24 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  SBAudioManager.PlayInterfaceSound 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct USBAudioManager_execPlayInterfaceSound_Parms {
  class USound* s;  // 0 80 CPF_Parm
  FLOAT Volume;  // 4 80 CPF_Parm
  INT ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  SBAudioManager.StopAudioTrack 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct USBAudioManager_execStopAudioTrack_Parms {
  INT aTrackHandle;  // 0 80 CPF_Parm
  class AActor* aOwner;  // 4 90 CPF_OptionalParm CPF_Parm
  FLOAT aFadeOutTime;  // 8 90 CPF_OptionalParm CPF_Parm
};


//  SBAudioManager.StopAudioType 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct USBAudioManager_execStopAudioType_Parms {
  BYTE aAudioType;  // 0 80 CPF_Parm
  FLOAT FadeTime;  // 4 90 CPF_OptionalParm CPF_Parm
};


// USBAudioManager 16 ( CLASS_Compiled CLASS_Config CLASS_Parsed )
class DLL_IMPORT USBAudioManager : public UObject {
  public:
    TArray<struct FSBAudioTypeParams> GroupParameters;  // 28 400000 CPF_NeedCtorLink
    TArray<struct FSBAudioStream> SBStream;  // 34 402000 CPF_Transient CPF_NeedCtorLink
    TArray<struct FSBAudioFader> GroupFaders;  // 40 402000 CPF_Transient CPF_NeedCtorLink
    TArray<struct FSBAudioFader> TrackFaders;  // 4C 402000 CPF_Transient CPF_NeedCtorLink
    TArray<struct FSBExemptFromFade> FadeExemptList;  // 58 402000 CPF_Transient CPF_NeedCtorLink
    TArray<struct FMusicTrackInfo> GlobalMusic;  // 64 402000 CPF_Transient CPF_NeedCtorLink
    FLOAT mCachedRelativeTOD;  // 70 2000 CPF_Transient
    FLOAT mDayAudioAmplitudeFactor;  // 74 2000 CPF_Transient
    FLOAT mNightAudioAmplitudeFactor;  // 78 2000 CPF_Transient
    FLOAT mDawnStart;  // 7C 2000 CPF_Transient
    FLOAT mDuskStart;  // 80 2000 CPF_Transient
    BYTE mCurrentAudioTimePeriod;  // 84 2000 CPF_Transient
    FLOAT DayNightFadeThreshold;  // 88 4000 CPF_Config
    FLOAT DawnDuration;  // 8C 4000 CPF_Config
    FLOAT DuskDuration;  // 90 4000 CPF_Config
    FLOAT ExplorationMusicTimeout;  // 94 4000 CPF_Config
    FLOAT mCurrentExpMusicTimer;  // 98 4000 CPF_Config
    FLOAT SoundNotifierRadiusFactor;  // 9C 4000 CPF_Config
    FLOAT MusicAmbientFadeOutDuration;  // A0 4000 CPF_Config
    FLOAT MusicAmbientFadeInDuration;  // A4 4000 CPF_Config
    FLOAT MusicAmbientFadeInBeforeEnd;  // A8 4000 CPF_Config
    TArray<struct FGroupFadeProperties> DefaultMusicFades;  // AC 400000 CPF_NeedCtorLink
    class UEngine* mOwner;  // B8 2000 CPF_Transient
    class UAudioSubsystem* mAudio;  // BC 2000 CPF_Transient
    virtual ~USBAudioManager(void);
    virtual unsigned int GetCPPSize(void);
    USBAudioManager(class USBAudioManager const &);
    USBAudioManager(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBAudioManager & operator=(class USBAudioManager const &);
    void AddFadeExemptActor(class FName,float);
    float DetermineBaseVolume(class AActor *,enum SBAM_AudioType,float);
    float DetermineDawnTime(void);
    float DetermineDuskTime(void);
    int DeterminePriority(enum SBAM_AudioType,float);
    float DetermineRelativeTOD(void);
    float DetermineTypeVolume(enum SBAM_AudioType,float);
    void DrawStreamInfo(class UViewport *);
    void FadeActiveTracksByType(int,float,float,float,bool);
    int FadeGroup(enum SBAM_AudioType,float,float,float,bool);
    int FadeTrack(class FName,int,float,float,float,bool);
    void Flush(void);
    void FormatOggFilename(class FString const &,class FString &);
    int GetAudioID(int);
    enum SBAM_DayNightPeriod GetAudioTODValue(void);
    enum SBAM_CharacterType GetCharacterType(class AActor *);
    float GetCharacterVolume(enum SBAM_AudioType,enum SBAM_CharacterType);
    float GetDayAudioFactor(void);
    float GetDefaultExplorationMusicTimeout(void);
    int GetDefaultPriority(enum SBAM_AudioType);
    float GetDefaultVolume(enum SBAM_AudioType);
    class UEngine * GetEngine(void);
    float GetExplorationMusicTimerValue(void);
    float GetGroupVolumeFactor(enum SBAM_AudioType);
    float GetNightAudioFactor(void);
    float GetRelativeTOD(void);
    float GetTrackVolumeFactor(int,class AActor const *);
    struct FSBAudioTypeParams * GetTypeParameters(enum SBAM_AudioType);
    class USound * GetValidatedSound(class USound *);
    void Init(class UEngine *);
    static void CDECL InternalConstructor(void *);
    bool IsActorExemptFromFade(class FName);
    bool IsAudioTypeAllowed(enum SBAM_AudioType);
    bool MusicIsPlaying(class FString &);
    void OnShutdown(void);
    int PlayAudio(class AActor *,class USound *,enum SBAM_AudioType,class FVector const &,float,float,float,int,float);
    int PlayInterfaceSound(class USound *,float);
    int PlayLevelMusic(class FString &,float,float,bool,bool,class TArray<struct FGroupFadeProperties> *);
    int PlayMusic(class FString &,float,bool,float,bool);
    void RemoveFadeExemptActor(class FName,float);
    void ResetExplorationMusicTimer(void);
    void SetDefaultExplorationMusicTimeout(float);
    void SetEngine(class UEngine *);
    void SetSoundLocation(int,class AActor const *,class FVector &);
    void SetVolume(int,class AActor const *,float);
    static class UClass * CDECL StaticClass(void);
    void StopAudio(int,class AActor *,float,int);
    void StopAudioType(enum SBAM_AudioType,float);
    void StopLevelMusic(class FString &,float,bool);
    void StopMusic(class FString &,float);
    void StopMusic(int,float);
    bool TrackIsPlaying(int,class AActor const *);
    bool UnfadeActorAudio(int,float);
    bool UnfadeGroup(int,float);
    bool UnfadeTrack(int,float);
    void Update(double);
    void UpdateAudioTimeOfDay(void);
    void UpdateTimers(float);
    void execGetDefaultExplorationMusicTimeout(struct FFrame &,void * const);
    void execGetExplorationMusicTimerValue(struct FFrame &,void * const);
    void execOnShutdown(struct FFrame &,void * const);
    void execPlayInterfaceSound(struct FFrame &,void * const);
    void execPlayMusic(struct FFrame &,void * const);
    void execResetExplorationMusicTimer(struct FFrame &,void * const);
    void execSetDefaultExplorationMusicTimeout(struct FFrame &,void * const);
    void execStopAudioTrack(struct FFrame &,void * const);
    void execStopAudioType(struct FFrame &,void * const);
    void execStopMusicFile(struct FFrame &,void * const);
    void execStopMusicTrack(struct FFrame &,void * const);
  protected:
    void AddFader(struct FSBAudioFader &,class TArray<struct FSBAudioFader> &);
    int AddMusicEntry(int);
    void AddStreamEntry(struct FSBAudioStream &);
    bool AdjustFader(struct FSBAudioFader &,float,float,float,bool);
    bool CreateFader(struct FSBAudioFader &,int,class FName,float,float,float,bool);
    class FSoundSource * FindMatchingSource(struct FSBAudioStream &);
    int GetActorAudioStream(class FName);
    int GetExemptActorIndex(class FName);
    struct FSBAudioFader * GetFaderById(class TArray<struct FSBAudioFader> &,int);
    int GetFaderIndexById(class TArray<struct FSBAudioFader> &,int);
    float GetGroupFadeFactor(int);
    struct FSBAudioFader * GetGroupFader(int);
    int GetGroupFaderIndex(int);
    int GetMusic(class FString &);
    int GetMusicEntry(int);
    int GetMusicFaderIndex(int,bool,int);
    int GetStream(int,class AActor const *,int);
    float GetTrackFadeFactor(class AActor const *,int);
    struct FSBAudioFader * GetTrackFader(int);
    int GetTrackFaderIndex(int);
    int GetTrackFadersByHandle(int,class TArray<struct FSBAudioFader *> &);
    class AActor * GetTrackOwner(int,class FName);
    void InitExemptionTimer(struct FSBExemptFromFade &,float);
    bool IsInHearingRange(float,class FVector const &);
    void MusicFadeGroup(int,struct FGroupFadeProperties &);
    void MusicFadeTracksByType(int,struct FGroupFadeProperties &);
    int NewFaderId(class TArray<struct FSBAudioFader> &);
    int NewGroupFaderId(void);
    int NewTrackFaderId(void);
    void RemoveFadersForMusic(int);
    void RemoveGroupFader(int,bool);
    void RemoveMusicEntry(int);
    void RemoveStream(int,class AActor const *,int);
    void RemoveTrackFader(int,bool);
    bool StreamShouldBePlaying(struct FSBAudioStream &,class FSoundSource *,float);
    float StreamVolume(struct FSBAudioStream &);
    bool Unfade(struct FSBAudioFader *,float);
    void UnfadeMusicTrack(int);
    void UpdateExemptions(float);
    bool UpdateFader(struct FSBAudioFader &,float);
    void UpdateFaders(float);
    void UpdateGroupFaders(float);
    void UpdateGroups(float);
    void UpdateMusicInfo(float);
    void UpdateStreams(float);
    void UpdateTrackFaders(float);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(USBAudioManager,0,execGetDefaultExplorationMusicTimeout)
AUTOGENERATE_FUNCTION(USBAudioManager,0,execGetExplorationMusicTimerValue)
AUTOGENERATE_FUNCTION(USBAudioManager,0,execOnShutdown)
AUTOGENERATE_FUNCTION(USBAudioManager,0,execPlayInterfaceSound)
AUTOGENERATE_FUNCTION(USBAudioManager,0,execPlayMusic)
AUTOGENERATE_FUNCTION(USBAudioManager,0,execResetExplorationMusicTimer)
AUTOGENERATE_FUNCTION(USBAudioManager,0,execSetDefaultExplorationMusicTimeout)
AUTOGENERATE_FUNCTION(USBAudioManager,0,execStopAudioTrack)
AUTOGENERATE_FUNCTION(USBAudioManager,0,execStopAudioType)
AUTOGENERATE_FUNCTION(USBAudioManager,0,execStopMusicFile)
AUTOGENERATE_FUNCTION(USBAudioManager,0,execStopMusicTrack)


//------------------------------------------------------------------------------
//  SBSettings
//------------------------------------------------------------------------------

//  SBSettings.NotifySettingsChanged 20400 0 ( FUNC_Native FUNC_Public )
struct USBSettings_execNotifySettingsChanged_Parms {
};


// USBSettings 16 ( CLASS_Compiled CLASS_Config CLASS_Parsed )
class DLL_IMPORT USBSettings : public UObject {
  public:
    BITFIELD ShowPawnShadowsOnEnvironment : 1;  // 28 2044000 CPF_Config CPF_GlobalConfig CPF_EditorData
    BITFIELD UsePostProcessing : 1;  // 28 2044000 CPF_Config CPF_GlobalConfig CPF_EditorData
    BITFIELD UseBloomEffect : 1;  // 28 2044000 CPF_Config CPF_GlobalConfig CPF_EditorData
    FLOAT BloomStrength;  // 2C 2044000 CPF_Config CPF_GlobalConfig CPF_EditorData
    BITFIELD ShowSpecularOnCharacters : 1;  // 30 2044000 CPF_Config CPF_GlobalConfig CPF_EditorData
    BITFIELD BakeCharacters : 1;  // 30 2044000 CPF_Config CPF_GlobalConfig CPF_EditorData
    BITFIELD BakeCharacterTextures : 1;  // 30 2044000 CPF_Config CPF_GlobalConfig CPF_EditorData
    FLOAT TerrainDecorationDetail;  // 34 2044000 CPF_Config CPF_GlobalConfig CPF_EditorData
    BITFIELD UseBoneLODding : 1;  // 38 2044000 CPF_Config CPF_GlobalConfig CPF_EditorData
    virtual ~USBSettings(void);
    virtual void PostLoad(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    USBSettings(class USBSettings const &);
    USBSettings(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBSettings & operator=(class USBSettings const &);
    static void CDECL InternalConstructor(void *);
    void NotifySettingsChanged(void);
    static class UClass * CDECL StaticClass(void);
    void execNotifySettingsChanged(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(USBSettings,0,execNotifySettingsChanged)


//------------------------------------------------------------------------------
//  Mover
//------------------------------------------------------------------------------

#define UCONST_Mover_MOVER_PERSISTENT_SOUND_MASK 240
#define UCONST_Mover_MOVER_TRIGGERED_SOUND_MASK 15
#define UCONST_Mover_MOVER_SOUND_LOOPING 32
#define UCONST_Mover_MOVER_SOUND_AMBIENT 16
#define UCONST_Mover_MOVER_SOUND_CLOSED 8
#define UCONST_Mover_MOVER_SOUND_CLOSING 4
#define UCONST_Mover_MOVER_SOUND_OPENED 2
#define UCONST_Mover_MOVER_SOUND_OPENING 1
#define UCONST_Mover_MOVER_MAXIMUM_MOVE_TIME_INV  0.001
#define UCONST_Mover_MOVER_MAXIMUM_MOVE_TIME  10000
enum EBumpType {
  BT_PlayerBump = 0,
  BT_PawnBump = 1,
  BT_AnyBump = 2
};

enum EMoverGlideType {
  MV_MoveByTime = 0,
  MV_GlideByTime = 1
};

enum EMoverEncroachType {
  ME_StopWhenEncroach = 0,
  ME_ReturnWhenEncroach = 1,
  ME_CrushWhenEncroach = 2,
  ME_IgnoreWhenEncroach = 3
};

//  Mover.UpdatePrecacheStaticMeshes 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execUpdatePrecacheStaticMeshes_Parms {
};


//  Mover.BaseFinished 20000 0 ( FUNC_Public )
struct AMover_execBaseFinished_Parms {
};


//  Mover.BaseStarted 20000 0 ( FUNC_Public )
struct AMover_execBaseStarted_Parms {
};


//  Mover.MoverLooped 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execMoverLooped_Parms {
};


//  Mover.SetStoppedPosition 20000 0 ( FUNC_Public )
struct AMover_execSetStoppedPosition_Parms {
  BYTE NewPos;  // 0 80 CPF_Parm
};


//  Mover.EnableTrigger 20000 0 ( FUNC_Public )
struct AMover_execEnableTrigger_Parms {
};


//  Mover.DisableTrigger 20000 0 ( FUNC_Public )
struct AMover_execDisableTrigger_Parms {
};


//  Mover.TakeDamage 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execTakeDamage_Parms {
  INT Damage;  // 0 80 CPF_Parm
  class APawn* instigatedBy;  // 4 80 CPF_Parm
  class FVector HitLocation;  // 8 80 CPF_Parm
  class FVector Momentum;  // 14 80 CPF_Parm
  class UClass* DamageType;  // 20 80 CPF_Parm
};


//  Mover.Bump 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execBump_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Mover.EncroachingOn 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execEncroachingOn_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Mover.MakeGroupReturn 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execMakeGroupReturn_Parms {
};


//  Mover.MakeGroupStop 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execMakeGroupStop_Parms {
};


//  Mover.Reset 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execReset_Parms {
};


//  Mover.SetResetStatus 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execSetResetStatus_Parms {
  BITFIELD bNewStatus : 1;  // 0 80 CPF_Parm
};


//  Mover.PostBeginPlay 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execPostBeginPlay_Parms {
};


//  Mover.BeginPlay 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execBeginPlay_Parms {
};


//  Mover.DoClose 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execDoClose_Parms {
};


//  Mover.DoOpen 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execDoOpen_Parms {
};


//  Mover.FinishedOpening 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execFinishedOpening_Parms {
};


//  Mover.FinishedClosing 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execFinishedClosing_Parms {
};


//  Mover.FinishNotify 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execFinishNotify_Parms {
};


//  Mover.KeyFrameReached 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct AMover_eventKeyFrameReached_Parms {
};


//  Mover.SetKeyframe 20003 0 ( FUNC_Final FUNC_Defined FUNC_Public )
struct AMover_execSetKeyframe_Parms {
  BYTE NewKeyNum;  // 0 80 CPF_Parm
  class FVector NewLocation;  // 4 80 CPF_Parm
  class FRotator NewRotation;  // 10 80 CPF_Parm
};


//  Mover.InterpolateTo 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execInterpolateTo_Parms {
  BYTE NewKeyNum;  // 0 80 CPF_Parm
  FLOAT Seconds;  // 4 80 CPF_Parm
};


//  Mover.StartInterpolation 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execStartInterpolation_Parms {
};


//  Mover.SpecialHandling 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execSpecialHandling_Parms {
  class APawn* Other;  // 0 80 CPF_Parm
  class AActor* ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Mover.SelfTriggered 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execSelfTriggered_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Mover.SBGotoState 20002 0 ( FUNC_Defined FUNC_Public )
struct AMover_execSBGotoState_Parms {
  FName aNewState;  // 0 90 CPF_OptionalParm CPF_Parm
  FName aLabel;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  Mover.StopSound 20400 0 ( FUNC_Native FUNC_Public )
struct AMover_execStopSound_Parms {
  BYTE aSoundType;  // 0 80 CPF_Parm
};


//  Mover.StartSound 20400 0 ( FUNC_Native FUNC_Public )
struct AMover_execStartSound_Parms {
  BYTE aSoundType;  // 0 80 CPF_Parm
};


// AMover 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT AMover : public AActor {
  public:
    BYTE MoverEncroachType;  // 420 1 CPF_Edit
    BYTE MoverGlideType;  // 421 1 CPF_Edit
    BYTE BumpType;  // 422 1 CPF_Edit
    BYTE KeyNum;  // 423 2000001 CPF_Edit CPF_EditorData
    BYTE PrevKeyNum;  // 424 2000000 CPF_EditorData
    BYTE NumKeys;  // 425 2000003 CPF_Edit CPF_Const CPF_EditorData
    BYTE WorldRaytraceKey;  // 426 2000003 CPF_Edit CPF_Const CPF_EditorData
    BYTE BrushRaytraceKey;  // 427 2000003 CPF_Edit CPF_Const CPF_EditorData
    BYTE StartKeyNum;  // 428 0
    FLOAT MoveTime;  // 42C 2000001 CPF_Edit CPF_EditorData
    FLOAT StayOpenTime;  // 430 2000001 CPF_Edit CPF_EditorData
    FLOAT OtherTime;  // 434 2000001 CPF_Edit CPF_EditorData
    INT EncroachDamage;  // 438 2000001 CPF_Edit CPF_EditorData
    BITFIELD bToggleDirection : 1;  // 43C 1 CPF_Edit
    BITFIELD bTriggerOnceOnly : 1;  // 43C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bSlave : 1;  // 43C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bUseTriggered : 1;  // 43C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bDamageTriggered : 1;  // 43C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bDynamicLightMover : 1;  // 43C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bUseShortestRotation : 1;  // 43C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bIsLeader : 1;  // 43C 1 CPF_Edit
    FName PlayerBumpEvent;  // 440 2000001 CPF_Edit CPF_EditorData
    FName BumpEvent;  // 444 2000001 CPF_Edit CPF_EditorData
    class AActor* SavedTrigger;  // 448 2000000 CPF_EditorData
    FLOAT DamageThreshold;  // 44C 2000001 CPF_Edit CPF_EditorData
    INT numTriggerEvents;  // 450 2000000 CPF_EditorData
    class AMover* Leader;  // 454 2000000 CPF_EditorData
    class AMover* Follower;  // 458 0
    FName ReturnGroup;  // 45C 2000001 CPF_Edit CPF_EditorData
    FLOAT DelayTime;  // 460 2000001 CPF_Edit CPF_EditorData
    class USound* OpeningSound;  // 464 2000001 CPF_Edit CPF_EditorData
    class USound* OpenedSound;  // 468 2000001 CPF_Edit CPF_EditorData
    class USound* ClosingSound;  // 46C 2000001 CPF_Edit CPF_EditorData
    class USound* ClosedSound;  // 470 2000001 CPF_Edit CPF_EditorData
    class USound* MoveAmbientSound;  // 474 2000001 CPF_Edit CPF_EditorData
    class USound* LoopSound;  // 478 2000001 CPF_Edit CPF_EditorData
    FName OpeningEvent;  // 47C 2000001 CPF_Edit CPF_EditorData
    FName OpenedEvent;  // 480 2000001 CPF_Edit CPF_EditorData
    FName ClosingEvent;  // 484 2000001 CPF_Edit CPF_EditorData
    FName ClosedEvent;  // 488 2000001 CPF_Edit CPF_EditorData
    FName LoopEvent;  // 48C 2000001 CPF_Edit CPF_EditorData
    class FVector KeyPos[24];  // 490 0
    class FRotator KeyRot[24];  // 5B0 0
    class FVector BasePos;  // 6D0 0
    class FVector OldPos;  // 6DC 0
    class FVector OldPrePivot;  // 6E8 0
    class FVector SavedPos;  // 6F4 0
    class FRotator BaseRot;  // 700 0
    class FRotator OldRot;  // 70C 0
    class FRotator SavedRot;  // 718 0
    FLOAT PhysAlpha;  // 724 2000000 CPF_EditorData
    FLOAT PhysRate;  // 728 2000000 CPF_EditorData
    class ANavigationPoint* myMarker;  // 72C 0
    BITFIELD bOpening : 1;  // 730 0
    BITFIELD bDelaying : 1;  // 730 0
    BITFIELD bClientPause : 1;  // 730 0
    BITFIELD bClosed : 1;  // 730 2000000 CPF_EditorData
    BITFIELD bPlayerOnly : 1;  // 730 0
    BITFIELD bAutoDoor : 1;  // 730 2000001 CPF_Edit CPF_EditorData
    BITFIELD bNoAIRelevance : 1;  // 730 2000001 CPF_Edit CPF_EditorData
    BITFIELD bJumpLift : 1;  // 730 0
    BITFIELD bOscillatingLoop : 1;  // 730 2000001 CPF_Edit CPF_EditorData
    INT StepDirection;  // 734 2000000 CPF_EditorData
    TArray<class AAntiPortalActor*> AntiPortals;  // 738 400000 CPF_NeedCtorLink
    FName AntiPortalTag;  // 744 1 CPF_Edit
    BITFIELD bResetting : 1;  // 748 0
    BITFIELD BACKUP_bHidden : 1;  // 748 0
    FName Backup_InitialState;  // 74C 0
    BYTE mActiveSounds;  // 750 2000 CPF_Transient
    INT mAmbientSoundHandle;  // 754 2000 CPF_Transient
    INT mLoopingSoundHandle;  // 758 2000 CPF_Transient
    virtual ~AMover(void);
    virtual void PostLoad(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual void PostEditMove(void);
    virtual void PreRaytrace(void);
    virtual void PostRaytrace(void);
    virtual void Spawned(void);
    virtual int ShouldTrace(class AActor *,unsigned long);
    virtual void performPhysics(float);
    virtual int AddMyMarker(class AActor *);
    virtual void ClearMarker(void);
    virtual int IsAMover(void);
    virtual class AMover * GetAMover(void);
    virtual void SetWorldRaytraceKey(void);
    virtual void SetBrushRaytraceKey(void);
    virtual void StartSound(unsigned char);
    virtual void StopSound(unsigned char);
    AMover(class AMover const &);
    AMover(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AMover & operator=(class AMover const &);
    class USound * GetSoundForType(unsigned char);
    static void CDECL InternalConstructor(void *);
    bool IsPersistentSound(unsigned char);
    bool IsTriggeredSound(unsigned char);
    static class UClass * CDECL StaticClass(void);
    void eventKeyFrameReached(void);
    void execStartSound(struct FFrame &,void * const);
    void execStopSound(struct FFrame &,void * const);
    void physMovingBrush(float);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(AMover,0,execStartSound)
AUTOGENERATE_FUNCTION(AMover,0,execStopSound)


//------------------------------------------------------------------------------
//  SBMover
//------------------------------------------------------------------------------

enum SBMoverLabel {
  SBML_None = 0,
  SBML_Open = 1,
  SBML_Close = 2,
  SBML_Running = 3,
  SBML_Stopping = 4,
  SBML_Begin = 5
};

enum SBMoverState {
  SBMS_None = 0,
  SBMS_OpenTimedMover = 1,
  SBMS_WasOpenTimedMover = 2,
  SBMS_StandOpenTimed = 3,
  SBMS_BumpOpenTimed = 4,
  SBMS_TriggerOpenTimed = 5,
  SBMS_LoopMove = 6,
  SBMS_TriggerToggle = 7,
  SBMS_TriggerControl = 8,
  SBMS_WasTriggerControl = 9,
  SBMS_TriggerPound = 10,
  SBMS_WasTriggerPound = 11,
  SBMS_TriggerAdvance = 12,
  SBMS_WasTriggerAdvance = 13,
  SBMS_BumpButton = 14,
  SBMS_WasBumpButton = 15,
  SBMS_ConstantLoop = 16,
  SBMS_LeadInOutLooper = 17,
  SBMS_LeadInOutLooping = 18,
  SBMS_RotatingMover = 19
};

//  SBMover.SetStoppedPosition 20002 0 ( FUNC_Defined FUNC_Public )
struct ASBMover_execSetStoppedPosition_Parms {
  BYTE NewPos;  // 0 80 CPF_Parm
};


//  SBMover.InterpolateTo 20002 0 ( FUNC_Defined FUNC_Public )
struct ASBMover_execInterpolateTo_Parms {
  BYTE NewKeyNum;  // 0 80 CPF_Parm
  FLOAT Seconds;  // 4 80 CPF_Parm
};


//  SBMover.UpdateState 20002 0 ( FUNC_Defined FUNC_Public )
struct ASBMover_execUpdateState_Parms {
};


//  SBMover.SBGotoState 20002 0 ( FUNC_Defined FUNC_Public )
struct ASBMover_execSBGotoState_Parms {
  FName aNewState;  // 0 90 CPF_OptionalParm CPF_Parm
  FName aLabel;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  SBMover.ResolveState 20002 0 ( FUNC_Defined FUNC_Public )
struct ASBMover_execResolveState_Parms {
  FName aNewState;  // 0 90 CPF_OptionalParm CPF_Parm
  FName aLabel;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  SBMover.ResolveStateChange 20002 0 ( FUNC_Defined FUNC_Public )
struct ASBMover_execResolveStateChange_Parms {
  BYTE aStateName;  // 0 80 CPF_Parm
  BYTE aStateLabel;  // 1 80 CPF_Parm
};


//  SBMover.cl_OnBaseline 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ASBMover_eventcl_OnBaseline_Parms {
};


//  SBMover.TriggerSound 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct ASBMover_execTriggerSound_Parms {
  BYTE aSoundType;  // 0 80 CPF_Parm
};


//  SBMover.UpdateInterpolation 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct ASBMover_execUpdateInterpolation_Parms {
};


// ASBMover 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT ASBMover : public AMover {
  public:
    class FVector mNetOldPos;  // 75C 2000 CPF_Transient
    INT mNetOldRotPitch;  // 768 2000 CPF_Transient
    INT mNetOldRotYaw;  // 76C 2000 CPF_Transient
    INT mNetOldRotRoll;  // 770 2000 CPF_Transient
    class FVector mNetInterpolate;  // 774 2000 CPF_Transient
    class FVector mOldNetInterpolate;  // 780 2000 CPF_Transient
    BYTE ClientStop;  // 78C 2000 CPF_Transient
    BYTE StoppedPosition;  // 78D 2000 CPF_Transient
    BYTE mNetActiveSound;  // 78E 2000 CPF_Transient
    BYTE mNetState;  // 78F 2000 CPF_Transient
    BYTE mNetStateLabel;  // 790 2000 CPF_Transient
    virtual ~ASBMover(void);
    virtual unsigned int GetCPPSize(void);
    ASBMover(class ASBMover const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ASBMover & operator=(class ASBMover const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void execTriggerSound(struct FFrame &,void * const);
    void execUpdateInterpolation(struct FFrame &,void * const);
  protected:
    ASBMover(void);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(ASBMover,0,execTriggerSound)
AUTOGENERATE_FUNCTION(ASBMover,0,execUpdateInterpolation)


//------------------------------------------------------------------------------
//  ActorGroup
//------------------------------------------------------------------------------

// UActorGroup 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UActorGroup : public UObject {
  public:
    class FString Description;  // 28 400000 CPF_NeedCtorLink
    BITFIELD Hidden : 1;  // 30 0
    BITFIELD SelectionLocked : 1;  // 30 0
    virtual ~UActorGroup(void);
    virtual unsigned int GetCPPSize(void);
    UActorGroup(class UActorGroup const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UActorGroup & operator=(class UActorGroup const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    UActorGroup(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  UCCCheckCommandlet
//------------------------------------------------------------------------------

// UUCCCheckCommandlet 3A ( CLASS_Compiled CLASS_Transient CLASS_Parsed CLASS_Localized )
class DLL_IMPORT UUCCCheckCommandlet : public UCommandlet {
};


//------------------------------------------------------------------------------
//  StreamBase
//------------------------------------------------------------------------------

enum EStreamPlaylistType {
  SPT_None = 0,
  SPT_M3U = 1,
  SPT_PLS = 2,
  SPT_B4S = 3
};

enum EFileType {
  FILE_None = 0,
  FILE_Directory = 1,
  FILE_Log = 2,
  FILE_Ini = 3,
  FILE_Stream = 4,
  FILE_Playlist = 5,
  FILE_Music = 6,
  FILE_Map = 7,
  FILE_Texture = 8,
  FILE_Animation = 9,
  FILE_Static = 10,
  FILE_XML = 11,
  FILE_HTML = 12,
  FILE_Sound = 13,
  FILE_Demo = 14,
  FILE_DivX = 15,
  FILE_Content = 16
};

// FID3Field 0 ( )
struct DLL_IMPORT FID3Field {
  public:
    DWORD Reference;  // 0 2000 CPF_Transient
    class FString FieldName;  // 4 400000 CPF_NeedCtorLink
    class FString FieldValue;  // C 400000 CPF_NeedCtorLink
    BYTE FieldID;  // 14 0
    BYTE Code[4];  // 15 0
    FID3Field(struct FID3Field const &);
    FID3Field(unsigned long,unsigned char);
    FID3Field(struct FID3V2Frame const *);
    ~FID3Field(void);
    struct FID3Field & operator=(struct FID3Field const &);
};

// FFilePath 0 ( )
struct DLL_IMPORT FFilePath {
  public:
    class FString FullPath;  // 0 400000 CPF_NeedCtorLink
    class FString Directory;  // 8 400000 CPF_NeedCtorLink
    class FString fileName;  // 10 400000 CPF_NeedCtorLink
    class FString Extension;  // 18 400000 CPF_NeedCtorLink
    TArray<class FString> DirectoryParts;  // 20 400000 CPF_NeedCtorLink
    FFilePath(class TArray<class FString> &,unsigned short const *,unsigned short const *,unsigned short const *);
    FFilePath(struct FFilePath const &);
    FFilePath(unsigned short const *,unsigned short const *,unsigned short const *);
    FFilePath(unsigned short const *);
    FFilePath(void);
    ~FFilePath(void);
    struct FFilePath const & operator=(struct FFilePath const &);
};

//  StreamBase.HandleDebugExec 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamBase_execHandleDebugExec_Parms {
  class FString Command;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString Param;  // 8 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamBase.CompareNames 22002 0 ( FUNC_Defined FUNC_Static FUNC_Public )
struct UStreamBase_execCompareNames_Parms {
  class FString NameA;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString NameB;  // 8 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamBase.ConvertToFileType 22803 0 ( FUNC_Final FUNC_Defined FUNC_Event FUNC_Static FUNC_Public )
struct UStreamBase_eventConvertToFileType_Parms {
  class FString Extension;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BYTE ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamBase.ConvertToFileExtension 22803 0 ( FUNC_Final FUNC_Defined FUNC_Event FUNC_Static FUNC_Public )
struct UStreamBase_eventConvertToFileExtension_Parms {
  BYTE Type;  // 0 80 CPF_Parm
  class FString ReturnValue;  // 4 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  StreamBase.FormatTimeDisplay 22003 0 ( FUNC_Final FUNC_Defined FUNC_Static FUNC_Public )
struct UStreamBase_execFormatTimeDisplay_Parms {
  FLOAT Seconds;  // 0 880 CPF_Parm CPF_CoerceParm
  class FString ReturnValue;  // 4 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  StreamBase.RevInStr 22003 0 ( FUNC_Final FUNC_Defined FUNC_Static FUNC_Public )
struct UStreamBase_execRevInStr_Parms {
  class FString src;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString match;  // 8 400080 CPF_Parm CPF_NeedCtorLink
  INT ReturnValue;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamBase.ParseDirectories 22803 0 ( FUNC_Final FUNC_Defined FUNC_Event FUNC_Static FUNC_Public )
struct UStreamBase_eventParseDirectories_Parms {
  class FString InPath;  // 0 400180 CPF_Parm CPF_OutParm CPF_NeedCtorLink
  TArray<class FString> ReturnValue;  // 8 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  StreamBase.ParseExtension 22803 0 ( FUNC_Final FUNC_Defined FUNC_Event FUNC_Static FUNC_Public )
struct UStreamBase_eventParseExtension_Parms {
  class FString FileNameWithExtension;  // 0 400180 CPF_Parm CPF_OutParm CPF_NeedCtorLink
  class FString ReturnValue;  // 8 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  StreamBase.ParsePath 22803 0 ( FUNC_Final FUNC_Defined FUNC_Event FUNC_Static FUNC_Public )
struct UStreamBase_eventParsePath_Parms {
  class FString InPath;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  struct FFilePath ParsedPath;  // 8 400180 CPF_Parm CPF_OutParm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 34 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamBase.HasExtension 22803 0 ( FUNC_Final FUNC_Defined FUNC_Event FUNC_Static FUNC_Public )
struct UStreamBase_eventHasExtension_Parms {
  class FString Test;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamBase.GetPathRoot 22803 0 ( FUNC_Final FUNC_Defined FUNC_Event FUNC_Static FUNC_Public )
struct UStreamBase_eventGetPathRoot_Parms {
  class FString InPath;  // 0 400180 CPF_Parm CPF_OutParm CPF_NeedCtorLink
  class FString ReturnValue;  // 8 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  StreamBase.IsCaseSensitive 22401 0 ( FUNC_Final FUNC_Native FUNC_Static FUNC_Public )
struct UStreamBase_execIsCaseSensitive_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamBase.GetPathSeparator 22401 0 ( FUNC_Final FUNC_Native FUNC_Static FUNC_Public )
struct UStreamBase_execGetPathSeparator_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  StreamBase.MultiplyEqual_StrStr 23401 0 ( FUNC_Final FUNC_Native FUNC_Operator FUNC_Static FUNC_Public )
struct UStreamBase_execMultiplyEqual_StrStr_Parms {
  class FString A;  // 0 400180 CPF_Parm CPF_OutParm CPF_NeedCtorLink
  class FString B;  // 8 400880 CPF_Parm CPF_CoerceParm CPF_NeedCtorLink
  class FString ReturnValue;  // 10 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  StreamBase.Multiply_StrStr 23401 0 ( FUNC_Final FUNC_Native FUNC_Operator FUNC_Static FUNC_Public )
struct UStreamBase_execMultiply_StrStr_Parms {
  class FString A;  // 0 400880 CPF_Parm CPF_CoerceParm CPF_NeedCtorLink
  class FString B;  // 8 400880 CPF_Parm CPF_CoerceParm CPF_NeedCtorLink
  class FString ReturnValue;  // 10 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


// UStreamBase 13 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UStreamBase : public UObject {
  public:
    virtual ~UStreamBase(void);
    virtual unsigned int GetCPPSize(void);
    UStreamBase(class UStreamBase const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UStreamBase & operator=(class UStreamBase const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    class FString eventConvertToFileExtension(unsigned char);
    unsigned char eventConvertToFileType(class FString const &);
    class FString eventGetPathRoot(class FString &);
    unsigned long eventHasExtension(class FString const &);
    class TArray<class FString> eventParseDirectories(class FString &);
    class FString eventParseExtension(class FString &);
    unsigned long eventParsePath(class FString const &,struct FFilePath &);
    void execGetPathSeparator(struct FFrame &,void * const);
    void execIsCaseSensitive(struct FFrame &,void * const);
    void execMultiplyEqual_StrStr(struct FFrame &,void * const);
    void execMultiply_StrStr(struct FFrame &,void * const);
  protected:
    UStreamBase(void);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(UStreamBase,0,execGetPathSeparator)
AUTOGENERATE_FUNCTION(UStreamBase,0,execIsCaseSensitive)
AUTOGENERATE_FUNCTION(UStreamBase,0,execMultiplyEqual_StrStr)
AUTOGENERATE_FUNCTION(UStreamBase,0,execMultiply_StrStr)


//------------------------------------------------------------------------------
//  StreamTag
//------------------------------------------------------------------------------

//  StreamTag.DumpTag 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UStreamTag_execDumpTag_Parms {
};


//  StreamTag.DumpScriptTag 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamTag_execDumpScriptTag_Parms {
};


//  StreamTag.OnRefresh 120000 0 ( FUNC_Public FUNC_Delegate )
struct UStreamTag_execOnRefresh_Parms {
};


// UStreamTag 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UStreamTag : public UStreamBase {
  public:
    struct FID3Field TagID;  // 28 420003 CPF_Edit CPF_Const CPF_EditConst CPF_NeedCtorLink
    struct FID3Field TrackNumber;  // 44 420003 CPF_Edit CPF_Const CPF_EditConst CPF_NeedCtorLink
    struct FID3Field Title;  // 60 420003 CPF_Edit CPF_Const CPF_EditConst CPF_NeedCtorLink
    struct FID3Field Artist;  // 7C 420003 CPF_Edit CPF_Const CPF_EditConst CPF_NeedCtorLink
    struct FID3Field Album;  // 98 420003 CPF_Edit CPF_Const CPF_EditConst CPF_NeedCtorLink
    struct FID3Field Year;  // B4 420003 CPF_Edit CPF_Const CPF_EditConst CPF_NeedCtorLink
    struct FID3Field Genre;  // D0 420003 CPF_Edit CPF_Const CPF_EditConst CPF_NeedCtorLink
    struct FID3Field Duration;  // EC 2420001 CPF_Edit CPF_EditConst CPF_NeedCtorLink CPF_EditorData
    TArray<struct FID3Field> Fields;  // 108 420043 CPF_Edit CPF_Const CPF_ConstRef CPF_EditConst CPF_NeedCtorLink
    DWORD NativeID3Tag[2];  // 114 2000 CPF_Transient
    struct FScriptDelegate __OnRefresh__Delegate;  // 11C 400000 CPF_NeedCtorLink
    virtual ~UStreamTag(void);
    virtual unsigned int GetCPPSize(void);
    UStreamTag(class UStreamTag const &);
    UStreamTag(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UStreamTag & operator=(class UStreamTag const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void delegateOnRefresh(void);
    void execDumpTag(struct FFrame &,void * const);
  protected:
    int HasV1Tag(class FArchive *)const ;
    int HasV2Tag(class FArchive *)const ;
    int LinkTag(void);
    void RefreshShortcuts(void);
    int SaveTag(void);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(UStreamTag,0,execDumpTag)


//------------------------------------------------------------------------------
//  Stream
//------------------------------------------------------------------------------

//  Stream.DumpTags 20002 0 ( FUNC_Defined FUNC_Public )
struct UStream_execDumpTags_Parms {
};


//  Stream.DumpScriptTag 20002 0 ( FUNC_Defined FUNC_Public )
struct UStream_execDumpScriptTag_Parms {
};


//  Stream.SetHandle 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UStream_eventSetHandle_Parms {
  INT NewHandle;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Stream.GetSongTitle 20002 0 ( FUNC_Defined FUNC_Public )
struct UStream_execGetSongTitle_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  Stream.GetFullName 20002 0 ( FUNC_Defined FUNC_Public )
struct UStream_execGetFullName_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  Stream.GetPath 20002 0 ( FUNC_Defined FUNC_Public )
struct UStream_execGetPath_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  Stream.GetExtension 20002 0 ( FUNC_Defined FUNC_Public )
struct UStream_execGetExtension_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  Stream.GetFileName 20002 0 ( FUNC_Defined FUNC_Public )
struct UStream_execGetFileName_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  Stream.GetDirectory 20002 0 ( FUNC_Defined FUNC_Public )
struct UStream_execGetDirectory_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  Stream.GetType 20002 0 ( FUNC_Defined FUNC_Public )
struct UStream_execGetType_Parms {
  BYTE ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Stream.GetTag 20002 0 ( FUNC_Defined FUNC_Public )
struct UStream_execGetTag_Parms {
  class UStreamTag* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Stream.GetHandle 20002 0 ( FUNC_Defined FUNC_Public )
struct UStream_execGetHandle_Parms {
  INT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Stream.IsReadOnly 20002 0 ( FUNC_Defined FUNC_Public )
struct UStream_execIsReadOnly_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Stream.LoadID3Tag 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UStream_execLoadID3Tag_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Stream.SaveID3Tag 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UStream_execSaveID3Tag_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


// UStream 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UStream : public UStreamBase {
  public:
    INT Handle;  // 28 20001 CPF_Edit CPF_EditConst
    class FString DefaultExtension;  // 2C 2420003 CPF_Edit CPF_Const CPF_EditConst CPF_NeedCtorLink CPF_EditorData
    class UStreamTag* IDTag;  // 34 4020003 CPF_Edit CPF_Const CPF_EditConst CPF_EditInline
    struct FFilePath PathName;  // 38 4420003 CPF_Edit CPF_Const CPF_EditConst CPF_NeedCtorLink CPF_EditInline
    BYTE Type;  // 64 2020003 CPF_Edit CPF_Const CPF_EditConst CPF_EditorData
    BITFIELD bReadOnly : 1;  // 68 2020003 CPF_Edit CPF_Const CPF_EditConst CPF_EditorData
    virtual ~UStream(void);
    virtual unsigned int GetCPPSize(void);
    UStream(class UStream const &);
    UStream(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UStream & operator=(class UStream const &);
    static void CDECL InternalConstructor(void *);
    int LoadID3Tag(void);
    int SaveID3Tag(void);
    static class UClass * CDECL StaticClass(void);
    unsigned long eventSetHandle(int);
    void execLoadID3Tag(struct FFrame &,void * const);
    void execSaveID3Tag(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(UStream,0,execLoadID3Tag)
AUTOGENERATE_FUNCTION(UStream,0,execSaveID3Tag)


//------------------------------------------------------------------------------
//  StreamInterface
//------------------------------------------------------------------------------

//  StreamInterface.HandleDebugExec 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInterface_execHandleDebugExec_Parms {
  class FString Command;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString Param;  // 8 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamInterface.ChangeDirectory 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInterface_execChangeDirectory_Parms {
  class FString DirectoryName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
};


//  StreamInterface.GetCurrentDirectory 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInterface_execGetCurrentDirectory_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  StreamInterface.LoadPlaylist 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UStreamInterface_execLoadPlaylist_Parms {
  class FString fileName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  TArray<class FString> Lines;  // 8 400180 CPF_Parm CPF_OutParm CPF_NeedCtorLink
  BITFIELD bStrict : 1;  // 14 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 18 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamInterface.ValidFile 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UStreamInterface_execValidFile_Parms {
  class FString fileName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamInterface.CreateStream 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UStreamInterface_execCreateStream_Parms {
  class FString fileName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD bStrict : 1;  // 8 90 CPF_OptionalParm CPF_Parm
  class UStream* ReturnValue;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamInterface.ValidDirectory 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UStreamInterface_execValidDirectory_Parms {
  class FString DirectoryPath;  // 0 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamInterface.RemoveDirectory 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UStreamInterface_execRemoveDirectory_Parms {
  class FString DirectoryName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamInterface.CreateDirectory 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UStreamInterface_execCreateDirectory_Parms {
  class FString DirectoryName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString ReturnValue;  // 8 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  StreamInterface.GetDirectoryContents 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UStreamInterface_execGetDirectoryContents_Parms {
  TArray<class FString> Contents;  // 0 400180 CPF_Parm CPF_OutParm CPF_NeedCtorLink
  class FString DirectoryName;  // C 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
  BYTE FileType;  // 14 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 18 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamInterface.GetDriveLetters 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UStreamInterface_execGetDriveLetters_Parms {
  TArray<class FString> Letters;  // 0 400180 CPF_Parm CPF_OutParm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamInterface.GetBaseDirectory 40401 0 ( FUNC_Final FUNC_Native FUNC_Private )
struct UStreamInterface_execGetBaseDirectory_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


// UStreamInterface 16 ( CLASS_Compiled CLASS_Config CLASS_Parsed )
class DLL_IMPORT UStreamInterface : public UStreamBase {
  public:
    class FString CurrentDirectory;  // 28 444000 CPF_Config CPF_GlobalConfig CPF_NeedCtorLink
    virtual ~UStreamInterface(void);
    virtual unsigned int GetCPPSize(void);
    virtual void LoadPlaylist(class FString &,class TArray<class FString> &,int)const ;
    UStreamInterface(class UStreamInterface const &);
    UStreamInterface(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UStreamInterface & operator=(class UStreamInterface const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void execCreateDirectory(struct FFrame &,void * const);
    void execCreateStream(struct FFrame &,void * const);
    void execGetBaseDirectory(struct FFrame &,void * const);
    void execGetDirectoryContents(struct FFrame &,void * const);
    void execGetDriveLetters(struct FFrame &,void * const);
    void execLoadPlaylist(struct FFrame &,void * const);
    void execRemoveDirectory(struct FFrame &,void * const);
    void execValidDirectory(struct FFrame &,void * const);
    void execValidFile(struct FFrame &,void * const);
  private:
    class UStream * CreateStream(class FString &,int);
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(UStreamInterface,0,execCreateDirectory)
AUTOGENERATE_FUNCTION(UStreamInterface,0,execCreateStream)
AUTOGENERATE_FUNCTION(UStreamInterface,0,execGetBaseDirectory)
AUTOGENERATE_FUNCTION(UStreamInterface,0,execGetDirectoryContents)
AUTOGENERATE_FUNCTION(UStreamInterface,0,execGetDriveLetters)
AUTOGENERATE_FUNCTION(UStreamInterface,0,execLoadPlaylist)
AUTOGENERATE_FUNCTION(UStreamInterface,0,execRemoveDirectory)
AUTOGENERATE_FUNCTION(UStreamInterface,0,execValidDirectory)
AUTOGENERATE_FUNCTION(UStreamInterface,0,execValidFile)


//------------------------------------------------------------------------------
//  StreamInteraction
//------------------------------------------------------------------------------

#define UCONST_StreamInteraction_INVALIDSONGHANDLE  0
//  StreamInteraction.PC 80002 0 ( FUNC_Defined FUNC_Protected )
struct UStreamInteraction_execPC_Parms {
  class APlayerController* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamInteraction.KillMusic 80002 0 ( FUNC_Defined FUNC_Protected )
struct UStreamInteraction_execKillMusic_Parms {
};


//  StreamInteraction.ClearSongInfo 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execClearSongInfo_Parms {
};


//  StreamInteraction.HasPlayer 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execHasPlayer_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamInteraction.IsPlaying 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execIsPlaying_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamInteraction.GetStreamDuration 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execGetStreamDuration_Parms {
  FLOAT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamInteraction.GetStreamVolume 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execGetStreamVolume_Parms {
  FLOAT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamInteraction.GetStreamPosition 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execGetStreamPosition_Parms {
  FLOAT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamInteraction.PlayStream 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execPlayStream_Parms {
  class FString fileName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  INT SeekSeconds;  // 8 90 CPF_OptionalParm CPF_Parm
};


//  StreamInteraction.Seek 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execSeek_Parms {
  FLOAT SeekSeconds;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamInteraction.SeekStream 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execSeekStream_Parms {
  FLOAT Seconds;  // 0 80 CPF_Parm
};


//  StreamInteraction.SetMusicVolume 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execSetMusicVolume_Parms {
  FLOAT NewVolume;  // 0 80 CPF_Parm
};


//  StreamInteraction.StopSong 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execStopSong_Parms {
};


//  StreamInteraction.PlaySong 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execPlaySong_Parms {
  class FString SongName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  FLOAT InitialTime;  // 8 80 CPF_Parm
};


//  StreamInteraction.PauseSong 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execPauseSong_Parms {
};


//  StreamInteraction.PrevSong 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execPrevSong_Parms {
  BITFIELD bForce : 1;  // 0 90 CPF_OptionalParm CPF_Parm
};


//  StreamInteraction.NextSong 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execNextSong_Parms {
  BITFIELD bForce : 1;  // 0 90 CPF_OptionalParm CPF_Parm
};


//  StreamInteraction.CurrentHandle 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execCurrentHandle_Parms {
  INT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamInteraction.GetCurrentStream 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execGetCurrentStream_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  StreamInteraction.NotifyLevelChange 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UStreamInteraction_eventNotifyLevelChange_Parms {
};


//  StreamInteraction.StreamFinished 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execStreamFinished_Parms {
  INT Handle;  // 0 80 CPF_Parm
  BYTE Reason;  // 4 80 CPF_Parm
};


//  StreamInteraction.SetStreamAttachment 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execSetStreamAttachment_Parms {
  class UStream* StreamObj;  // 0 80 CPF_Parm
};


//  StreamInteraction.IsPaused 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UStreamInteraction_execIsPaused_Parms {
  INT SongHandle;  // 0 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamInteraction.Tick 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UStreamInteraction_eventTick_Parms {
  FLOAT DeltaTime;  // 0 80 CPF_Parm
};


//  StreamInteraction.QueueNextSong 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execQueueNextSong_Parms {
};


//  StreamInteraction.CreatePlaylistManager 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execCreatePlaylistManager_Parms {
  class UStreamPlaylistManager* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamInteraction.CreateFileManager 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamInteraction_execCreateFileManager_Parms {
  class UStreamInterface* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamInteraction.Initialized 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UStreamInteraction_eventInitialized_Parms {
};


//  StreamInteraction.OnAdjustVolume 120000 0 ( FUNC_Public FUNC_Delegate )
struct UStreamInteraction_execOnAdjustVolume_Parms {
  FLOAT NewVolume;  // 0 80 CPF_Parm
};


//  StreamInteraction.OnStreamingStopped 120000 0 ( FUNC_Public FUNC_Delegate )
struct UStreamInteraction_execOnStreamingStopped_Parms {
};


//  StreamInteraction.OnStreamChanged 120000 0 ( FUNC_Public FUNC_Delegate )
struct UStreamInteraction_execOnStreamChanged_Parms {
  class FString NewStreamFileName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
};


// UStreamInteraction 16 ( CLASS_Compiled CLASS_Config CLASS_Parsed )
class DLL_IMPORT UStreamInteraction : public UInteraction {
  public:
    FLOAT FadeInSeconds;  // 34 4001 CPF_Edit CPF_Config
    FLOAT FadeOutSeconds;  // 38 4001 CPF_Edit CPF_Config
    class FString PlaylistManagerType;  // 3C 404001 CPF_Edit CPF_Config CPF_NeedCtorLink
    class UStreamPlaylistManager* PlaylistManager;  // 44 4020001 CPF_Edit CPF_EditConst CPF_EditInline
    class UStreamInterface* FileManager;  // 48 4020001 CPF_Edit CPF_EditConst CPF_EditInline
    INT CurrentSongHandle;  // 4C 20001 CPF_Edit CPF_EditConst
    FLOAT CurrentSongPosition;  // 50 20001 CPF_Edit CPF_EditConst
    FLOAT LastPlayTime;  // 54 20001 CPF_Edit CPF_EditConst
    FLOAT CurrentSongDuration;  // 58 20001 CPF_Edit CPF_EditConst
    class FString CurrentSong;  // 5C 420001 CPF_Edit CPF_EditConst CPF_NeedCtorLink
    class UStream* CurrentStreamAttachment;  // 64 20001 CPF_Edit CPF_EditConst
    BITFIELD bAutoStart : 1;  // 68 2004001 CPF_Edit CPF_Config CPF_EditorData
    BITFIELD bDisplayTrackChanges : 1;  // 68 2004001 CPF_Edit CPF_Config CPF_EditorData
    BITFIELD bRestartTrack : 1;  // 68 2022001 CPF_Edit CPF_Transient CPF_EditConst CPF_EditorData
    BITFIELD bTrackWaiting : 1;  // 68 2022001 CPF_Edit CPF_Transient CPF_EditConst CPF_EditorData
    struct FScriptDelegate __OnStreamChanged__Delegate;  // 6C 400000 CPF_NeedCtorLink
    struct FScriptDelegate __OnStreamingStopped__Delegate;  // 74 400000 CPF_NeedCtorLink
    struct FScriptDelegate __OnAdjustVolume__Delegate;  // 7C 400000 CPF_NeedCtorLink
    virtual ~UStreamInteraction(void);
    virtual void Destroy(void);
    virtual unsigned int GetCPPSize(void);
    UStreamInteraction(class UStreamInteraction const &);
    UStreamInteraction(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UStreamInteraction & operator=(class UStreamInteraction const &);
    static struct FrameTypeList * CDECL GetFrameTypes(void);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void delegateOnAdjustVolume(float);
    void delegateOnStreamChanged(class FString const &);
    void delegateOnStreamingStopped(void);
    void execIsPaused(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(UStreamInteraction,0,execIsPaused)


//------------------------------------------------------------------------------
//  Spline
//------------------------------------------------------------------------------

#define UCONST_Spline_mMaxTimes 5
//  Spline.NextSplineRot 20501 0 ( FUNC_Final FUNC_Simulated FUNC_Native FUNC_Public )
struct USpline_execNextSplineRot_Parms {
  FLOAT dt;  // 0 80 CPF_Parm
  class FRotator D;  // 4 180 CPF_Parm CPF_OutParm
  class FRotator V;  // 10 180 CPF_Parm CPF_OutParm
  class FRotator A;  // 1C 180 CPF_Parm CPF_OutParm
  FLOAT outdt;  // 28 180 CPF_Parm CPF_OutParm
  BITFIELD bSmoothDt : 1;  // 2C 90 CPF_OptionalParm CPF_Parm
  BITFIELD bAccumDeltas : 1;  // 30 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 34 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Spline.NextSplinePos 20501 0 ( FUNC_Final FUNC_Simulated FUNC_Native FUNC_Public )
struct USpline_execNextSplinePos_Parms {
  FLOAT dt;  // 0 80 CPF_Parm
  class FVector D;  // 4 180 CPF_Parm CPF_OutParm
  class FVector V;  // 10 180 CPF_Parm CPF_OutParm
  class FVector A;  // 1C 180 CPF_Parm CPF_OutParm
  FLOAT outdt;  // 28 180 CPF_Parm CPF_OutParm
  BITFIELD bSmoothDt : 1;  // 2C 90 CPF_OptionalParm CPF_Parm
  BITFIELD bAccumDeltas : 1;  // 30 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 34 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Spline.InitSplineRot 20501 0 ( FUNC_Final FUNC_Simulated FUNC_Native FUNC_Public )
struct USpline_execInitSplineRot_Parms {
  FLOAT t0;  // 0 80 CPF_Parm
  class FRotator d0;  // 4 80 CPF_Parm
  class FRotator v0;  // 10 80 CPF_Parm
  FLOAT t1;  // 1C 80 CPF_Parm
  class FRotator d1;  // 20 80 CPF_Parm
  class FRotator v1;  // 2C 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 38 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Spline.InitSplinePath 20501 0 ( FUNC_Final FUNC_Simulated FUNC_Native FUNC_Public )
struct USpline_execInitSplinePath_Parms {
  FLOAT t0;  // 0 80 CPF_Parm
  class FVector d0;  // 4 80 CPF_Parm
  class FVector v0;  // 10 80 CPF_Parm
  FLOAT t1;  // 1C 80 CPF_Parm
  class FVector d1;  // 20 80 CPF_Parm
  class FVector v1;  // 2C 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 38 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


// USpline 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT USpline : public UObject {
  public:
    class FVector SplineA;  // 28 0
    class FVector SplineB;  // 34 0
    class FVector SplineC;  // 40 0
    class FVector SplineD;  // 4C 0
    class FRotator SplineE;  // 58 0
    class FRotator SplineF;  // 64 0
    class FRotator SplineG;  // 70 0
    class FRotator SplineH;  // 7C 0
    FLOAT mStartT;  // 88 0
    FLOAT mEndT;  // 8C 0
    BITFIELD mbInit : 1;  // 90 0
    FLOAT mTime;  // 94 0
    FLOAT maDeltaTimes[5];  // 98 0
    INT mIndex;  // AC 0
    FLOAT mTotalTime;  // B0 0
    BITFIELD mbRotatorSpline : 1;  // B4 0
    INT mCnt;  // B8 0
    virtual ~USpline(void);
    virtual unsigned int GetCPPSize(void);
    USpline(class USpline const &);
    USpline(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USpline & operator=(class USpline const &);
    int CalcSplinePos(float,class FVector &,class FVector &,class FVector &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void execInitSplinePath(struct FFrame &,void * const);
    void execInitSplineRot(struct FFrame &,void * const);
    void execNextSplinePos(struct FFrame &,void * const);
    void execNextSplineRot(struct FFrame &,void * const);
    float smoothDeltaTime(float);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(USpline,0,execInitSplinePath)
AUTOGENERATE_FUNCTION(USpline,0,execInitSplineRot)
AUTOGENERATE_FUNCTION(USpline,0,execNextSplinePos)
AUTOGENERATE_FUNCTION(USpline,0,execNextSplineRot)


//------------------------------------------------------------------------------
//  DecoVolumeObject
//------------------------------------------------------------------------------

// ADecoVolumeObject 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT ADecoVolumeObject : public AActor {
  public:
    virtual ~ADecoVolumeObject(void);
    virtual unsigned int GetCPPSize(void);
    ADecoVolumeObject(class ADecoVolumeObject const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ADecoVolumeObject & operator=(class ADecoVolumeObject const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    ADecoVolumeObject(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Keypoint
//------------------------------------------------------------------------------

// AKeypoint 213 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT AKeypoint : public AActor {
  public:
    virtual ~AKeypoint(void);
    virtual unsigned int GetCPPSize(void);
    AKeypoint(class AKeypoint const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AKeypoint & operator=(class AKeypoint const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    AKeypoint(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  DecorationList
//------------------------------------------------------------------------------

// FDecorationType 0 ( )
struct DLL_IMPORT FDecorationType {
  public:
    class UStaticMesh* StaticMesh;  // 0 1 CPF_Edit
    class FRange Count;  // 4 1 CPF_Edit
    class FRange DrawScale;  // C 1 CPF_Edit
    INT bAlign;  // 14 1 CPF_Edit
    INT bRandomPitch;  // 18 1 CPF_Edit
    INT bRandomYaw;  // 1C 1 CPF_Edit
    INT bRandomRoll;  // 20 1 CPF_Edit
};

// ADecorationList 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT ADecorationList : public AKeypoint {
  public:
    TArray<struct FDecorationType> Decorations;  // 420 400001 CPF_Edit CPF_NeedCtorLink
    virtual ~ADecorationList(void);
    virtual unsigned int GetCPPSize(void);
    ADecorationList(class ADecorationList const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ADecorationList & operator=(class ADecorationList const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    ADecorationList(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  MeshInstance
//------------------------------------------------------------------------------

// UMeshInstance 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UMeshInstance : public UPrimitive {
  public:
    virtual ~UMeshInstance(void);
    virtual unsigned int GetCPPSize(void);
    virtual int PointCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,unsigned long);
    virtual int LineCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,class FVector const &,unsigned long,unsigned long);
    virtual class FBox GetRenderBoundingBox(class AActor const *);
    virtual class FSphere GetRenderBoundingSphere(class AActor const *);
    virtual class USkeletalMeshInstance * GetUSkeletalMeshInstance(void);
    virtual class AActor * GetActor(void);
    virtual void SetActor(class AActor *);
    virtual class UMesh * GetMesh(void);
    virtual void SetMesh(class UMesh *);
    virtual void SetStatus(int);
    virtual int GetStatus(void);
    virtual int UpdateAnimation(float);
    virtual int PlayAnim(int,class FName,float,float,int,int);
    virtual int GetAnimCount(void);
    virtual void * GetAnimIndexed(int);
    virtual void * GetAnimNamed(class FName);
    virtual class FName AnimGetName(void *);
    virtual class FName AnimGetGroup(void *);
    virtual int AnimIsInGroup(void *,class FName);
    virtual float AnimGetFrameCount(void *);
    virtual float AnimGetRate(void *);
    virtual int AnimGetNotifyCount(void *);
    virtual float AnimGetNotifyTime(void *,int);
    virtual unsigned short const * AnimGetNotifyText(void *,int);
    virtual class UAnimNotify * AnimGetNotifyObject(void *,int);
    virtual int IsAnimating(int);
    virtual int StopAnimating(void);
    virtual int FreezeAnimAt(float,int);
    virtual int IsAnimTweening(int);
    virtual int IsAnimLooping(int);
    virtual int IsAnimPastLastFrame(int);
    virtual int AnimStopLooping(int);
    virtual class FName GetActiveAnimSequence(int);
    virtual float GetActiveAnimRate(int);
    virtual float GetActiveAnimFrame(int);
    virtual int SetBlendParams(int,float,float,float,class FName,int,int);
    virtual int GetAttachMatrix(class FName,class FMatrix &);
    virtual int GetAttachCount(void);
    virtual int GetAttachIdx(int,class FName &,class FMatrix &);
    virtual int CheckAnimFinished(int);
    virtual int SetBoneLocation(class FName,class FVector,float);
    virtual int SetBoneRotation(class FName,class FRotator,int,float);
    virtual int SetBoneScale(int,float,class FName);
    virtual int MatchRefBone(class FName);
    virtual void DrawVolume(class AActor *,class FRenderInterface *,class FVector);
    virtual bool InitSkeletalPhysics(void);
    virtual bool TickSkeletalPhysics(float);
    virtual void SetAnimFrame(int,float,int);
    virtual int AnimForcePose(class FName,float,float,int);
    virtual class FBox GetCollisionBoundingBox(class AActor const *);
    virtual class UMaterial * GetMaterial(int,class AActor *);
    virtual void GetFrame(class AActor *,class FLevelSceneNode *,class FVector *,int,int &,unsigned long);
    virtual class FMatrix MeshToWorld(void);
    virtual void Render(class FDynamicActor *,class FLevelSceneNode *,class TList<class FDynamicLight *> *,class TList<struct FProjectorRenderInfo *> *,class FRenderInterface *);
    virtual void SetScale(class FVector);
    virtual void MeshBuildBounds(void);
    UMeshInstance(class UMeshInstance const &);
    UMeshInstance(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UMeshInstance & operator=(class UMeshInstance const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  LodMeshInstance
//------------------------------------------------------------------------------

// ULodMeshInstance 1A ( CLASS_Compiled CLASS_Transient CLASS_Parsed )
class DLL_IMPORT ULodMeshInstance : public UMeshInstance {
  public:
    char Unknown0[44];
    virtual ~ULodMeshInstance(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual class AActor * GetActor(void);
    virtual void SetActor(class AActor *);
    virtual class UMesh * GetMesh(void);
    virtual void SetMesh(class UMesh *);
    virtual void SetStatus(int);
    virtual int GetStatus(void);
    virtual void GetFrame(class AActor *,class FLevelSceneNode *,class FVector *,int,int &,unsigned long);
    virtual void GetMeshVerts(class AActor *,class FVector *,int,int &);
    ULodMeshInstance(class ULodMeshInstance const &);
    ULodMeshInstance(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ULodMeshInstance & operator=(class ULodMeshInstance const &);
    struct FMeshAnimSeq * GetAnimSeq(class FName);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  VertMeshInstance
//------------------------------------------------------------------------------

// UVertMeshInstance 1A ( CLASS_Compiled CLASS_Transient CLASS_Parsed )
class DLL_IMPORT UVertMeshInstance : public ULodMeshInstance {
  public:
    char Unknown0[284];
    virtual ~UVertMeshInstance(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual class FBox GetRenderBoundingBox(class AActor const *);
    virtual class FSphere GetRenderBoundingSphere(class AActor const *);
    virtual int UpdateAnimation(float);
    virtual int GetAnimCount(void);
    virtual void * GetAnimIndexed(int);
    virtual void * GetAnimNamed(class FName);
    virtual class FName AnimGetName(void *);
    virtual class FName AnimGetGroup(void *);
    virtual int AnimIsInGroup(void *,class FName);
    virtual float AnimGetFrameCount(void *);
    virtual float AnimGetRate(void *);
    virtual int AnimGetNotifyCount(void *);
    virtual float AnimGetNotifyTime(void *,int);
    virtual unsigned short const * AnimGetNotifyText(void *,int);
    virtual class UAnimNotify * AnimGetNotifyObject(void *,int);
    virtual int IsAnimating(int);
    virtual int StopAnimating(void);
    virtual int IsAnimTweening(int);
    virtual int IsAnimLooping(int);
    virtual int IsAnimPastLastFrame(int);
    virtual int AnimStopLooping(int);
    virtual class FName GetActiveAnimSequence(int);
    virtual float GetActiveAnimRate(int);
    virtual float GetActiveAnimFrame(int);
    virtual void SetAnimFrame(int,float,int);
    virtual int AnimForcePose(class FName,float,float,int);
    virtual class UMaterial * GetMaterial(int,class AActor *);
    virtual void GetFrame(class AActor *,class FLevelSceneNode *,class FVector *,int,int &,unsigned long);
    virtual class FMatrix MeshToWorld(void);
    virtual void Render(class FDynamicActor *,class FLevelSceneNode *,class TList<class FDynamicLight *> *,class TList<struct FProjectorRenderInfo *> *,class FRenderInterface *);
    virtual void SetScale(class FVector);
    virtual void MeshBuildBounds(void);
    virtual void GetMeshVerts(class AActor *,class FVector *,int,int &);
    UVertMeshInstance(class UVertMeshInstance const &);
    UVertMeshInstance(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UVertMeshInstance & operator=(class UVertMeshInstance const &);
    struct FMeshAnimSeq * GetAnimSeq(class FName);
    static void CDECL InternalConstructor(void *);
    int PlayAnim(int,class FName,float,float,int);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Mesh
//------------------------------------------------------------------------------

// UMesh 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UMesh : public UPrimitive {
  public:
    char Unknown0[4];
    virtual ~UMesh(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual class UClass * MeshGetInstanceClass(void);
    virtual class UMeshInstance * MeshGetInstance(class AActor const *);
    virtual class USkeletalMesh * GetUSkeletalMesh(void);
    virtual float GetCollisionRadius(void);
    virtual float GetCollisionHeight(void);
    UMesh(class UMesh const &);
    UMesh(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UMesh & operator=(class UMesh const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  LodMesh
//------------------------------------------------------------------------------

// ULodMesh 52 ( CLASS_Compiled CLASS_Parsed CLASS_SafeReplace )
class DLL_IMPORT ULodMesh : public UMesh {
  public:
    char Unknown0[220];
    virtual ~ULodMesh(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual class UClass * MeshGetInstanceClass(void);
    virtual unsigned long CreateAuthenticationKey(int);
    virtual int ValidateAuthenticationKey(void);
    virtual int MemFootprint(int);
    ULodMesh(class ULodMesh const &);
    ULodMesh(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ULodMesh & operator=(class ULodMesh const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  VertMesh
//------------------------------------------------------------------------------

// UVertMesh 52 ( CLASS_Compiled CLASS_Parsed CLASS_SafeReplace )
class DLL_IMPORT UVertMesh : public ULodMesh {
  public:
    char Unknown0[336];
    virtual ~UVertMesh(void);
    virtual void PostLoad(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual class FBox GetRenderBoundingBox(class AActor const *);
    virtual class FSphere GetRenderBoundingSphere(class AActor const *);
    virtual class UClass * MeshGetInstanceClass(void);
    UVertMesh(class UVertMesh const &);
    UVertMesh(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UVertMesh & operator=(class UVertMesh const &);
    static void CDECL InternalConstructor(void *);
    int RenderPreProcess(void);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  ParticleEmitter
//------------------------------------------------------------------------------

enum EEmitterChannel {
  EC_NONE = 0,
  EC_EMITTER0 = 1,
  EC_EMITTER1 = 2,
  EC_EMITTER2 = 3,
  EC_EMITTER3 = 4,
  EC_EMITTER4 = 5,
  EC_EMITTER5 = 6,
  EC_EMITTER6 = 7,
  EC_EMITTER7 = 8
};

enum ESkelLocationUpdate {
  PTSU_None = 0,
  PTSU_SpawnOffset = 1,
  PTSU_Location = 2
};

enum EParticleMeshSpawning {
  PTMS_None = 0,
  PTMS_Linear = 1,
  PTMS_Random = 2,
  PTMS_LinearInverted = 3
};

enum EParticleCollisionSound {
  PTSC_None = 0,
  PTSC_LinearGlobal = 1,
  PTSC_LinearLocal = 2,
  PTSC_Random = 3
};

enum EParticleEffectAxis {
  PTEA_NegativeX = 0,
  PTEA_PositiveZ = 1
};

enum EParticleStartLocationShape {
  PTLS_Box = 0,
  PTLS_Sphere = 1,
  PTLS_Polar = 2,
  PTLS_All = 3
};

enum EParticleVelocityDirection {
  PTVD_None = 0,
  PTVD_StartPositionAndOwner = 1,
  PTVD_OwnerAndStartPosition = 2,
  PTVD_AddRadial = 3
};

enum EParticleRotationSource {
  PTRS_None = 0,
  PTRS_Actor = 1,
  PTRS_Offset = 2,
  PTRS_Normal = 3
};

enum EParticleCoordinateSystem {
  PTCS_Independent = 0,
  PTCS_Relative = 1,
  PTCS_Absolute = 2
};

enum EParticleDrawStyle {
  PTDS_Regular = 0,
  PTDS_AlphaBlend = 1,
  PTDS_Modulated = 2,
  PTDS_Translucent = 3,
  PTDS_AlphaModulate_MightNotFogCorrectly = 4,
  PTDS_Darken = 5,
  PTDS_Brighten = 6
};

enum EBlendMode {
  BM_MODULATE = 0,
  BM_MODULATE2X = 1,
  BM_MODULATE4X = 2,
  BM_ADD = 3,
  BM_ADDSIGNED = 4,
  BM_ADDSIGNED2X = 5,
  BM_SUBTRACT = 6,
  BM_ADDSMOOTH = 7,
  BM_BLENDDIFFUSEALPHA = 8,
  BM_BLENDTEXTUREALPHA = 9,
  BM_BLENDFACTORALPHA = 10,
  BM_BLENDTEXTUREALPHAPM = 11,
  BM_BLENDCURRENTALPHA = 12,
  BM_PREMODULATE = 13,
  BM_MODULATEALPHA_ADDCOLOR = 14,
  BM_MODULATEINVALPHA_ADDCOLOR = 15,
  BM_MODULATEINVCOLOR_ADDALPHA = 16,
  BM_HACK = 17
};

// FParticleSound 0 ( )
struct DLL_IMPORT FParticleSound {
  public:
    class USound* Sound;  // 0 1 CPF_Edit
    class FRange Radius;  // 4 1 CPF_Edit
    class FRange Pitch;  // C 1 CPF_Edit
    INT Weight;  // 14 1 CPF_Edit
    class FRange Volume;  // 18 1 CPF_Edit
    class FRange Probability;  // 20 1 CPF_Edit
};

// FParticle 0 ( )
struct DLL_IMPORT FParticle {
  public:
    class FVector Location;  // 0 0
    class FVector OldLocation;  // C 0
    class FVector Velocity;  // 18 0
    class FVector StartSize;  // 24 0
    class FVector SpinsPerSecond;  // 30 0
    class FVector StartSpin;  // 3C 0
    class FVector RevolutionCenter;  // 48 0
    class FVector RevolutionsPerSecond;  // 54 0
    class FVector RevolutionsMultiplier;  // 60 0
    class FVector Size;  // 6C 0
    class FVector StartLocation;  // 78 0
    class FVector ColorMultiplier;  // 84 0
    class FVector VelocityMultiplier;  // 90 0
    class FVector OldMeshLocation;  // 9C 0
    class FColor Color;  // A8 0
    FLOAT Time;  // AC 0
    FLOAT MaxLifetime;  // B0 0
    FLOAT Mass;  // B4 0
    INT HitCount;  // B8 0
    INT flags;  // BC 0
    INT Subdivision;  // C0 0
    INT BoneIndex;  // C4 0
    class FRotator OldRotation;  // C8 0
};

// FParticleVelocityScale 0 ( )
struct DLL_IMPORT FParticleVelocityScale {
  public:
    FLOAT RelativeTime;  // 0 1 CPF_Edit
    class FVector RelativeVelocity;  // 4 1 CPF_Edit
};

// FParticleColorScale 0 ( )
struct DLL_IMPORT FParticleColorScale {
  public:
    FLOAT RelativeTime;  // 0 1 CPF_Edit
    class FColor Color;  // 4 1 CPF_Edit
};

// FParticleRevolutionScale 0 ( )
struct DLL_IMPORT FParticleRevolutionScale {
  public:
    FLOAT RelativeTime;  // 0 1 CPF_Edit
    class FVector RelativeRevolution;  // 4 1 CPF_Edit
};

// FParticleTimeScale 0 ( )
struct DLL_IMPORT FParticleTimeScale {
  public:
    FLOAT RelativeTime;  // 0 1 CPF_Edit
    FLOAT RelativeSize;  // 4 1 CPF_Edit
};

//  ParticleEmitter.ScaleFactor 20400 0 ( FUNC_Native FUNC_Public )
struct UParticleEmitter_execScaleFactor_Parms {
  FLOAT aFactor;  // 0 80 CPF_Parm
};


//  ParticleEmitter.Reset 20400 0 ( FUNC_Native FUNC_Public )
struct UParticleEmitter_execReset_Parms {
};


//  ParticleEmitter.UnTrigger 20400 0 ( FUNC_Native FUNC_Public )
struct UParticleEmitter_execUnTrigger_Parms {
};


//  ParticleEmitter.Trigger 20400 0 ( FUNC_Native FUNC_Public )
struct UParticleEmitter_execTrigger_Parms {
};


//  ParticleEmitter.SpawnParticle 20400 0 ( FUNC_Native FUNC_Public )
struct UParticleEmitter_execSpawnParticle_Parms {
  INT Amount;  // 0 80 CPF_Parm
};


// UParticleEmitter 1013 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew )
class DLL_IMPORT UParticleEmitter : public UObject {
  public:
    BITFIELD UseCollision : 1;  // 28 1 CPF_Edit
    BITFIELD UseCollisionPlanes : 1;  // 28 1 CPF_Edit
    BITFIELD UseMaxCollisions : 1;  // 28 1 CPF_Edit
    BITFIELD UseSpawnedVelocityScale : 1;  // 28 1 CPF_Edit
    BITFIELD UseColorScale : 1;  // 28 1 CPF_Edit
    BITFIELD FadeOut : 1;  // 28 1 CPF_Edit
    BITFIELD FadeIn : 1;  // 28 1 CPF_Edit
    BITFIELD UseActorForces : 1;  // 28 1 CPF_Edit
    BITFIELD ResetAfterChange : 1;  // 28 1 CPF_Edit
    BITFIELD RespawnDeadParticles : 1;  // 28 1 CPF_Edit
    BITFIELD AutoDestroy : 1;  // 28 1 CPF_Edit
    BITFIELD AutoReset : 1;  // 28 1 CPF_Edit
    BITFIELD Disabled : 1;  // 28 1 CPF_Edit
    BITFIELD Backup_Disabled : 1;  // 28 2000000 CPF_EditorData
    BITFIELD DisableFogging : 1;  // 28 1 CPF_Edit
    BITFIELD VelocityFromMesh : 1;  // 28 1 CPF_Edit
    BITFIELD UniformMeshScale : 1;  // 28 1 CPF_Edit
    BITFIELD UniformVelocityScale : 1;  // 28 1 CPF_Edit
    BITFIELD UseColorFromMesh : 1;  // 28 1 CPF_Edit
    BITFIELD SpawnOnlyInDirectionOfNormal : 1;  // 28 1 CPF_Edit
    BITFIELD AlphaTest : 1;  // 28 1 CPF_Edit
    BITFIELD AcceptsProjectors : 1;  // 28 1 CPF_Edit
    BITFIELD ZTest : 1;  // 28 1 CPF_Edit
    BITFIELD ZWrite : 1;  // 28 1 CPF_Edit
    BITFIELD UseRevolution : 1;  // 28 1 CPF_Edit
    BITFIELD UseRevolutionScale : 1;  // 28 1 CPF_Edit
    BITFIELD SpinParticles : 1;  // 28 1 CPF_Edit
    BITFIELD DampRotation : 1;  // 28 1 CPF_Edit
    BITFIELD UseSizeScale : 1;  // 28 1 CPF_Edit
    BITFIELD UseAbsoluteTimeForSizeScale : 1;  // 28 1 CPF_Edit
    BITFIELD UseRegularSizeScale : 1;  // 28 1 CPF_Edit
    BITFIELD UniformSize : 1;  // 28 1 CPF_Edit
    BITFIELD DetermineVelocityByLocationDifference : 1;  // 2C 1 CPF_Edit
    BITFIELD ScaleSizeXByVelocity : 1;  // 2C 1 CPF_Edit
    BITFIELD ScaleSizeYByVelocity : 1;  // 2C 1 CPF_Edit
    BITFIELD ScaleSizeZByVelocity : 1;  // 2C 1 CPF_Edit
    FLOAT LocalDrawScale;  // 30 2000001 CPF_Edit CPF_EditorData
    BITFIELD AutomaticInitialSpawning : 1;  // 34 1 CPF_Edit
    BITFIELD BlendBetweenSubdivisions : 1;  // 34 1 CPF_Edit
    BITFIELD UseSubdivisionScale : 1;  // 34 1 CPF_Edit
    BITFIELD UseRandomSubdivision : 1;  // 34 1 CPF_Edit
    BITFIELD TriggerDisabled : 1;  // 34 1 CPF_Edit
    BITFIELD TriggerRespawnDeadParticles : 1;  // 34 1 CPF_Edit
    BITFIELD ResetOnTrigger : 1;  // 34 1 CPF_Edit
    BITFIELD UseVelocityScale : 1;  // 34 1 CPF_Edit
    BITFIELD AddVelocityFromOwner : 1;  // 34 1 CPF_Edit
    FLOAT LowDetailFactor;  // 38 1 CPF_Edit
    class FVector Acceleration;  // 3C 1 CPF_Edit
    class FVector ExtentMultiplier;  // 48 1 CPF_Edit
    class FRangeVector DampingFactorRange;  // 54 1 CPF_Edit
    TArray<class FPlane> CollisionPlanes;  // 6C 400001 CPF_Edit CPF_NeedCtorLink
    class FRange MaxCollisions;  // 78 1 CPF_Edit
    INT SpawnFromOtherEmitter;  // 80 1 CPF_Edit
    INT SpawnAmount;  // 84 1 CPF_Edit
    class FRangeVector SpawnedVelocityScaleRange;  // 88 1 CPF_Edit
    TArray<struct FParticleColorScale> ColorScale;  // A0 400001 CPF_Edit CPF_NeedCtorLink
    FLOAT ColorScaleRepeats;  // AC 1 CPF_Edit
    class FRangeVector ColorMultiplierRange;  // B0 1 CPF_Edit
    FLOAT Opacity;  // C8 1 CPF_Edit
    class FPlane FadeOutFactor;  // CC 1 CPF_Edit
    FLOAT FadeOutStartTime;  // DC 1 CPF_Edit
    class FPlane FadeInFactor;  // E0 1 CPF_Edit
    FLOAT FadeInEndTime;  // F0 1 CPF_Edit
    BYTE CoordinateSystem;  // F4 1 CPF_Edit
    INT MaxParticles;  // F8 3 CPF_Edit CPF_Const
    BITFIELD SBEnforceMaxParticles : 1;  // FC 2000001 CPF_Edit CPF_EditorData
    BYTE EffectAxis;  // 100 1 CPF_Edit
    class FRange AutoResetTimeRange;  // 104 1 CPF_Edit
    class FString Name;  // 10C 400001 CPF_Edit CPF_NeedCtorLink
    BYTE DetailMode;  // 114 1 CPF_Edit
    class FVector StartLocationOffset;  // 118 1 CPF_Edit
    class FRangeVector StartLocationRange;  // 124 1 CPF_Edit
    INT AddLocationFromOtherEmitter;  // 13C 1 CPF_Edit
    BYTE StartLocationShape;  // 140 1 CPF_Edit
    class FRange SphereRadiusRange;  // 144 1 CPF_Edit
    class FRangeVector StartLocationPolarRange;  // 14C 1 CPF_Edit
    class FRange StartMassRange;  // 164 1 CPF_Edit
    class UStaticMesh* MeshSpawningStaticMesh;  // 16C 1 CPF_Edit
    BYTE MeshSpawning;  // 170 1 CPF_Edit
    class FRangeVector VelocityScaleRange;  // 174 1 CPF_Edit
    class FRangeVector MeshScaleRange;  // 18C 1 CPF_Edit
    class FVector MeshNormal;  // 1A4 1 CPF_Edit
    class FRange MeshNormalThresholdRange;  // 1B0 1 CPF_Edit
    INT AlphaRef;  // 1B8 1 CPF_Edit
    class FRangeVector RevolutionCenterOffsetRange;  // 1BC 1 CPF_Edit
    class FRangeVector RevolutionsPerSecondRange;  // 1D4 1 CPF_Edit
    TArray<struct FParticleRevolutionScale> RevolutionScale;  // 1EC 400001 CPF_Edit CPF_NeedCtorLink
    FLOAT RevolutionScaleRepeats;  // 1F8 1 CPF_Edit
    BYTE UseRotationFrom;  // 1FC 1 CPF_Edit
    class FRotator RotationOffset;  // 200 1 CPF_Edit
    class FVector SpinCCWorCW;  // 20C 1 CPF_Edit
    class FRangeVector SpinsPerSecondRange;  // 218 1 CPF_Edit
    class FRangeVector StartSpinRange;  // 230 1 CPF_Edit
    class FRangeVector RotationDampingFactorRange;  // 248 1 CPF_Edit
    class FVector RotationNormal;  // 260 1 CPF_Edit
    TArray<struct FParticleTimeScale> SizeScale;  // 26C 400001 CPF_Edit CPF_NeedCtorLink
    FLOAT SizeScaleRepeats;  // 278 1 CPF_Edit
    class FRangeVector StartSizeRange;  // 27C 1 CPF_Edit
    class FVector ScaleSizeByVelocityMultiplier;  // 294 1 CPF_Edit
    FLOAT ScaleSizeByVelocityMax;  // 2A0 1 CPF_Edit
    BYTE UseSkeletalLocationAs;  // 2A4 1 CPF_Edit
    class AActor* SkeletalMeshActor;  // 2A8 1 CPF_Edit
    class FVector SkeletalScale;  // 2AC 1 CPF_Edit
    class FRange RelativeBoneIndexRange;  // 2B8 1 CPF_Edit
    TArray<struct FParticleSound> Sounds;  // 2C0 400001 CPF_Edit CPF_NeedCtorLink
    BYTE SpawningSound;  // 2CC 1 CPF_Edit
    class FRange SpawningSoundIndex;  // 2D0 1 CPF_Edit
    class FRange SpawningSoundProbability;  // 2D8 1 CPF_Edit
    BYTE CollisionSound;  // 2E0 1 CPF_Edit
    class FRange CollisionSoundIndex;  // 2E4 1 CPF_Edit
    class FRange CollisionSoundProbability;  // 2EC 1 CPF_Edit
    FLOAT ParticlesPerSecond;  // 2F4 1 CPF_Edit
    FLOAT InitialParticlesPerSecond;  // 2F8 1 CPF_Edit
    BYTE DrawStyle;  // 2FC 1 CPF_Edit
    class UTexture* Texture;  // 300 1 CPF_Edit
    INT TextureUSubdivisions;  // 304 1 CPF_Edit
    INT TextureVSubdivisions;  // 308 1 CPF_Edit
    TArray<FLOAT> SubdivisionScale;  // 30C 400001 CPF_Edit CPF_NeedCtorLink
    INT SubdivisionStart;  // 318 1 CPF_Edit
    INT SubdivisionEnd;  // 31C 1 CPF_Edit
    FLOAT SecondsBeforeInactive;  // 320 1 CPF_Edit
    FLOAT MinSquaredVelocity;  // 324 1 CPF_Edit
    class FRange InitialTimeRange;  // 328 1 CPF_Edit
    class FRange LifetimeRange;  // 330 1 CPF_Edit
    class FRange InitialDelayRange;  // 338 1 CPF_Edit
    class FRange SpawnOnTriggerRange;  // 340 1 CPF_Edit
    FLOAT SpawnOnTriggerPPS;  // 348 1 CPF_Edit
    class FRangeVector StartVelocityRange;  // 34C 1 CPF_Edit
    class FRange StartVelocityRadialRange;  // 364 1 CPF_Edit
    class FVector MaxAbsVelocity;  // 36C 1 CPF_Edit
    class FRangeVector VelocityLossRange;  // 378 1 CPF_Edit
    BITFIELD RotateVelocityLossRange : 1;  // 390 1 CPF_Edit
    INT AddVelocityFromOtherEmitter;  // 394 1 CPF_Edit
    class FRangeVector AddVelocityMultiplierRange;  // 398 1 CPF_Edit
    BYTE GetVelocityDirectionFrom;  // 3B0 1 CPF_Edit
    TArray<struct FParticleVelocityScale> VelocityScale;  // 3B4 400001 CPF_Edit CPF_NeedCtorLink
    FLOAT VelocityScaleRepeats;  // 3C0 1 CPF_Edit
    FLOAT WarmupTicksPerSecond;  // 3C4 1 CPF_Edit
    FLOAT RelativeWarmupTime;  // 3C8 1 CPF_Edit
    BYTE EnvironmentIndex;  // 3CC 1 CPF_Edit
    FLOAT DensityMultiplier;  // 3D0 2000 CPF_Transient
    FLOAT SizeMultiplier;  // 3D4 2000 CPF_Transient
    FLOAT VelocityMultiplier;  // 3D8 2000 CPF_Transient
    BYTE HueModifier;  // 3DC 2000 CPF_Transient
    FLOAT SaturationMultiplier;  // 3E0 2000 CPF_Transient
    FLOAT BrightnessMultiplier;  // 3E4 2000 CPF_Transient
    FLOAT OpacityMultiplier;  // 3E8 2000 CPF_Transient
    class FRange StoredMassRange;  // 3EC 2002000 CPF_Transient CPF_EditorData
    class FRangeVector StoredVelocityRange;  // 3F4 2002000 CPF_Transient CPF_EditorData
    class FVector StoredMaxAbsVelocity;  // 40C 2002000 CPF_Transient CPF_EditorData
    FLOAT StoredParticlesPerSecond;  // 418 2002000 CPF_Transient CPF_EditorData
    FLOAT StoredInitialParticlesPerSecond;  // 41C 2002000 CPF_Transient CPF_EditorData
    class FRangeVector StoredSizeRange;  // 420 2002000 CPF_Transient CPF_EditorData
    class FRange StoredLifetimeRange;  // 438 2002000 CPF_Transient CPF_EditorData
    INT StoredMaxParticles;  // 440 2002000 CPF_Transient CPF_EditorData
    INT StoredMaxActiveParticles;  // 444 2002000 CPF_Transient CPF_EditorData
    class FRangeVector StoredColorMultiplier;  // 448 2002000 CPF_Transient CPF_EditorData
    FLOAT StoredOpacity;  // 460 2002000 CPF_Transient CPF_EditorData
    class AEmitter* Owner;  // 464 2000 CPF_Transient
    BITFIELD Initialized : 1;  // 468 2000 CPF_Transient
    BITFIELD Inactive : 1;  // 468 2000 CPF_Transient
    BITFIELD RealDisableFogging : 1;  // 468 2000 CPF_Transient
    BITFIELD AllParticlesDead : 1;  // 468 2000 CPF_Transient
    BITFIELD WarmedUp : 1;  // 468 2000 CPF_Transient
    FLOAT InactiveTime;  // 46C 2000 CPF_Transient
    TArray<struct FParticle> Particles;  // 470 402000 CPF_Transient CPF_NeedCtorLink
    INT ParticleIndex;  // 47C 2002000 CPF_Transient CPF_EditorData
    INT ActiveParticles;  // 480 2002000 CPF_Transient CPF_EditorData
    FLOAT PPSFraction;  // 484 2002000 CPF_Transient CPF_EditorData
    class FBox BoundingBox;  // 488 2000 CPF_Transient
    class FVector RealExtentMultiplier;  // 4A4 2000 CPF_Transient
    INT OtherIndex;  // 4B0 2000 CPF_Transient
    FLOAT InitialDelay;  // 4B4 2000 CPF_Transient
    class FVector GlobalOffset;  // 4B8 2000 CPF_Transient
    FLOAT TimeTillReset;  // 4C4 2000 CPF_Transient
    INT PS2Data;  // 4C8 2000 CPF_Transient
    INT MaxActiveParticles;  // 4CC 2000 CPF_Transient
    INT CurrentCollisionSoundIndex;  // 4D0 2000 CPF_Transient
    INT CurrentSpawningSoundIndex;  // 4D4 2000 CPF_Transient
    INT CurrentMeshSpawningIndex;  // 4D8 2000 CPF_Transient
    FLOAT MaxSizeScale;  // 4DC 2000 CPF_Transient
    INT KillPending;  // 4E0 2000 CPF_Transient
    INT DeferredParticles;  // 4E4 2000 CPF_Transient
    class FVector RealMeshNormal;  // 4E8 2000 CPF_Transient
    TArray<class FVector> MeshVertsAndNormals;  // 4F4 402000 CPF_Transient CPF_NeedCtorLink
    INT CurrentSpawnOnTrigger;  // 500 2000 CPF_Transient
    INT RenderableParticles;  // 504 2000 CPF_Transient
    class FRangeVector RealVelocityLossRange;  // 508 2000 CPF_Transient
    virtual ~UParticleEmitter(void);
    virtual void PostLoad(void);
    virtual void Destroy(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Initialize(int);
    virtual void CleanUp(void);
    virtual void Reset(void);
    virtual void Scale(float);
    virtual void RenderScale(float);
    virtual void HandleActorForce(class AActor *,float);
    virtual float SpawnParticles(float,float,float);
    virtual void SpawnParticle(int,float,int,int,class FVector const &);
    virtual void PreUpdateParticles(void);
    virtual int UpdateParticles(float);
    virtual void PostUpdateParticles(void);
    virtual void UpdateParticle(float,int);
    virtual int RenderParticles(class FDynamicActor *,class FLevelSceneNode *,class TList<class FDynamicLight *> *,class FRenderInterface *);
    virtual void ApplyEnvironment(void);
    virtual void RestoreEnvironment(void);
    UParticleEmitter(class UParticleEmitter const &);
    UParticleEmitter(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UParticleEmitter & operator=(class UParticleEmitter const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void execReset(struct FFrame &,void * const);
    void execScaleFactor(struct FFrame &,void * const);
    void execSpawnParticle(struct FFrame &,void * const);
    void execTrigger(struct FFrame &,void * const);
    void execUnTrigger(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(UParticleEmitter,0,execReset)
AUTOGENERATE_FUNCTION(UParticleEmitter,0,execScaleFactor)
AUTOGENERATE_FUNCTION(UParticleEmitter,0,execSpawnParticle)
AUTOGENERATE_FUNCTION(UParticleEmitter,0,execTrigger)
AUTOGENERATE_FUNCTION(UParticleEmitter,0,execUnTrigger)


//------------------------------------------------------------------------------
//  TrailEmitter
//------------------------------------------------------------------------------

enum ETrailLocation {
  PTTL_AttachedToParticle = 0,
  PTTL_FollowEmitter = 1
};

enum ETrailShadeType {
  PTTST_None = 0,
  PTTST_RandomStatic = 1,
  PTTST_RandomDynamic = 2,
  PTTST_Linear = 3,
  PTTST_PointLife = 4
};

// FParticleTrailInfo 0 ( )
struct DLL_IMPORT FParticleTrailInfo {
  public:
    INT TrailIndex;  // 0 0
    INT NumPoints;  // 4 0
    class FVector LastLocation;  // 8 0
    class FVector LastEmitterLocation;  // 14 0
};

// FParticleTrailData 0 ( )
struct DLL_IMPORT FParticleTrailData {
  public:
    class FVector Location;  // 0 0
    class FColor Color;  // C 0
    FLOAT Size;  // 10 0
    INT DoubleDummy1;  // 14 0
    INT DoubleDummy2;  // 18 0
};

//  TrailEmitter.ResetTrail 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UTrailEmitter_execResetTrail_Parms {
};


// UTrailEmitter 1012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew )
class DLL_IMPORT UTrailEmitter : public UParticleEmitter {
  public:
    BYTE TrailShadeType;  // 520 2000001 CPF_Edit CPF_EditorData
    BYTE TrailLocation;  // 521 2000001 CPF_Edit CPF_EditorData
    INT MaxPointsPerTrail;  // 524 1 CPF_Edit
    FLOAT DistanceThreshold;  // 528 1 CPF_Edit
    BITFIELD UseCrossedSheets : 1;  // 52C 1 CPF_Edit
    INT MaxTrailTwistAngle;  // 530 1 CPF_Edit
    FLOAT PointLifeTime;  // 534 2000001 CPF_Edit CPF_EditorData
    TArray<struct FParticleTrailData> TrailData;  // 538 402000 CPF_Transient CPF_NeedCtorLink
    TArray<struct FParticleTrailInfo> TrailInfo;  // 544 402000 CPF_Transient CPF_NeedCtorLink
    class UVertexBuffer* VertexBuffer;  // 550 2000 CPF_Transient
    class UIndexBuffer* IndexBuffer;  // 554 2000 CPF_Transient
    INT VerticesPerParticle;  // 558 2000 CPF_Transient
    INT IndicesPerParticle;  // 55C 2000 CPF_Transient
    INT PrimitivesPerParticle;  // 560 2000 CPF_Transient
    virtual ~UTrailEmitter(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Initialize(int);
    virtual void CleanUp(void);
    virtual void SpawnParticle(int,float,int,int,class FVector const &);
    virtual int UpdateParticles(float);
    virtual void UpdateParticle(float,int);
    virtual int RenderParticles(class FDynamicActor *,class FLevelSceneNode *,class TList<class FDynamicLight *> *,class FRenderInterface *);
    virtual class FColor SetInitialPointColor(class FColor);
    UTrailEmitter(class UTrailEmitter const &);
    UTrailEmitter(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UTrailEmitter & operator=(class UTrailEmitter const &);
    static void CDECL InternalConstructor(void *);
    void ResetTrail(void);
    static class UClass * CDECL StaticClass(void);
    void execResetTrail(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(UTrailEmitter,0,execResetTrail)


//------------------------------------------------------------------------------
//  Cubemap
//------------------------------------------------------------------------------

// UCubemap 152 ( CLASS_Compiled CLASS_Parsed CLASS_SafeReplace CLASS_NoExport )
class DLL_IMPORT UCubemap : public UTexture {
  public:
    class UTexture* Faces[6];  // CC 1 CPF_Edit
    DWORD CubemapRenderInterface;  // E4 2000 CPF_Transient
    virtual ~UCubemap(void);
    virtual void Destroy(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FBaseTexture * GetRenderInterface(void);
    UCubemap(class UCubemap const &);
    UCubemap(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UCubemap & operator=(class UCubemap const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Palette
//------------------------------------------------------------------------------

// UPalette 112 ( CLASS_Compiled CLASS_Parsed CLASS_NoExport )
class DLL_IMPORT UPalette : public UObject {
  public:
    TArray<class FColor> Colors;  // 28 1002 CPF_Const CPF_Native
    virtual ~UPalette(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    UPalette(class UPalette const &);
    UPalette(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UPalette & operator=(class UPalette const &);
    unsigned char BestMatch(class FColor,int);
    void FixPalette(void);
    static void CDECL InternalConstructor(void *);
    class UPalette * ReplaceWithExisting(void);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  TerrainMaterial
//------------------------------------------------------------------------------

// FTerrainMaterialLayer 1 ( CLASS_Abstract )
struct DLL_IMPORT FTerrainMaterialLayer {
  public:
    class UMaterial* Texture;  // 0 0
    class UBitmapMaterial* AlphaWeight;  // 4 0
    class FMatrix TextureMatrix;  // 8 0
    FTerrainMaterialLayer(void);
    ~FTerrainMaterialLayer(void);
    struct FTerrainMaterialLayer & operator=(struct FTerrainMaterialLayer const &);
};

// UTerrainMaterial 2012 ( CLASS_Compiled CLASS_Parsed CLASS_CollapseCategories )
class DLL_IMPORT UTerrainMaterial : public URenderedMaterial {
  public:
    TArray<struct FTerrainMaterialLayer> Layers;  // 40 400002 CPF_Const CPF_NeedCtorLink
    BYTE RenderMethod;  // 4C 2 CPF_Const
    BITFIELD FirstPass : 1;  // 50 2 CPF_Const
    virtual ~UTerrainMaterial(void);
    virtual unsigned int GetCPPSize(void);
    virtual class UMaterial * CheckFallback(void);
    virtual int HasFallback(void);
    UTerrainMaterial(class UTerrainMaterial const &);
    UTerrainMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UTerrainMaterial & operator=(class UTerrainMaterial const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  TerrainInfo
//------------------------------------------------------------------------------

enum ESortOrder {
  SORT_NoSort = 0,
  SORT_BackToFront = 1,
  SORT_FrontToBack = 2
};

enum ETexMapAxis {
  TEXMAPAXIS_XY = 0,
  TEXMAPAXIS_XZ = 1,
  TEXMAPAXIS_YZ = 2
};

// FDecoInfo 0 ( )
struct DLL_IMPORT FDecoInfo {
  public:
    class FVector Location;  // 0 0
    class FRotator Rotation;  // C 0
    class FVector Scale;  // 18 0
    class FVector TempScale;  // 24 0
    class FColor Color;  // 30 0
    INT Distance;  // 34 0
};

// FDecoSectorInfo 0 ( )
struct DLL_IMPORT FDecoSectorInfo {
  public:
    TArray<struct FDecoInfo> DecoInfo;  // 0 400000 CPF_NeedCtorLink
    class FVector Location;  // C 0
    FLOAT Radius;  // 18 0
    INT VertexStreamNum;  // 1C 0
    INT NumPrimitives;  // 20 0
    FLOAT LastRenderTime;  // 24 0
    FLOAT CoordinateScale;  // 28 0
    BYTE VertexStreamOffsetLo;  // 2C 0
    BYTE VertexStreamOffsetHi;  // 2D 0
};

// FDecorationLayerData 0 ( )
struct DLL_IMPORT FDecorationLayerData {
  public:
    TArray<struct FDecoSectorInfo> DecoSectorInfos;  // 0 400000 CPF_NeedCtorLink
};

// FDecorationLayer 0 ( )
struct DLL_IMPORT FDecorationLayer {
  public:
    INT ShowOnTerrain;  // 0 1 CPF_Edit
    class UTexture* ScaleMap;  // 4 1 CPF_Edit
    class UTexture* DensityMap;  // 8 1 CPF_Edit
    class UTexture* ColorMap;  // C 1 CPF_Edit
    class UStaticMesh* StaticMesh;  // 10 1 CPF_Edit
    class FRangeVector ScaleMultiplier;  // 14 1 CPF_Edit
    class FRange FadeoutRadius;  // 2C 1 CPF_Edit
    class FRange FadeinRadius;  // 34 1 CPF_Edit
    class FRange DensityMultiplier;  // 3C 1 CPF_Edit
    INT MaxPerQuad;  // 44 1 CPF_Edit
    INT Seed;  // 48 1 CPF_Edit
    INT AlignToTerrain;  // 4C 1 CPF_Edit
    BYTE DrawOrder;  // 50 1 CPF_Edit
    INT ShowOnInvisibleTerrain;  // 54 1 CPF_Edit
    INT LitDirectional;  // 58 1 CPF_Edit
    INT DisregardTerrainLighting;  // 5C 1 CPF_Edit
    INT RandomYaw;  // 60 1 CPF_Edit
    BYTE DetailMode;  // 64 1 CPF_Edit
};

// FTerrainLayer 0 ( )
struct DLL_IMPORT FTerrainLayer {
  public:
    class UMaterial* Texture;  // 0 1 CPF_Edit
    class UTexture* AlphaMap;  // 4 1 CPF_Edit
    FLOAT UScale;  // 8 1 CPF_Edit
    FLOAT VScale;  // C 1 CPF_Edit
    FLOAT UPan;  // 10 1 CPF_Edit
    FLOAT VPan;  // 14 1 CPF_Edit
    BYTE TextureMapAxis;  // 18 1 CPF_Edit
    FLOAT TextureRotation;  // 1C 1 CPF_Edit
    class FRotator LayerRotation;  // 20 1 CPF_Edit
    class FMatrix TerrainMatrix;  // 2C 0
    FLOAT KFriction;  // 6C 1 CPF_Edit
    FLOAT KRestitution;  // 70 1 CPF_Edit
    class UTexture* LayerWeightMap;  // 74 2000 CPF_Transient
};

// FNormalPair 0 ( )
struct DLL_IMPORT FNormalPair {
  public:
    class FVector Normal1;  // 0 0
    class FVector Normal2;  // C 0
};

//  TerrainInfo.PokeTerrain 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct ATerrainInfo_execPokeTerrain_Parms {
  class FVector WorldLocation;  // 0 80 CPF_Parm
  INT Radius;  // C 80 CPF_Parm
  INT MaxDepth;  // 10 80 CPF_Parm
};


// ATerrainInfo 312 ( CLASS_Compiled CLASS_Parsed CLASS_NoExport CLASS_NoUserCreate )
class DLL_IMPORT ATerrainInfo : public AInfo {
  public:
    INT TerrainSectorSize;  // 420 1 CPF_Edit
    class UTexture* TerrainMap;  // 424 1 CPF_Edit
    class UTexture* VertexLightMap;  // 428 2000001 CPF_Edit CPF_EditorData
    class FVector TerrainScale;  // 42C 1 CPF_Edit
    struct FTerrainLayer Layers[32];  // 438 1 CPF_Edit
    TArray<struct FDecorationLayer> DecoLayers;  // 1338 400001 CPF_Edit CPF_NeedCtorLink
    FLOAT DecoLayerOffset;  // 1344 1 CPF_Edit
    BITFIELD Inverted : 1;  // 1348 1 CPF_Edit
    BITFIELD bKCollisionHalfRes : 1;  // 1348 1 CPF_Edit
    INT JustLoaded;  // 134C 2000 CPF_Transient
    TArray<struct FDecorationLayerData> DecoLayerData;  // 1350 1002 CPF_Const CPF_Native
    TArray<class UTerrainSector*> Sectors;  // 135C 1002 CPF_Const CPF_Native
    TArray<class FVector> Vertices;  // 1368 1002 CPF_Const CPF_Native
    INT HeightmapX;  // 1374 1002 CPF_Const CPF_Native
    INT HeightmapY;  // 1378 1002 CPF_Const CPF_Native
    INT SectorsX;  // 137C 1002 CPF_Const CPF_Native
    INT SectorsY;  // 1380 1002 CPF_Const CPF_Native
    class UTerrainPrimitive* Primitive;  // 1384 1002 CPF_Const CPF_Native
    TArray<struct FNormalPair> FaceNormals;  // 1388 1002 CPF_Const CPF_Native
    class FVector ToWorld[4];  // 1394 1002 CPF_Const CPF_Native
    class FVector ToHeightmap[4];  // 13C4 1002 CPF_Const CPF_Native
    TArray<INT> SelectedVertices;  // 13F4 1002 CPF_Const CPF_Native
    INT ShowGrid;  // 1400 1002 CPF_Const CPF_Native
    TArray<INT> QuadVisibilityBitmap;  // 1404 400002 CPF_Const CPF_NeedCtorLink
    TArray<INT> EdgeTurnBitmap;  // 1410 400002 CPF_Const CPF_NeedCtorLink
    TArray<class UMaterial*> QuadDomMaterialBitmap;  // 141C 400002 CPF_Const CPF_NeedCtorLink
    TArray<INT> RenderCombinations;  // 1428 1002 CPF_Const CPF_Native
    TArray<INT> VertexStreams;  // 1434 1002 CPF_Const CPF_Native
    TArray<INT> DecoVertexStreams;  // 1440 1002 CPF_Const CPF_Native
    TArray<class FColor> VertexColors;  // 144C 1002 CPF_Const CPF_Native
    TArray<class FColor> PaintedColor;  // 1458 2001002 CPF_Const CPF_Native CPF_EditorData
    class UTexture* CollapsedLayers;  // 1464 1002 CPF_Const CPF_Native
    DWORD SectorProjectorsPtr;  // 1468 3002 CPF_Const CPF_Native CPF_Transient
    class UTexture* OldTerrainMap;  // 146C 1002 CPF_Const CPF_Native
    TArray<BYTE> OldHeightmap;  // 1470 1002 CPF_Const CPF_Native
    virtual ~ATerrainInfo(void);
    virtual void PostLoad(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual class UPrimitive * GetPrimitive(void);
    virtual void CheckForErrors(void);
    ATerrainInfo(class ATerrainInfo const &);
    ATerrainInfo(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ATerrainInfo & operator=(class ATerrainInfo const &);
    void CalcCoords(void);
    void CalcLayerTexCoords(void);
    void CheckComputeDataOnLoad(void);
    void CombineLayerWeights(void);
    void ConvertHeightmapFormat(void);
    void GatherDynamicProjectors(class FLevelSceneNode *,struct FProjectorRenderInfo * *,int);
    int GetClosestVertex(class FVector &,class FVector *,int *,int *);
    int GetEdgeTurnBitmap(int,int);
    int GetGlobalVertex(int,int);
    unsigned short GetHeightmap(int,int);
    unsigned char GetLayerAlpha(int,int,int,class UTexture *);
    class UMaterial * GetQuadDomMaterialBitmap(int,int);
    int GetQuadVisibilityBitmap(int,int);
    int GetRenderCombinationNum(class TArray<int> &,enum ETerrainRenderMethod);
    class FBox GetSelectedVerticesBounds(void);
    class FColor GetTextureColor(int,int,class UTexture *);
    class FVector GetVertexNormal(int,int);
    class FVector HeightmapToWorld(class FVector);
    static void CDECL InternalConstructor(void *);
    int LineCheck(struct FCheckResult &,class FVector const &,class FVector const &,class FVector const &,unsigned long,int);
    int LineCheckWithQuad(int,int,struct FCheckResult &,class FVector const &,class FVector const &,class FVector const &,unsigned long,int);
    void MoveVertices(float);
    int PointCheck(struct FCheckResult &,class FVector const &,class FVector const &,int);
    void PrecomputeLayerWeights(void);
    void Render(class FLevelSceneNode *,class FRenderInterface *,class FVisibilityInterface *,class FDynamicLight * *,int,struct FProjectorRenderInfo * *,int);
    void RenderDecorations(class FLevelSceneNode *,class FRenderInterface *,class FVisibilityInterface *);
    void ResetMove(void);
    int SelectVertex(class FVector);
    int SelectVertexX(int,int);
    void SelectVerticesInBox(class FBox &);
    void SetEdgeTurnBitmap(int,int,int);
    void SetHeightmap(int,int,unsigned short);
    void SetLayerAlpha(float,float,int,unsigned char,class UTexture *);
    void SetQuadVisibilityBitmap(int,int,int);
    void SetTextureColor(int,int,class UTexture *,class FColor &);
    void SetupSectors(void);
    void SmoothColors(void);
    void SoftDeselect(void);
    void SoftSelect(float,float);
    static class UClass * CDECL StaticClass(void);
    void Update(float,int,int,int,int,int);
    void UpdateDecorations(int);
    void UpdateFromSelectedVertices(void);
    void UpdateTriangles(int,int,int,int,int,int);
    void UpdateVertices(float,int,int,int,int);
    class FVector WorldToHeightmap(class FVector);
    void execPokeTerrain(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(ATerrainInfo,0,execPokeTerrain)


//------------------------------------------------------------------------------
//  TerrainPrimitive
//------------------------------------------------------------------------------

// UTerrainPrimitive 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UTerrainPrimitive : public UPrimitive {
  public:
    char Unknown0[4];
    virtual ~UTerrainPrimitive(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual int PointCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,unsigned long);
    virtual int LineCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,class FVector const &,unsigned long,unsigned long);
    virtual void PreIlluminate(class AActor *,int,class FSBLightMapGenerator *);
    virtual void Illuminate(class AActor *,int,class FSBLightMapGenerator *);
    virtual void CleanLightmap(class AActor *);
    UTerrainPrimitive(class UTerrainPrimitive const &);
    UTerrainPrimitive(class ATerrainInfo *);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UTerrainPrimitive & operator=(class UTerrainPrimitive const &);
    class FBox GetRenderBoundingBox(class AActor const *,int);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    UTerrainPrimitive(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  TerrainSector
//------------------------------------------------------------------------------

// UTerrainSector 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UTerrainSector : public UObject {
  public:
    char Unknown0[164];
    virtual ~UTerrainSector(void);
    virtual void PostLoad(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    UTerrainSector(class UTerrainSector const &);
    UTerrainSector(class ATerrainInfo *,int,int,int,int);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UTerrainSector & operator=(class UTerrainSector const &);
    void AttachProjector(class AProjector *,struct FProjectorRenderInfo *,int,int,int,int);
    void CleanLightmap(void);
    void GenerateTriangles(int);
    class FBox const & GetBBox(void)const ;
    int GetGlobalVertex(int,int);
    class FStaticSBLightMapTexture & GetLightmap(void)const ;
    int GetLocalVertex(int,int);
    static void CDECL InternalConstructor(void *);
    int IsLightmapValid(void)const ;
    int IsSectorAll(int,unsigned char);
    int IsTriangleAll(int,int,int,int,int,unsigned char);
    int PassShouldRenderTriangle(int,int,int,int,int);
    static class UClass * CDECL StaticClass(void);
    void StaticLight(int,class FSBLightMapGenerator *);
  protected:
    UTerrainSector(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  StaticMeshActor
//------------------------------------------------------------------------------

// AStaticMeshActor 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT AStaticMeshActor : public AActor {
  public:
    BITFIELD bExactProjectileCollision : 1;  // 420 2000001 CPF_Edit CPF_EditorData
    BITFIELD bIgnoreSimpleCollision : 1;  // 420 1 CPF_Edit
    virtual ~AStaticMeshActor(void);
    virtual unsigned int GetCPPSize(void);
    AStaticMeshActor(class AStaticMeshActor const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AStaticMeshActor & operator=(class AStaticMeshActor const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    AStaticMeshActor(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  StaticMeshInstance
//------------------------------------------------------------------------------

// UStaticMeshInstance 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UStaticMeshInstance : public UObject {
  public:
    char Unknown0[52];
    virtual ~UStaticMeshInstance(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    UStaticMeshInstance(class UStaticMeshInstance const &);
    UStaticMeshInstance(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UStaticMeshInstance & operator=(class UStaticMeshInstance const &);
    void CreateBatchedStreams(class AActor const *);
    static void CDECL InternalConstructor(void *);
    void SetBatchCache(int);
    void SetLightmapCache(int);
    static class UClass * CDECL StaticClass(void);
    int UpdateBatchCache(class URenderDevice *,int);
    int UpdateLightmapCache(class URenderDevice *,int);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  StaticMesh
//------------------------------------------------------------------------------

// UStaticMesh 2052 ( CLASS_Compiled CLASS_Parsed CLASS_SafeReplace CLASS_CollapseCategories )
class DLL_IMPORT UStaticMesh : public UPrimitive {
  public:
    char Unknown0[192];
    TArray<struct FStaticMeshMaterial> Materials;  // 114 400041 CPF_Edit CPF_ConstRef CPF_NeedCtorLink
    char Unknown1[4];
    BITFIELD AutoUnwrap : 1;  // 124 1 CPF_Edit
    char Unknown2[32];
    BITFIELD UseSimpleLineCollision : 1;  // 148 1 CPF_Edit
    BITFIELD UseSimpleBoxCollision : 1;  // 14C 1 CPF_Edit
    BITFIELD UseVertexColor : 1;  // 150 1 CPF_Edit
    BITFIELD UseSimpleKarmaCollision : 1;  // 154 1 CPF_Edit
    char Unknown3[64];
    virtual ~UStaticMesh(void);
    virtual void PostLoad(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    virtual void PostEditChange(void);
    virtual void Rename(unsigned short const *,class UObject *);
    virtual unsigned int GetCPPSize(void);
    virtual void ValidateObject(class TArray<struct UObject::FValidateIssue> &,bool);
    virtual int PointCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,unsigned long);
    virtual int LineCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,class FVector const &,unsigned long,unsigned long);
    virtual class FBox GetRenderBoundingBox(class AActor const *);
    virtual class FSphere GetRenderBoundingSphere(class AActor const *);
    virtual class FBox GetCollisionBoundingBox(class AActor const *)const ;
    virtual int UseCylinderCollision(class AActor const *);
    virtual void Illuminate(class AActor *,int,class FSBLightMapGenerator *);
    virtual void CleanLightmap(class AActor *);
    virtual class FVector GetEncroachExtent(class AActor *);
    virtual class FVector GetEncroachCenter(class AActor *);
    virtual void CheckForErrors(void);
    UStaticMesh(class UStaticMesh const &);
    UStaticMesh(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UStaticMesh & operator=(class UStaticMesh const &);
    void Build(int,class FVector *);
    unsigned long CreateAuthenticationKey(int);
    class UMaterial * GetSkin(class AActor const *,int)const ;
    static void CDECL InternalConstructor(void *);
    int NeededRebuild(void);
    int RequiresAlphaStream(class AActor const *)const ;
    int RequiresSorting(class AActor const *)const ;
    static class UClass * CDECL StaticClass(void);
    void StaticConstructor(void);
    int UseEmissiveMaterials(class AActor const *)const ;
    int UseMaskedMaterials(class AActor const *)const ;
    int UseSortingMaterials(class AActor const *)const ;
    int UseTransparentMaterials(class AActor const *)const ;
    int ValidateAuthenticationKey(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SpriteEmitter
//------------------------------------------------------------------------------

enum EParticleDirectionUsage {
  PTDU_None = 0,
  PTDU_Up = 1,
  PTDU_Right = 2,
  PTDU_Forward = 3,
  PTDU_Normal = 4,
  PTDU_UpAndNormal = 5,
  PTDU_RightAndNormal = 6,
  PTDU_Scale = 7
};

// USpriteEmitter 1012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew )
class DLL_IMPORT USpriteEmitter : public UParticleEmitter {
  public:
    BYTE UseDirectionAs;  // 520 1 CPF_Edit
    class FVector ProjectionNormal;  // 524 1 CPF_Edit
    class FVector RealProjectionNormal;  // 530 2000 CPF_Transient
    virtual ~USpriteEmitter(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Initialize(int);
    virtual void CleanUp(void);
    virtual int UpdateParticles(float);
    virtual int RenderParticles(class FDynamicActor *,class FLevelSceneNode *,class TList<class FDynamicLight *> *,class FRenderInterface *);
    virtual int FillVertexBuffer(class FSpriteParticleVertex *,class FLevelSceneNode *);
    USpriteEmitter(class USpriteEmitter const &);
    USpriteEmitter(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USpriteEmitter & operator=(class USpriteEmitter const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SparkEmitter
//------------------------------------------------------------------------------

// FParticleSparkData 0 ( )
struct DLL_IMPORT FParticleSparkData {
  public:
    FLOAT TimeBeforeVisible;  // 0 0
    FLOAT TimeBetweenSegments;  // 4 0
    class FVector StartLocation;  // 8 0
    class FVector StartVelocity;  // 14 0
};

// USparkEmitter 1012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew )
class DLL_IMPORT USparkEmitter : public UParticleEmitter {
  public:
    class FRange LineSegmentsRange;  // 520 1 CPF_Edit
    class FRange TimeBeforeVisibleRange;  // 528 1 CPF_Edit
    class FRange TimeBetweenSegmentsRange;  // 530 1 CPF_Edit
    TArray<struct FParticleSparkData> SparkData;  // 538 402000 CPF_Transient CPF_NeedCtorLink
    class UVertexBuffer* VertexBuffer;  // 544 2000 CPF_Transient
    class UIndexBuffer* IndexBuffer;  // 548 2000 CPF_Transient
    INT NumSegments;  // 54C 2000 CPF_Transient
    INT VerticesPerParticle;  // 550 2000 CPF_Transient
    INT IndicesPerParticle;  // 554 2000 CPF_Transient
    INT PrimitivesPerParticle;  // 558 2000 CPF_Transient
    virtual ~USparkEmitter(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Initialize(int);
    virtual void CleanUp(void);
    virtual void SpawnParticle(int,float,int,int,class FVector const &);
    virtual int UpdateParticles(float);
    virtual int RenderParticles(class FDynamicActor *,class FLevelSceneNode *,class TList<class FDynamicLight *> *,class FRenderInterface *);
    USparkEmitter(class USparkEmitter const &);
    USparkEmitter(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USparkEmitter & operator=(class USparkEmitter const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AnimNotify_SheatheWeapon
//------------------------------------------------------------------------------

// UAnimNotify_SheatheWeapon 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UAnimNotify_SheatheWeapon : public UAnimNotify {
  public:
    FName NotifyName;  // 30 1 CPF_Edit
    BYTE WeaponFlag;  // 34 1 CPF_Edit
    virtual ~UAnimNotify_SheatheWeapon(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Notify(class UMeshInstance *,class AActor *);
    UAnimNotify_SheatheWeapon(class UAnimNotify_SheatheWeapon const &);
    UAnimNotify_SheatheWeapon(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UAnimNotify_SheatheWeapon & operator=(class UAnimNotify_SheatheWeapon const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AnimNotify_DrawWeapon
//------------------------------------------------------------------------------

// UAnimNotify_DrawWeapon 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UAnimNotify_DrawWeapon : public UAnimNotify {
  public:
    FName NotifyName;  // 30 1 CPF_Edit
    BYTE WeaponFlag;  // 34 1 CPF_Edit
    virtual ~UAnimNotify_DrawWeapon(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Notify(class UMeshInstance *,class AActor *);
    UAnimNotify_DrawWeapon(class UAnimNotify_DrawWeapon const &);
    UAnimNotify_DrawWeapon(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UAnimNotify_DrawWeapon & operator=(class UAnimNotify_DrawWeapon const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AnimNotify_MatSubAction
//------------------------------------------------------------------------------

// UAnimNotify_MatSubAction 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UAnimNotify_MatSubAction : public UAnimNotify {
  public:
    class UMatSubAction* SubAction;  // 30 4000001 CPF_Edit CPF_EditInline
    virtual ~UAnimNotify_MatSubAction(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Notify(class UMeshInstance *,class AActor *);
    UAnimNotify_MatSubAction(class UAnimNotify_MatSubAction const &);
    UAnimNotify_MatSubAction(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UAnimNotify_MatSubAction & operator=(class UAnimNotify_MatSubAction const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AnimNotify_Scripted
//------------------------------------------------------------------------------

//  AnimNotify_Scripted.Notify 20800 0 ( FUNC_Event FUNC_Public )
struct UAnimNotify_Scripted_eventNotify_Parms {
  class AActor* Owner;  // 0 80 CPF_Parm
};


// UAnimNotify_Scripted 3013 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UAnimNotify_Scripted : public UAnimNotify {
  public:
    virtual ~UAnimNotify_Scripted(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Notify(class UMeshInstance *,class AActor *);
    UAnimNotify_Scripted(class UAnimNotify_Scripted const &);
    UAnimNotify_Scripted(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UAnimNotify_Scripted & operator=(class UAnimNotify_Scripted const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void eventNotify(class AActor *);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AnimNotify_Script
//------------------------------------------------------------------------------

// UAnimNotify_Script 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UAnimNotify_Script : public UAnimNotify {
  public:
    FName NotifyName;  // 30 1 CPF_Edit
    virtual ~UAnimNotify_Script(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Notify(class UMeshInstance *,class AActor *);
    UAnimNotify_Script(class UAnimNotify_Script const &);
    UAnimNotify_Script(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UAnimNotify_Script & operator=(class UAnimNotify_Script const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AnimNotify_LIPSinc
//------------------------------------------------------------------------------

// UAnimNotify_LIPSinc 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UAnimNotify_LIPSinc : public UAnimNotify {
  public:
    FName LIPSincAnimName;  // 30 1 CPF_Edit
    FLOAT Volume;  // 34 1 CPF_Edit
    INT Radius;  // 38 1 CPF_Edit
    FLOAT Pitch;  // 3C 1 CPF_Edit
    virtual ~UAnimNotify_LIPSinc(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Notify(class UMeshInstance *,class AActor *);
    UAnimNotify_LIPSinc(class UAnimNotify_LIPSinc const &);
    UAnimNotify_LIPSinc(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UAnimNotify_LIPSinc & operator=(class UAnimNotify_LIPSinc const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AnimNotify_Sound
//------------------------------------------------------------------------------

// UAnimNotify_Sound 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UAnimNotify_Sound : public UAnimNotify {
  public:
    class USound* Sound;  // 30 1 CPF_Edit
    FLOAT Volume;  // 34 1 CPF_Edit
    INT Radius;  // 38 1 CPF_Edit
    virtual ~UAnimNotify_Sound(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Notify(class UMeshInstance *,class AActor *);
    UAnimNotify_Sound(class UAnimNotify_Sound const &);
    UAnimNotify_Sound(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UAnimNotify_Sound & operator=(class UAnimNotify_Sound const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AnimNotify_DestroyEffect
//------------------------------------------------------------------------------

// UAnimNotify_DestroyEffect 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UAnimNotify_DestroyEffect : public UAnimNotify {
  public:
    FName DestroyTag;  // 30 1 CPF_Edit
    BITFIELD bExpireParticles : 1;  // 34 1 CPF_Edit
    virtual ~UAnimNotify_DestroyEffect(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Notify(class UMeshInstance *,class AActor *);
    UAnimNotify_DestroyEffect(class UAnimNotify_DestroyEffect const &);
    UAnimNotify_DestroyEffect(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UAnimNotify_DestroyEffect & operator=(class UAnimNotify_DestroyEffect const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AnimNotify_Effect
//------------------------------------------------------------------------------

// UAnimNotify_Effect 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UAnimNotify_Effect : public UAnimNotify {
  public:
    class UClass* EffectClass;  // 30 1 CPF_Edit
    FName Bone;  // 34 1 CPF_Edit
    class FVector OffsetLocation;  // 38 1 CPF_Edit
    class FRotator OffsetRotation;  // 44 1 CPF_Edit
    BITFIELD Attach : 1;  // 50 1 CPF_Edit
    FName Tag;  // 54 1 CPF_Edit
    FLOAT DrawScale;  // 58 1 CPF_Edit
    class FVector DrawScale3D;  // 5C 1 CPF_Edit
    class AActor* LastSpawnedEffect;  // 68 2002000 CPF_Transient CPF_EditorData
    virtual ~UAnimNotify_Effect(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Notify(class UMeshInstance *,class AActor *);
    UAnimNotify_Effect(class UAnimNotify_Effect const &);
    UAnimNotify_Effect(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UAnimNotify_Effect & operator=(class UAnimNotify_Effect const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SkeletalMeshInstance
//------------------------------------------------------------------------------

// USkeletalMeshInstance 1A ( CLASS_Compiled CLASS_Transient CLASS_Parsed )
class DLL_IMPORT USkeletalMeshInstance : public ULodMeshInstance {
  public:
    char Unknown0[688];
    virtual ~USkeletalMeshInstance(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual class FBox GetRenderBoundingBox(class AActor const *);
    virtual class FSphere GetRenderBoundingSphere(class AActor const *);
    virtual class USkeletalMeshInstance * GetUSkeletalMeshInstance(void);
    virtual void SetMesh(class UMesh *);
    virtual int UpdateAnimation(float);
    virtual int PlayAnim(int,class FName,float,float,int,int);
    virtual int GetAnimCount(void);
    virtual void * GetAnimIndexed(int);
    virtual void * GetAnimNamed(class FName);
    virtual class FName AnimGetName(void *);
    virtual class FName AnimGetGroup(void *);
    virtual int AnimIsInGroup(void *,class FName);
    virtual float AnimGetFrameCount(void *);
    virtual float AnimGetRate(void *);
    virtual int AnimGetNotifyCount(void *);
    virtual float AnimGetNotifyTime(void *,int);
    virtual unsigned short const * AnimGetNotifyText(void *,int);
    virtual class UAnimNotify * AnimGetNotifyObject(void *,int);
    virtual int IsAnimating(int);
    virtual int FreezeAnimAt(float,int);
    virtual int IsAnimTweening(int);
    virtual int IsAnimLooping(int);
    virtual int IsAnimPastLastFrame(int);
    virtual int AnimStopLooping(int);
    virtual class FName GetActiveAnimSequence(int);
    virtual float GetActiveAnimRate(int);
    virtual float GetActiveAnimFrame(int);
    virtual int SetBlendParams(int,float,float,float,class FName,int,int);
    virtual int SetBoneLocation(class FName,class FVector,float);
    virtual int SetBoneRotation(class FName,class FRotator,int,float);
    virtual int SetBoneScale(int,float,class FName);
    virtual int MatchRefBone(class FName);
    virtual void SetAnimFrame(int,float,int);
    virtual int AnimForcePose(class FName,float,float,int);
    virtual class UMaterial * GetMaterial(int,class AActor *);
    virtual void GetFrame(class AActor *,class FLevelSceneNode *,class FVector *,int,int &,unsigned long);
    virtual class FMatrix MeshToWorld(void);
    virtual void Render(class FDynamicActor *,class FLevelSceneNode *,class TList<class FDynamicLight *> *,class TList<struct FProjectorRenderInfo *> *,class FRenderInterface *);
    virtual void SetScale(class FVector);
    virtual void MeshBuildBounds(void);
    virtual void GetMeshVerts(class AActor *,class FVector *,int,int &);
    virtual void ActualizeAnimLinkups(void);
    virtual class UMeshAnimation * FindAnimObjectForSequence(class FName);
    virtual void ForceBoneRefresh(void);
    virtual class UMeshAnimation * CurrentSkelAnim(int);
    virtual void MeshSkinVertsCallback(void *);
    virtual int ActiveVertStreamSize(void);
    USkeletalMeshInstance(class USkeletalMeshInstance const &);
    USkeletalMeshInstance(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USkeletalMeshInstance & operator=(class USkeletalMeshInstance const &);
    void BlendToAlpha(int,float,float);
    void ClearSkelAnims(void);
    void CopyAnimation(int,int);
    int EnableChannelNotify(int,int);
    void FireImportantNotifies(struct MeshAnimChannel &);
    void ForceAnimRate(int,float);
    void ForceGetFrame(void);
    int GetAnimChannelCount(void);
    float GetAnimFrame(int);
    float GetAnimRateOnChannel(int);
    class FName GetAnimSequence(int);
    float GetBlendAlpha(int);
    class FCoords GetBoneCoords(unsigned long);
    class FRotator GetBoneRotation(unsigned long,int);
    class FRotator GetBoneRotation(class FName,int);
    int GetCurrentBakedAttachmentVertices(void);
    int GetCurrentDupVertCount(void);
    unsigned long * GetCurrentSkinningStream(void);
    class FRawIndexBuffer * GetCurrentSmoothIndexBuffer(void);
    struct FSkinPoint * GetCurrentSmoothVerts(void);
    int GetMeshJointsAndNormals(class AActor *,class TArray<class FVector> *,int);
    int GetMeshVertsAndNormals(class AActor *,class TArray<class FVector> *);
    int GetNextNotifyIndex(void *,float);
    int GetPreviousNotifyIndex(void *,float);
    class FVector GetRootLocation(void);
    class FVector GetRootLocationDelta(void);
    class FRotator GetRootRotation(void);
    class FRotator GetRootRotationDelta(void);
    class FCoords GetTagCoords(class FName);
    static void CDECL GetTrackRotPos(class MotionChunk const *,int,float,class FQuat &,class FVector &,class USkeletalMeshInstance *,int);
    static void CDECL InternalConstructor(void *);
    void InvalidateBakedSkinningStream(class AActor *);
    int IsSkinningStreamBaked(void)const ;
    int LockRootMotion(int);
    void PauseChannel(int);
    void RenderAttachments(class FDynamicActor *,class FLevelSceneNode *,class TList<class FDynamicLight *> *,class TList<struct FProjectorRenderInfo *> *,class FRenderInterface *);
    void ReverseAnimation(int,int);
    void SetAnimRate(int,float);
    void SetAnimSequence(int,class FName);
    void SetBlendAlpha(int,float);
    int SetBlendBoneWeights(int,class TArray<int> const &,class TArray<float> const &);
    int SetBlendParams(int,float,float,float,int,int);
    int SetBoneDirection(class FName,class FRotator,class FVector,float,int);
    void SetBoneGraphEntry(class USkeletalMesh &,struct MeshAnimChannel &,int);
    int SetSkelAnim(class UMeshAnimation *,class USkeletalMesh *);
    void SetupBlendBones(int,int,struct FMeshAnimSeq *);
    static void CDECL SetupChannelPose(class USkeletalMesh &,struct MeshAnimChannel *,class FCoords &,class TArray<class FQuat> &,class TArray<class FVector> &,class MotionChunk const *,struct MeshAnimLinkup *,float,class USkeletalMeshInstance *);
    static class UClass * CDECL StaticClass(void);
    int StopAnimating(int);
    void UnPauseChannel(int);
    void UpdateBlendAlpha(int,float,float);
    int UseBoneLods(void);
    int ValidateAnimChannel(int);
  protected:
    int AttachmentIsVisibleAtLODLevel(class ASBAttachment *,int);
    void BakeVertices(class FLevelSceneNode *,class AActor *,class USkeletalMesh *,enum USkeletalMeshInstance::EBakeMode);
    void DetermineCurrentLOD(class AActor *,class FLevelSceneNode *,class USkeletalMesh *,class FVector const &,int *);
    class AActor * GetAnimOwner(class AActor *);
    int PrepareRendering(class FDynamicActor *,class FLevelSceneNode *,class TList<class FDynamicLight *> *,class FRenderInterface *,class AActor *,class USkeletalMesh * *,int *,unsigned long *,class FMatrix *);
    enum EBakeMode USkeletalMeshInstance::UpdateBake(class FLevelSceneNode *,class FRenderInterface *,class AActor *,class USkeletalMesh *);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SkeletalMesh
//------------------------------------------------------------------------------

// USkeletalMesh 52 ( CLASS_Compiled CLASS_Parsed CLASS_SafeReplace )
class DLL_IMPORT USkeletalMesh : public ULodMesh {
  public:
    char Unknown0[704];
    virtual ~USkeletalMesh(void);
    virtual void PostLoad(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual int PointCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,unsigned long);
    virtual int LineCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,class FVector const &,unsigned long,unsigned long);
    virtual class FBox GetRenderBoundingBox(class AActor const *);
    virtual class FSphere GetRenderBoundingSphere(class AActor const *);
    virtual class FBox GetCollisionBoundingBox(class AActor const *)const ;
    virtual class UClass * MeshGetInstanceClass(void);
    virtual class USkeletalMesh * GetUSkeletalMesh(void);
    virtual float GetCollisionRadius(void);
    virtual float GetCollisionHeight(void);
    virtual unsigned long CreateAuthenticationKey(int);
    virtual int ValidateAuthenticationKey(void);
    virtual int MemFootprint(int);
    virtual int UseCylinderCollision(class AActor const *)const ;
    USkeletalMesh(class USkeletalMesh const &);
    USkeletalMesh(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USkeletalMesh & operator=(class USkeletalMesh const &);
    int BoneIsAncestorOf(int,int);
    float CalculateLODFactor(class AActor *,class FSceneNode *,class FVector const &,int);
    void CalculateNormals(class TArray<class FVector> &,int);
    int ConformSkeletonTo(class USkeletalMesh *,int);
    void ExtractRigidParts(int,int,int,int);
    struct FSkelBoneSphere * FindBoneCollisionSphere(class FName);
    void FlipFaces(void);
    void GenerateLodModel(int,float,float,int,int);
    int GetBoneLinkList(class FName const &,class FName const &,class TArray<int> &);
    int GetBoneLinkList(int,int,class TArray<int> &);
    void GetBoneOffspring(class FName const &,class TArray<int> &);
    void GetBoneOffspring(int,class TArray<int> &);
    struct FMeshSoundGroupParameters * GetSoundGroupParams(class FName);
    void InitGroupParameters(class FName,float &,float &,class FVector &,class AActor *);
    void InsertLodModel(int,class USkeletalMesh *,float,int);
    static void CDECL InternalConstructor(void *);
    int LODFootprint(int,int);
    int MatchRefBone(class FName);
    void NormalizeInfluences(int);
    void ReconstructRawMesh(void);
    int RenderPreProcess(void);
    int SetAttachAlias(class FName,class FName,class FCoords &);
    int SetAttachmentLocation(class AActor *,class AActor *);
    void SetBoneLODBetweenBones(class FName &,class FName &,int);
    void SetBoneLODBetweenBones(int,int,int);
    void SetRootBoneLod(class FName &,int,bool);
    void SetRootBoneLod(int,int,bool);
    static class UClass * CDECL StaticClass(void);
  private:
    void GetBoneOffspring_Recursive(int,int,class TArray<int> &);
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Animation
//------------------------------------------------------------------------------

// UAnimation 52 ( CLASS_Compiled CLASS_Parsed CLASS_SafeReplace )
class DLL_IMPORT UAnimation : public UObject {
  public:
    virtual ~UAnimation(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    UAnimation(class UAnimation const &);
    UAnimation(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UAnimation & operator=(class UAnimation const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  MeshAnimation
//------------------------------------------------------------------------------

// UMeshAnimation 52 ( CLASS_Compiled CLASS_Parsed CLASS_SafeReplace )
class DLL_IMPORT UMeshAnimation : public UObject {
  public:
    char Unknown0[44];
    virtual ~UMeshAnimation(void);
    virtual void PostLoad(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual struct FMeshAnimSeq * GetAnimSeq(class FName);
    virtual void InitForDigestion(void);
    virtual class MotionChunk * GetMovement(class FName);
    virtual int AdjustMovement(class FName,class FCoords);
    virtual void ConformBones(class UMeshAnimation *,class USkeletalMesh *);
    virtual int MemFootprint(void);
    virtual int SequenceMemFootprint(class FName);
    virtual int SortSequencesByName(void);
    virtual int MoveSequenceByIndex(int,int);
    UMeshAnimation(class UMeshAnimation const &);
    UMeshAnimation(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UMeshAnimation & operator=(class UMeshAnimation const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  ShrinkCommandlet
//------------------------------------------------------------------------------

// UShrinkCommandlet 3A ( CLASS_Compiled CLASS_Transient CLASS_Parsed CLASS_Localized )
class DLL_IMPORT UShrinkCommandlet : public UCommandlet {
  public:
    virtual ~UShrinkCommandlet(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Main(unsigned short const *);
    UShrinkCommandlet(class UShrinkCommandlet const &);
    UShrinkCommandlet(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UShrinkCommandlet & operator=(class UShrinkCommandlet const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void StaticConstructor(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Projector
//------------------------------------------------------------------------------

enum EProjectorBlending {
  PB_None = 0,
  PB_Modulate = 1,
  PB_AlphaBlend = 2,
  PB_Add = 3
};

//  Projector.UnTouch 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct AProjector_eventUnTouch_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Projector.Touch 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct AProjector_eventTouch_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Projector.PostBeginPlay 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct AProjector_eventPostBeginPlay_Parms {
};


//  Projector.SetEnabled 20002 0 ( FUNC_Defined FUNC_Public )
struct AProjector_execSetEnabled_Parms {
  BITFIELD IsEnabled : 1;  // 0 80 CPF_Parm
};


//  Projector.DetachActor 20400 0 ( FUNC_Native FUNC_Public )
struct AProjector_execDetachActor_Parms {
  class AActor* A;  // 0 80 CPF_Parm
};


//  Projector.AttachActor 20400 0 ( FUNC_Native FUNC_Public )
struct AProjector_execAttachActor_Parms {
  class AActor* A;  // 0 80 CPF_Parm
};


//  Projector.AbandonProjector 20400 0 ( FUNC_Native FUNC_Public )
struct AProjector_execAbandonProjector_Parms {
  FLOAT Lifetime;  // 0 90 CPF_OptionalParm CPF_Parm
};


//  Projector.DetachProjector 20400 0 ( FUNC_Native FUNC_Public )
struct AProjector_execDetachProjector_Parms {
  BITFIELD Force : 1;  // 0 90 CPF_OptionalParm CPF_Parm
};


//  Projector.AttachProjector 20400 0 ( FUNC_Native FUNC_Public )
struct AProjector_execAttachProjector_Parms {
  FLOAT FadeInTime;  // 0 90 CPF_OptionalParm CPF_Parm
};


// AProjector 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT AProjector : public AActor {
  public:
    BYTE MaterialBlendingOp;  // 420 2000001 CPF_Edit CPF_EditorData
    BYTE FrameBufferBlendingOp;  // 421 2000001 CPF_Edit CPF_EditorData
    class UMaterial* ProjTexture;  // 424 1 CPF_Edit
    INT FOV;  // 428 1 CPF_Edit
    INT MaxTraceDistance;  // 42C 1 CPF_Edit
    BITFIELD bProjectBSP : 1;  // 430 1 CPF_Edit
    BITFIELD bProjectTerrain : 1;  // 430 1 CPF_Edit
    BITFIELD bProjectStaticMesh : 1;  // 430 1 CPF_Edit
    BITFIELD bProjectParticles : 1;  // 430 1 CPF_Edit
    BITFIELD bProjectActor : 1;  // 430 1 CPF_Edit
    BITFIELD bLevelStatic : 1;  // 430 1 CPF_Edit
    BITFIELD bClipBSP : 1;  // 430 1 CPF_Edit
    BITFIELD bClipStaticMesh : 1;  // 430 1 CPF_Edit
    BITFIELD bProjectOnUnlit : 1;  // 430 1 CPF_Edit
    BITFIELD bGradient : 1;  // 430 1 CPF_Edit
    BITFIELD bProjectOnBackfaces : 1;  // 430 1 CPF_Edit
    BITFIELD bProjectOnAlpha : 1;  // 430 1 CPF_Edit
    BITFIELD bProjectOnParallelBSP : 1;  // 430 1 CPF_Edit
    FName ProjectTag;  // 434 1 CPF_Edit
    BITFIELD bDynamicAttach : 1;  // 438 1 CPF_Edit
    BITFIELD bNoProjectOnOwner : 1;  // 438 2000001 CPF_Edit CPF_EditorData
    BITFIELD bProjectOnHidden : 1;  // 438 1 CPF_Edit
    FLOAT FadeInTime;  // 43C 0
    BITFIELD bScaleWithTexture : 1;  // 440 2000001 CPF_Edit CPF_EditorData
    BITFIELD bIsEnabled : 1;  // 440 1 CPF_Edit
    FLOAT ExpireTime;  // 444 0
    class UTexture* GradientTexture;  // 448 0
    class FPlane FrustumPlanes[6];  // 44C 2002 CPF_Const CPF_Transient
    class FVector FrustumVertices[8];  // 4AC 2002 CPF_Const CPF_Transient
    class FBox Box;  // 50C 2002 CPF_Const CPF_Transient
    struct FProjectorRenderInfoPtr RenderInfo;  // 528 2002 CPF_Const CPF_Transient
    class FMatrix GradientMatrix;  // 52C 2000 CPF_Transient
    class FMatrix Matrix;  // 56C 2000 CPF_Transient
    class FVector OldLocation;  // 5AC 2000 CPF_Transient
    virtual ~AProjector(void);
    virtual void Destroy(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual void PostEditMove(void);
    virtual void PostEditLoad(void);
    virtual int ShouldTrace(class AActor *,unsigned long);
    virtual class UPrimitive * GetPrimitive(void);
    virtual void TickSpecial(float);
    virtual void RenderEditorSelected(class FLevelSceneNode *,class FRenderInterface *,class FDynamicActor *);
    virtual void Attach(float);
    virtual void Detach(int);
    virtual void Abandon(void);
    virtual void CalcMatrix(void);
    virtual void UpdateParticleMaterial(class UParticleMaterial *,int);
    AProjector(class AProjector const &);
    AProjector(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AProjector & operator=(class AProjector const &);
    static void CDECL InternalConstructor(void *);
    void RenderWireframe(class FRenderInterface *);
    static class UClass * CDECL StaticClass(void);
    void execAbandonProjector(struct FFrame &,void * const);
    void execAttachActor(struct FFrame &,void * const);
    void execAttachProjector(struct FFrame &,void * const);
    void execDetachActor(struct FFrame &,void * const);
    void execDetachProjector(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(AProjector,0,execAbandonProjector)
AUTOGENERATE_FUNCTION(AProjector,0,execAttachActor)
AUTOGENERATE_FUNCTION(AProjector,0,execAttachProjector)
AUTOGENERATE_FUNCTION(AProjector,0,execDetachActor)
AUTOGENERATE_FUNCTION(AProjector,0,execDetachProjector)


//------------------------------------------------------------------------------
//  ShadowProjector
//------------------------------------------------------------------------------

//  ShadowProjector.cl_OnTick 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct AShadowProjector_eventcl_OnTick_Parms {
  FLOAT delta;  // 0 80 CPF_Parm
};


//  ShadowProjector.UpdateShadow 20002 0 ( FUNC_Defined FUNC_Public )
struct AShadowProjector_execUpdateShadow_Parms {
};


//  ShadowProjector.InitShadow 20002 0 ( FUNC_Defined FUNC_Public )
struct AShadowProjector_execInitShadow_Parms {
};


//  ShadowProjector.Destroyed 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct AShadowProjector_eventDestroyed_Parms {
};


// AShadowProjector 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT AShadowProjector : public AProjector {
  public:
    class AActor* ShadowActor;  // 5B8 1 CPF_Edit
    class FVector LightDirection;  // 5BC 1 CPF_Edit
    FLOAT LightDistance;  // 5C8 1 CPF_Edit
    BITFIELD RootMotion : 1;  // 5CC 1 CPF_Edit
    BITFIELD bBlobShadow : 1;  // 5CC 1 CPF_Edit
    BITFIELD bShadowActive : 1;  // 5CC 1 CPF_Edit
    class UShadowBitmapMaterial* ShadowTexture;  // 5D0 0
    virtual ~AShadowProjector(void);
    virtual unsigned int GetCPPSize(void);
    AShadowProjector(class AShadowProjector const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AShadowProjector & operator=(class AShadowProjector const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    AShadowProjector(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  ShadowBitmapMaterial
//------------------------------------------------------------------------------

// UShadowBitmapMaterial 2012 ( CLASS_Compiled CLASS_Parsed CLASS_CollapseCategories )
class DLL_IMPORT UShadowBitmapMaterial : public UBitmapMaterial {
  public:
    DWORD TextureInterfaces[2];  // 58 2002 CPF_Const CPF_Transient
    class AActor* ShadowActor;  // 60 0
    class FVector LightDirection;  // 64 0
    FLOAT LightDistance;  // 70 0
    FLOAT LightFOV;  // 74 0
    BITFIELD Dirty : 1;  // 78 0
    BITFIELD Invalid : 1;  // 78 0
    BITFIELD bBlobShadow : 1;  // 78 0
    FLOAT CullDistance;  // 7C 0
    BYTE ShadowDarkness;  // 80 0
    class UBitmapMaterial* BlobShadow;  // 84 0
    virtual ~UShadowBitmapMaterial(void);
    virtual void Destroy(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FBaseTexture * GetRenderInterface(void);
    virtual class UBitmapMaterial * Get(double,class UViewport *);
    virtual float CalculateLODFactor(class UViewport *);
    virtual void AssignRenderTarget(float);
    UShadowBitmapMaterial(class UShadowBitmapMaterial const &);
    UShadowBitmapMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UShadowBitmapMaterial & operator=(class UShadowBitmapMaterial const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  ScriptedTexture
//------------------------------------------------------------------------------

//  ScriptedTexture.DrawPortal 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UScriptedTexture_execDrawPortal_Parms {
  INT X;  // 0 80 CPF_Parm
  INT Y;  // 4 80 CPF_Parm
  INT width;  // 8 80 CPF_Parm
  INT Height;  // C 80 CPF_Parm
  class AActor* CamActor;  // 10 80 CPF_Parm
  class FVector CamLocation;  // 14 80 CPF_Parm
  class FRotator CamRotation;  // 20 80 CPF_Parm
  INT FOV;  // 2C 90 CPF_OptionalParm CPF_Parm
  BITFIELD ClearZ : 1;  // 30 90 CPF_OptionalParm CPF_Parm
};


//  ScriptedTexture.DrawTile 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UScriptedTexture_execDrawTile_Parms {
  FLOAT X;  // 0 80 CPF_Parm
  FLOAT Y;  // 4 80 CPF_Parm
  FLOAT XL;  // 8 80 CPF_Parm
  FLOAT YL;  // C 80 CPF_Parm
  FLOAT U;  // 10 80 CPF_Parm
  FLOAT V;  // 14 80 CPF_Parm
  FLOAT UL;  // 18 80 CPF_Parm
  FLOAT VL;  // 1C 80 CPF_Parm
  class UMaterial* Material;  // 20 80 CPF_Parm
  class FColor Color;  // 24 80 CPF_Parm
};


//  ScriptedTexture.TextSize 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UScriptedTexture_execTextSize_Parms {
  class FString Text;  // 0 400880 CPF_Parm CPF_CoerceParm CPF_NeedCtorLink
  class UFont* Font;  // 8 80 CPF_Parm
  INT width;  // C 180 CPF_Parm CPF_OutParm
  INT Height;  // 10 180 CPF_Parm CPF_OutParm
};


//  ScriptedTexture.DrawText 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UScriptedTexture_execDrawText_Parms {
  INT StartX;  // 0 80 CPF_Parm
  INT StartY;  // 4 80 CPF_Parm
  class FString Text;  // 8 400880 CPF_Parm CPF_CoerceParm CPF_NeedCtorLink
  class UFont* Font;  // 10 80 CPF_Parm
  class FColor Color;  // 14 80 CPF_Parm
};


//  ScriptedTexture.SetSize 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UScriptedTexture_execSetSize_Parms {
  INT width;  // 0 80 CPF_Parm
  INT Height;  // 4 80 CPF_Parm
};


// UScriptedTexture 2012 ( CLASS_Compiled CLASS_Parsed CLASS_CollapseCategories )
class DLL_IMPORT UScriptedTexture : public UBitmapMaterial {
  public:
    DWORD RenderTarget;  // 58 2002 CPF_Const CPF_Transient
    class UViewport* RenderViewport;  // 5C 2002 CPF_Const CPF_Transient
    class AActor* Client;  // 60 0
    INT Revision;  // 64 2000 CPF_Transient
    INT OldRevision;  // 68 2002 CPF_Const CPF_Transient
    INT Invalid;  // 6C 2002 CPF_Const CPF_Transient
    virtual ~UScriptedTexture(void);
    virtual void Destroy(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FBaseTexture * GetRenderInterface(void);
    virtual class UBitmapMaterial * Get(double,class UViewport *);
    UScriptedTexture(class UScriptedTexture const &);
    UScriptedTexture(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UScriptedTexture & operator=(class UScriptedTexture const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void execDrawPortal(struct FFrame &,void * const);
    void execDrawText(struct FFrame &,void * const);
    void execDrawTile(struct FFrame &,void * const);
    void execSetSize(struct FFrame &,void * const);
    void execTextSize(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(UScriptedTexture,0,execDrawPortal)
AUTOGENERATE_FUNCTION(UScriptedTexture,0,execDrawText)
AUTOGENERATE_FUNCTION(UScriptedTexture,0,execDrawTile)
AUTOGENERATE_FUNCTION(UScriptedTexture,0,execSetSize)
AUTOGENERATE_FUNCTION(UScriptedTexture,0,execTextSize)


//------------------------------------------------------------------------------
//  LookTarget
//------------------------------------------------------------------------------

// ALookTarget 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT ALookTarget : public AKeypoint {
  public:
    virtual ~ALookTarget(void);
    virtual unsigned int GetCPPSize(void);
    ALookTarget(class ALookTarget const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ALookTarget & operator=(class ALookTarget const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    ALookTarget(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  MatObject
//------------------------------------------------------------------------------

// FOrientation 0 ( )
struct DLL_IMPORT FOrientation {
  public:
    BYTE CamOrientation;  // 0 1 CPF_Edit
    class AActor* LookAt;  // 4 1 CPF_Edit
    class AActor* DollyWith;  // 8 1 CPF_Edit
    FLOAT EaseIntime;  // C 1 CPF_Edit
    INT bReversePitch;  // 10 1 CPF_Edit
    INT bReverseYaw;  // 14 1 CPF_Edit
    INT bReverseRoll;  // 18 1 CPF_Edit
    DWORD MA;  // 1C 2000 CPF_Transient
    FLOAT PctInStart;  // 20 0
    FLOAT PctInEnd;  // 24 0
    FLOAT PctInDuration;  // 28 0
    class FRotator StartingRotation;  // 2C 0
    FOrientation(void);
    struct FOrientation & operator=(struct FOrientation);
    int operator!=(struct FOrientation const &)const ;
};

// UMatObject 13 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UMatObject : public UObject {
  public:
    virtual ~UMatObject(void);
    virtual unsigned int GetCPPSize(void);
    UMatObject(class UMatObject const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UMatObject & operator=(class UMatObject const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    UMatObject(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  MatSubAction
//------------------------------------------------------------------------------

enum ESAStatus {
  SASTATUS_Waiting = 0,
  SASTATUS_Running = 1,
  SASTATUS_Ending = 2,
  SASTATUS_Expired = 3
};

// UMatSubAction 1033 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_Localized CLASS_EditInlineNew )
class DLL_IMPORT UMatSubAction : public UMatObject {
  public:
    FLOAT Delay;  // 28 2000001 CPF_Edit CPF_EditorData
    FLOAT Duration;  // 2C 2000001 CPF_Edit CPF_EditorData
    class UTexture* Icon;  // 30 2000000 CPF_EditorData
    BYTE Status;  // 34 2000000 CPF_EditorData
    class FString Desc;  // 38 2408000 CPF_Localized CPF_NeedCtorLink CPF_EditorData
    FLOAT PctStarting;  // 40 2000 CPF_Transient
    FLOAT PctEnding;  // 44 2000 CPF_Transient
    FLOAT PctDuration;  // 48 2000 CPF_Transient
    virtual ~UMatSubAction(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Update(float,class ASceneManager *);
    virtual class FString GetStatString(void);
    virtual int IsRunning(void);
    UMatSubAction(class UMatSubAction const &);
    UMatSubAction(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UMatSubAction & operator=(class UMatSubAction const &);
    class FString GetStatusDesc(void);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SubActionSubTitle
//------------------------------------------------------------------------------

// USubActionSubTitle 1032 ( CLASS_Compiled CLASS_Parsed CLASS_Localized CLASS_EditInlineNew )
class DLL_IMPORT USubActionSubTitle : public UMatSubAction {
  public:
    BYTE SubTitleMode;  // 4C 1 CPF_Edit
    virtual ~USubActionSubTitle(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Update(float,class ASceneManager *);
    virtual class FString GetStatString(void);
    USubActionSubTitle(class USubActionSubTitle const &);
    USubActionSubTitle(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USubActionSubTitle & operator=(class USubActionSubTitle const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SubActionSceneSpeed
//------------------------------------------------------------------------------

// USubActionSceneSpeed 1032 ( CLASS_Compiled CLASS_Parsed CLASS_Localized CLASS_EditInlineNew )
class DLL_IMPORT USubActionSceneSpeed : public UMatSubAction {
  public:
    class FRange SceneSpeed;  // 4C 1 CPF_Edit
    virtual ~USubActionSceneSpeed(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Update(float,class ASceneManager *);
    virtual class FString GetStatString(void);
    USubActionSceneSpeed(class USubActionSceneSpeed const &);
    USubActionSceneSpeed(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USubActionSceneSpeed & operator=(class USubActionSceneSpeed const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SubActionGameSpeed
//------------------------------------------------------------------------------

// USubActionGameSpeed 1032 ( CLASS_Compiled CLASS_Parsed CLASS_Localized CLASS_EditInlineNew )
class DLL_IMPORT USubActionGameSpeed : public UMatSubAction {
  public:
    class FRange GameSpeed;  // 4C 1 CPF_Edit
    virtual ~USubActionGameSpeed(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Update(float,class ASceneManager *);
    virtual class FString GetStatString(void);
    USubActionGameSpeed(class USubActionGameSpeed const &);
    USubActionGameSpeed(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USubActionGameSpeed & operator=(class USubActionGameSpeed const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SubActionOrientation
//------------------------------------------------------------------------------

// USubActionOrientation 1032 ( CLASS_Compiled CLASS_Parsed CLASS_Localized CLASS_EditInlineNew )
class DLL_IMPORT USubActionOrientation : public UMatSubAction {
  public:
    struct FOrientation CamOrientation;  // 4C 1 CPF_Edit
    virtual ~USubActionOrientation(void);
    virtual void PostLoad(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Update(float,class ASceneManager *);
    virtual class FString GetStatString(void);
    virtual int IsRunning(void);
    USubActionOrientation(class USubActionOrientation const &);
    USubActionOrientation(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USubActionOrientation & operator=(class USubActionOrientation const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SubActionCameraShake
//------------------------------------------------------------------------------

// USubActionCameraShake 1032 ( CLASS_Compiled CLASS_Parsed CLASS_Localized CLASS_EditInlineNew )
class DLL_IMPORT USubActionCameraShake : public UMatSubAction {
  public:
    class FRangeVector Shake;  // 4C 1 CPF_Edit
    virtual ~USubActionCameraShake(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Update(float,class ASceneManager *);
    virtual class FString GetStatString(void);
    USubActionCameraShake(class USubActionCameraShake const &);
    USubActionCameraShake(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USubActionCameraShake & operator=(class USubActionCameraShake const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SubActionFOV
//------------------------------------------------------------------------------

// USubActionFOV 1032 ( CLASS_Compiled CLASS_Parsed CLASS_Localized CLASS_EditInlineNew )
class DLL_IMPORT USubActionFOV : public UMatSubAction {
  public:
    class FRange FOV;  // 4C 1 CPF_Edit
    virtual ~USubActionFOV(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Update(float,class ASceneManager *);
    virtual class FString GetStatString(void);
    USubActionFOV(class USubActionFOV const &);
    USubActionFOV(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USubActionFOV & operator=(class USubActionFOV const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SubActionTrigger
//------------------------------------------------------------------------------

// USubActionTrigger 1032 ( CLASS_Compiled CLASS_Parsed CLASS_Localized CLASS_EditInlineNew )
class DLL_IMPORT USubActionTrigger : public UMatSubAction {
  public:
    FName EventName;  // 4C 2000001 CPF_Edit CPF_EditorData
    virtual ~USubActionTrigger(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Update(float,class ASceneManager *);
    virtual class FString GetStatString(void);
    USubActionTrigger(class USubActionTrigger const &);
    USubActionTrigger(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USubActionTrigger & operator=(class USubActionTrigger const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SubActionFade
//------------------------------------------------------------------------------

// USubActionFade 1032 ( CLASS_Compiled CLASS_Parsed CLASS_Localized CLASS_EditInlineNew )
class DLL_IMPORT USubActionFade : public UMatSubAction {
  public:
    class FColor FadeColor;  // 4C 2000001 CPF_Edit CPF_EditorData
    BITFIELD bFadeOut : 1;  // 50 2000001 CPF_Edit CPF_EditorData
    virtual ~USubActionFade(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Update(float,class ASceneManager *);
    virtual class FString GetStatString(void);
    USubActionFade(class USubActionFade const &);
    USubActionFade(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USubActionFade & operator=(class USubActionFade const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  MatDemoActor
//------------------------------------------------------------------------------

// AMatDemoActor 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT AMatDemoActor : public AActor {
  public:
    virtual ~AMatDemoActor(void);
    virtual unsigned int GetCPPSize(void);
    AMatDemoActor(class AMatDemoActor const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AMatDemoActor & operator=(class AMatDemoActor const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    AMatDemoActor(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  MatAction
//------------------------------------------------------------------------------

// UMatAction 13 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UMatAction : public UMatObject {
  public:
    class AInterpolationPoint* IntPoint;  // 28 2000001 CPF_Edit CPF_EditorData
    class FString Comment;  // 2C 2400001 CPF_Edit CPF_NeedCtorLink CPF_EditorData
    FLOAT Duration;  // 34 2000001 CPF_Edit CPF_EditorData
    TArray<class UMatSubAction*> SubActions;  // 38 6400009 CPF_Edit CPF_ExportObject CPF_NeedCtorLink CPF_EditorData CPF_EditInline
    BITFIELD bSmoothCorner : 1;  // 44 2000001 CPF_Edit CPF_EditorData
    class FVector StartControlPoint;  // 48 2000001 CPF_Edit CPF_EditorData
    class FVector EndControlPoint;  // 54 2000001 CPF_Edit CPF_EditorData
    BITFIELD bConstantPathVelocity : 1;  // 60 1 CPF_Edit
    FLOAT PathVelocity;  // 64 1 CPF_Edit
    FLOAT PathLength;  // 68 0
    TArray<class FVector> SampleLocations;  // 6C 402000 CPF_Transient CPF_NeedCtorLink
    FLOAT PctStarting;  // 78 2000 CPF_Transient
    FLOAT PctEnding;  // 7C 2000 CPF_Transient
    FLOAT PctDuration;  // 80 2000 CPF_Transient
    virtual ~UMatAction(void);
    virtual void PostLoad(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    UMatAction(class UMatAction const &);
    UMatAction(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UMatAction & operator=(class UMatAction const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void StraightenBezierHandles(class ASceneManager *);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  ActionPause
//------------------------------------------------------------------------------

// UActionPause 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UActionPause : public UMatAction {
  public:
    virtual ~UActionPause(void);
    virtual unsigned int GetCPPSize(void);
    UActionPause(class UActionPause const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UActionPause & operator=(class UActionPause const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    UActionPause(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  ActionMoveCamera
//------------------------------------------------------------------------------

enum EPathStyle {
  PATHSTYLE_Linear = 0,
  PATHSTYLE_Bezier = 1
};

// UActionMoveCamera 16 ( CLASS_Compiled CLASS_Config CLASS_Parsed )
class DLL_IMPORT UActionMoveCamera : public UMatAction {
  public:
    BYTE PathStyle;  // 84 4001 CPF_Edit CPF_Config
    virtual ~UActionMoveCamera(void);
    virtual unsigned int GetCPPSize(void);
    UActionMoveCamera(class UActionMoveCamera const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UActionMoveCamera & operator=(class UActionMoveCamera const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    UActionMoveCamera(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  MeshObject
//------------------------------------------------------------------------------

enum EMeshSectionMethod {
  MSM_SmoothOnly = 0,
  MSM_RigidOnly = 1,
  MSM_Mixed = 2,
  MSM_SinglePiece = 3,
  MSM_ForcedRigid = 4
};

enum EImpLightMode {
  ILM_Unlit = 0,
  ILM_PseudoShaded = 1,
  ILM_Uniform = 2
};

enum EImpDrawMode {
  IDM_Normal = 0,
  IDM_Fading = 1
};

enum EImpSpaceMode {
  ISM_Sprite = 0,
  ISM_Fixed = 1,
  ISM_PivotVertical = 2,
  ISM_PivotHorizontal = 3
};

// UMeshObject 13 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UMeshObject : public UObject {
  public:
    virtual ~UMeshObject(void);
    virtual unsigned int GetCPPSize(void);
    UMeshObject(class UMeshObject const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UMeshObject & operator=(class UMeshObject const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    UMeshObject(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SceneManager
//------------------------------------------------------------------------------

enum EAffect {
  AFFECT_ViewportCamera = 0,
  AFFECT_Actor = 1
};

// FInterpolator 0 ( )
struct DLL_IMPORT FInterpolator {
  public:
    INT bDone;  // 0 1 CPF_Edit
    FLOAT _value;  // 4 1 CPF_Edit
    FLOAT _remainingTime;  // 8 1 CPF_Edit
    FLOAT _totalTime;  // C 1 CPF_Edit
    FLOAT _speed;  // 10 1 CPF_Edit
    FLOAT _acceleration;  // 14 1 CPF_Edit
};

// FOrientation 0 ( )
struct DLL_IMPORT FOrientation {
  public:
    BYTE CamOrientation;  // 0 1 CPF_Edit
    class AActor* LookAt;  // 4 1 CPF_Edit
    class AActor* DollyWith;  // 8 1 CPF_Edit
    FLOAT EaseIntime;  // C 1 CPF_Edit
    INT bReversePitch;  // 10 1 CPF_Edit
    INT bReverseYaw;  // 14 1 CPF_Edit
    INT bReverseRoll;  // 18 1 CPF_Edit
    DWORD MA;  // 1C 2000 CPF_Transient
    FLOAT PctInStart;  // 20 0
    FLOAT PctInEnd;  // 24 0
    FLOAT PctInDuration;  // 28 0
    class FRotator StartingRotation;  // 2C 0
};

//  SceneManager.cl_OnTick 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ASceneManager_eventcl_OnTick_Parms {
  FLOAT delta;  // 0 80 CPF_Parm
};


//  SceneManager.SceneEnded 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ASceneManager_eventSceneEnded_Parms {
};


//  SceneManager.SceneStarted 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ASceneManager_eventSceneStarted_Parms {
};


//  SceneManager.Trigger 20002 0 ( FUNC_Defined FUNC_Public )
struct ASceneManager_execTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


//  SceneManager.Destroyed 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct ASceneManager_eventDestroyed_Parms {
};


//  SceneManager.BeginPlay 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct ASceneManager_execBeginPlay_Parms {
};


//  SceneManager.SceneStart 20002 0 ( FUNC_Defined FUNC_Public )
struct ASceneManager_execSceneStart_Parms {
};


//  SceneManager.TickScene 20400 0 ( FUNC_Native FUNC_Public )
struct ASceneManager_execTickScene_Parms {
  FLOAT delta;  // 0 80 CPF_Parm
};


//  SceneManager.AbortScene 20400 0 ( FUNC_Native FUNC_Public )
struct ASceneManager_execAbortScene_Parms {
};


//  SceneManager.GetTotalSceneTime 20400 0 ( FUNC_Native FUNC_Public )
struct ASceneManager_execGetTotalSceneTime_Parms {
  FLOAT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


// ASceneManager 216 ( CLASS_Compiled CLASS_Config CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT ASceneManager : public AInfo {
  public:
    TArray<class UMatAction*> Actions;  // 420 4400009 CPF_Edit CPF_ExportObject CPF_NeedCtorLink CPF_EditInline
    BYTE Affect;  // 42C 4001 CPF_Edit CPF_Config
    class AActor* AffectedActor;  // 430 2000001 CPF_Edit CPF_EditorData
    BITFIELD bLooping : 1;  // 434 2000001 CPF_Edit CPF_EditorData
    BITFIELD bCinematicView : 1;  // 434 2000001 CPF_Edit CPF_EditorData
    FName PlayerScriptTag;  // 438 2000001 CPF_Edit CPF_EditorData
    FName NextSceneTag;  // 43C 2000001 CPF_Edit CPF_EditorData
    FName EventStart;  // 440 2000001 CPF_Edit CPF_EditorData
    FName EventEnd;  // 444 2000001 CPF_Edit CPF_EditorData
    BITFIELD bHideHUD : 1;  // 448 2000001 CPF_Edit CPF_EditorData
    FLOAT PctSceneComplete;  // 44C 2002000 CPF_Transient CPF_EditorData
    class UMatAction* CurrentAction;  // 450 2002000 CPF_Transient CPF_EditorData
    FLOAT SceneSpeed;  // 454 2000 CPF_Transient
    FLOAT TotalSceneTime;  // 458 2002000 CPF_Transient CPF_EditorData
    class AActor* Viewer;  // 45C 2002000 CPF_Transient CPF_EditorData
    class APawn* OldPawn;  // 460 2002000 CPF_Transient CPF_EditorData
    BITFIELD bIsRunning : 1;  // 464 2002000 CPF_Transient CPF_EditorData
    BITFIELD bIsSceneStarted : 1;  // 464 2002000 CPF_Transient CPF_EditorData
    FLOAT CurrentTime;  // 468 2002000 CPF_Transient CPF_EditorData
    TArray<class FVector> SampleLocations;  // 46C 2402000 CPF_Transient CPF_NeedCtorLink CPF_EditorData
    TArray<class UMatSubAction*> SubActions;  // 478 2402000 CPF_Transient CPF_NeedCtorLink CPF_EditorData
    struct FOrientation CamOrientation;  // 484 2002000 CPF_Transient CPF_EditorData
    struct FOrientation PrevOrientation;  // 4BC 2002000 CPF_Transient CPF_EditorData
    struct FInterpolator RotInterpolator;  // 4F4 2002000 CPF_Transient CPF_EditorData
    class FVector CameraShake;  // 50C 2002000 CPF_Transient CPF_EditorData
    class FVector DollyOffset;  // 518 2002000 CPF_Transient CPF_EditorData
    BITFIELD bAbortCinematic : 1;  // 524 2000 CPF_Transient
    FLOAT OffsetStartFactor;  // 528 0
    virtual ~ASceneManager(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Tick(float,enum ELevelTick);
    virtual void PostBeginPlay(void);
    virtual void CheckForErrors(void);
    ASceneManager(class ASceneManager const &);
    ASceneManager(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ASceneManager & operator=(class ASceneManager const &);
    void ChangeOrientation(struct FOrientation);
    void CleanupPreviewActors(void);
    void DeletePathSamples(void);
    class UMatAction * GetActionFromPct(float);
    float GetActionPctFromScenePct(float);
    class FVector GetLocation(class TArray<class FVector> *,float);
    class FRotator GetRotation(class TArray<class FVector> *,float,class FVector,class FRotator,class UMatAction *,int);
    float GetTotalSceneTime(void);
    void InitializePreviewActors(void);
    static void CDECL InternalConstructor(void *);
    void PreparePath(void);
    void RefreshSubActions(float);
    void SceneEnded(void);
    void SceneStarted(void);
    void SetCurrentTime(float);
    void SetSceneStartTime(void);
    static class UClass * CDECL StaticClass(void);
    void StraightenBezierHandles(void);
    void UpdatePreviewActors(float);
    void UpdateViewerFromPct(float);
    void eventSceneEnded(void);
    void eventSceneStarted(void);
    void execAbortScene(struct FFrame &,void * const);
    void execGetTotalSceneTime(struct FFrame &,void * const);
    void execTickScene(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(ASceneManager,0,execAbortScene)
AUTOGENERATE_FUNCTION(ASceneManager,0,execGetTotalSceneTime)
AUTOGENERATE_FUNCTION(ASceneManager,0,execTickScene)


//------------------------------------------------------------------------------
//  RibbonEmitter
//------------------------------------------------------------------------------

enum EGetPointAxis {
  PAXIS_OwnerX = 0,
  PAXIS_OwnerY = 1,
  PAXIS_OwnerZ = 2,
  PAXIS_BoneNormal = 3,
  PAXIS_StartBoneDirection = 4,
  PAXIS_AxisNormal = 5
};

// FRibbonPoint 1 ( CLASS_Abstract )
struct DLL_IMPORT FRibbonPoint {
  public:
    class FVector Location;  // 0 1 CPF_Edit
    class FVector AxisNormal;  // C 1 CPF_Edit
    FLOAT width;  // 18 1 CPF_Edit
    FRibbonPoint(void);
    struct FRibbonPoint & operator=(struct FRibbonPoint const &);
};

// URibbonEmitter 1012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew )
class DLL_IMPORT URibbonEmitter : public UParticleEmitter {
  public:
    FLOAT SampleRate;  // 520 1 CPF_Edit
    FLOAT DecayRate;  // 524 1 CPF_Edit
    INT NumPoints;  // 528 1 CPF_Edit
    FLOAT RibbonWidth;  // 52C 1 CPF_Edit
    BYTE GetPointAxisFrom;  // 530 1 CPF_Edit
    class FVector AxisNormal;  // 534 2000001 CPF_Edit CPF_EditorData
    FLOAT MinSampleDist;  // 540 1 CPF_Edit
    FLOAT MinSampleDot;  // 544 1 CPF_Edit
    FLOAT PointOriginOffset;  // 548 1 CPF_Edit
    FLOAT RibbonTextureUScale;  // 54C 1 CPF_Edit
    FLOAT RibbonTextureVScale;  // 550 1 CPF_Edit
    INT NumSheets;  // 554 2000001 CPF_Edit CPF_EditorData
    TArray<FLOAT> SheetScale;  // 558 400001 CPF_Edit CPF_NeedCtorLink
    class FVector StartBoneOffset;  // 564 1 CPF_Edit
    class FVector EndBoneOffset;  // 570 1 CPF_Edit
    FName BoneNameStart;  // 57C 1 CPF_Edit
    FName BoneNameEnd;  // 580 1 CPF_Edit
    TArray<struct FRibbonPoint> RibbonPoints;  // 584 400001 CPF_Edit CPF_NeedCtorLink
    BITFIELD bSamplePoints : 1;  // 590 1 CPF_Edit
    BITFIELD bDecayPoints : 1;  // 590 1 CPF_Edit
    BITFIELD bDecayPointsWhenStopped : 1;  // 590 1 CPF_Edit
    BITFIELD bSyncDecayWhenKilled : 1;  // 590 1 CPF_Edit
    BITFIELD bLengthBasedTextureU : 1;  // 590 1 CPF_Edit
    BITFIELD bUseSheetScale : 1;  // 590 1 CPF_Edit
    BITFIELD bUseBones : 1;  // 590 1 CPF_Edit
    BITFIELD bUseBoneDistance : 1;  // 590 2000001 CPF_Edit CPF_EditorData
    FLOAT SampleTimer;  // 594 2002000 CPF_Transient CPF_EditorData
    FLOAT DecayTimer;  // 598 2000 CPF_Transient
    FLOAT RealSampleRate;  // 59C 2000 CPF_Transient
    FLOAT RealDecayRate;  // 5A0 2000 CPF_Transient
    INT SheetsUsed;  // 5A4 2000 CPF_Transient
    struct FRibbonPoint LastSampledPoint;  // 5A8 2000 CPF_Transient
    BITFIELD bKilled : 1;  // 5C4 2002000 CPF_Transient CPF_EditorData
    BITFIELD bDecaying : 1;  // 5C4 2000 CPF_Transient
    virtual ~URibbonEmitter(void);
    virtual void PostLoad(void);
    virtual void Destroy(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Initialize(int);
    virtual void CleanUp(void);
    virtual void Scale(float);
    virtual void RenderScale(float);
    virtual void SpawnParticle(int,float,int,int,class FVector const &);
    virtual int UpdateParticles(float);
    virtual int RenderParticles(class FDynamicActor *,class FLevelSceneNode *,class TList<class FDynamicLight *> *,class FRenderInterface *);
    virtual void GetNewRibbonPoint(class FVector *,class FVector *,float *);
    virtual float GetGlobalScale(float);
    virtual float GetPointScale(float,int);
    URibbonEmitter(class URibbonEmitter const &);
    URibbonEmitter(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class URibbonEmitter & operator=(class URibbonEmitter const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  RenderResource
//------------------------------------------------------------------------------

// URenderResource 13 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT URenderResource : public UObject {
  public:
    char Unknown0[4];
    virtual ~URenderResource(void);
    virtual void Serialize(class FArchive &);
    URenderResource(class URenderResource const &);
    URenderResource(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class URenderResource & operator=(class URenderResource const &);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SkinVertexBuffer
//------------------------------------------------------------------------------

// USkinVertexBuffer 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT USkinVertexBuffer : public URenderResource {
  public:
    char Unknown0[12];
    virtual ~USkinVertexBuffer(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    USkinVertexBuffer(class USkinVertexBuffer const &);
    USkinVertexBuffer(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USkinVertexBuffer & operator=(class USkinVertexBuffer const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  IndexBuffer
//------------------------------------------------------------------------------

// UIndexBuffer 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UIndexBuffer : public URenderResource {
  public:
    char Unknown0[12];
    virtual ~UIndexBuffer(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    UIndexBuffer(class UIndexBuffer const &);
    UIndexBuffer(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UIndexBuffer & operator=(class UIndexBuffer const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  VertexStreamBase
//------------------------------------------------------------------------------

// UVertexStreamBase 13 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UVertexStreamBase : public URenderResource {
  public:
    char Unknown0[12];
    virtual ~UVertexStreamBase(void);
    virtual void Serialize(class FArchive &);
    UVertexStreamBase(class UVertexStreamBase const &);
    UVertexStreamBase(int,unsigned long,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UVertexStreamBase & operator=(class UVertexStreamBase const &);
    void SetPolyFlags(unsigned long);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  VertexBuffer
//------------------------------------------------------------------------------

// UVertexBuffer 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UVertexBuffer : public UVertexStreamBase {
  public:
    char Unknown0[12];
    virtual ~UVertexBuffer(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual void * GetData(void);
    virtual int GetDataSize(void);
    UVertexBuffer(class UVertexBuffer const &);
    UVertexBuffer(unsigned long);
    UVertexBuffer(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UVertexBuffer & operator=(class UVertexBuffer const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  VertexStreamPosNormTex
//------------------------------------------------------------------------------

// UVertexStreamPosNormTex 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UVertexStreamPosNormTex : public UVertexStreamBase {
  public:
    char Unknown0[12];
    virtual ~UVertexStreamPosNormTex(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual void * GetData(void);
    virtual int GetDataSize(void);
    UVertexStreamPosNormTex(class UVertexStreamPosNormTex const &);
    UVertexStreamPosNormTex(unsigned long);
    UVertexStreamPosNormTex(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UVertexStreamPosNormTex & operator=(class UVertexStreamPosNormTex const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  VertexStreamUV
//------------------------------------------------------------------------------

// UVertexStreamUV 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UVertexStreamUV : public UVertexStreamBase {
  public:
    char Unknown0[12];
    virtual ~UVertexStreamUV(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual void * GetData(void);
    virtual int GetDataSize(void);
    UVertexStreamUV(class UVertexStreamUV const &);
    UVertexStreamUV(unsigned long);
    UVertexStreamUV(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UVertexStreamUV & operator=(class UVertexStreamUV const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  VertexStreamCOLOR
//------------------------------------------------------------------------------

// UVertexStreamCOLOR 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UVertexStreamCOLOR : public UVertexStreamBase {
  public:
    char Unknown0[12];
    virtual ~UVertexStreamCOLOR(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual void * GetData(void);
    virtual int GetDataSize(void);
    UVertexStreamCOLOR(class UVertexStreamCOLOR const &);
    UVertexStreamCOLOR(unsigned long);
    UVertexStreamCOLOR(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UVertexStreamCOLOR & operator=(class UVertexStreamCOLOR const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  VertexStreamVECTOR
//------------------------------------------------------------------------------

// UVertexStreamVECTOR 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UVertexStreamVECTOR : public UVertexStreamBase {
  public:
    char Unknown0[12];
    virtual ~UVertexStreamVECTOR(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual void * GetData(void);
    virtual int GetDataSize(void);
    UVertexStreamVECTOR(class UVertexStreamVECTOR const &);
    UVertexStreamVECTOR(unsigned long);
    UVertexStreamVECTOR(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UVertexStreamVECTOR & operator=(class UVertexStreamVECTOR const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  ProjectorMaterial
//------------------------------------------------------------------------------

// UProjectorMaterial 2012 ( CLASS_Compiled CLASS_Parsed CLASS_CollapseCategories )
class DLL_IMPORT UProjectorMaterial : public URenderedMaterial {
  public:
    class UBitmapMaterial* Gradient;  // 40 2002 CPF_Const CPF_Transient
    class UMaterial* Projected;  // 44 2002 CPF_Const CPF_Transient
    class UMaterial* BaseMaterial;  // 48 2002 CPF_Const CPF_Transient
    BYTE BaseMaterialBlending;  // 4C 2002 CPF_Const CPF_Transient
    BYTE FrameBufferBlending;  // 4D 2002 CPF_Const CPF_Transient
    class FMatrix Matrix;  // 50 2002 CPF_Const CPF_Transient
    class FMatrix GradientMatrix;  // 90 2002 CPF_Const CPF_Transient
    BITFIELD bProjected : 1;  // D0 2002 CPF_Const CPF_Transient
    BITFIELD bProjectOnUnlit : 1;  // D0 2002 CPF_Const CPF_Transient
    BITFIELD bGradient : 1;  // D0 2002 CPF_Const CPF_Transient
    BITFIELD bProjectOnAlpha : 1;  // D0 2002 CPF_Const CPF_Transient
    BITFIELD bProjectOnBackfaces : 1;  // D0 2002 CPF_Const CPF_Transient
    BITFIELD bStaticProjector : 1;  // D0 2002 CPF_Const CPF_Transient
    BITFIELD bTwoSided : 1;  // D0 2002 CPF_Const CPF_Transient
    virtual ~UProjectorMaterial(void);
    virtual unsigned int GetCPPSize(void);
    UProjectorMaterial(class UProjectorMaterial const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UProjectorMaterial & operator=(class UProjectorMaterial const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    UProjectorMaterial(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  ProjectorPrimitive
//------------------------------------------------------------------------------

// UProjectorPrimitive 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UProjectorPrimitive : public UPrimitive {
  public:
    virtual ~UProjectorPrimitive(void);
    virtual void Destroy(void);
    virtual unsigned int GetCPPSize(void);
    virtual int PointCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,unsigned long);
    virtual int LineCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,class FVector const &,unsigned long,unsigned long);
    virtual class FBox GetCollisionBoundingBox(class AActor const *)const ;
    virtual int UseCylinderCollision(class AActor const *);
    virtual class FVector GetEncroachExtent(class AActor *);
    virtual class FVector GetEncroachCenter(class AActor *);
    UProjectorPrimitive(class UProjectorPrimitive const &);
    UProjectorPrimitive(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UProjectorPrimitive & operator=(class UProjectorPrimitive const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  PlayInfo
//------------------------------------------------------------------------------

enum EPlayInfoType {
  PIT_Check = 0,
  PIT_Select = 1,
  PIT_Text = 2,
  PIT_Custom = 3
};

// FPlayInfoData 9 ( CLASS_Abstract CLASS_Transient )
struct DLL_IMPORT FPlayInfoData {
  public:
    class UProperty* ThisProp;  // 0 2 CPF_Const
    class UClass* ClassFrom;  // 4 2 CPF_Const
    class FString SettingName;  // 8 400002 CPF_Const CPF_NeedCtorLink
    class FString DisplayName;  // 10 400002 CPF_Const CPF_NeedCtorLink
    class FString Description;  // 18 400002 CPF_Const CPF_NeedCtorLink
    class FString Grouping;  // 20 400002 CPF_Const CPF_NeedCtorLink
    class FString Data;  // 28 400002 CPF_Const CPF_NeedCtorLink
    class FString ExtraPriv;  // 30 400002 CPF_Const CPF_NeedCtorLink
    class FString Value;  // 38 400002 CPF_Const CPF_NeedCtorLink
    BYTE RenderType;  // 40 2 CPF_Const
    BYTE SecLevel;  // 41 2 CPF_Const
    BYTE Weight;  // 42 2 CPF_Const
    BITFIELD bMPOnly : 1;  // 44 2 CPF_Const
    BITFIELD bAdvanced : 1;  // 44 2 CPF_Const
    BITFIELD bGlobal : 1;  // 44 2 CPF_Const
    BITFIELD bStruct : 1;  // 44 2 CPF_Const
    INT ArrayDim;  // 48 2 CPF_Const
    FPlayInfoData(struct FPlayInfoData const &);
    FPlayInfoData(void);
    ~FPlayInfoData(void);
    struct FPlayInfoData & operator=(struct FPlayInfoData const &);
};

//  PlayInfo.SplitStringToArray 20003 0 ( FUNC_Final FUNC_Defined FUNC_Public )
struct UPlayInfo_execSplitStringToArray_Parms {
  TArray<class FString> Parts;  // 0 400180 CPF_Parm CPF_OutParm CPF_NeedCtorLink
  class FString Source;  // C 400080 CPF_Parm CPF_NeedCtorLink
  class FString Delim;  // 14 400080 CPF_Parm CPF_NeedCtorLink
};


//  PlayInfo.GetGameInfo 20003 0 ( FUNC_Final FUNC_Defined FUNC_Public )
struct UPlayInfo_execGetGameInfo_Parms {
  class UClass* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayInfo.Init 20003 0 ( FUNC_Final FUNC_Defined FUNC_Public )
struct UPlayInfo_execInit_Parms {
  TArray<class UClass*> Classes;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD bStrict : 1;  // C 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayInfo.Dump 20003 0 ( FUNC_Final FUNC_Defined FUNC_Public )
struct UPlayInfo_execDump_Parms {
  class FString Group;  // 0 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
};


//  PlayInfo.Sort 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UPlayInfo_execSort_Parms {
  BYTE SortingMethod;  // 0 80 CPF_Parm
};


//  PlayInfo.FindIndex 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UPlayInfo_execFindIndex_Parms {
  class FString SettingName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  INT ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayInfo.GetSettings 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UPlayInfo_execGetSettings_Parms {
  class FString GroupName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  TArray<struct FPlayInfoData> GroupSettings;  // 8 400180 CPF_Parm CPF_OutParm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 14 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayInfo.StoreSetting 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UPlayInfo_execStoreSetting_Parms {
  INT Index;  // 0 80 CPF_Parm
  class FString NewVal;  // 4 400880 CPF_Parm CPF_CoerceParm CPF_NeedCtorLink
  class FString RangeData;  // C 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 14 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayInfo.SaveSettings 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UPlayInfo_execSaveSettings_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayInfo.AddSetting 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UPlayInfo_execAddSetting_Parms {
  class FString Group;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString PropertyName;  // 8 400080 CPF_Parm CPF_NeedCtorLink
  class FString Description;  // 10 400080 CPF_Parm CPF_NeedCtorLink
  BYTE SecLevel;  // 18 80 CPF_Parm
  BYTE Weight;  // 19 80 CPF_Parm
  class FString RenderType;  // 1C 400080 CPF_Parm CPF_NeedCtorLink
  class FString Extras;  // 24 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
  class FString ExtraPrivs;  // 2C 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
  BITFIELD bMultiPlayerOnly : 1;  // 34 90 CPF_OptionalParm CPF_Parm
  BITFIELD bAdvanced : 1;  // 38 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 3C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayInfo.PopClass 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UPlayInfo_execPopClass_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayInfo.RemoveClass 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UPlayInfo_execRemoveClass_Parms {
  class UClass* RemovingClass;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayInfo.AddClass 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UPlayInfo_execAddClass_Parms {
  class UClass* AddingClass;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayInfo.Clear 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UPlayInfo_execClear_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


// UPlayInfo 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UPlayInfo : public UObject {
  public:
    TArray<struct FPlayInfoData> Settings;  // 28 400002 CPF_Const CPF_NeedCtorLink
    TArray<class UClass*> InfoClasses;  // 34 400002 CPF_Const CPF_NeedCtorLink
    TArray<INT> ClassStack;  // 40 400002 CPF_Const CPF_NeedCtorLink
    TArray<class FString> Groups;  // 4C 400002 CPF_Const CPF_NeedCtorLink
    class FString LastError;  // 58 400002 CPF_Const CPF_NeedCtorLink
    virtual ~UPlayInfo(void);
    virtual unsigned int GetCPPSize(void);
    UPlayInfo(class UPlayInfo const &);
    UPlayInfo(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UPlayInfo & operator=(class UPlayInfo const &);
    static void CDECL InternalConstructor(void *);
    int NeedsValidation(class UProperty const *)const ;
    void ReturnFilteredSettings(class TArray<struct FPlayInfoData> &,class FString const &);
    static class UClass * CDECL StaticClass(void);
    int ValidateRange(class UProperty const *,class FString &,class FString &)const ;
    void execAddClass(struct FFrame &,void * const);
    void execAddSetting(struct FFrame &,void * const);
    void execClear(struct FFrame &,void * const);
    void execFindIndex(struct FFrame &,void * const);
    void execGetSettings(struct FFrame &,void * const);
    void execPopClass(struct FFrame &,void * const);
    void execRemoveClass(struct FFrame &,void * const);
    void execSaveSettings(struct FFrame &,void * const);
    void execSort(struct FFrame &,void * const);
    void execStoreSetting(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(UPlayInfo,0,execAddClass)
AUTOGENERATE_FUNCTION(UPlayInfo,0,execAddSetting)
AUTOGENERATE_FUNCTION(UPlayInfo,0,execClear)
AUTOGENERATE_FUNCTION(UPlayInfo,0,execFindIndex)
AUTOGENERATE_FUNCTION(UPlayInfo,0,execGetSettings)
AUTOGENERATE_FUNCTION(UPlayInfo,0,execPopClass)
AUTOGENERATE_FUNCTION(UPlayInfo,0,execRemoveClass)
AUTOGENERATE_FUNCTION(UPlayInfo,0,execSaveSettings)
AUTOGENERATE_FUNCTION(UPlayInfo,0,execSort)
AUTOGENERATE_FUNCTION(UPlayInfo,0,execStoreSetting)


//------------------------------------------------------------------------------
//  ParticleMaterial
//------------------------------------------------------------------------------

// FParticleProjectorInfo 0 ( )
struct DLL_IMPORT FParticleProjectorInfo {
  public:
    class UBitmapMaterial* BitmapMaterial;  // 0 0
    class FMatrix Matrix;  // 4 0
    INT Projected;  // 44 0
    INT BlendMode;  // 48 0
};

// UParticleMaterial 2012 ( CLASS_Compiled CLASS_Parsed CLASS_CollapseCategories )
class DLL_IMPORT UParticleMaterial : public URenderedMaterial {
  public:
    INT ParticleBlending;  // 40 2 CPF_Const
    INT BlendBetweenSubdivisions;  // 44 2 CPF_Const
    INT RenderTwoSided;  // 48 2 CPF_Const
    INT UseTFactor;  // 4C 2 CPF_Const
    class UBitmapMaterial* BitmapMaterial;  // 50 2 CPF_Const
    INT AlphaTest;  // 54 2 CPF_Const
    INT AlphaRef;  // 58 2 CPF_Const
    INT ZTest;  // 5C 2 CPF_Const
    INT ZWrite;  // 60 2 CPF_Const
    INT Wireframe;  // 64 2 CPF_Const
    BITFIELD AcceptsProjectors : 1;  // 68 2000 CPF_Transient
    INT NumProjectors;  // 6C 2002 CPF_Const CPF_Transient
    struct FParticleProjectorInfo Projectors[8];  // 70 2002 CPF_Const CPF_Transient
    virtual ~UParticleMaterial(void);
    virtual unsigned int GetCPPSize(void);
    UParticleMaterial(class UParticleMaterial const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UParticleMaterial & operator=(class UParticleMaterial const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    UParticleMaterial(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Emitter
//------------------------------------------------------------------------------

//  Emitter.Reset 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AEmitter_execReset_Parms {
};


//  Emitter.SpawnParticle 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct AEmitter_eventSpawnParticle_Parms {
  INT Amount;  // 0 80 CPF_Parm
};


//  Emitter.UnTrigger 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct AEmitter_eventUnTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


//  Emitter.Trigger 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct AEmitter_eventTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


//  Emitter.UpdatePrecacheMaterials 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AEmitter_execUpdatePrecacheMaterials_Parms {
};


//  Emitter.RenderScaleFactor 20400 0 ( FUNC_Native FUNC_Public )
struct AEmitter_execRenderScaleFactor_Parms {
  FLOAT aScale;  // 0 80 CPF_Parm
};


//  Emitter.ScaleFactor 20002 0 ( FUNC_Defined FUNC_Public )
struct AEmitter_execScaleFactor_Parms {
  FLOAT aScale;  // 0 80 CPF_Parm
};


//  Emitter.Kill 20400 0 ( FUNC_Native FUNC_Public )
struct AEmitter_execKill_Parms {
  FLOAT aDuration;  // 0 90 CPF_OptionalParm CPF_Parm
};


// AEmitter 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT AEmitter : public AActor {
  public:
    TArray<class UParticleEmitter*> Emitters;  // 420 4400009 CPF_Edit CPF_ExportObject CPF_NeedCtorLink CPF_EditInline
    class FRangeVector GlobalOffsetRange;  // 42C 1 CPF_Edit
    class FRange TimeTillResetRange;  // 444 1 CPF_Edit
    BITFIELD AutoDestroy : 1;  // 44C 1 CPF_Edit
    BITFIELD AutoReset : 1;  // 44C 1 CPF_Edit
    BITFIELD DisableFogging : 1;  // 44C 1 CPF_Edit
    FLOAT LocalDrawScale;  // 450 2000001 CPF_Edit CPF_EditorData
    BITFIELD AddEffectScaleFromBase : 1;  // 454 2000001 CPF_Edit CPF_EditorData
    class FVector OldLocation;  // 458 2002000 CPF_Transient CPF_EditorData
    class FVector GlobalOffset;  // 464 2000 CPF_Transient
    class FVector AbsoluteVelocity;  // 470 2000 CPF_Transient
    INT Initialized;  // 47C 2000 CPF_Transient
    class FBox BoundingBox;  // 480 2000 CPF_Transient
    FLOAT EmitterRadius;  // 49C 2000 CPF_Transient
    FLOAT EmitterHeight;  // 4A0 2000 CPF_Transient
    FLOAT TimeTillReset;  // 4A4 2000 CPF_Transient
    BITFIELD UseParticleProjectors : 1;  // 4A8 2000 CPF_Transient
    BITFIELD DeleteParticleEmitters : 1;  // 4A8 2000 CPF_Transient
    BITFIELD ActorForcesEnabled : 1;  // 4A8 2000 CPF_Transient
    class UParticleMaterial* ParticleMaterial;  // 4AC 2000 CPF_Transient
    FLOAT KillDuration;  // 4B0 2002000 CPF_Transient CPF_EditorData
    FLOAT KillTimer;  // 4B4 2002000 CPF_Transient CPF_EditorData
    virtual ~AEmitter(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Tick(float,enum ELevelTick);
    virtual void Spawned(void);
    virtual void PostScriptDestroyed(void);
    virtual void RenderEditorInfo(class FLevelSceneNode *,class FRenderInterface *,class FDynamicActor *);
    virtual void Initialize(void);
    virtual int CheckForProjectors(void);
    virtual void Kill(float);
    AEmitter(class AEmitter const &);
    AEmitter(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AEmitter & operator=(class AEmitter const &);
    float GetTotalLocalDrawScale(void);
    static void CDECL InternalConstructor(void *);
    void Render(class FDynamicActor *,class FLevelSceneNode *,class TList<class FDynamicLight *> *,class FRenderInterface *);
    static class UClass * CDECL StaticClass(void);
    void eventSpawnParticle(int);
    void execKill(struct FFrame &,void * const);
    void execRenderScaleFactor(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(AEmitter,0,execKill)
AUTOGENERATE_FUNCTION(AEmitter,0,execRenderScaleFactor)


//------------------------------------------------------------------------------
//  Model
//------------------------------------------------------------------------------

// UModel 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UModel : public UPrimitive {
  public:
    char Unknown0[1736];
    virtual ~UModel(void);
    virtual void PostLoad(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    virtual void Rename(unsigned short const *,class UObject *);
    virtual unsigned int GetCPPSize(void);
    virtual int PointCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,unsigned long);
    virtual int LineCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,class FVector const &,unsigned long,unsigned long);
    virtual class FBox GetRenderBoundingBox(class AActor const *);
    virtual class FBox GetCollisionBoundingBox(class AActor const *)const ;
    virtual int UseCylinderCollision(class AActor const *);
    virtual void Illuminate(class AActor *,int,class FSBLightMapGenerator *);
    virtual class FVector GetEncroachExtent(class AActor *);
    virtual class FVector GetEncroachCenter(class AActor *);
    UModel(class UModel const &);
    UModel(class ABrush *,int);
    UModel(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UModel & operator=(class UModel const &);
    void AttachProjector(int,struct FProjectorRenderInfo *,class FPlane *);
    class TArray<int> BoxLeaves(class FBox);
    void BuildBound(void);
    void BuildRenderData(void);
    void CleanupDestroyed(void);
    void ClearRenderData(class URenderDevice *);
    void CompressLightmaps(void);
    int ConvexVolumeMultiCheck(class FBox &,class FPlane *,int,class FVector,class TArray<int> &);
    void EmptyModel(int,int);
    unsigned char FastLineCheck(class FVector const &,class FVector const &);
    float FindNearestVertex(class FVector const &,class FVector &,float,int &)const ;
    static void CDECL InternalConstructor(void *);
    void Modify(int);
    void ModifyAllSurfs(int);
    void ModifySelectedSurfs(int);
    void ModifySurf(int,int);
    struct FPointRegion PointRegion(class AZoneInfo *,class FVector)const ;
    int PotentiallyVisible(int,int);
    void PrecomputeSphereFilter(class FPlane const &);
    void Render(class FDynamicActor *,class FLevelSceneNode *,class FRenderInterface *);
    void ShrinkModel(void);
    static class UClass * CDECL StaticClass(void);
    void Transform(class ABrush *);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  MeshEmitter
//------------------------------------------------------------------------------

// UMeshEmitter 1012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew )
class DLL_IMPORT UMeshEmitter : public UParticleEmitter {
  public:
    class UStaticMesh* StaticMesh;  // 520 1 CPF_Edit
    BITFIELD UseMeshBlendMode : 1;  // 524 1 CPF_Edit
    BITFIELD RenderTwoSided : 1;  // 524 1 CPF_Edit
    BITFIELD UseParticleColor : 1;  // 524 1 CPF_Edit
    BITFIELD GetOrientationFromVelocity : 1;  // 524 1 CPF_Edit
    class FVector MeshExtent;  // 528 2000 CPF_Transient
    virtual ~UMeshEmitter(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Initialize(int);
    virtual int UpdateParticles(float);
    virtual int RenderParticles(class FDynamicActor *,class FLevelSceneNode *,class TList<class FDynamicLight *> *,class FRenderInterface *);
    UMeshEmitter(class UMeshEmitter const &);
    UMeshEmitter(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UMeshEmitter & operator=(class UMeshEmitter const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Modifier
//------------------------------------------------------------------------------

//  Modifier.Trigger 20002 0 ( FUNC_Defined FUNC_Public )
struct UModifier_execTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class AActor* EventInstigator;  // 4 80 CPF_Parm
};


//  Modifier.Reset 20002 0 ( FUNC_Defined FUNC_Public )
struct UModifier_execReset_Parms {
};


// UModifier 3013 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UModifier : public UMaterial {
  public:
    class UMaterial* Material;  // 3C 14000001 CPF_Edit CPF_EditInline CPF_Unk_10000000
    virtual ~UModifier(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual int CheckCircularReferences(class TArray<class UMaterial *> &);
    virtual void PreSetMaterial(float);
    virtual int MaterialUSize(void);
    virtual int MaterialVSize(void);
    virtual int RequiresSorting(void)const ;
    virtual int IsTransparent(void)const ;
    virtual int IsMasked(void)const ;
    virtual unsigned char RequiredUVStreams(void)const ;
    virtual int RequiresNormal(void)const ;
    virtual int IsEmissive(void)const ;
    virtual int RequiresAlphaStream(void)const ;
    virtual int UpdateCache(class URenderDevice *,int);
    UModifier(class UModifier const &);
    UModifier(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UModifier & operator=(class UModifier const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  OpacityModifier
//------------------------------------------------------------------------------

// UOpacityModifier 2012 ( CLASS_Compiled CLASS_Parsed CLASS_CollapseCategories )
class DLL_IMPORT UOpacityModifier : public UModifier {
  public:
    class UMaterial* Opacity;  // 40 0
    BITFIELD bOverrideTexModifier : 1;  // 44 0
    virtual ~UOpacityModifier(void);
    virtual unsigned int GetCPPSize(void);
    UOpacityModifier(class UOpacityModifier const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UOpacityModifier & operator=(class UOpacityModifier const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    UOpacityModifier(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  MaterialSequence
//------------------------------------------------------------------------------

enum EMaterialSequenceTriggerActon {
  MSTA_Ignore = 0,
  MSTA_Reset = 1,
  MSTA_Pause = 2,
  MSTA_Stop = 3
};

enum EMaterialSequenceAction {
  MSA_ShowMaterial = 0,
  MSA_FadeToMaterial = 1
};

// FMaterialSequenceItem 1 ( CLASS_Abstract )
struct DLL_IMPORT FMaterialSequenceItem {
  public:
    class UMaterial* Material;  // 0 14000001 CPF_Edit CPF_EditInline CPF_Unk_10000000
    FLOAT Time;  // 4 1 CPF_Edit
    BYTE Action;  // 8 1 CPF_Edit
    struct FMaterialSequenceItem & operator=(struct FMaterialSequenceItem const &);
};

//  MaterialSequence.Trigger 20002 0 ( FUNC_Defined FUNC_Public )
struct UMaterialSequence_execTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class AActor* EventInstigator;  // 4 80 CPF_Parm
};


//  MaterialSequence.Reset 20002 0 ( FUNC_Defined FUNC_Public )
struct UMaterialSequence_execReset_Parms {
};


// UMaterialSequence 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UMaterialSequence : public UModifier {
  public:
    TArray<struct FMaterialSequenceItem> SequenceItems;  // 40 400001 CPF_Edit CPF_NeedCtorLink
    BYTE TriggerAction;  // 4C 1 CPF_Edit
    BITFIELD LoopSequence : 1;  // 50 1 CPF_Edit
    BITFIELD Paused : 1;  // 50 1 CPF_Edit
    FLOAT CurrentTime;  // 54 2000 CPF_Transient
    FLOAT LastTime;  // 58 2000 CPF_Transient
    FLOAT TotalTime;  // 5C 0
    virtual ~UMaterialSequence(void);
    virtual void Serialize(class FArchive &);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual int CheckCircularReferences(class TArray<class UMaterial *> &);
    virtual void PreSetMaterial(float);
    UMaterialSequence(class UMaterialSequence const &);
    UMaterialSequence(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UMaterialSequence & operator=(class UMaterialSequence const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  MaterialSwitch
//------------------------------------------------------------------------------

//  MaterialSwitch.Trigger 20002 0 ( FUNC_Defined FUNC_Public )
struct UMaterialSwitch_execTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class AActor* EventInstigator;  // 4 80 CPF_Parm
};


//  MaterialSwitch.Reset 20002 0 ( FUNC_Defined FUNC_Public )
struct UMaterialSwitch_execReset_Parms {
};


// UMaterialSwitch 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UMaterialSwitch : public UModifier {
  public:
    INT CurrentMaterialIndex;  // 40 2001 CPF_Edit CPF_Transient
    TArray<class UMaterial*> Materials;  // 44 14400001 CPF_Edit CPF_NeedCtorLink CPF_EditInline CPF_Unk_10000000
    virtual ~UMaterialSwitch(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual int CheckCircularReferences(class TArray<class UMaterial *> &);
    UMaterialSwitch(class UMaterialSwitch const &);
    UMaterialSwitch(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UMaterialSwitch & operator=(class UMaterialSwitch const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SBOverrideModulation
//------------------------------------------------------------------------------

// USBOverrideModulation 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT USBOverrideModulation : public UModifier {
  public:
    FLOAT OverrideModulationValue;  // 40 1 CPF_Edit
    virtual ~USBOverrideModulation(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual int GetValidated(void);
    virtual void SetValidated(int);
    USBOverrideModulation(class USBOverrideModulation const &);
    USBOverrideModulation(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USBOverrideModulation & operator=(class USBOverrideModulation const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  ColorModifier
//------------------------------------------------------------------------------

// UColorModifier 2012 ( CLASS_Compiled CLASS_Parsed CLASS_CollapseCategories )
class DLL_IMPORT UColorModifier : public UModifier {
  public:
    class FColor Color;  // 40 1 CPF_Edit
    BITFIELD RenderTwoSided : 1;  // 44 1 CPF_Edit
    BITFIELD AlphaBlend : 1;  // 44 1 CPF_Edit
    virtual ~UColorModifier(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual int GetValidated(void);
    virtual void SetValidated(int);
    virtual int RequiresSorting(void)const ;
    virtual int IsTransparent(void)const ;
    virtual int IsDoubleSided(void)const ;
    UColorModifier(class UColorModifier const &);
    UColorModifier(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UColorModifier & operator=(class UColorModifier const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  FinalBlend
//------------------------------------------------------------------------------

enum EFrameBufferBlending {
  FB_Overwrite = 0,
  FB_Modulate = 1,
  FB_AlphaBlend = 2,
  FB_AlphaModulate_MightNotFogCorrectly = 3,
  FB_Translucent = 4,
  FB_Darken = 5,
  FB_Brighten = 6,
  FB_Invisible = 7
};

// UFinalBlend 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UFinalBlend : public UModifier {
  public:
    BYTE FrameBufferBlending;  // 40 1 CPF_Edit
    BITFIELD ZWrite : 1;  // 44 1 CPF_Edit
    BITFIELD ZTest : 1;  // 44 1 CPF_Edit
    BITFIELD AlphaTest : 1;  // 44 1 CPF_Edit
    BITFIELD TwoSided : 1;  // 44 1 CPF_Edit
    BYTE AlphaRef;  // 48 1 CPF_Edit
    virtual ~UFinalBlend(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual int GetValidated(void);
    virtual void SetValidated(int);
    virtual int RequiresSorting(void)const ;
    virtual int IsTransparent(void)const ;
    virtual int IsDoubleSided(void)const ;
    UFinalBlend(class UFinalBlend const &);
    UFinalBlend(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UFinalBlend & operator=(class UFinalBlend const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  VertexColor
//------------------------------------------------------------------------------

// UVertexColor 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UVertexColor : public URenderedMaterial {
  public:
    virtual ~UVertexColor(void);
    virtual unsigned int GetCPPSize(void);
    virtual int RequiresAlphaStream(void)const ;
    UVertexColor(class UVertexColor const &);
    UVertexColor(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UVertexColor & operator=(class UVertexColor const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  TexModifier
//------------------------------------------------------------------------------

enum ETexCoordCount {
  TCN_2DCoords = 0,
  TCN_3DCoords = 1,
  TCN_4DCoords = 2
};

enum ETexCoordSrc {
  TCS_Stream0 = 0,
  TCS_Stream1 = 1,
  TCS_Stream2 = 2,
  TCS_Stream3 = 3,
  TCS_Stream4 = 4,
  TCS_Stream5 = 5,
  TCS_Stream6 = 6,
  TCS_Stream7 = 7,
  TCS_WorldCoords = 8,
  TCS_CameraCoords = 9,
  TCS_WorldEnvMapCoords = 10,
  TCS_CameraEnvMapCoords = 11,
  TCS_ProjectorCoords = 12,
  TCS_NoChange = 13
};

// UTexModifier 2012 ( CLASS_Compiled CLASS_Parsed CLASS_CollapseCategories )
class DLL_IMPORT UTexModifier : public UModifier {
  public:
    BYTE TexCoordSource;  // 40 0
    BYTE TexCoordCount;  // 41 1 CPF_Edit
    BITFIELD TexCoordProjected : 1;  // 44 1 CPF_Edit
    INT texmodifier_dummy;  // 48 2000000 CPF_EditorData
    virtual ~UTexModifier(void);
    virtual unsigned int GetCPPSize(void);
    virtual int GetValidated(void);
    virtual void SetValidated(int);
    virtual int MaterialUSize(void);
    virtual int MaterialVSize(void);
    virtual unsigned char RequiredUVStreams(void)const ;
    virtual int RequiresNormal(void)const ;
    virtual class FMatrix * GetMatrix(float);
    UTexModifier(class UTexModifier const &);
    UTexModifier(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UTexModifier & operator=(class UTexModifier const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  TexCoordSource
//------------------------------------------------------------------------------

// UTexCoordSource 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UTexCoordSource : public UTexModifier {
  public:
    INT SourceChannel;  // 4C 1 CPF_Edit
    virtual ~UTexCoordSource(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    UTexCoordSource(class UTexCoordSource const &);
    UTexCoordSource(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UTexCoordSource & operator=(class UTexCoordSource const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  TexMatrix
//------------------------------------------------------------------------------

// UTexMatrix 2012 ( CLASS_Compiled CLASS_Parsed CLASS_CollapseCategories )
class DLL_IMPORT UTexMatrix : public UTexModifier {
  public:
    class FMatrix Matrix;  // 4C 0
    virtual ~UTexMatrix(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FMatrix * GetMatrix(float);
    UTexMatrix(class UTexMatrix const &);
    UTexMatrix(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UTexMatrix & operator=(class UTexMatrix const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  TexEnvMap
//------------------------------------------------------------------------------

enum ETexEnvMapType {
  EM_WorldSpace = 0,
  EM_CameraSpace = 1
};

// UTexEnvMap 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UTexEnvMap : public UTexModifier {
  public:
    BYTE EnvMapType;  // 4C 1 CPF_Edit
    virtual ~UTexEnvMap(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FMatrix * GetMatrix(float);
    UTexEnvMap(class UTexEnvMap const &);
    UTexEnvMap(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UTexEnvMap & operator=(class UTexEnvMap const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  TexOscillator
//------------------------------------------------------------------------------

enum ETexOscillationType {
  OT_Pan = 0,
  OT_Stretch = 1,
  OT_StretchRepeat = 2,
  OT_Jitter = 3
};

// UTexOscillator 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UTexOscillator : public UTexModifier {
  public:
    FLOAT UOscillationRate;  // 4C 1 CPF_Edit
    FLOAT VOscillationRate;  // 50 1 CPF_Edit
    FLOAT UOscillationPhase;  // 54 1 CPF_Edit
    FLOAT VOscillationPhase;  // 58 1 CPF_Edit
    FLOAT UOscillationAmplitude;  // 5C 1 CPF_Edit
    FLOAT VOscillationAmplitude;  // 60 1 CPF_Edit
    BYTE UOscillationType;  // 64 1 CPF_Edit
    BYTE VOscillationType;  // 65 1 CPF_Edit
    FLOAT UOffset;  // 68 1 CPF_Edit
    FLOAT VOffset;  // 6C 1 CPF_Edit
    class FMatrix M;  // 70 0
    FLOAT LastSu;  // B0 0
    FLOAT LastSv;  // B4 0
    FLOAT CurrentUJitter;  // B8 0
    FLOAT CurrentVJitter;  // BC 0
    virtual ~UTexOscillator(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FMatrix * GetMatrix(float);
    UTexOscillator(class UTexOscillator const &);
    UTexOscillator(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UTexOscillator & operator=(class UTexOscillator const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  TexOscillatorTriggered
//------------------------------------------------------------------------------

enum ERetriggerAction {
  RTA_Reverse = 0,
  RTA_Reset = 1,
  RTA_Ignore = 2,
  RTA_Retrigger = 3
};

//  TexOscillatorTriggered.Reset 20002 0 ( FUNC_Defined FUNC_Public )
struct UTexOscillatorTriggered_execReset_Parms {
};


//  TexOscillatorTriggered.Trigger 20002 0 ( FUNC_Defined FUNC_Public )
struct UTexOscillatorTriggered_execTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class AActor* EventInstigator;  // 4 80 CPF_Parm
};


// UTexOscillatorTriggered 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UTexOscillatorTriggered : public UTexOscillator {
  public:
    BYTE RetriggerAction;  // C0 1 CPF_Edit
    FLOAT StopAfterPeriod;  // C4 1 CPF_Edit
    FLOAT TriggeredTime;  // C8 2000 CPF_Transient
    BITFIELD Reverse : 1;  // CC 2000 CPF_Transient
    BITFIELD Triggered : 1;  // CC 2000 CPF_Transient
    virtual ~UTexOscillatorTriggered(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FMatrix * GetMatrix(float);
    UTexOscillatorTriggered(class UTexOscillatorTriggered const &);
    UTexOscillatorTriggered(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UTexOscillatorTriggered & operator=(class UTexOscillatorTriggered const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  TexRotator
//------------------------------------------------------------------------------

enum ETexRotationType {
  TR_FixedRotation = 0,
  TR_ConstantlyRotating = 1,
  TR_OscillatingRotation = 2
};

// UTexRotator 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UTexRotator : public UTexModifier {
  public:
    class FMatrix M;  // 4C 0
    BYTE TexRotationType;  // 8C 1 CPF_Edit
    class FRotator Rotation;  // 90 1 CPF_Edit
    BITFIELD ConstantRotation : 1;  // 9C 20000000 CPF_Deprecated
    FLOAT UOffset;  // A0 1 CPF_Edit
    FLOAT VOffset;  // A4 1 CPF_Edit
    class FRotator OscillationRate;  // A8 1 CPF_Edit
    class FRotator OscillationAmplitude;  // B4 1 CPF_Edit
    class FRotator OscillationPhase;  // C0 1 CPF_Edit
    virtual ~UTexRotator(void);
    virtual void PostLoad(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FMatrix * GetMatrix(float);
    UTexRotator(class UTexRotator const &);
    UTexRotator(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UTexRotator & operator=(class UTexRotator const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  TexScaler
//------------------------------------------------------------------------------

// UTexScaler 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UTexScaler : public UTexModifier {
  public:
    class FMatrix M;  // 4C 0
    FLOAT UScale;  // 8C 1 CPF_Edit
    FLOAT VScale;  // 90 1 CPF_Edit
    FLOAT UOffset;  // 94 1 CPF_Edit
    FLOAT VOffset;  // 98 1 CPF_Edit
    virtual ~UTexScaler(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FMatrix * GetMatrix(float);
    UTexScaler(class UTexScaler const &);
    UTexScaler(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UTexScaler & operator=(class UTexScaler const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  VariableTexPanner
//------------------------------------------------------------------------------

// UVariableTexPanner 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UVariableTexPanner : public UTexModifier {
  public:
    class FRotator PanDirection;  // 4C 1 CPF_Edit
    FLOAT PanRate;  // 58 1 CPF_Edit
    class FMatrix M;  // 5C 0
    FLOAT LastTime;  // 9C 0
    FLOAT PanOffset;  // A0 0
    virtual ~UVariableTexPanner(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FMatrix * GetMatrix(float);
    UVariableTexPanner(class UVariableTexPanner const &);
    UVariableTexPanner(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UVariableTexPanner & operator=(class UVariableTexPanner const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  TexPanner
//------------------------------------------------------------------------------

// UTexPanner 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UTexPanner : public UTexModifier {
  public:
    class FRotator PanDirection;  // 4C 1 CPF_Edit
    FLOAT PanRate;  // 58 1 CPF_Edit
    class FMatrix M;  // 5C 0
    virtual ~UTexPanner(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FMatrix * GetMatrix(float);
    UTexPanner(class UTexPanner const &);
    UTexPanner(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UTexPanner & operator=(class UTexPanner const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  TexPannerTriggered
//------------------------------------------------------------------------------

//  TexPannerTriggered.Reset 20002 0 ( FUNC_Defined FUNC_Public )
struct UTexPannerTriggered_execReset_Parms {
};


//  TexPannerTriggered.Trigger 20002 0 ( FUNC_Defined FUNC_Public )
struct UTexPannerTriggered_execTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class AActor* EventInstigator;  // 4 80 CPF_Parm
};


// UTexPannerTriggered 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UTexPannerTriggered : public UTexPanner {
  public:
    BYTE RetriggerAction;  // 9C 1 CPF_Edit
    FLOAT StopAfterPeriod;  // A0 1 CPF_Edit
    FLOAT TriggeredTime;  // A4 2000 CPF_Transient
    BITFIELD Reverse : 1;  // A8 2000 CPF_Transient
    BITFIELD Triggered : 1;  // A8 2000 CPF_Transient
    virtual ~UTexPannerTriggered(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FMatrix * GetMatrix(float);
    UTexPannerTriggered(class UTexPannerTriggered const &);
    UTexPannerTriggered(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UTexPannerTriggered & operator=(class UTexPannerTriggered const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  FadeColor
//------------------------------------------------------------------------------

enum EColorFadeType {
  FC_Linear = 0,
  FC_Sinusoidal = 1
};

// UFadeColor 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UFadeColor : public UConstantMaterial {
  public:
    class FColor Color1;  // 40 1 CPF_Edit
    class FColor Color2;  // 44 1 CPF_Edit
    FLOAT FadePeriod;  // 48 1 CPF_Edit
    FLOAT FadePhase;  // 4C 1 CPF_Edit
    BYTE ColorFadeType;  // 50 1 CPF_Edit
    virtual ~UFadeColor(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FColor GetColor(float);
    UFadeColor(class UFadeColor const &);
    UFadeColor(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UFadeColor & operator=(class UFadeColor const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  ConstantColor
//------------------------------------------------------------------------------

// UConstantColor 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UConstantColor : public UConstantMaterial {
  public:
    class FColor Color;  // 40 1 CPF_Edit
    virtual ~UConstantColor(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FColor GetColor(float);
    UConstantColor(class UConstantColor const &);
    UConstantColor(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UConstantColor & operator=(class UConstantColor const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Combiner
//------------------------------------------------------------------------------

enum EAlphaOperation {
  AO_Use_Mask = 0,
  AO_Multiply = 1,
  AO_Add = 2,
  AO_Use_Alpha_From_Material1 = 3,
  AO_Use_Alpha_From_Material2 = 4
};

enum EColorOperation {
  CO_Use_Color_From_Material1 = 0,
  CO_Use_Color_From_Material2 = 1,
  CO_Multiply = 2,
  CO_Add = 3,
  CO_Subtract = 4,
  CO_AlphaBlend_With_Mask = 5,
  CO_Add_With_Mask_Modulation = 6,
  CO_Use_Color_From_Mask = 7
};

// UCombiner 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UCombiner : public UMaterial {
  public:
    INT combiner_dummy;  // 3C 2000000 CPF_EditorData
    BYTE CombineOperation;  // 40 1 CPF_Edit
    BYTE AlphaOperation;  // 41 1 CPF_Edit
    class UMaterial* Material1;  // 44 14000001 CPF_Edit CPF_EditInline CPF_Unk_10000000
    class UMaterial* Material2;  // 48 14000001 CPF_Edit CPF_EditInline CPF_Unk_10000000
    class UMaterial* Mask;  // 4C 14000001 CPF_Edit CPF_EditInline CPF_Unk_10000000
    BITFIELD InvertMask : 1;  // 50 1 CPF_Edit
    BITFIELD Modulate2X : 1;  // 50 1 CPF_Edit
    BITFIELD Modulate4X : 1;  // 50 1 CPF_Edit
    virtual ~UCombiner(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual int CheckCircularReferences(class TArray<class UMaterial *> &);
    virtual void PreSetMaterial(float);
    virtual int MaterialUSize(void);
    virtual int MaterialVSize(void);
    virtual int RequiresSorting(void)const ;
    virtual int IsTransparent(void)const ;
    virtual int IsMasked(void)const ;
    virtual unsigned char RequiredUVStreams(void)const ;
    virtual int RequiresNormal(void)const ;
    virtual int RequiresAlphaStream(void)const ;
    virtual int UpdateCache(class URenderDevice *,int);
    UCombiner(class UCombiner const &);
    UCombiner(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UCombiner & operator=(class UCombiner const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Shader
//------------------------------------------------------------------------------

enum EOutputBlending {
  OB_Normal = 0,
  OB_Masked = 1,
  OB_Modulate = 2,
  OB_Translucent = 3,
  OB_Invisible = 4,
  OB_Brighten = 5,
  OB_Darken = 6
};

//  Shader.Trigger 20002 0 ( FUNC_Defined FUNC_Public )
struct UShader_execTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class AActor* EventInstigator;  // 4 80 CPF_Parm
};


//  Shader.Reset 20002 0 ( FUNC_Defined FUNC_Public )
struct UShader_execReset_Parms {
};


// UShader 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UShader : public URenderedMaterial {
  public:
    class UMaterial* Diffuse;  // 40 14000001 CPF_Edit CPF_EditInline CPF_Unk_10000000
    class UMaterial* Opacity;  // 44 14000001 CPF_Edit CPF_EditInline CPF_Unk_10000000
    class UMaterial* Specular;  // 48 14000001 CPF_Edit CPF_EditInline CPF_Unk_10000000
    class UMaterial* SpecularityMask;  // 4C 14000001 CPF_Edit CPF_EditInline CPF_Unk_10000000
    class UMaterial* SelfIllumination;  // 50 14000001 CPF_Edit CPF_EditInline CPF_Unk_10000000
    class UMaterial* SelfIlluminationMask;  // 54 14000001 CPF_Edit CPF_EditInline CPF_Unk_10000000
    class UMaterial* Detail;  // 58 14000001 CPF_Edit CPF_EditInline CPF_Unk_10000000
    FLOAT DetailScale;  // 5C 1 CPF_Edit
    BITFIELD ModulateOpacityWithDiffuseAlpha : 1;  // 60 1 CPF_Edit
    BYTE OutputBlending;  // 64 1 CPF_Edit
    BITFIELD TwoSided : 1;  // 68 1 CPF_Edit
    BITFIELD Wireframe : 1;  // 68 1 CPF_Edit
    BITFIELD ModulateStaticLighting2X : 1;  // 68 0
    BITFIELD PerformLightingOnSpecularPass : 1;  // 68 1 CPF_Edit
    BITFIELD ModulateSpecular2X : 1;  // 68 2000001 CPF_Edit CPF_EditorData
    virtual ~UShader(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual int CheckCircularReferences(class TArray<class UMaterial *> &);
    virtual void PreSetMaterial(float);
    virtual int MaterialUSize(void);
    virtual int MaterialVSize(void);
    virtual int RequiresSorting(void)const ;
    virtual int IsTransparent(void)const ;
    virtual int IsMasked(void)const ;
    virtual int IsDoubleSided(void)const ;
    virtual unsigned char RequiredUVStreams(void)const ;
    virtual int RequiresNormal(void)const ;
    virtual int IsEmissive(void)const ;
    virtual int RequiresAlphaStream(void)const ;
    virtual class UMaterial * CheckFallback(void);
    virtual int HasFallback(void);
    virtual int UpdateCache(class URenderDevice *,int);
    UShader(class UShader const &);
    UShader(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UShader & operator=(class UShader const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  TexCoordMaterial
//------------------------------------------------------------------------------

// UTexCoordMaterial 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UTexCoordMaterial : public URenderedMaterial {
  public:
    char Unknown0[8];
    virtual ~UTexCoordMaterial(void);
    virtual unsigned int GetCPPSize(void);
    virtual int MaterialUSize(void);
    virtual int MaterialVSize(void);
    UTexCoordMaterial(class UTexCoordMaterial const &);
    UTexCoordMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UTexCoordMaterial & operator=(class UTexCoordMaterial const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  ProxyBitmapMaterial
//------------------------------------------------------------------------------

// UProxyBitmapMaterial 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UProxyBitmapMaterial : public UBitmapMaterial {
  public:
    char Unknown0[4];
    virtual ~UProxyBitmapMaterial(void);
    virtual unsigned int GetCPPSize(void);
    virtual class FBaseTexture * GetRenderInterface(void);
    virtual class UBitmapMaterial * Get(double,class UViewport *);
    UProxyBitmapMaterial(class UProxyBitmapMaterial const &);
    UProxyBitmapMaterial(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UProxyBitmapMaterial & operator=(class UProxyBitmapMaterial const &);
    static void CDECL InternalConstructor(void *);
    void SetTextureInterface(class FBaseTexture *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  LevelGrid
//------------------------------------------------------------------------------

// ULevelGrid 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT ULevelGrid : public UObject {
  public:
    char Unknown0[24];
    virtual ~ULevelGrid(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    ULevelGrid(class ULevelGrid const &);
    ULevelGrid(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ULevelGrid & operator=(class ULevelGrid const &);
    void AddActor(class AActor *);
    void AddTerrainSector(class UTerrainSector *);
    void ClearAll(void);
    struct FGridCell * GetRoot(void)const ;
    struct FGridCell * GetStaticActors(class FVector const &,class TArray<class AActor *> *,int)const ;
    struct FGridCell * GetTickActors(class FVector const &,class TArray<class AActor *> *,int)const ;
    void Init(class d_std::aabbox2 const &,int,int);
    static void CDECL InternalConstructor(void *);
    void Shrink(void);
    static class UClass * CDECL StaticClass(void);
  protected:
    struct FGridCell * GetActors(class FVector const &,class TArray<class AActor *> *,int,class TArray<class AActor *> & (__thiscall FGridCell::*)(void))const ;
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  LevelBase
//------------------------------------------------------------------------------

// ULevelBase 13 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT ULevelBase : public UObject {
  public:
    char Unknown0[68];
    virtual ~ULevelBase(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    ULevelBase(class ULevelBase const &);
    ULevelBase(class UEngine *,class FURL const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ULevelBase & operator=(class ULevelBase const &);
    static class UClass * CDECL StaticClass(void);
    class TTransArray<class AActor *> & get_actors(void);
  protected:
    ULevelBase(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Level
//------------------------------------------------------------------------------

// ULevel 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT ULevel : public ULevelBase {
  public:
    char Unknown0[4416];
    virtual ~ULevel(void);
    virtual void PostLoad(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual void Relink(class std::map<class UObject *,class UObject *,struct std::less<class UObject *>,class std::allocator<struct std::pair<class UObject * const,class UObject *> > > &,int);
    virtual void Modify(int);
    virtual void SetActorCollision(int,int);
    virtual void DetailChange(enum EDetailMode);
    virtual void ResetStaticFilterState(class AActor *);
    virtual void ReconcileActors(void);
    virtual void RememberActors(void);
    virtual int Exec(unsigned short const *,class FOutputDevice &);
    virtual void ShrinkLevel(void);
    virtual void CompactActors(void);
    virtual int IsServer(void);
    virtual class ABrush * SpawnBrush(void);
    virtual class APlayerController * SpawnPlayActor(class UPlayer *,enum ENetRole,class FURL const &,class FString &);
    virtual void UpdateTime(class ALevelInfo *);
    virtual void BuildRenderData(void);
    virtual void BuildBatchesNewCards(class TArray<class TArray<class AActor *> > &);
    virtual enum EMipRange GetMipRange(float);
    virtual int IsAudibleAt(class FVector,class FVector,class AActor *,enum ESoundOcclusion);
    virtual float CalculateRadiusMultiplier(int,int);
    ULevel(class ULevel const &);
    ULevel(class UEngine *,int);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ULevel & operator=(class ULevel const &);
    class ABrush * Brush(void);
    void CheckDefaultGameType(unsigned short const *);
    int CheckEncroachment(class AActor *,class FVector,class FRotator,int);
    int CheckSlice(class AActor *,class FVector &,class FVector,int &);
    int CheckTouch(class AActor *,class FVector,class FRotator,unsigned long);
    void CleanLightmaps(int);
    void CleanupDestroyed(int);
    void ClearLevelGrid(void)const ;
    void CreateGrid(class AZoneInfo *,int,int);
    int DestroyActor(class AActor *,int);
    void DisablePreviewLights(void);
    int EditorDestroyActor(class AActor *);
    void EnablePreviewLights(class FDynamicLight * *,int,int *);
    int EncroachingWorldGeometry(struct FCheckResult &,class AActor *,class FVector,class FVector,unsigned long,class ALevelInfo *);
    int FarMoveActor(class AActor *,class FVector,int,int,int);
    int FarMoveActor(class AActor *,class FVector,class FRotator,int,int,int);
    int FindActorIndex(class AActor *);
    int FindSpot(class AActor *,class FVector,class FVector &);
    int GetActorIndex(class AActor *);
    class ULevelGrid const & GetLevelGrid(void)const ;
    class ALevelInfo * GetLevelInfo(void);
    class AZoneInfo * GetZoneActor(int);
    void InitLevelGridCache(struct FGridCell *);
    void InitLevelGridCache(void);
    static void CDECL InternalConstructor(void *);
    int IsValidLevelGrid(void)const ;
    void LoadSounds(void);
    void Loop(enum ELevelTick,float);
    int MixedLineCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,unsigned long,class FVector);
    int MoveActor(class AActor *,class FVector,class FRotator,struct FCheckResult &,int,int,int,int);
    void MoveActorNoChecks(class AActor *,class FVector,class FRotator);
    struct FCheckResult * MultiLineCheck(class FMemStack &,class FVector const &,class FVector const &,class FVector const &,class ALevelInfo *,unsigned long,class AActor *);
    struct FCheckResult * MultiPointCheck(class FMemStack &,class AActor *,class FVector const &,class FVector const &,unsigned long,class ALevelInfo *,int,int,int);
    void RemoveActors(class UClass *);
    void RestoreActor(class AActor *);
    int SingleLineCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,unsigned long,class FVector);
    int SinglePointCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,unsigned long,class ALevelInfo *,int);
    class AActor * SpawnActor(class UClass *,class FName,class FVector,class FRotator,class AActor *,int,int,class AActor *,class APawn *,int,unsigned int,int,int,bool);
    void SpawnViewActor(class UViewport *);
    static class UClass * CDECL StaticClass(void);
    int ToFloor(class AActor *,int,class AActor *);
    void UpdateTerrainArrays(void);
  protected:
    ULevel(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  InteractionMaster
//------------------------------------------------------------------------------

//  InteractionMaster.NotifyLevelChange 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UInteractionMaster_eventNotifyLevelChange_Parms {
  TArray<class UInteraction*> InteractionArray;  // 0 400080 CPF_Parm CPF_NeedCtorLink
};


//  InteractionMaster.ProcessMessage 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UInteractionMaster_eventProcessMessage_Parms {
  class FString Msg;  // 0 400880 CPF_Parm CPF_CoerceParm CPF_NeedCtorLink
  FLOAT MsgLife;  // 8 80 CPF_Parm
  TArray<class UInteraction*> InteractionArray;  // C 400080 CPF_Parm CPF_NeedCtorLink
};


//  InteractionMaster.ProcessTick 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UInteractionMaster_eventProcessTick_Parms {
  TArray<class UInteraction*> InteractionArray;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  FLOAT DeltaTime;  // C 80 CPF_Parm
};


//  InteractionMaster.ProcessPostRender 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UInteractionMaster_eventProcessPostRender_Parms {
  TArray<class UInteraction*> InteractionArray;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class UCanvas* Canvas;  // C 80 CPF_Parm
};


//  InteractionMaster.ProcessPreRender 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UInteractionMaster_eventProcessPreRender_Parms {
  TArray<class UInteraction*> InteractionArray;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class UCanvas* Canvas;  // C 80 CPF_Parm
};


//  InteractionMaster.ProcessKeyEvent 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UInteractionMaster_eventProcessKeyEvent_Parms {
  TArray<class UInteraction*> InteractionArray;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BYTE Key;  // C 180 CPF_Parm CPF_OutParm
  BYTE Action;  // D 180 CPF_Parm CPF_OutParm
  FLOAT delta;  // 10 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 14 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  InteractionMaster.ProcessKeyType 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UInteractionMaster_eventProcessKeyType_Parms {
  TArray<class UInteraction*> InteractionArray;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BYTE Key;  // C 180 CPF_Parm CPF_OutParm
  class FString Unicode;  // 10 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 18 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  InteractionMaster.SetFocusTo 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UInteractionMaster_eventSetFocusTo_Parms {
  class UInteraction* Inter;  // 0 80 CPF_Parm
  class UPlayer* ViewportOwner;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  InteractionMaster.RemoveInteraction 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UInteractionMaster_eventRemoveInteraction_Parms {
  class UInteraction* RemoveMe;  // 0 80 CPF_Parm
};


//  InteractionMaster.AddInteraction 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UInteractionMaster_eventAddInteraction_Parms {
  class FString InteractionName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class UPlayer* AttachTo;  // 8 90 CPF_OptionalParm CPF_Parm
  class UInteraction* ReturnValue;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  InteractionMaster.Travel 20400 0 ( FUNC_Native FUNC_Public )
struct UInteractionMaster_execTravel_Parms {
  class FString URL;  // 0 400080 CPF_Parm CPF_NeedCtorLink
};


// UInteractionMaster 1A ( CLASS_Compiled CLASS_Transient CLASS_Parsed )
class DLL_IMPORT UInteractionMaster : public UInteractions {
  public:
    class UClient* Client;  // 28 2000 CPF_Transient
    class UInteraction* BaseMenu;  // 2C 2002002 CPF_Const CPF_Transient CPF_EditorData
    class UInteraction* Console;  // 30 2002002 CPF_Const CPF_Transient CPF_EditorData
    TArray<class UInteraction*> GlobalInteractions;  // 34 2402000 CPF_Transient CPF_NeedCtorLink CPF_EditorData
    INT ScreenshotMode;  // 40 2002000 CPF_Transient CPF_EditorData
    BITFIELD bRequireRawJoystick : 1;  // 44 2000 CPF_Transient
    virtual ~UInteractionMaster(void);
    virtual unsigned int GetCPPSize(void);
    UInteractionMaster(class UInteractionMaster const &);
    UInteractionMaster(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UInteractionMaster & operator=(class UInteractionMaster const &);
    void DisplayCopyright(void);
    int Exec(unsigned short const *,class FOutputDevice &);
    static void CDECL InternalConstructor(void *);
    int MasterProcessKeyEvent(enum EInputKey,enum EInputAction,float);
    int MasterProcessKeyType(enum EInputKey,unsigned short);
    void MasterProcessMessage(class FString const &,float);
    void MasterProcessPostRender(class UCanvas *);
    void MasterProcessPreRender(class UCanvas *);
    void MasterProcessTick(float);
    static class UClass * CDECL StaticClass(void);
    class UInteraction * eventAddInteraction(class FString const &,class UPlayer *);
    void eventNotifyLevelChange(class TArray<class UInteraction *>);
    unsigned long eventProcessKeyEvent(class TArray<class UInteraction *>,unsigned char &,unsigned char &,float);
    unsigned long eventProcessKeyType(class TArray<class UInteraction *>,unsigned char &,class FString const &);
    void eventProcessMessage(class FString const &,float,class TArray<class UInteraction *>);
    void eventProcessPostRender(class TArray<class UInteraction *>,class UCanvas *);
    void eventProcessPreRender(class TArray<class UInteraction *>,class UCanvas *);
    void eventProcessTick(class TArray<class UInteraction *>,float);
    void eventRemoveInteraction(class UInteraction *);
    void eventSetFocusTo(class UInteraction *,class UPlayer *);
    void execTravel(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(UInteractionMaster,0,execTravel)


//------------------------------------------------------------------------------
//  BaseGUIController
//------------------------------------------------------------------------------

//  BaseGUIController.HandleEvent 20000 0 ( FUNC_Public )
struct UBaseGUIController_execHandleEvent_Parms {
  INT eventID;  // 0 80 CPF_Parm
  class UObject* Source;  // 4 80 CPF_Parm
  class UObject* context;  // 8 90 CPF_OptionalParm CPF_Parm
};


//  BaseGUIController.SetRequiredGameResolution 20800 0 ( FUNC_Event FUNC_Public )
struct UBaseGUIController_eventSetRequiredGameResolution_Parms {
  class FString GameRes;  // 0 400080 CPF_Parm CPF_NeedCtorLink
};


//  BaseGUIController.NeedsMenuResolution 20800 0 ( FUNC_Event FUNC_Public )
struct UBaseGUIController_eventNeedsMenuResolution_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  BaseGUIController.InitializeController 20800 0 ( FUNC_Event FUNC_Public )
struct UBaseGUIController_eventInitializeController_Parms {
};


//  BaseGUIController.SetControllerStatus 20002 0 ( FUNC_Defined FUNC_Public )
struct UBaseGUIController_execSetControllerStatus_Parms {
  BITFIELD On : 1;  // 0 80 CPF_Parm
};


//  BaseGUIController.CloseAll 20800 0 ( FUNC_Event FUNC_Public )
struct UBaseGUIController_eventCloseAll_Parms {
  BITFIELD bCancel : 1;  // 0 80 CPF_Parm
  BITFIELD bForced : 1;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  BaseGUIController.CloseMenu 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UBaseGUIController_eventCloseMenu_Parms {
  BITFIELD bCanceled : 1;  // 0 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  BaseGUIController.ReplaceMenu 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UBaseGUIController_eventReplaceMenu_Parms {
  class FString NewMenuName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString Param1;  // 8 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
  class FString Param2;  // 10 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
  BITFIELD bCancelled : 1;  // 18 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 1C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  BaseGUIController.AutoLoadMenus 20800 0 ( FUNC_Event FUNC_Public )
struct UBaseGUIController_eventAutoLoadMenus_Parms {
};


//  BaseGUIController.OpenMenu 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UBaseGUIController_eventOpenMenu_Parms {
  class FString NewMenuName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString Param1;  // 8 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
  class FString Param2;  // 10 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 18 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  BaseGUIController.QuitGame 20900 0 ( FUNC_Simulated FUNC_Event FUNC_Public )
struct UBaseGUIController_eventQuitGame_Parms {
};


//  BaseGUIController.SetTextData 20900 0 ( FUNC_Simulated FUNC_Event FUNC_Public )
struct UBaseGUIController_eventSetTextData_Parms {
  INT windowID;  // 0 80 CPF_Parm
  class FString textData;  // 4 400080 CPF_Parm CPF_NeedCtorLink
};


//  BaseGUIController.CloseAllWindows 20900 0 ( FUNC_Simulated FUNC_Event FUNC_Public )
struct UBaseGUIController_eventCloseAllWindows_Parms {
};


//  BaseGUIController.CloseWindow 20900 0 ( FUNC_Simulated FUNC_Event FUNC_Public )
struct UBaseGUIController_eventCloseWindow_Parms {
  INT windowID;  // 0 80 CPF_Parm
  BITFIELD bCanceled : 1;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  BaseGUIController.InternalFocusChanged 20900 0 ( FUNC_Simulated FUNC_Event FUNC_Public )
struct UBaseGUIController_eventInternalFocusChanged_Parms {
  INT windowID;  // 0 80 CPF_Parm
};


//  BaseGUIController.FocusWindow 20900 0 ( FUNC_Simulated FUNC_Event FUNC_Public )
struct UBaseGUIController_eventFocusWindow_Parms {
  INT windowID;  // 0 80 CPF_Parm
};


//  BaseGUIController.EnableWindow 20900 0 ( FUNC_Simulated FUNC_Event FUNC_Public )
struct UBaseGUIController_eventEnableWindow_Parms {
  INT windowID;  // 0 80 CPF_Parm
  BITFIELD newState : 1;  // 4 80 CPF_Parm
};


//  BaseGUIController.SendWindowMessage 20900 0 ( FUNC_Simulated FUNC_Event FUNC_Public )
struct UBaseGUIController_eventSendWindowMessage_Parms {
  class UObject* aSender;  // 0 80 CPF_Parm
  INT windowID;  // 4 80 CPF_Parm
  INT intParam;  // 8 90 CPF_OptionalParm CPF_Parm
  class UObject* objParam;  // C 90 CPF_OptionalParm CPF_Parm
  class FString stringParam;  // 10 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
};


//  BaseGUIController.UpdateWindow 20900 0 ( FUNC_Simulated FUNC_Event FUNC_Public )
struct UBaseGUIController_eventUpdateWindow_Parms {
  INT windowID;  // 0 80 CPF_Parm
  INT intParam;  // 4 90 CPF_OptionalParm CPF_Parm
  class UObject* objParam;  // 8 90 CPF_OptionalParm CPF_Parm
  class FString stringParam;  // C 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
};


//  BaseGUIController.OpenWindow 20900 0 ( FUNC_Simulated FUNC_Event FUNC_Public )
struct UBaseGUIController_eventOpenWindow_Parms {
  class FString windowName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  INT intParam;  // 8 90 CPF_OptionalParm CPF_Parm
  class UObject* objParam;  // C 90 CPF_OptionalParm CPF_Parm
  class FString stringParam;  // 10 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
  INT ReturnValue;  // 18 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


// UBaseGUIController 1E ( CLASS_Compiled CLASS_Config CLASS_Transient CLASS_Parsed )
class DLL_IMPORT UBaseGUIController : public UInteraction {
  public:
    class UMaterial* DefaultPens[3];  // 34 2000000 CPF_EditorData
    class FString NetworkMsgMenu;  // 40 2404000 CPF_Config CPF_NeedCtorLink CPF_EditorData
    class FString QuestionMenuClass;  // 48 2404000 CPF_Config CPF_NeedCtorLink CPF_EditorData
    virtual ~UBaseGUIController(void);
    virtual unsigned int GetCPPSize(void);
    virtual void ResolutionChanged(int,int);
    virtual void ResetInput(void);
    UBaseGUIController(class UBaseGUIController const &);
    UBaseGUIController(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UBaseGUIController & operator=(class UBaseGUIController const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void eventAutoLoadMenus(void);
    void eventCloseAll(unsigned long,unsigned long);
    void eventCloseAllWindows(void);
    unsigned long eventCloseMenu(unsigned long);
    void eventCloseWindow(int,unsigned long);
    void eventEnableWindow(int,unsigned long);
    void eventFocusWindow(int);
    void eventInitializeController(void);
    void eventInternalFocusChanged(int);
    unsigned long eventNeedsMenuResolution(void);
    unsigned long eventOpenMenu(class FString const &,class FString const &,class FString const &);
    int eventOpenWindow(class FString const &,int,class UObject *,class FString const &);
    void eventQuitGame(void);
    unsigned long eventReplaceMenu(class FString const &,class FString const &,class FString const &,unsigned long);
    void eventSendWindowMessage(class UObject *,int,int,class UObject *,class FString const &);
    void eventSetRequiredGameResolution(class FString const &);
    void eventSetTextData(int,class FString const &);
    void eventUpdateWindow(int,int,class UObject *,class FString const &);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Console
//------------------------------------------------------------------------------

//  Console.PreviousTabStop 20202 0 ( FUNC_Defined FUNC_Exec FUNC_Public )
struct UConsole_execPreviousTabStop_Parms {
};


//  Console.NextTabStop 20202 0 ( FUNC_Defined FUNC_Exec FUNC_Public )
struct UConsole_execNextTabStop_Parms {
};


//  Console.MakeCSConsole 20000 0 ( FUNC_Public )
struct UConsole_execMakeCSConsole_Parms {
};


//  Console.SetInitialMusic 20002 0 ( FUNC_Defined FUNC_Public )
struct UConsole_execSetInitialMusic_Parms {
  class FString NewSong;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString ReturnValue;  // 8 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  Console.SetMusic 20000 0 ( FUNC_Public )
struct UConsole_execSetMusic_Parms {
  class FString NewSong;  // 0 400080 CPF_Parm CPF_NeedCtorLink
};


//  Console.ConnectFailure 20800 0 ( FUNC_Event FUNC_Public )
struct UConsole_eventConnectFailure_Parms {
  class FString FailCode;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString URL;  // 8 400080 CPF_Parm CPF_NeedCtorLink
};


//  Console.Tick 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct UConsole_eventTick_Parms {
  FLOAT delta;  // 0 80 CPF_Parm
};


//  Console.TypingClose 20002 0 ( FUNC_Defined FUNC_Public )
struct UConsole_execTypingClose_Parms {
};


//  Console.TypingOpen 20002 0 ( FUNC_Defined FUNC_Public )
struct UConsole_execTypingOpen_Parms {
};


//  Console.KeyEvent 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UConsole_eventKeyEvent_Parms {
  BYTE Key;  // 0 80 CPF_Parm
  BYTE Action;  // 1 80 CPF_Parm
  FLOAT delta;  // 4 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Console.DelayedConsoleCommand 20002 0 ( FUNC_Defined FUNC_Public )
struct UConsole_execDelayedConsoleCommand_Parms {
  class FString Command;  // 0 400080 CPF_Parm CPF_NeedCtorLink
};


//  Console.NotifyLevelChange 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UConsole_eventNotifyLevelChange_Parms {
};


//  Console.Message 20800 0 ( FUNC_Event FUNC_Public )
struct UConsole_eventMessage_Parms {
  class FString Msg;  // 0 400880 CPF_Parm CPF_CoerceParm CPF_NeedCtorLink
  FLOAT MsgLife;  // 8 80 CPF_Parm
};


//  Console.ConsoleToggle 20200 0 ( FUNC_Exec FUNC_Public )
struct UConsole_execConsoleToggle_Parms {
};


//  Console.ConsoleClose 20000 0 ( FUNC_Public )
struct UConsole_execConsoleClose_Parms {
};


//  Console.ConsoleOpen 20000 0 ( FUNC_Public )
struct UConsole_execConsoleOpen_Parms {
};


//  Console.TeamTalk 20202 0 ( FUNC_Defined FUNC_Exec FUNC_Public )
struct UConsole_execTeamTalk_Parms {
};


//  Console.Talk 20202 0 ( FUNC_Defined FUNC_Exec FUNC_Public )
struct UConsole_execTalk_Parms {
};


//  Console.Type 20202 0 ( FUNC_Defined FUNC_Exec FUNC_Public )
struct UConsole_execType_Parms {
};


//  Console.UnPressButtons 20002 0 ( FUNC_Defined FUNC_Public )
struct UConsole_execUnPressButtons_Parms {
};


//  Console.NativeConsoleOpen 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UConsole_eventNativeConsoleOpen_Parms {
};


//  Console.ViewportInitialized 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UConsole_eventViewportInitialized_Parms {
};


//  Console.Initialized 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UConsole_eventInitialized_Parms {
};


// UConsole 16 ( CLASS_Compiled CLASS_Config CLASS_Parsed )
class DLL_IMPORT UConsole : public UInteraction {
  public:
    BYTE ConsoleHotKey;  // 34 2004000 CPF_Config CPF_EditorData
    INT HistoryTop;  // 38 0
    INT HistoryBot;  // 3C 0
    INT HistoryCur;  // 40 0
    class FString TypedStr;  // 44 2400000 CPF_NeedCtorLink CPF_EditorData
    class FString History[16];  // 4C 2400000 CPF_NeedCtorLink CPF_EditorData
    INT TypedStrPos;  // CC 2000000 CPF_EditorData
    BITFIELD bTyping : 1;  // D0 2000000 CPF_EditorData
    BITFIELD bIgnoreKeys : 1;  // D0 2000000 CPF_EditorData
    BITFIELD bRunningDemo : 1;  // D0 2001 CPF_Edit CPF_Transient
    BITFIELD bHoldingStart : 1;  // D0 2001 CPF_Edit CPF_Transient
    BITFIELD bHoldingBack : 1;  // D0 2001 CPF_Edit CPF_Transient
    FLOAT TimeIdle;  // D4 2002001 CPF_Edit CPF_Transient CPF_EditorData
    FLOAT TimeHoldingReboot;  // D8 2002001 CPF_Edit CPF_Transient CPF_EditorData
    FLOAT TimePerTitle;  // DC 2044001 CPF_Edit CPF_Config CPF_GlobalConfig CPF_EditorData
    FLOAT TimePerDemo;  // E0 2044001 CPF_Edit CPF_Config CPF_GlobalConfig CPF_EditorData
    FLOAT TimeTooIdle;  // E4 2044001 CPF_Edit CPF_Config CPF_GlobalConfig CPF_EditorData
    FLOAT TimeBeforeReboot;  // E8 2044001 CPF_Edit CPF_Config CPF_GlobalConfig CPF_EditorData
    FLOAT TimePerSoak;  // EC 2044001 CPF_Edit CPF_Config CPF_GlobalConfig CPF_EditorData
    class FString DemoLevels[64];  // F0 444001 CPF_Edit CPF_Config CPF_GlobalConfig CPF_NeedCtorLink
    TArray<class FString> BufferedConsoleCommands;  // 2F0 2400000 CPF_NeedCtorLink CPF_EditorData
    virtual ~UConsole(void);
    virtual unsigned int GetCPPSize(void);
    UConsole(class UConsole const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UConsole & operator=(class UConsole const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void eventConnectFailure(class FString const &,class FString const &);
    void eventNativeConsoleOpen(void);
    void eventViewportInitialized(void);
  protected:
    UConsole(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Input
//------------------------------------------------------------------------------

// UInput 1E ( CLASS_Compiled CLASS_Config CLASS_Transient CLASS_Parsed )
class DLL_IMPORT UInput : public USubsystem/*,FExec*/  {
  public:
    struct FAlias Aliases[64];  // 2C 404000 CPF_Config CPF_NeedCtorLink
    class FString StrProperty0;  // 32C 404000 CPF_Config CPF_NeedCtorLink
    class FString LeftMouse;  // 334 404000 CPF_Config CPF_NeedCtorLink
    class FString RightMouse;  // 33C 404000 CPF_Config CPF_NeedCtorLink
    class FString Cancel;  // 344 404000 CPF_Config CPF_NeedCtorLink
    class FString MiddleMouse;  // 34C 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown05;  // 354 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown06;  // 35C 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown07;  // 364 404000 CPF_Config CPF_NeedCtorLink
    class FString Backspace;  // 36C 404000 CPF_Config CPF_NeedCtorLink
    class FString Tab;  // 374 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown0A;  // 37C 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown0B;  // 384 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown0C;  // 38C 404000 CPF_Config CPF_NeedCtorLink
    class FString Enter;  // 394 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown0E;  // 39C 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown0F;  // 3A4 404000 CPF_Config CPF_NeedCtorLink
    class FString Shift;  // 3AC 404000 CPF_Config CPF_NeedCtorLink
    class FString Ctrl;  // 3B4 404000 CPF_Config CPF_NeedCtorLink
    class FString Alt;  // 3BC 404000 CPF_Config CPF_NeedCtorLink
    class FString pause;  // 3C4 404000 CPF_Config CPF_NeedCtorLink
    class FString CapsLock;  // 3CC 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown15;  // 3D4 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown16;  // 3DC 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown17;  // 3E4 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown18;  // 3EC 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown19;  // 3F4 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown1A;  // 3FC 404000 CPF_Config CPF_NeedCtorLink
    class FString Escape;  // 404 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown1C;  // 40C 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown1D;  // 414 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown1E;  // 41C 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown1F;  // 424 404000 CPF_Config CPF_NeedCtorLink
    class FString Space;  // 42C 404000 CPF_Config CPF_NeedCtorLink
    class FString PageUp;  // 434 404000 CPF_Config CPF_NeedCtorLink
    class FString PageDown;  // 43C 404000 CPF_Config CPF_NeedCtorLink
    class FString End;  // 444 404000 CPF_Config CPF_NeedCtorLink
    class FString home;  // 44C 404000 CPF_Config CPF_NeedCtorLink
    class FString Left;  // 454 404000 CPF_Config CPF_NeedCtorLink
    class FString Up;  // 45C 404000 CPF_Config CPF_NeedCtorLink
    class FString Right;  // 464 404000 CPF_Config CPF_NeedCtorLink
    class FString Down;  // 46C 404000 CPF_Config CPF_NeedCtorLink
    class FString Select;  // 474 404000 CPF_Config CPF_NeedCtorLink
    class FString Print;  // 47C 404000 CPF_Config CPF_NeedCtorLink
    class FString Execute;  // 484 404000 CPF_Config CPF_NeedCtorLink
    class FString PrintScrn;  // 48C 404000 CPF_Config CPF_NeedCtorLink
    class FString Insert;  // 494 404000 CPF_Config CPF_NeedCtorLink
    class FString Delete;  // 49C 404000 CPF_Config CPF_NeedCtorLink
    class FString help;  // 4A4 404000 CPF_Config CPF_NeedCtorLink
    class FString 0;  // 4AC 404000 CPF_Config CPF_NeedCtorLink
    class FString 1;  // 4B4 404000 CPF_Config CPF_NeedCtorLink
    class FString 2;  // 4BC 404000 CPF_Config CPF_NeedCtorLink
    class FString 3;  // 4C4 404000 CPF_Config CPF_NeedCtorLink
    class FString 4;  // 4CC 404000 CPF_Config CPF_NeedCtorLink
    class FString 5;  // 4D4 404000 CPF_Config CPF_NeedCtorLink
    class FString 6;  // 4DC 404000 CPF_Config CPF_NeedCtorLink
    class FString 7;  // 4E4 404000 CPF_Config CPF_NeedCtorLink
    class FString 8;  // 4EC 404000 CPF_Config CPF_NeedCtorLink
    class FString 9;  // 4F4 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown3A;  // 4FC 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown3B;  // 504 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown3C;  // 50C 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown3D;  // 514 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown3E;  // 51C 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown3F;  // 524 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown40;  // 52C 404000 CPF_Config CPF_NeedCtorLink
    class FString A;  // 534 404000 CPF_Config CPF_NeedCtorLink
    class FString B;  // 53C 404000 CPF_Config CPF_NeedCtorLink
    class FString C;  // 544 404000 CPF_Config CPF_NeedCtorLink
    class FString D;  // 54C 404000 CPF_Config CPF_NeedCtorLink
    class FString E;  // 554 404000 CPF_Config CPF_NeedCtorLink
    class FString F;  // 55C 404000 CPF_Config CPF_NeedCtorLink
    class FString G;  // 564 404000 CPF_Config CPF_NeedCtorLink
    class FString H;  // 56C 404000 CPF_Config CPF_NeedCtorLink
    class FString i;  // 574 404000 CPF_Config CPF_NeedCtorLink
    class FString j;  // 57C 404000 CPF_Config CPF_NeedCtorLink
    class FString k;  // 584 404000 CPF_Config CPF_NeedCtorLink
    class FString L;  // 58C 404000 CPF_Config CPF_NeedCtorLink
    class FString M;  // 594 404000 CPF_Config CPF_NeedCtorLink
    class FString N;  // 59C 404000 CPF_Config CPF_NeedCtorLink
    class FString O;  // 5A4 404000 CPF_Config CPF_NeedCtorLink
    class FString P;  // 5AC 404000 CPF_Config CPF_NeedCtorLink
    class FString q;  // 5B4 404000 CPF_Config CPF_NeedCtorLink
    class FString R;  // 5BC 404000 CPF_Config CPF_NeedCtorLink
    class FString s;  // 5C4 404000 CPF_Config CPF_NeedCtorLink
    class FString t;  // 5CC 404000 CPF_Config CPF_NeedCtorLink
    class FString U;  // 5D4 404000 CPF_Config CPF_NeedCtorLink
    class FString V;  // 5DC 404000 CPF_Config CPF_NeedCtorLink
    class FString W;  // 5E4 404000 CPF_Config CPF_NeedCtorLink
    class FString X;  // 5EC 404000 CPF_Config CPF_NeedCtorLink
    class FString Y;  // 5F4 404000 CPF_Config CPF_NeedCtorLink
    class FString Z;  // 5FC 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown5B;  // 604 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown5C;  // 60C 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown5D;  // 614 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown5E;  // 61C 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown5F;  // 624 404000 CPF_Config CPF_NeedCtorLink
    class FString NumPad0;  // 62C 404000 CPF_Config CPF_NeedCtorLink
    class FString NumPad1;  // 634 404000 CPF_Config CPF_NeedCtorLink
    class FString NumPad2;  // 63C 404000 CPF_Config CPF_NeedCtorLink
    class FString NumPad3;  // 644 404000 CPF_Config CPF_NeedCtorLink
    class FString NumPad4;  // 64C 404000 CPF_Config CPF_NeedCtorLink
    class FString NumPad5;  // 654 404000 CPF_Config CPF_NeedCtorLink
    class FString NumPad6;  // 65C 404000 CPF_Config CPF_NeedCtorLink
    class FString NumPad7;  // 664 404000 CPF_Config CPF_NeedCtorLink
    class FString NumPad8;  // 66C 404000 CPF_Config CPF_NeedCtorLink
    class FString NumPad9;  // 674 404000 CPF_Config CPF_NeedCtorLink
    class FString GreyStar;  // 67C 404000 CPF_Config CPF_NeedCtorLink
    class FString GreyPlus;  // 684 404000 CPF_Config CPF_NeedCtorLink
    class FString Separator;  // 68C 404000 CPF_Config CPF_NeedCtorLink
    class FString GreyMinus;  // 694 404000 CPF_Config CPF_NeedCtorLink
    class FString NumPadPeriod;  // 69C 404000 CPF_Config CPF_NeedCtorLink
    class FString GreySlash;  // 6A4 404000 CPF_Config CPF_NeedCtorLink
    class FString F1;  // 6AC 404000 CPF_Config CPF_NeedCtorLink
    class FString F2;  // 6B4 404000 CPF_Config CPF_NeedCtorLink
    class FString F3;  // 6BC 404000 CPF_Config CPF_NeedCtorLink
    class FString F4;  // 6C4 404000 CPF_Config CPF_NeedCtorLink
    class FString F5;  // 6CC 404000 CPF_Config CPF_NeedCtorLink
    class FString F6;  // 6D4 404000 CPF_Config CPF_NeedCtorLink
    class FString F7;  // 6DC 404000 CPF_Config CPF_NeedCtorLink
    class FString F8;  // 6E4 404000 CPF_Config CPF_NeedCtorLink
    class FString F9;  // 6EC 404000 CPF_Config CPF_NeedCtorLink
    class FString F10;  // 6F4 404000 CPF_Config CPF_NeedCtorLink
    class FString F11;  // 6FC 404000 CPF_Config CPF_NeedCtorLink
    class FString F12;  // 704 404000 CPF_Config CPF_NeedCtorLink
    class FString F13;  // 70C 404000 CPF_Config CPF_NeedCtorLink
    class FString F14;  // 714 404000 CPF_Config CPF_NeedCtorLink
    class FString F15;  // 71C 404000 CPF_Config CPF_NeedCtorLink
    class FString F16;  // 724 404000 CPF_Config CPF_NeedCtorLink
    class FString F17;  // 72C 404000 CPF_Config CPF_NeedCtorLink
    class FString F18;  // 734 404000 CPF_Config CPF_NeedCtorLink
    class FString F19;  // 73C 404000 CPF_Config CPF_NeedCtorLink
    class FString F20;  // 744 404000 CPF_Config CPF_NeedCtorLink
    class FString F21;  // 74C 404000 CPF_Config CPF_NeedCtorLink
    class FString F22;  // 754 404000 CPF_Config CPF_NeedCtorLink
    class FString F23;  // 75C 404000 CPF_Config CPF_NeedCtorLink
    class FString F24;  // 764 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown88;  // 76C 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown89;  // 774 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown8A;  // 77C 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown8B;  // 784 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown8C;  // 78C 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown8D;  // 794 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown8E;  // 79C 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown8F;  // 7A4 404000 CPF_Config CPF_NeedCtorLink
    class FString NumLock;  // 7AC 404000 CPF_Config CPF_NeedCtorLink
    class FString ScrollLock;  // 7B4 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown92;  // 7BC 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown93;  // 7C4 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown94;  // 7CC 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown95;  // 7D4 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown96;  // 7DC 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown97;  // 7E4 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown98;  // 7EC 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown99;  // 7F4 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown9A;  // 7FC 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown9B;  // 804 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown9C;  // 80C 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown9D;  // 814 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown9E;  // 81C 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown9F;  // 824 404000 CPF_Config CPF_NeedCtorLink
    class FString LShift;  // 82C 404000 CPF_Config CPF_NeedCtorLink
    class FString RShift;  // 834 404000 CPF_Config CPF_NeedCtorLink
    class FString LControl;  // 83C 404000 CPF_Config CPF_NeedCtorLink
    class FString RControl;  // 844 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownA4;  // 84C 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownA5;  // 854 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownA6;  // 85C 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownA7;  // 864 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownA8;  // 86C 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownA9;  // 874 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownAA;  // 87C 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownAB;  // 884 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownAC;  // 88C 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownAD;  // 894 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownAE;  // 89C 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownAF;  // 8A4 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownB0;  // 8AC 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownB1;  // 8B4 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownB2;  // 8BC 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownB3;  // 8C4 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownB4;  // 8CC 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownB5;  // 8D4 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownB6;  // 8DC 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownB7;  // 8E4 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownB8;  // 8EC 404000 CPF_Config CPF_NeedCtorLink
    class FString Unicode;  // 8F4 404000 CPF_Config CPF_NeedCtorLink
    class FString Semicolon;  // 8FC 404000 CPF_Config CPF_NeedCtorLink
    class FString Equals;  // 904 404000 CPF_Config CPF_NeedCtorLink
    class FString Comma;  // 90C 404000 CPF_Config CPF_NeedCtorLink
    class FString Minus;  // 914 404000 CPF_Config CPF_NeedCtorLink
    class FString Period;  // 91C 404000 CPF_Config CPF_NeedCtorLink
    class FString Slash;  // 924 404000 CPF_Config CPF_NeedCtorLink
    class FString Tilde;  // 92C 404000 CPF_Config CPF_NeedCtorLink
    class FString Mouse4;  // 934 404000 CPF_Config CPF_NeedCtorLink
    class FString Mouse5;  // 93C 404000 CPF_Config CPF_NeedCtorLink
    class FString Mouse6;  // 944 404000 CPF_Config CPF_NeedCtorLink
    class FString Mouse7;  // 94C 404000 CPF_Config CPF_NeedCtorLink
    class FString Mouse8;  // 954 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownC6;  // 95C 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownC7;  // 964 404000 CPF_Config CPF_NeedCtorLink
    class FString Joy1;  // 96C 404000 CPF_Config CPF_NeedCtorLink
    class FString Joy2;  // 974 404000 CPF_Config CPF_NeedCtorLink
    class FString Joy3;  // 97C 404000 CPF_Config CPF_NeedCtorLink
    class FString Joy4;  // 984 404000 CPF_Config CPF_NeedCtorLink
    class FString Joy5;  // 98C 404000 CPF_Config CPF_NeedCtorLink
    class FString Joy6;  // 994 404000 CPF_Config CPF_NeedCtorLink
    class FString Joy7;  // 99C 404000 CPF_Config CPF_NeedCtorLink
    class FString Joy8;  // 9A4 404000 CPF_Config CPF_NeedCtorLink
    class FString Joy9;  // 9AC 404000 CPF_Config CPF_NeedCtorLink
    class FString Joy10;  // 9B4 404000 CPF_Config CPF_NeedCtorLink
    class FString Joy11;  // 9BC 404000 CPF_Config CPF_NeedCtorLink
    class FString Joy12;  // 9C4 404000 CPF_Config CPF_NeedCtorLink
    class FString Joy13;  // 9CC 404000 CPF_Config CPF_NeedCtorLink
    class FString Joy14;  // 9D4 404000 CPF_Config CPF_NeedCtorLink
    class FString Joy15;  // 9DC 404000 CPF_Config CPF_NeedCtorLink
    class FString Joy16;  // 9E4 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownD8;  // 9EC 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownD9;  // 9F4 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownDA;  // 9FC 404000 CPF_Config CPF_NeedCtorLink
    class FString LeftBracket;  // A04 404000 CPF_Config CPF_NeedCtorLink
    class FString Backslash;  // A0C 404000 CPF_Config CPF_NeedCtorLink
    class FString RightBracket;  // A14 404000 CPF_Config CPF_NeedCtorLink
    class FString SingleQuote;  // A1C 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownDF;  // A24 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownE0;  // A2C 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownE1;  // A34 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownE2;  // A3C 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownE3;  // A44 404000 CPF_Config CPF_NeedCtorLink
    class FString MouseX;  // A4C 404000 CPF_Config CPF_NeedCtorLink
    class FString MouseY;  // A54 404000 CPF_Config CPF_NeedCtorLink
    class FString MouseZ;  // A5C 404000 CPF_Config CPF_NeedCtorLink
    class FString MouseW;  // A64 404000 CPF_Config CPF_NeedCtorLink
    class FString JoyU;  // A6C 404000 CPF_Config CPF_NeedCtorLink
    class FString JoyV;  // A74 404000 CPF_Config CPF_NeedCtorLink
    class FString JoySlider1;  // A7C 404000 CPF_Config CPF_NeedCtorLink
    class FString JoySlider2;  // A84 404000 CPF_Config CPF_NeedCtorLink
    class FString MouseWheelUp;  // A8C 404000 CPF_Config CPF_NeedCtorLink
    class FString MouseWheelDown;  // A94 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown10E;  // A9C 404000 CPF_Config CPF_NeedCtorLink
    class FString Unknown10F;  // AA4 404000 CPF_Config CPF_NeedCtorLink
    class FString JoyX;  // AAC 404000 CPF_Config CPF_NeedCtorLink
    class FString JoyY;  // AB4 404000 CPF_Config CPF_NeedCtorLink
    class FString JoyZ;  // ABC 404000 CPF_Config CPF_NeedCtorLink
    class FString JoyR;  // AC4 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownF4;  // ACC 404000 CPF_Config CPF_NeedCtorLink
    class FString UnknownF5;  // AD4 404000 CPF_Config CPF_NeedCtorLink
    class FString Attn;  // ADC 404000 CPF_Config CPF_NeedCtorLink
    class FString CrSel;  // AE4 404000 CPF_Config CPF_NeedCtorLink
    class FString ExSel;  // AEC 404000 CPF_Config CPF_NeedCtorLink
    class FString ErEof;  // AF4 404000 CPF_Config CPF_NeedCtorLink
    class FString Play;  // AFC 404000 CPF_Config CPF_NeedCtorLink
    class FString Zoom;  // B04 404000 CPF_Config CPF_NeedCtorLink
    class FString NoName;  // B0C 404000 CPF_Config CPF_NeedCtorLink
    class FString PA1;  // B14 404000 CPF_Config CPF_NeedCtorLink
    class FString OEMClear;  // B1C 404000 CPF_Config CPF_NeedCtorLink
    BITFIELD SwapLeftRightMouseButtons : 1;  // B24 4000 CPF_Config
    char Unknown0[280];
    //virtual int Exec(unsigned short const *,class FOutputDevice &);
    virtual ~UInput(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual void Init(class UViewport *);
    virtual int PreProcess(enum EInputKey,enum EInputAction,float);
    virtual int Process(class FOutputDevice &,enum EInputKey,enum EInputAction,float);
    virtual void DirectAxis(enum EInputKey,float,float);
    virtual void ReadInput(float,class FOutputDevice &);
    virtual void ResetInput(void);
    virtual unsigned short const * GetKeyName(enum EInputKey)const ;
    virtual unsigned short const * GetLocalizedKeyName(enum EInputKey)const ;
    virtual int FindKeyName(unsigned short const *,enum EInputKey &)const ;
    virtual int IsBoundTo(unsigned short const *,unsigned char const &)const ;
    virtual unsigned short const * TranslateAlias(unsigned short const *)const ;
    virtual void RemapKeys(enum EInputKey &,enum EInputAction &,float &);
  protected:
    virtual unsigned char * FindButtonName(class AActor *,unsigned short const *)const ;
    virtual float * FindAxisName(class AActor *,unsigned short const *)const ;
    virtual void ExecInputCommands(unsigned short const *,class FOutputDevice &);
  public:
    UInput(class UInput const &);
    UInput(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UInput & operator=(class UInput const &);
    enum EInputAction GetInputAction(void);
    float GetInputDelta(void);
    static void CDECL InternalConstructor(void *);
    unsigned char KeyDown(int);
    void SetInputAction(enum EInputAction,float);
    static class UClass * CDECL StaticClass(void);
    void StaticConstructor(void);
    static void CDECL StaticInitInput(void);
  protected:
    static unsigned short const * CDECL StaticConfigName(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Polys
//------------------------------------------------------------------------------

// UPolys 92 ( CLASS_Compiled CLASS_Parsed CLASS_RuntimeStatic )
class DLL_IMPORT UPolys : public UObject {
  public:
    char Unknown0[16];
    virtual ~UPolys(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    UPolys(class UPolys const &);
    UPolys(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UPolys & operator=(class UPolys const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Font
//------------------------------------------------------------------------------

// UFont 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UFont : public UObject {
  public:
    char Unknown0[56];
    virtual ~UFont(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    UFont(class UFont const &);
    UFont(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UFont & operator=(class UFont const &);
    void GetCharSize(unsigned short,int &,int &);
    static void CDECL InternalConstructor(void *);
    unsigned short RemapChar(unsigned short);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  FluidSurfaceOscillator
//------------------------------------------------------------------------------

// AFluidSurfaceOscillator 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT AFluidSurfaceOscillator : public AActor {
  public:
    class AFluidSurfaceInfo* FluidInfo;  // 420 8000001 CPF_Edit CPF_Unk_08000000
    FLOAT Frequency;  // 424 1 CPF_Edit
    BYTE Phase;  // 428 1 CPF_Edit
    FLOAT Strength;  // 42C 1 CPF_Edit
    FLOAT Radius;  // 430 1 CPF_Edit
    FLOAT OscTime;  // 434 2002 CPF_Const CPF_Transient
    virtual ~AFluidSurfaceOscillator(void);
    virtual void Destroy(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    AFluidSurfaceOscillator(class AFluidSurfaceOscillator const &);
    AFluidSurfaceOscillator(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AFluidSurfaceOscillator & operator=(class AFluidSurfaceOscillator const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void UpdateOscillation(float);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  FluidSurfacePrimitive
//------------------------------------------------------------------------------

// UFluidSurfacePrimitive 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UFluidSurfacePrimitive : public UPrimitive {
  public:
    char Unknown0[4];
    virtual ~UFluidSurfacePrimitive(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual int PointCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,unsigned long);
    virtual int LineCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,class FVector const &,unsigned long,unsigned long);
    virtual class FBox GetRenderBoundingBox(class AActor const *);
    virtual class FSphere GetRenderBoundingSphere(class AActor const *);
    virtual class FBox GetCollisionBoundingBox(class AActor const *)const ;
    virtual int UseCylinderCollision(class AActor const *);
    UFluidSurfacePrimitive(class UFluidSurfacePrimitive const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UFluidSurfacePrimitive & operator=(class UFluidSurfacePrimitive const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    UFluidSurfacePrimitive(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  FluidSurfaceInfo
//------------------------------------------------------------------------------

enum EFluidGridType {
  FGT_Square = 0,
  FGT_Hexagonal = 1
};

//  FluidSurfaceInfo.Touch 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AFluidSurfaceInfo_execTouch_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  FluidSurfaceInfo.TakeDamage 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AFluidSurfaceInfo_execTakeDamage_Parms {
  INT Damage;  // 0 80 CPF_Parm
  class APawn* instigatedBy;  // 4 80 CPF_Parm
  class FVector HitLocation;  // 8 80 CPF_Parm
  class FVector Momentum;  // 14 80 CPF_Parm
  class UClass* DamageType;  // 20 80 CPF_Parm
};


//  FluidSurfaceInfo.Pling 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AFluidSurfaceInfo_execPling_Parms {
  class FVector Position;  // 0 80 CPF_Parm
  FLOAT Strength;  // C 80 CPF_Parm
  FLOAT Radius;  // 10 90 CPF_OptionalParm CPF_Parm
};


// AFluidSurfaceInfo 312 ( CLASS_Compiled CLASS_Parsed CLASS_NoExport CLASS_NoUserCreate )
class DLL_IMPORT AFluidSurfaceInfo : public AInfo {
  public:
    BYTE FluidGridType;  // 420 1 CPF_Edit
    FLOAT FluidGridSpacing;  // 424 2000001 CPF_Edit CPF_EditorData
    INT FluidXSize;  // 428 2000001 CPF_Edit CPF_EditorData
    INT FluidYSize;  // 42C 2000001 CPF_Edit CPF_EditorData
    FLOAT FluidHeightScale;  // 430 2000001 CPF_Edit CPF_EditorData
    FLOAT FluidSpeed;  // 434 2000001 CPF_Edit CPF_EditorData
    FLOAT FluidTimeScale;  // 438 1 CPF_Edit
    FLOAT FluidDamping;  // 43C 2000001 CPF_Edit CPF_EditorData
    FLOAT FluidNoiseFrequency;  // 440 1 CPF_Edit
    class FRange FluidNoiseStrength;  // 444 1 CPF_Edit
    BITFIELD TestRipple : 1;  // 44C 1 CPF_Edit
    FLOAT TestRippleSpeed;  // 450 1 CPF_Edit
    FLOAT TestRippleStrength;  // 454 1 CPF_Edit
    FLOAT TestRippleRadius;  // 458 1 CPF_Edit
    FLOAT UTiles;  // 45C 1 CPF_Edit
    FLOAT UOffset;  // 460 1 CPF_Edit
    FLOAT VTiles;  // 464 1 CPF_Edit
    FLOAT VOffset;  // 468 1 CPF_Edit
    FLOAT AlphaCurveScale;  // 46C 1 CPF_Edit
    FLOAT AlphaHeightScale;  // 470 1 CPF_Edit
    BYTE AlphaMax;  // 474 1 CPF_Edit
    FLOAT ShootStrength;  // 478 2000001 CPF_Edit CPF_EditorData
    FLOAT ShootRadius;  // 47C 2000001 CPF_Edit CPF_EditorData
    FLOAT RippleVelocityFactor;  // 480 1 CPF_Edit
    FLOAT TouchStrength;  // 484 1 CPF_Edit
    class UClass* ShootEffect;  // 488 1 CPF_Edit
    BITFIELD OrientShootEffect : 1;  // 48C 1 CPF_Edit
    class UClass* TouchEffect;  // 490 1 CPF_Edit
    BITFIELD OrientTouchEffect : 1;  // 494 1 CPF_Edit
    TArray<INT> ClampBitmap;  // 498 400002 CPF_Const CPF_NeedCtorLink
    class ATerrainInfo* ClampTerrain;  // 4A4 8000001 CPF_Edit CPF_Unk_08000000
    BITFIELD bShowBoundingBox : 1;  // 4A8 1 CPF_Edit
    BITFIELD bUseNoRenderZ : 1;  // 4A8 1 CPF_Edit
    FLOAT NoRenderZ;  // 4AC 1 CPF_Edit
    FLOAT WarmUpTime;  // 4B0 1 CPF_Edit
    FLOAT UpdateRate;  // 4B4 1 CPF_Edit
    class FColor FluidColor;  // 4B8 1 CPF_Edit
    TArray<FLOAT> Verts0;  // 4BC 402002 CPF_Const CPF_Transient CPF_NeedCtorLink
    TArray<FLOAT> Verts1;  // 4C8 402002 CPF_Const CPF_Transient CPF_NeedCtorLink
    TArray<BYTE> VertAlpha;  // 4D4 402002 CPF_Const CPF_Transient CPF_NeedCtorLink
    INT LatestVerts;  // 4E0 2002 CPF_Const CPF_Transient
    class FBox FluidBoundingBox;  // 4E4 2002002 CPF_Const CPF_Transient CPF_EditorData
    class FVector FluidOrigin;  // 500 2002002 CPF_Const CPF_Transient CPF_EditorData
    FLOAT TimeRollover;  // 50C 2002 CPF_Const CPF_Transient
    FLOAT TestRippleAng;  // 510 2002 CPF_Const CPF_Transient
    class UFluidSurfacePrimitive* Primitive;  // 514 2002 CPF_Const CPF_Transient
    TArray<class AFluidSurfaceOscillator*> Oscillators;  // 518 402002 CPF_Const CPF_Transient CPF_NeedCtorLink
    BITFIELD bHasWarmedUp : 1;  // 524 2002 CPF_Const CPF_Transient
    virtual ~AFluidSurfaceInfo(void);
    virtual void PostLoad(void);
    virtual void Destroy(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Tick(float,enum ELevelTick);
    virtual void PostEditMove(void);
    virtual void Spawned(void);
    virtual int ShouldTrace(class AActor *,unsigned long);
    virtual class UPrimitive * GetPrimitive(void);
    virtual void RenderEditorInfo(class FLevelSceneNode *,class FRenderInterface *,class FDynamicActor *);
    AFluidSurfaceInfo(class AFluidSurfaceInfo const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AFluidSurfaceInfo & operator=(class AFluidSurfaceInfo const &);
    void FillIndexBuffer(void *);
    void FillVertexBuffer(void *);
    int GetClampedBitmap(int,int);
    void GetNearestIndex(class FVector const &,int &,int &);
    class FVector GetVertexPosLocal(int,int);
    class FVector GetVertexPosWorld(int,int);
    void Init(void);
    static void CDECL InternalConstructor(void *);
    void Pling(class FVector const &,float,float);
    void PlingVertex(int,int,float);
    void RebuildClampedBitmap(void);
    void Render(class FDynamicActor *,class FLevelSceneNode *,class TList<class FDynamicLight *> *,class FRenderInterface *);
    void SetClampedBitmap(int,int,int);
    void SimpleFillIndexBuffer(void *);
    void SimpleFillVertexBuffer(void *);
    static class UClass * CDECL StaticClass(void);
    void UpdateOscillatorList(void);
    void UpdateSimulation(float);
    void execPling(struct FFrame &,void * const);
  protected:
    AFluidSurfaceInfo(void);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(AFluidSurfaceInfo,0,execPling)


//------------------------------------------------------------------------------
//  GlobalTempObjects
//------------------------------------------------------------------------------

// UGlobalTempObjects 1A ( CLASS_Compiled CLASS_Transient CLASS_Parsed )
class DLL_IMPORT UGlobalTempObjects : public UObject {
  public:
    char Unknown0[12];
};


//------------------------------------------------------------------------------
//  UModUnpackCommandlet
//------------------------------------------------------------------------------

// UUModUnpackCommandlet 3A ( CLASS_Compiled CLASS_Transient CLASS_Parsed CLASS_Localized )
class DLL_IMPORT UUModUnpackCommandlet : public UCommandlet {
};


//------------------------------------------------------------------------------
//  RenderDevice
//------------------------------------------------------------------------------

// URenderDevice 1F ( CLASS_Abstract CLASS_Compiled CLASS_Config CLASS_Transient CLASS_Parsed )
class DLL_IMPORT URenderDevice : public USubsystem/*,FExec*/  {
  public:
    char Unknown0[8];
    INT TerrainLOD;  // 34 4000 CPF_Config
    BITFIELD HighDetailActors : 1;  // 38 4000 CPF_Config
    BITFIELD SuperHighDetailActors : 1;  // 3C 4000 CPF_Config
    BITFIELD DetailTextures : 1;  // 40 4000 CPF_Config
    char Unknown1[44];
    BITFIELD UseCompressedLightmaps : 1;  // 70 4000 CPF_Config
    BITFIELD UseStencil : 1;  // 74 4000 CPF_Config
    BITFIELD Use16bit : 1;  // 78 4000 CPF_Config
    BITFIELD Use16bitTextures : 1;  // 7C 4000 CPF_Config
    char Unknown2[8];
    BITFIELD LowQualityTerrain : 1;  // 88 4000 CPF_Config
    BITFIELD SkyboxHack : 1;  // 8C 4000 CPF_Config
    char Unknown3[32];
    BITFIELD UseSpellbornShaders : 1;  // B0 4000 CPF_Config
    char Unknown4[8];
    BITFIELD UseHQFog : 1;  // BC 4000 CPF_Config
    char Unknown5[48];
    virtual ~URenderDevice(void);
    virtual int ResourceCached(unsigned __int64);
    virtual int PreCacheTexture(class FBaseTexture *);
    virtual void OptimizeMesh(unsigned short *,unsigned short,unsigned short);
    virtual int UnwrapUVs(void *,int,int,unsigned short *,unsigned long,int *,float * *,unsigned short * *,unsigned short * *);
    virtual void HackPointFiltering(void);
    virtual void UnhackPointFiltering(void);
    virtual int SupportsCursor(void);
    virtual void ShowCursor(int);
    virtual void SetCursorPosition(int,int);
    virtual void SetCursorTexture(int,int,class UTexture *);
    virtual void PrintMemoryStats(class FOutputDevice &);
    virtual class FVideoMixer * GetVideoMixer(void);
    virtual int IsFullscreen(void);
    virtual int GetFullscreenWidth(void);
    virtual int GetFullscreenHeight(void);
    URenderDevice(class URenderDevice const &);
    URenderDevice(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class URenderDevice & operator=(class URenderDevice const &);
    static class UClass * CDECL StaticClass(void);
    void StaticConstructor(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  ConvexVolume
//------------------------------------------------------------------------------

// UConvexVolume 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UConvexVolume : public UPrimitive {
  public:
    char Unknown0[52];
    virtual ~UConvexVolume(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual int LineCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,class FVector const &,unsigned long,unsigned long);
    virtual class FBox GetRenderBoundingBox(class AActor const *);
    virtual class FBox GetCollisionBoundingBox(class AActor const *)const ;
    UConvexVolume(class UConvexVolume const &);
    UConvexVolume(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UConvexVolume & operator=(class UConvexVolume const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  PlayerInput
//------------------------------------------------------------------------------

//  PlayerInput.ChangeSnapView 20002 0 ( FUNC_Defined FUNC_Public )
struct UPlayerInput_execChangeSnapView_Parms {
  BITFIELD B : 1;  // 0 80 CPF_Parm
};


//  PlayerInput.InvertMouse 20002 0 ( FUNC_Defined FUNC_Public )
struct UPlayerInput_execInvertMouse_Parms {
  class FString Invert;  // 0 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
};


//  PlayerInput.UpdateSmoothing 20002 0 ( FUNC_Defined FUNC_Public )
struct UPlayerInput_execUpdateSmoothing_Parms {
  INT Mode;  // 0 80 CPF_Parm
};


//  PlayerInput.UpdateAccel 20002 0 ( FUNC_Defined FUNC_Public )
struct UPlayerInput_execUpdateAccel_Parms {
  FLOAT F;  // 0 80 CPF_Parm
};


//  PlayerInput.UpdateSensitivity 20002 0 ( FUNC_Defined FUNC_Public )
struct UPlayerInput_execUpdateSensitivity_Parms {
  FLOAT F;  // 0 80 CPF_Parm
};


//  PlayerInput.SmoothMouse 20002 0 ( FUNC_Defined FUNC_Public )
struct UPlayerInput_execSmoothMouse_Parms {
  FLOAT aMouse;  // 0 80 CPF_Parm
  FLOAT DeltaTime;  // 4 80 CPF_Parm
  BYTE SampleCount;  // 8 180 CPF_Parm CPF_OutParm
  INT Index;  // C 80 CPF_Parm
  FLOAT ReturnValue;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayerInput.AccelerateMouse 20002 0 ( FUNC_Defined FUNC_Public )
struct UPlayerInput_execAccelerateMouse_Parms {
  FLOAT aMouse;  // 0 80 CPF_Parm
  FLOAT ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlayerInput.PlayerInput 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UPlayerInput_eventPlayerInput_Parms {
  FLOAT DeltaTime;  // 0 80 CPF_Parm
};


//  PlayerInput.FreezeInput 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UPlayerInput_eventFreezeInput_Parms {
  BITFIELD InputFrozen : 1;  // 0 80 CPF_Parm
};


//  PlayerInput.InvertLook 20000 0 ( FUNC_Public )
struct UPlayerInput_execInvertLook_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


// UPlayerInput 1E ( CLASS_Compiled CLASS_Config CLASS_Transient CLASS_Parsed )
class DLL_IMPORT UPlayerInput : public UObject {
  public:
    BITFIELD bInvertMouse : 1;  // 28 44000 CPF_Config CPF_GlobalConfig
    BITFIELD bAdjustSampling : 1;  // 28 0
    BYTE MouseSmoothingMode;  // 2C 44000 CPF_Config CPF_GlobalConfig
    FLOAT MouseSmoothingStrength;  // 30 44000 CPF_Config CPF_GlobalConfig
    FLOAT MouseSensitivity;  // 34 44000 CPF_Config CPF_GlobalConfig
    FLOAT MouseSamplingTime;  // 38 44000 CPF_Config CPF_GlobalConfig
    FLOAT MouseAccelThreshold;  // 3C 44000 CPF_Config CPF_GlobalConfig
    FLOAT SmoothedMouse[2];  // 40 0
    FLOAT ZeroTime[2];  // 48 0
    FLOAT SamplingTime[2];  // 50 0
    FLOAT MaybeTime[2];  // 58 0
    FLOAT OldSamples[4];  // 60 0
    INT MouseSamples[2];  // 70 0
    BITFIELD mInputFrozen : 1;  // 78 0
    virtual ~UPlayerInput(void);
    virtual unsigned int GetCPPSize(void);
    UPlayerInput(class UPlayerInput const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UPlayerInput & operator=(class UPlayerInput const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void eventFreezeInput(unsigned long);
    void eventPlayerInput(float);
  protected:
    UPlayerInput(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Canvas
//------------------------------------------------------------------------------

enum EFillStyle {
  FSTY_Normal = 0,
  FSTY_Stretched = 1,
  FSTY_Scaled = 2,
  FSTY_Bound = 3,
  FSTY_Justified = 4,
  FSTY_PartialScaled = 5,
  FSTY_Tiled = 6
};

//  Canvas.DrawScreenText 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct UCanvas_execDrawScreenText_Parms {
  class FString Text;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  FLOAT X;  // 8 80 CPF_Parm
  FLOAT Y;  // C 80 CPF_Parm
  BYTE Pivot;  // 10 80 CPF_Parm
};


//  Canvas.DrawBox 20103 0 ( FUNC_Final FUNC_Defined FUNC_Simulated FUNC_Public )
struct UCanvas_execDrawBox_Parms {
  class UCanvas* Canvas;  // 0 80 CPF_Parm
  FLOAT width;  // 4 80 CPF_Parm
  FLOAT Height;  // 8 80 CPF_Parm
};


//  Canvas.DrawBracket 20103 0 ( FUNC_Final FUNC_Defined FUNC_Simulated FUNC_Public )
struct UCanvas_execDrawBracket_Parms {
  FLOAT width;  // 0 80 CPF_Parm
  FLOAT Height;  // 4 80 CPF_Parm
  FLOAT bracket_size;  // 8 80 CPF_Parm
};


//  Canvas.DrawLine 20003 0 ( FUNC_Final FUNC_Defined FUNC_Public )
struct UCanvas_execDrawLine_Parms {
  INT direction;  // 0 80 CPF_Parm
  FLOAT Size;  // 4 80 CPF_Parm
};


//  Canvas.DrawHorizontal 20003 0 ( FUNC_Final FUNC_Defined FUNC_Public )
struct UCanvas_execDrawHorizontal_Parms {
  FLOAT Y;  // 0 80 CPF_Parm
  FLOAT width;  // 4 80 CPF_Parm
};


//  Canvas.DrawVertical 20003 0 ( FUNC_Final FUNC_Defined FUNC_Public )
struct UCanvas_execDrawVertical_Parms {
  FLOAT X;  // 0 80 CPF_Parm
  FLOAT Height;  // 4 80 CPF_Parm
};


//  Canvas.MakeColor 22003 0 ( FUNC_Final FUNC_Defined FUNC_Static FUNC_Public )
struct UCanvas_execMakeColor_Parms {
  BYTE R;  // 0 80 CPF_Parm
  BYTE G;  // 1 80 CPF_Parm
  BYTE B;  // 2 80 CPF_Parm
  BYTE A;  // 3 90 CPF_OptionalParm CPF_Parm
  class FColor ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Canvas.SetDrawColor 20003 0 ( FUNC_Final FUNC_Defined FUNC_Public )
struct UCanvas_execSetDrawColor_Parms {
  BYTE R;  // 0 80 CPF_Parm
  BYTE G;  // 1 80 CPF_Parm
  BYTE B;  // 2 80 CPF_Parm
  BYTE A;  // 3 90 CPF_OptionalParm CPF_Parm
};


//  Canvas.DrawRect 20003 0 ( FUNC_Final FUNC_Defined FUNC_Public )
struct UCanvas_execDrawRect_Parms {
  class UTexture* Tex;  // 0 80 CPF_Parm
  FLOAT RectX;  // 4 80 CPF_Parm
  FLOAT RectY;  // 8 80 CPF_Parm
};


//  Canvas.DrawIcon 20003 0 ( FUNC_Final FUNC_Defined FUNC_Public )
struct UCanvas_execDrawIcon_Parms {
  class UTexture* Tex;  // 0 80 CPF_Parm
  FLOAT Scale;  // 4 80 CPF_Parm
};


//  Canvas.DrawPattern 20003 0 ( FUNC_Final FUNC_Defined FUNC_Public )
struct UCanvas_execDrawPattern_Parms {
  class UMaterial* Tex;  // 0 80 CPF_Parm
  FLOAT XL;  // 4 80 CPF_Parm
  FLOAT YL;  // 8 80 CPF_Parm
  FLOAT Scale;  // C 80 CPF_Parm
};


//  Canvas.SetClip 20003 0 ( FUNC_Final FUNC_Defined FUNC_Public )
struct UCanvas_execSetClip_Parms {
  FLOAT X;  // 0 80 CPF_Parm
  FLOAT Y;  // 4 80 CPF_Parm
};


//  Canvas.SetOrigin 20003 0 ( FUNC_Final FUNC_Defined FUNC_Public )
struct UCanvas_execSetOrigin_Parms {
  FLOAT X;  // 0 80 CPF_Parm
  FLOAT Y;  // 4 80 CPF_Parm
};


//  Canvas.SetPos 20003 0 ( FUNC_Final FUNC_Defined FUNC_Public )
struct UCanvas_execSetPos_Parms {
  FLOAT X;  // 0 80 CPF_Parm
  FLOAT Y;  // 4 80 CPF_Parm
};


//  Canvas.Reset 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UCanvas_eventReset_Parms {
};


//  Canvas.DrawActorClipped 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execDrawActorClipped_Parms {
  class AActor* A;  // 0 80 CPF_Parm
  BITFIELD Wireframe : 1;  // 4 80 CPF_Parm
  FLOAT Left;  // 8 80 CPF_Parm
  FLOAT top;  // C 80 CPF_Parm
  FLOAT width;  // 10 80 CPF_Parm
  FLOAT Height;  // 14 80 CPF_Parm
  BITFIELD ClearZ : 1;  // 18 90 CPF_OptionalParm CPF_Parm
  FLOAT DisplayFOV;  // 1C 90 CPF_OptionalParm CPF_Parm
};


//  Canvas.DrawTextJustified 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execDrawTextJustified_Parms {
  class FString String;  // 0 400880 CPF_Parm CPF_CoerceParm CPF_NeedCtorLink
  BYTE Justification;  // 8 80 CPF_Parm
  FLOAT X1;  // C 80 CPF_Parm
  FLOAT Y1;  // 10 80 CPF_Parm
  FLOAT X2;  // 14 80 CPF_Parm
  FLOAT Y2;  // 18 80 CPF_Parm
};


//  Canvas.DrawTileScaled 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execDrawTileScaled_Parms {
  class UMaterial* mat;  // 0 80 CPF_Parm
  FLOAT XScale;  // 4 80 CPF_Parm
  FLOAT YScale;  // 8 80 CPF_Parm
};


//  Canvas.DrawTileJustified 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execDrawTileJustified_Parms {
  class UMaterial* mat;  // 0 80 CPF_Parm
  BYTE Justification;  // 4 80 CPF_Parm
  FLOAT XL;  // 8 80 CPF_Parm
  FLOAT YL;  // C 80 CPF_Parm
};


//  Canvas.DrawTileStretchedEx 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execDrawTileStretchedEx_Parms {
  class UMaterial* mat;  // 0 80 CPF_Parm
  FLOAT XL;  // 4 80 CPF_Parm
  FLOAT YL;  // 8 80 CPF_Parm
  FLOAT UL;  // C 80 CPF_Parm
  FLOAT UT;  // 10 80 CPF_Parm
  FLOAT UW;  // 14 80 CPF_Parm
  FLOAT UH;  // 18 80 CPF_Parm
};


//  Canvas.DrawTileStretched 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execDrawTileStretched_Parms {
  class UMaterial* mat;  // 0 80 CPF_Parm
  FLOAT XL;  // 4 80 CPF_Parm
  FLOAT YL;  // 8 80 CPF_Parm
};


//  Canvas.DrawTilePartialStretched 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execDrawTilePartialStretched_Parms {
  class UMaterial* mat;  // 0 80 CPF_Parm
  FLOAT XL;  // 4 80 CPF_Parm
  FLOAT YL;  // 8 80 CPF_Parm
};


//  Canvas.WrapText 22401 0 ( FUNC_Final FUNC_Native FUNC_Static FUNC_Public )
struct UCanvas_execWrapText_Parms {
  class FString Text;  // 0 400180 CPF_Parm CPF_OutParm CPF_NeedCtorLink
  class FString Line;  // 8 400180 CPF_Parm CPF_OutParm CPF_NeedCtorLink
  FLOAT dx;  // 10 80 CPF_Parm
  class UFont* F;  // 14 80 CPF_Parm
  FLOAT FontScaleX;  // 18 80 CPF_Parm
};


//  Canvas.WrapStringToArray 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execWrapStringToArray_Parms {
  class FString Text;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  TArray<class FString> OutArray;  // 8 400180 CPF_Parm CPF_OutParm CPF_NeedCtorLink
  FLOAT dx;  // 14 80 CPF_Parm
  class FString EOL;  // 18 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
};


//  Canvas.Clear 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execClear_Parms {
  BITFIELD ClearRGB : 1;  // 0 90 CPF_OptionalParm CPF_Parm
  BITFIELD ClearZ : 1;  // 4 90 CPF_OptionalParm CPF_Parm
};


//  Canvas.DrawScreenActor 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execDrawScreenActor_Parms {
  class AActor* A;  // 0 80 CPF_Parm
  FLOAT FOV;  // 4 90 CPF_OptionalParm CPF_Parm
  BITFIELD Wireframe : 1;  // 8 90 CPF_OptionalParm CPF_Parm
  BITFIELD ClearZ : 1;  // C 90 CPF_OptionalParm CPF_Parm
};


//  Canvas.SetScreenProjector 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execSetScreenProjector_Parms {
  INT Index;  // 0 80 CPF_Parm
  class FVector Position;  // 4 80 CPF_Parm
  class FColor Color;  // 10 80 CPF_Parm
  FLOAT Radius;  // 14 80 CPF_Parm
  class UTexture* Tex;  // 18 80 CPF_Parm
};


//  Canvas.SetScreenLight 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execSetScreenLight_Parms {
  INT Index;  // 0 80 CPF_Parm
  class FVector Position;  // 4 80 CPF_Parm
  class FColor LightColor;  // 10 80 CPF_Parm
  FLOAT Radius;  // 14 80 CPF_Parm
};


//  Canvas.GetCameraLocation 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execGetCameraLocation_Parms {
  class FVector CameraLocation;  // 0 180 CPF_Parm CPF_OutParm
  class FRotator CameraRotation;  // C 180 CPF_Parm CPF_OutParm
};


//  Canvas.WorldToScreen 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execWorldToScreen_Parms {
  class FVector WorldLoc;  // 0 80 CPF_Parm
  class FVector ReturnValue;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Canvas.DrawPortal 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execDrawPortal_Parms {
  INT X;  // 0 80 CPF_Parm
  INT Y;  // 4 80 CPF_Parm
  INT width;  // 8 80 CPF_Parm
  INT Height;  // C 80 CPF_Parm
  class AActor* CamActor;  // 10 80 CPF_Parm
  class FVector CamLocation;  // 14 80 CPF_Parm
  class FRotator CamRotation;  // 20 80 CPF_Parm
  INT FOV;  // 2C 90 CPF_OptionalParm CPF_Parm
  BITFIELD ClearZ : 1;  // 30 90 CPF_OptionalParm CPF_Parm
};


//  Canvas.TextSize 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execTextSize_Parms {
  class FString String;  // 0 400880 CPF_Parm CPF_CoerceParm CPF_NeedCtorLink
  FLOAT XL;  // 8 180 CPF_Parm CPF_OutParm
  FLOAT YL;  // C 180 CPF_Parm CPF_OutParm
};


//  Canvas.DrawTextClipped 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execDrawTextClipped_Parms {
  class FString Text;  // 0 400880 CPF_Parm CPF_CoerceParm CPF_NeedCtorLink
  BITFIELD bCheckHotKey : 1;  // 8 90 CPF_OptionalParm CPF_Parm
};


//  Canvas.DrawTileClipped 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execDrawTileClipped_Parms {
  class UMaterial* mat;  // 0 80 CPF_Parm
  FLOAT XL;  // 4 80 CPF_Parm
  FLOAT YL;  // 8 80 CPF_Parm
  FLOAT U;  // C 80 CPF_Parm
  FLOAT V;  // 10 80 CPF_Parm
  FLOAT UL;  // 14 80 CPF_Parm
  FLOAT VL;  // 18 80 CPF_Parm
};


//  Canvas.DrawPositionedActorWithCameraEffects 20400 0 ( FUNC_Native FUNC_Public )
struct UCanvas_execDrawPositionedActorWithCameraEffects_Parms {
  class AActor* A;  // 0 80 CPF_Parm
  FLOAT Distance;  // 4 80 CPF_Parm
  BITFIELD Wireframe : 1;  // 8 80 CPF_Parm
  TArray<class UCameraEffect*> CameraEffects;  // C 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD ClearZ : 1;  // 18 90 CPF_OptionalParm CPF_Parm
  FLOAT DisplayFOV;  // 1C 90 CPF_OptionalParm CPF_Parm
  class FRotator cameraRot;  // 20 90 CPF_OptionalParm CPF_Parm
};


//  Canvas.DrawPositionedActor 20400 0 ( FUNC_Native FUNC_Public )
struct UCanvas_execDrawPositionedActor_Parms {
  class AActor* A;  // 0 80 CPF_Parm
  FLOAT Distance;  // 4 80 CPF_Parm
  BITFIELD Wireframe : 1;  // 8 80 CPF_Parm
  BITFIELD ClearZ : 1;  // C 90 CPF_OptionalParm CPF_Parm
  FLOAT DisplayFOV;  // 10 90 CPF_OptionalParm CPF_Parm
  class FRotator cameraRot;  // 14 90 CPF_OptionalParm CPF_Parm
};


//  Canvas.DrawActor 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execDrawActor_Parms {
  class AActor* A;  // 0 80 CPF_Parm
  BITFIELD Wireframe : 1;  // 4 80 CPF_Parm
  BITFIELD ClearZ : 1;  // 8 90 CPF_OptionalParm CPF_Parm
  FLOAT DisplayFOV;  // C 90 CPF_OptionalParm CPF_Parm
};


//  Canvas.DrawTilePixelClamped 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execDrawTilePixelClamped_Parms {
  class UMaterial* mat;  // 0 80 CPF_Parm
  FLOAT XL;  // 4 80 CPF_Parm
  FLOAT YL;  // 8 80 CPF_Parm
  FLOAT U;  // C 80 CPF_Parm
  FLOAT V;  // 10 80 CPF_Parm
  FLOAT UL;  // 14 80 CPF_Parm
  FLOAT VL;  // 18 80 CPF_Parm
};


//  Canvas.DrawTileClamped 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execDrawTileClamped_Parms {
  class UMaterial* mat;  // 0 80 CPF_Parm
  FLOAT XL;  // 4 80 CPF_Parm
  FLOAT YL;  // 8 80 CPF_Parm
  FLOAT U;  // C 80 CPF_Parm
  FLOAT V;  // 10 80 CPF_Parm
  FLOAT UL;  // 14 80 CPF_Parm
  FLOAT VL;  // 18 80 CPF_Parm
};


//  Canvas.DrawTile 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execDrawTile_Parms {
  class UMaterial* mat;  // 0 80 CPF_Parm
  FLOAT XL;  // 4 80 CPF_Parm
  FLOAT YL;  // 8 80 CPF_Parm
  FLOAT U;  // C 80 CPF_Parm
  FLOAT V;  // 10 80 CPF_Parm
  FLOAT UL;  // 14 80 CPF_Parm
  FLOAT VL;  // 18 80 CPF_Parm
};


//  Canvas.DrawText 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execDrawText_Parms {
  class FString Text;  // 0 400880 CPF_Parm CPF_CoerceParm CPF_NeedCtorLink
  BITFIELD CR : 1;  // 8 90 CPF_OptionalParm CPF_Parm
};


//  Canvas.StrLen 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct UCanvas_execStrLen_Parms {
  class FString String;  // 0 400880 CPF_Parm CPF_CoerceParm CPF_NeedCtorLink
  FLOAT XL;  // 8 180 CPF_Parm CPF_OutParm
  FLOAT YL;  // C 180 CPF_Parm CPF_OutParm
};


// UCanvas 132 ( CLASS_Compiled CLASS_Parsed CLASS_Localized CLASS_NoExport )
class DLL_IMPORT UCanvas : public UObject {
  public:
    class UFont* Font;  // 28 2000000 CPF_EditorData
    FLOAT FontScaleX;  // 2C 2000000 CPF_EditorData
    FLOAT FontScaleY;  // 30 2000000 CPF_EditorData
    FLOAT SpaceX;  // 34 2000000 CPF_EditorData
    FLOAT SpaceY;  // 38 2000000 CPF_EditorData
    FLOAT OrgX;  // 3C 2000000 CPF_EditorData
    FLOAT OrgY;  // 40 2000000 CPF_EditorData
    FLOAT ClipX;  // 44 2000000 CPF_EditorData
    FLOAT ClipY;  // 48 2000000 CPF_EditorData
    FLOAT CurX;  // 4C 2000000 CPF_EditorData
    FLOAT CurY;  // 50 2000000 CPF_EditorData
    FLOAT Z;  // 54 2000000 CPF_EditorData
    BYTE Style;  // 58 2000000 CPF_EditorData
    FLOAT CurYL;  // 5C 2000000 CPF_EditorData
    class FColor DrawColor;  // 60 2000000 CPF_EditorData
    BITFIELD bCenter : 1;  // 64 2000000 CPF_EditorData
    BITFIELD bNoSmooth : 1;  // 64 2000000 CPF_EditorData
    BITFIELD bIgnoreTextColorCodes : 1;  // 64 2000000 CPF_EditorData
    INT SizeX;  // 68 2000002 CPF_Const CPF_EditorData
    INT SizeY;  // 6C 2000002 CPF_Const CPF_EditorData
    class FPlane ColorModulate;  // 70 2000000 CPF_EditorData
    BITFIELD bForceAlpha : 1;  // 80 2000000 CPF_EditorData
    FLOAT ForcedAlpha;  // 84 2000000 CPF_EditorData
    BITFIELD bRenderLevel : 1;  // 88 2000000 CPF_EditorData
    class UFont* TinyFont;  // 8C 0
    class UFont* SmallFont;  // 90 0
    class UFont* MedFont;  // 94 0
    class FString TinyFontName;  // 98 408000 CPF_Localized CPF_NeedCtorLink
    class FString SmallFontName;  // A0 408000 CPF_Localized CPF_NeedCtorLink
    class FString MedFontName;  // A8 408000 CPF_Localized CPF_NeedCtorLink
    class UViewport* Viewport;  // B0 2000002 CPF_Const CPF_EditorData
    DWORD pCanvasUtil;  // B4 2002002 CPF_Const CPF_Transient CPF_EditorData
    BYTE LastStyle;  // B8 0
    class UMaterial* LastMaterial;  // BC 0
    virtual ~UCanvas(void);
    virtual void Destroy(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Init(class UViewport *);
    virtual void Update(void);
    virtual void DrawTile(class UMaterial *,float,float,float,float,float,float,float,float,float,class FPlane,class FPlane);
    virtual void DrawIcon(class UMaterial *,float,float,float,float,float,class FPlane,class FPlane);
    virtual void DrawPattern(class UMaterial *,float,float,float,float,float,float,float,float,class FPlane,class FPlane);
    virtual void CDECL WrappedStrLenf(class UFont *,float,float,int &,int &,unsigned short const *,...);
    virtual void CDECL WrappedStrLenf(class UFont *,int &,int &,unsigned short const *,...);
    virtual void CDECL WrappedPrintf(class UFont *,float,float,int,unsigned short const *,...);
    virtual void CDECL WrappedPrintf(class UFont *,int,unsigned short const *,...);
    virtual void WrapStringToArray(unsigned short const *,class TArray<class FString> *,float,class UFont *,unsigned short);
    virtual void ClippedStrLen(class UFont *,float,float,float &,float &,unsigned short const *);
    virtual void ClippedPrint(class UFont *,float,float,int,unsigned short const *);
    virtual void DrawTileClamped(class UMaterial *,float,float,float,float,float,float);
    virtual void DrawTileStretched(class UMaterial *,float,float,float,float);
    virtual void DrawTileScaled(class UMaterial *,float,float,float,float);
    virtual void DrawTileBound(class UMaterial *,float,float,float,float);
    virtual void DrawTileJustified(class UMaterial *,float,float,float,float,unsigned char);
    virtual void DrawTileScaleBound(class UMaterial *,float,float,float,float);
    virtual void DrawTileStretchedOrScaled(class UMaterial *,float,float,float,float,float,float);
    virtual void CDECL DrawTextJustified(unsigned char,float,float,float,float,unsigned short const *,...);
    virtual void DrawTileTiled(class UMaterial *,float,float,float,float,float,float,float,float);
    virtual void DrawTileTitleStretched(class UMaterial *,float,float,float,float,float,float,float,float);
    virtual void DrawTileStretchedEx(class UMaterial *,float,float,float,float,float,float,float,float);
    virtual void DrawTilePixelClamped(class UMaterial *,float,float,float,float,float,float,float,float,float,class FPlane,class FPlane);
    virtual void DrawTileStyled(class UMaterial *,float,float,float,float,float,float,float,float,class FColor,enum ERenderStyle,enum EFillStyle,int,int);
    virtual void SetClip(int,int,int,int);
    UCanvas(class UCanvas const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UCanvas & operator=(class UCanvas const &);
    static void CDECL AddTextColorCode(class FString *,class FColor);
    void DrawActor(class AActor *,int,int,float);
    void DrawPositionedActor(class AActor *,int,class TArray<class UCameraEffect *> const *,int,float,class FVector,float,class FRotator,bool,class FColor);
    void DrawRow(class UMaterial *,struct UGUI_BaseDesktop::base_rect<float> &,struct UGUI_BaseDesktop::base_rect<float> &,struct UGUI_BaseDesktop::base_rect<int> &,int const &,int const &,int const &,int const &,int const &,float const &,class FColor const &,class FPlane const &);
    void DrawScreenActor(class AActor *,int,int,float);
    static bool CDECL GUI_ClipToRect(struct UGUI_BaseDesktop::base_rect<float> const *,struct UGUI_BaseDesktop::base_rect<float> *,struct UGUI_BaseDesktop::base_rect<int> *);
    float GUI_DrawText(class UFont *,class FString const &,struct UGUI_BaseDesktop::base_rect<float> *,float,float,struct UGUI_BaseDesktop::base_rect<float> const *,float,class FPlane,class FPlane,bool);
    void GUI_DrawTile(class UMaterial *,struct UGUI_BaseDesktop::base_rect<float> *,struct UGUI_BaseDesktop::base_rect<int> *,struct UGUI_BaseDesktop::base_rect<float> const *,float,class FPlane,class FPlane,bool);
    void GUI_DrawTilePixelClamped(class UMaterial *,struct UGUI_BaseDesktop::base_rect<float> *,struct UGUI_BaseDesktop::base_rect<int> *,struct UGUI_BaseDesktop::base_rect<float> const *,float,class FPlane,class FPlane);
    void GUI_DrawTileStretched(class UMaterial *,struct UGUI_BaseDesktop::base_rect<float> *,struct UGUI_BaseDesktop::base_rect<int> *,struct UGUI_BaseDesktop::base_rect<float> const *,float,class FPlane,class FPlane);
    void GUI_DrawTileTiled(class UMaterial *,struct UGUI_BaseDesktop::base_rect<float> *,struct UGUI_BaseDesktop::base_rect<int> *,struct UGUI_BaseDesktop::base_rect<float> const *,float,class FPlane,class FPlane);
    static float CDECL GUI_FormatText(class UFont *,class FString const &,struct UGUI_BaseDesktop::base_rect<float> *,float,float,class std::deque<class FString,class std::allocator<class FString> > *,int,int *,int *,int *,int *);
    static float CDECL GUI_GetCharWidth(class UFont *,char,float);
    static float CDECL GUI_GetTextHeight(class UFont *,float);
    static float CDECL GUI_GetTextWidth(class UFont *,class FString const &,float);
    static void CDECL InternalConstructor(void *);
    void SetScreenLight(int,class FVector const &,class FColor,float);
    static class UClass * CDECL StaticClass(void);
    void eventReset(void);
    void execClear(struct FFrame &,void * const);
    void execDrawActor(struct FFrame &,void * const);
    void execDrawActorClipped(struct FFrame &,void * const);
    void execDrawPortal(struct FFrame &,void * const);
    void execDrawPositionedActor(struct FFrame &,void * const);
    void execDrawPositionedActorWithCameraEffects(struct FFrame &,void * const);
    void execDrawScreenActor(struct FFrame &,void * const);
    void execDrawText(struct FFrame &,void * const);
    void execDrawTextClipped(struct FFrame &,void * const);
    void execDrawTextJustified(struct FFrame &,void * const);
    void execDrawTile(struct FFrame &,void * const);
    void execDrawTileClamped(struct FFrame &,void * const);
    void execDrawTileClipped(struct FFrame &,void * const);
    void execDrawTileJustified(struct FFrame &,void * const);
    void execDrawTilePartialStretched(struct FFrame &,void * const);
    void execDrawTilePixelClamped(struct FFrame &,void * const);
    void execDrawTileScaled(struct FFrame &,void * const);
    void execDrawTileStretched(struct FFrame &,void * const);
    void execDrawTileStretchedEx(struct FFrame &,void * const);
    void execGetCameraLocation(struct FFrame &,void * const);
    void execSetScreenLight(struct FFrame &,void * const);
    void execSetScreenProjector(struct FFrame &,void * const);
    void execStrLen(struct FFrame &,void * const);
    void execTextSize(struct FFrame &,void * const);
    void execWorldToScreen(struct FFrame &,void * const);
    void execWrapStringToArray(struct FFrame &,void * const);
    void execWrapText(struct FFrame &,void * const);
  protected:
    UCanvas(void);
  private:
    static class UClass PrivateStaticClass;
    void WrappedPrint(enum ERenderStyle,int &,int &,class UFont *,float,float,int,unsigned short const *);
};
AUTOGENERATE_FUNCTION(UCanvas,0,execClear)
AUTOGENERATE_FUNCTION(UCanvas,0,execDrawActor)
AUTOGENERATE_FUNCTION(UCanvas,0,execDrawActorClipped)
AUTOGENERATE_FUNCTION(UCanvas,0,execDrawPortal)
AUTOGENERATE_FUNCTION(UCanvas,0,execDrawPositionedActor)
AUTOGENERATE_FUNCTION(UCanvas,0,execDrawPositionedActorWithCameraEffects)
AUTOGENERATE_FUNCTION(UCanvas,0,execDrawScreenActor)
AUTOGENERATE_FUNCTION(UCanvas,0,execDrawText)
AUTOGENERATE_FUNCTION(UCanvas,0,execDrawTextClipped)
AUTOGENERATE_FUNCTION(UCanvas,0,execDrawTextJustified)
AUTOGENERATE_FUNCTION(UCanvas,0,execDrawTile)
AUTOGENERATE_FUNCTION(UCanvas,0,execDrawTileClamped)
AUTOGENERATE_FUNCTION(UCanvas,0,execDrawTileClipped)
AUTOGENERATE_FUNCTION(UCanvas,0,execDrawTileJustified)
AUTOGENERATE_FUNCTION(UCanvas,0,execDrawTilePartialStretched)
AUTOGENERATE_FUNCTION(UCanvas,0,execDrawTilePixelClamped)
AUTOGENERATE_FUNCTION(UCanvas,0,execDrawTileScaled)
AUTOGENERATE_FUNCTION(UCanvas,0,execDrawTileStretched)
AUTOGENERATE_FUNCTION(UCanvas,0,execDrawTileStretchedEx)
AUTOGENERATE_FUNCTION(UCanvas,0,execGetCameraLocation)
AUTOGENERATE_FUNCTION(UCanvas,0,execSetScreenLight)
AUTOGENERATE_FUNCTION(UCanvas,0,execSetScreenProjector)
AUTOGENERATE_FUNCTION(UCanvas,0,execStrLen)
AUTOGENERATE_FUNCTION(UCanvas,0,execTextSize)
AUTOGENERATE_FUNCTION(UCanvas,0,execWorldToScreen)
AUTOGENERATE_FUNCTION(UCanvas,0,execWrapStringToArray)
AUTOGENERATE_FUNCTION(UCanvas,0,execWrapText)


//------------------------------------------------------------------------------
//  FadeBlackWhite
//------------------------------------------------------------------------------

// UFadeBlackWhite 3112 ( CLASS_Compiled CLASS_Parsed CLASS_NoExport CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UFadeBlackWhite : public UCameraEffect {
  public:
    FLOAT FadeTime;  // 34 1 CPF_Edit
    FLOAT FadeDir;  // 38 1 CPF_Edit
    FLOAT LastAlpha;  // 3C 2 CPF_Const
    FLOAT LastFrameTime;  // 40 2 CPF_Const
    virtual ~UFadeBlackWhite(void);
    virtual unsigned int GetCPPSize(void);
    virtual void PreRender(class UViewport *,class FRenderInterface *);
    virtual void PostRender(class UViewport *,class FRenderInterface *);
    UFadeBlackWhite(class UFadeBlackWhite const &);
    UFadeBlackWhite(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UFadeBlackWhite & operator=(class UFadeBlackWhite const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  BlackWhite
//------------------------------------------------------------------------------

// UBlackWhite 3112 ( CLASS_Compiled CLASS_Parsed CLASS_NoExport CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UBlackWhite : public UCameraEffect {
  public:
    virtual ~UBlackWhite(void);
    virtual unsigned int GetCPPSize(void);
    virtual void PreRender(class UViewport *,class FRenderInterface *);
    virtual void PostRender(class UViewport *,class FRenderInterface *);
    UBlackWhite(class UBlackWhite const &);
    UBlackWhite(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UBlackWhite & operator=(class UBlackWhite const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  CameraOverlay
//------------------------------------------------------------------------------

// UCameraOverlay 3112 ( CLASS_Compiled CLASS_Parsed CLASS_NoExport CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UCameraOverlay : public UCameraEffect {
  public:
    class FColor OverlayColor;  // 34 1 CPF_Edit
    class UMaterial* OverlayMaterial;  // 38 1 CPF_Edit
    virtual ~UCameraOverlay(void);
    virtual unsigned int GetCPPSize(void);
    virtual void PostRender(class UViewport *,class FRenderInterface *);
    UCameraOverlay(class UCameraOverlay const &);
    UCameraOverlay(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UCameraOverlay & operator=(class UCameraOverlay const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  MotionBlur
//------------------------------------------------------------------------------

// UMotionBlur 3112 ( CLASS_Compiled CLASS_Parsed CLASS_NoExport CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UMotionBlur : public UCameraEffect {
  public:
    BYTE BlurAlpha;  // 34 1 CPF_Edit
    DWORD RenderTargets[2];  // 38 2002 CPF_Const CPF_Transient
    FLOAT LastFrameTime;  // 40 2 CPF_Const
    virtual ~UMotionBlur(void);
    virtual void Destroy(void);
    virtual unsigned int GetCPPSize(void);
    virtual void PreRender(class UViewport *,class FRenderInterface *);
    virtual void PostRender(class UViewport *,class FRenderInterface *);
    UMotionBlur(class UMotionBlur const &);
    UMotionBlur(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UMotionBlur & operator=(class UMotionBlur const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SubActionCameraEffect
//------------------------------------------------------------------------------

// USubActionCameraEffect 3132 ( CLASS_Compiled CLASS_Parsed CLASS_Localized CLASS_NoExport CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT USubActionCameraEffect : public UMatSubAction {
  public:
    class UCameraEffect* CameraEffect;  // 4C 4000001 CPF_Edit CPF_EditInline
    FLOAT StartAlpha;  // 50 1 CPF_Edit
    FLOAT EndAlpha;  // 54 1 CPF_Edit
    BITFIELD DisableAfterDuration : 1;  // 58 1 CPF_Edit
    virtual ~USubActionCameraEffect(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Update(float,class ASceneManager *);
    virtual class FString GetStatString(void);
    USubActionCameraEffect(class USubActionCameraEffect const &);
    USubActionCameraEffect(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USubActionCameraEffect & operator=(class USubActionCameraEffect const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  BeamEmitter
//------------------------------------------------------------------------------

enum EBeamEndPointType {
  PTEP_Velocity = 0,
  PTEP_Distance = 1,
  PTEP_Offset = 2,
  PTEP_Actor = 3,
  PTEP_TraceOffset = 4,
  PTEP_OffsetAsAbsolute = 5,
  PTEP_DynamicDistance = 6
};

// FParticleBeamScale 0 ( )
struct DLL_IMPORT FParticleBeamScale {
  public:
    class FVector FrequencyScale;  // 0 1 CPF_Edit
    FLOAT RelativeLength;  // C 1 CPF_Edit
};

// FParticleBeamEndPoint 0 ( )
struct DLL_IMPORT FParticleBeamEndPoint {
  public:
    FName ActorTag;  // 0 1 CPF_Edit
    class FRangeVector Offset;  // 4 1 CPF_Edit
    FLOAT Weight;  // 1C 1 CPF_Edit
};

// FParticleBeamData 0 ( )
struct DLL_IMPORT FParticleBeamData {
  public:
    class FVector Location;  // 0 0
    FLOAT t;  // C 0
};

// UBeamEmitter 1012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew )
class DLL_IMPORT UBeamEmitter : public UParticleEmitter {
  public:
    class FRange BeamDistanceRange;  // 520 1 CPF_Edit
    TArray<struct FParticleBeamEndPoint> BeamEndPoints;  // 528 400001 CPF_Edit CPF_NeedCtorLink
    BYTE DetermineEndPointBy;  // 534 1 CPF_Edit
    FLOAT BeamTextureUScale;  // 538 1 CPF_Edit
    FLOAT BeamTextureVScale;  // 53C 1 CPF_Edit
    INT RotatingSheets;  // 540 1 CPF_Edit
    BITFIELD TriggerEndpoint : 1;  // 544 1 CPF_Edit
    class FRangeVector LowFrequencyNoiseRange;  // 548 1 CPF_Edit
    INT LowFrequencyPoints;  // 560 1 CPF_Edit
    class FRangeVector HighFrequencyNoiseRange;  // 564 1 CPF_Edit
    INT HighFrequencyPoints;  // 57C 1 CPF_Edit
    TArray<struct FParticleBeamScale> LFScaleFactors;  // 580 400001 CPF_Edit CPF_NeedCtorLink
    TArray<struct FParticleBeamScale> HFScaleFactors;  // 58C 400001 CPF_Edit CPF_NeedCtorLink
    FLOAT LFScaleRepeats;  // 598 1 CPF_Edit
    FLOAT HFScaleRepeats;  // 59C 1 CPF_Edit
    BITFIELD UseHighFrequencyScale : 1;  // 5A0 1 CPF_Edit
    BITFIELD UseLowFrequencyScale : 1;  // 5A0 1 CPF_Edit
    BITFIELD NoiseDeterminesEndPoint : 1;  // 5A0 1 CPF_Edit
    class FRangeVector DynamicHFNoiseRange;  // 5A4 1 CPF_Edit
    class FRange DynamicHFNoisePointsRange;  // 5BC 1 CPF_Edit
    class FRange DynamicTimeBetweenNoiseRange;  // 5C4 1 CPF_Edit
    BITFIELD UseBranching : 1;  // 5CC 1 CPF_Edit
    class FRange BranchProbability;  // 5D0 1 CPF_Edit
    class FRange BranchHFPointsRange;  // 5D8 1 CPF_Edit
    INT BranchEmitter;  // 5E0 1 CPF_Edit
    class FRange BranchSpawnAmountRange;  // 5E4 1 CPF_Edit
    BITFIELD LinkupLifetime : 1;  // 5EC 1 CPF_Edit
    INT SheetsUsed;  // 5F0 2000 CPF_Transient
    INT VerticesPerParticle;  // 5F4 2000 CPF_Transient
    INT IndicesPerParticle;  // 5F8 2000 CPF_Transient
    INT PrimitivesPerParticle;  // 5FC 2000 CPF_Transient
    FLOAT BeamValueSum;  // 600 2000 CPF_Transient
    TArray<struct FParticleBeamData> HFPoints;  // 604 402000 CPF_Transient CPF_NeedCtorLink
    TArray<class FVector> LFPoints;  // 610 402000 CPF_Transient CPF_NeedCtorLink
    TArray<class AActor*> HitActors;  // 61C 402000 CPF_Transient CPF_NeedCtorLink
    FLOAT TimeSinceLastDynamicNoise;  // 628 2000 CPF_Transient
    virtual ~UBeamEmitter(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Initialize(int);
    virtual void CleanUp(void);
    virtual void Scale(float);
    virtual void SpawnParticle(int,float,int,int,class FVector const &);
    virtual int UpdateParticles(float);
    virtual int RenderParticles(class FDynamicActor *,class FLevelSceneNode *,class TList<class FDynamicLight *> *,class FRenderInterface *);
    virtual void UpdateActorHitList(void);
    virtual void UpdateBeamLength(float);
    UBeamEmitter(class UBeamEmitter const &);
    UBeamEmitter(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UBeamEmitter & operator=(class UBeamEmitter const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  I3DL2Listener
//------------------------------------------------------------------------------

// UI3DL2Listener 1013 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew )
class DLL_IMPORT UI3DL2Listener : public UObject {
  public:
    FLOAT EnvironmentSize;  // 28 1 CPF_Edit
    FLOAT EnvironmentDiffusion;  // 2C 1 CPF_Edit
    INT Room;  // 30 1 CPF_Edit
    INT RoomHF;  // 34 1 CPF_Edit
    INT RoomLF;  // 38 1 CPF_Edit
    FLOAT DecayTime;  // 3C 1 CPF_Edit
    FLOAT DecayHFRatio;  // 40 1 CPF_Edit
    FLOAT DecayLFRatio;  // 44 1 CPF_Edit
    INT Reflections;  // 48 1 CPF_Edit
    FLOAT ReflectionsDelay;  // 4C 1 CPF_Edit
    class FVector ReflectionsPan;  // 50 1 CPF_Edit
    INT Reverb;  // 5C 1 CPF_Edit
    FLOAT ReverbDelay;  // 60 1 CPF_Edit
    class FVector ReverbPan;  // 64 1 CPF_Edit
    FLOAT EchoTime;  // 70 1 CPF_Edit
    FLOAT EchoDepth;  // 74 1 CPF_Edit
    FLOAT ModulationTime;  // 78 1 CPF_Edit
    FLOAT ModulationDepth;  // 7C 1 CPF_Edit
    FLOAT RoomRolloffFactor;  // 80 1 CPF_Edit
    FLOAT AirAbsorptionHF;  // 84 1 CPF_Edit
    FLOAT HFReference;  // 88 1 CPF_Edit
    FLOAT LFReference;  // 8C 1 CPF_Edit
    BITFIELD bDecayTimeScale : 1;  // 90 1 CPF_Edit
    BITFIELD bReflectionsScale : 1;  // 90 1 CPF_Edit
    BITFIELD bReflectionsDelayScale : 1;  // 90 1 CPF_Edit
    BITFIELD bReverbScale : 1;  // 90 1 CPF_Edit
    BITFIELD bReverbDelayScale : 1;  // 90 1 CPF_Edit
    BITFIELD bEchoTimeScale : 1;  // 90 1 CPF_Edit
    BITFIELD bModulationTimeScale : 1;  // 90 1 CPF_Edit
    BITFIELD bDecayHFLimit : 1;  // 90 1 CPF_Edit
    INT Environment;  // 94 2000 CPF_Transient
    INT Updated;  // 98 2000 CPF_Transient
    virtual ~UI3DL2Listener(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    UI3DL2Listener(class UI3DL2Listener const &);
    UI3DL2Listener(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UI3DL2Listener & operator=(class UI3DL2Listener const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Sound
//------------------------------------------------------------------------------

// USound 112 ( CLASS_Compiled CLASS_Parsed CLASS_NoExport )
class DLL_IMPORT USound : public UObject {
  public:
    FLOAT Likelihood;  // 28 1001 CPF_Edit CPF_Native
    BYTE Data[48];  // 2C 2001002 CPF_Const CPF_Native CPF_EditorData
    FName FileType;  // 5C 1002 CPF_Const CPF_Native
    class FString fileName;  // 60 1002 CPF_Const CPF_Native
    INT OriginalSize;  // 68 1002 CPF_Const CPF_Native
    FLOAT Duration;  // 6C 1002 CPF_Const CPF_Native
    DWORD Handle;  // 70 3002 CPF_Const CPF_Native CPF_Transient
    INT flags;  // 74 1002 CPF_Const CPF_Native
    INT VoiceCodec;  // 78 1002 CPF_Const CPF_Native
    FLOAT InitialSeekTime;  // 7C 1002 CPF_Const CPF_Native
    FLOAT BaseRadius;  // 80 1 CPF_Edit
    FLOAT VelocityScale;  // 84 1 CPF_Edit
    virtual ~USound(void);
    virtual void PostLoad(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    virtual class USound * RenderSoundPlay(float *,float *);
    virtual bool IsValid(void);
    virtual class FSoundData & GetData(void);
    virtual class FName GetFileType(void);
    virtual void SetFileType(class FName);
    virtual unsigned short const * GetFilename(void);
    virtual int GetOriginalSize(void);
    virtual void * GetHandle(void);
    virtual void SetHandle(void *);
    virtual int GetFlags(void);
    virtual float GetDuration(void);
    virtual float GetRadius(void);
    virtual float GetVelocityScale(void);
    virtual void SetDuration(float);
    virtual void Load(void);
    virtual bool CanLoadSounds(void);
    USound(class USound const &);
    USound(int);
    USound(unsigned short const *,int);
    USound(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USound & operator=(class USound const &);
    static class UAudioSubsystem * Audio;
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SurfaceSoundGroup
//------------------------------------------------------------------------------

// FSurfaceSoundSubGroup 0 ( )
struct DLL_IMPORT FSurfaceSoundSubGroup {
  public:
    BYTE MaterialSurfaceType;  // 0 1 CPF_Edit
    TArray<class USound*> Sounds;  // 4 400001 CPF_Edit CPF_NeedCtorLink
};

// USurfaceSoundGroup 112 ( CLASS_Compiled CLASS_Parsed CLASS_NoExport )
class DLL_IMPORT USurfaceSoundGroup : public USound {
  public:
    TArray<struct FSurfaceSoundSubGroup> SubGroups;  // 88 400001 CPF_Edit CPF_NeedCtorLink
    class USound* RenderedSound;  // 94 2002 CPF_Const CPF_Transient
    virtual ~USurfaceSoundGroup(void);
    virtual void PostLoad(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual class USound * RenderSoundPlay(float *,float *);
    virtual bool IsValid(void);
    virtual class FSoundData & GetData(void);
    virtual class FName GetFileType(void);
    virtual void SetFileType(class FName);
    virtual unsigned short const * GetFilename(void);
    virtual int GetOriginalSize(void);
    virtual void * GetHandle(void);
    virtual void SetHandle(void *);
    virtual int GetFlags(void);
    virtual float GetDuration(void);
    virtual float GetRadius(void);
    virtual float GetVelocityScale(void);
    virtual void SetDuration(float);
    virtual void Load(void);
    USurfaceSoundGroup(class USurfaceSoundGroup const &);
    USurfaceSoundGroup(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USurfaceSoundGroup & operator=(class USurfaceSoundGroup const &);
    static void CDECL InternalConstructor(void *);
    class USound * SelectSound(int);
    static class UClass * CDECL StaticClass(void);
  protected:
    class USound * SelectFromGroup(struct FSurfaceSoundGroup &);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SoundGroup
//------------------------------------------------------------------------------

// USoundGroup 112 ( CLASS_Compiled CLASS_Parsed CLASS_NoExport )
class DLL_IMPORT USoundGroup : public USound {
  public:
    class FString Package;  // 88 20400000 CPF_NeedCtorLink CPF_Deprecated
    TArray<class USound*> Sounds;  // 90 1001 CPF_Edit CPF_Native
    FLOAT TotalLikelihood;  // 9C 3002 CPF_Const CPF_Native CPF_Transient
    class USound* RenderedSound;  // A0 2002 CPF_Const CPF_Transient
    virtual ~USoundGroup(void);
    virtual void PostLoad(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual class USound * RenderSoundPlay(float *,float *);
    virtual bool IsValid(void);
    virtual class FSoundData & GetData(void);
    virtual class FName GetFileType(void);
    virtual void SetFileType(class FName);
    virtual unsigned short const * GetFilename(void);
    virtual int GetOriginalSize(void);
    virtual void * GetHandle(void);
    virtual void SetHandle(void *);
    virtual int GetFlags(void);
    virtual float GetDuration(void);
    virtual float GetRadius(void);
    virtual float GetVelocityScale(void);
    virtual void SetDuration(float);
    virtual void Load(void);
    USoundGroup(class USoundGroup const &);
    USoundGroup(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class USoundGroup & operator=(class USoundGroup const &);
    static void CDECL InternalConstructor(void *);
    void RefreshGroup(class FString const &);
    void RefreshGroup(int);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  ProceduralSound
//------------------------------------------------------------------------------

// UProceduralSound 112 ( CLASS_Compiled CLASS_Parsed CLASS_NoExport )
class DLL_IMPORT UProceduralSound : public USound {
  public:
    class USound* BaseSound;  // 88 1 CPF_Edit
    FLOAT PitchModification;  // 8C 1 CPF_Edit
    FLOAT VolumeModification;  // 90 1 CPF_Edit
    FLOAT PitchVariance;  // 94 1 CPF_Edit
    FLOAT VolumeVariance;  // 98 1 CPF_Edit
    FLOAT RenderedPitchModification;  // 9C 2000 CPF_Transient
    FLOAT RenderedVolumeModification;  // A0 2000 CPF_Transient
    virtual ~UProceduralSound(void);
    virtual void PostLoad(void);
    virtual void Destroy(void);
    virtual void Serialize(class FArchive &);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual class USound * RenderSoundPlay(float *,float *);
    virtual bool IsValid(void);
    virtual class FSoundData & GetData(void);
    virtual class FName GetFileType(void);
    virtual void SetFileType(class FName);
    virtual unsigned short const * GetFilename(void);
    virtual int GetOriginalSize(void);
    virtual void * GetHandle(void);
    virtual void SetHandle(void *);
    virtual int GetFlags(void);
    virtual float GetDuration(void);
    virtual float GetRadius(void);
    virtual float GetVelocityScale(void);
    virtual void SetDuration(float);
    virtual void Load(void);
    UProceduralSound(class UProceduralSound const &);
    UProceduralSound(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UProceduralSound & operator=(class UProceduralSound const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Crowd
//------------------------------------------------------------------------------

// ACrowd 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT ACrowd : public AActor {
  public:
    BYTE _Level;  // 420 0
    INT MemberCount;  // 424 0
    INT Size;  // 428 0
    virtual ~ACrowd(void);
    virtual unsigned int GetCPPSize(void);
    ACrowd(class ACrowd const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ACrowd & operator=(class ACrowd const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    ACrowd(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  PathNode
//------------------------------------------------------------------------------

// APathNode 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT APathNode : public ANavigationPoint {
  public:
    virtual ~APathNode(void);
    virtual unsigned int GetCPPSize(void);
    virtual int AddMyMarker(class AActor *);
    virtual int ReviewPath(class APawn *);
    virtual void CheckSymmetry(class ANavigationPoint *);
    APathNode(class APathNode const &);
    APathNode(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class APathNode & operator=(class APathNode const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  RoadPathNode
//------------------------------------------------------------------------------

// ARoadPathNode 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT ARoadPathNode : public APathNode {
  public:
    FLOAT MaxRoadDist;  // 494 1 CPF_Edit
    virtual ~ARoadPathNode(void);
    virtual unsigned int GetCPPSize(void);
    virtual int ProscribedPathTo(class ANavigationPoint *);
    virtual int ReviewPath(class APawn *);
    ARoadPathNode(class ARoadPathNode const &);
    ARoadPathNode(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ARoadPathNode & operator=(class ARoadPathNode const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  FlyingPathNode
//------------------------------------------------------------------------------

// AFlyingPathNode 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT AFlyingPathNode : public APathNode {
  public:
    virtual ~AFlyingPathNode(void);
    virtual unsigned int GetCPPSize(void);
    virtual int ReachedBy(class APawn *,class FVector);
    virtual int NoReachDistance(void);
    virtual int ProscribedPathTo(class ANavigationPoint *);
    virtual void addReachSpecs(class APawn *,int);
    virtual void InitForPathFinding(void);
    virtual int ShouldBeBased(void);
    virtual int ReviewPath(class APawn *);
    virtual int BigAnchor(class APawn *,class FVector);
    AFlyingPathNode(class AFlyingPathNode const &);
    AFlyingPathNode(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AFlyingPathNode & operator=(class AFlyingPathNode const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AvoidMarker
//------------------------------------------------------------------------------

//  AvoidMarker.StartleBots 20002 0 ( FUNC_Defined FUNC_Public )
struct AAvoidMarker_execStartleBots_Parms {
};


//  AvoidMarker.RelevantTo 20002 0 ( FUNC_Defined FUNC_Public )
struct AAvoidMarker_execRelevantTo_Parms {
  class APawn* P;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  AvoidMarker.Touch 20002 0 ( FUNC_Defined FUNC_Public )
struct AAvoidMarker_execTouch_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


// AAvoidMarker 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT AAvoidMarker : public ATriggers {
  public:
    BYTE TeamNum;  // 420 0
    virtual ~AAvoidMarker(void);
    virtual unsigned int GetCPPSize(void);
    AAvoidMarker(class AAvoidMarker const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AAvoidMarker & operator=(class AAvoidMarker const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    AAvoidMarker(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AntiPortalActor
//------------------------------------------------------------------------------

// AAntiPortalActor 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT AAntiPortalActor : public AActor {
  public:
    virtual ~AAntiPortalActor(void);
    virtual unsigned int GetCPPSize(void);
    AAntiPortalActor(class AAntiPortalActor const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AAntiPortalActor & operator=(class AAntiPortalActor const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    AAntiPortalActor(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Door
//------------------------------------------------------------------------------

//  Door.SuggestMovePreparation 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ADoor_eventSuggestMovePreparation_Parms {
  class APawn* Other;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Door.ProceedWithMove 20002 0 ( FUNC_Defined FUNC_Public )
struct ADoor_execProceedWithMove_Parms {
  class APawn* Other;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Door.SpecialHandling 20002 0 ( FUNC_Defined FUNC_Public )
struct ADoor_execSpecialHandling_Parms {
  class APawn* Other;  // 0 80 CPF_Parm
  class AActor* ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Door.MoverClosed 20002 0 ( FUNC_Defined FUNC_Public )
struct ADoor_execMoverClosed_Parms {
};


//  Door.MoverOpened 20002 0 ( FUNC_Defined FUNC_Public )
struct ADoor_execMoverOpened_Parms {
};


//  Door.PostBeginPlay 20002 0 ( FUNC_Defined FUNC_Public )
struct ADoor_execPostBeginPlay_Parms {
};


// ADoor 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT ADoor : public ANavigationPoint {
  public:
    FName DoorTag;  // 494 2000001 CPF_Edit CPF_EditorData
    class AMover* MyDoor;  // 498 0
    FName DoorTrigger;  // 49C 2000001 CPF_Edit CPF_EditorData
    class AActor* RecommendedTrigger;  // 4A0 0
    BITFIELD bInitiallyClosed : 1;  // 4A4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bBlockedWhenClosed : 1;  // 4A4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bDoorOpen : 1;  // 4A4 0
    BITFIELD bTempNoCollide : 1;  // 4A4 2000000 CPF_EditorData
    virtual ~ADoor(void);
    virtual unsigned int GetCPPSize(void);
    virtual class AActor * AssociatedLevelGeometry(void);
    virtual int HasAssociatedLevelGeometry(class AActor *);
    virtual void PrePath(void);
    virtual void PostPath(void);
    virtual void PostaddReachSpecs(class APawn *);
    virtual void InitForPathFinding(void);
    virtual void FindBase(void);
    virtual int IsIdentifiedAs(class FName);
    ADoor(class ADoor const &);
    ADoor(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ADoor & operator=(class ADoor const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AutoDoor
//------------------------------------------------------------------------------

// AAutoDoor 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT AAutoDoor : public ADoor {
  public:
    virtual ~AAutoDoor(void);
    virtual unsigned int GetCPPSize(void);
    AAutoDoor(class AAutoDoor const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AAutoDoor & operator=(class AAutoDoor const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    AAutoDoor(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SmallNavigationPoint
//------------------------------------------------------------------------------

// ASmallNavigationPoint 13 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT ASmallNavigationPoint : public ANavigationPoint {
  public:
    virtual ~ASmallNavigationPoint(void);
    virtual unsigned int GetCPPSize(void);
    ASmallNavigationPoint(class ASmallNavigationPoint const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ASmallNavigationPoint & operator=(class ASmallNavigationPoint const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    ASmallNavigationPoint(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Ladder
//------------------------------------------------------------------------------

//  Ladder.SuggestMovePreparation 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ALadder_eventSuggestMovePreparation_Parms {
  class APawn* Other;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


// ALadder 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT ALadder : public ASmallNavigationPoint {
  public:
    class ALadderVolume* MyLadder;  // 494 0
    class ALadder* LadderList;  // 498 0
    virtual ~ALadder(void);
    virtual unsigned int GetCPPSize(void);
    virtual int ReachedBy(class APawn *,class FVector);
    virtual int NoReachDistance(void);
    virtual int ProscribedPathTo(class ANavigationPoint *);
    virtual void addReachSpecs(class APawn *,int);
    virtual void InitForPathFinding(void);
    virtual void ClearPaths(void);
    ALadder(class ALadder const &);
    ALadder(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ALadder & operator=(class ALadder const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AutoLadder
//------------------------------------------------------------------------------

// AAutoLadder 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT AAutoLadder : public ALadder {
  public:
    virtual ~AAutoLadder(void);
    virtual unsigned int GetCPPSize(void);
    virtual int IsIdentifiedAs(class FName);
    AAutoLadder(class AAutoLadder const &);
    AAutoLadder(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AAutoLadder & operator=(class AAutoLadder const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  BlockingVolume
//------------------------------------------------------------------------------

// ABlockingVolume 32 ( CLASS_Compiled CLASS_Parsed CLASS_Localized )
class DLL_IMPORT ABlockingVolume : public AVolume {
  public:
    BITFIELD bClampFluid : 1;  // 494 1 CPF_Edit
    BITFIELD bClassBlocker : 1;  // 494 2000001 CPF_Edit CPF_EditorData
    TArray<class UClass*> BlockedClasses;  // 498 2400001 CPF_Edit CPF_NeedCtorLink CPF_EditorData
    virtual ~ABlockingVolume(void);
    virtual unsigned int GetCPPSize(void);
    virtual int ShouldTrace(class AActor *,unsigned long);
    ABlockingVolume(class ABlockingVolume const &);
    ABlockingVolume(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ABlockingVolume & operator=(class ABlockingVolume const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  PotentialClimbWatcher
//------------------------------------------------------------------------------

//  PotentialClimbWatcher.Tick 20002 0 ( FUNC_Defined FUNC_Public )
struct APotentialClimbWatcher_execTick_Parms {
  FLOAT DeltaTime;  // 0 80 CPF_Parm
};


//  PotentialClimbWatcher.PostBeginPlay 20002 0 ( FUNC_Defined FUNC_Public )
struct APotentialClimbWatcher_execPostBeginPlay_Parms {
};


// APotentialClimbWatcher 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT APotentialClimbWatcher : public AInfo {
  public:
    virtual ~APotentialClimbWatcher(void);
    virtual unsigned int GetCPPSize(void);
    APotentialClimbWatcher(class APotentialClimbWatcher const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class APotentialClimbWatcher & operator=(class APotentialClimbWatcher const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    APotentialClimbWatcher(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  PhysicsVolume
//------------------------------------------------------------------------------

//  PhysicsVolume.CausePainTo 20002 0 ( FUNC_Defined FUNC_Public )
struct APhysicsVolume_execCausePainTo_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  PhysicsVolume.PlayExitSplash 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APhysicsVolume_execPlayExitSplash_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  PhysicsVolume.UnTouch 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct APhysicsVolume_eventUnTouch_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  PhysicsVolume.PlayEntrySplash 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APhysicsVolume_execPlayEntrySplash_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  PhysicsVolume.Touch 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct APhysicsVolume_eventTouch_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  PhysicsVolume.Trigger 20002 0 ( FUNC_Defined FUNC_Public )
struct APhysicsVolume_execTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


//  PhysicsVolume.TimerPop 20002 0 ( FUNC_Defined FUNC_Public )
struct APhysicsVolume_execTimerPop_Parms {
  class AVolumeTimer* t;  // 0 80 CPF_Parm
};


//  PhysicsVolume.BaseChange 20822 0 ( FUNC_Defined FUNC_Singular FUNC_Event FUNC_Public )
struct APhysicsVolume_eventBaseChange_Parms {
};


//  PhysicsVolume.PlayerPawnDiedInVolume 20002 0 ( FUNC_Defined FUNC_Public )
struct APhysicsVolume_execPlayerPawnDiedInVolume_Parms {
  class APawn* Other;  // 0 80 CPF_Parm
};


//  PhysicsVolume.PawnLeavingVolume 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct APhysicsVolume_eventPawnLeavingVolume_Parms {
  class APawn* Other;  // 0 80 CPF_Parm
};


//  PhysicsVolume.PawnEnteredVolume 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct APhysicsVolume_eventPawnEnteredVolume_Parms {
  class APawn* Other;  // 0 80 CPF_Parm
};


//  PhysicsVolume.ActorLeavingVolume 20800 0 ( FUNC_Event FUNC_Public )
struct APhysicsVolume_eventActorLeavingVolume_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  PhysicsVolume.ActorEnteredVolume 20800 0 ( FUNC_Event FUNC_Public )
struct APhysicsVolume_eventActorEnteredVolume_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  PhysicsVolume.PhysicsChangedFor 20800 0 ( FUNC_Event FUNC_Public )
struct APhysicsVolume_eventPhysicsChangedFor_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  PhysicsVolume.Reset 20002 0 ( FUNC_Defined FUNC_Public )
struct APhysicsVolume_execReset_Parms {
};


//  PhysicsVolume.PostBeginPlay 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APhysicsVolume_execPostBeginPlay_Parms {
};


//  PhysicsVolume.PreBeginPlay 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct APhysicsVolume_execPreBeginPlay_Parms {
};


// APhysicsVolume 832 ( CLASS_Compiled CLASS_Parsed CLASS_Localized CLASS_NativeReplication )
class DLL_IMPORT APhysicsVolume : public AVolume {
  public:
    class FVector ZoneVelocity;  // 494 1 CPF_Edit
    class FVector Gravity;  // 4A0 1 CPF_Edit
    class FVector BACKUP_Gravity;  // 4AC 0
    FLOAT GroundFriction;  // 4B8 1 CPF_Edit
    FLOAT TerminalVelocity;  // 4BC 1 CPF_Edit
    FLOAT DamagePerSec;  // 4C0 1 CPF_Edit
    class UClass* DamageType;  // 4C4 1 CPF_Edit
    INT Priority;  // 4C8 2000001 CPF_Edit CPF_EditorData
    class USound* EntrySound;  // 4CC 2000001 CPF_Edit CPF_EditorData
    class USound* ExitSound;  // 4D0 2000001 CPF_Edit CPF_EditorData
    class UI3DL2Listener* VolumeEffect;  // 4D4 4000001 CPF_Edit CPF_EditInline
    class UClass* EntryActor;  // 4D8 2000001 CPF_Edit CPF_EditorData
    class UClass* ExitActor;  // 4DC 2000001 CPF_Edit CPF_EditorData
    class UClass* PawnEntryActor;  // 4E0 2000001 CPF_Edit CPF_EditorData
    FLOAT FluidFriction;  // 4E4 1 CPF_Edit
    class FVector ViewFlash;  // 4E8 1 CPF_Edit
    class FVector ViewFog;  // 4F4 1 CPF_Edit
    BITFIELD bPainCausing : 1;  // 500 2000001 CPF_Edit CPF_EditorData
    BITFIELD BACKUP_bPainCausing : 1;  // 500 0
    BITFIELD bDestructive : 1;  // 500 2000001 CPF_Edit CPF_EditorData
    BITFIELD bNoInventory : 1;  // 500 1 CPF_Edit
    BITFIELD bMoveProjectiles : 1;  // 500 2000001 CPF_Edit CPF_EditorData
    BITFIELD bBounceVelocity : 1;  // 500 2000001 CPF_Edit CPF_EditorData
    BITFIELD bNeutralZone : 1;  // 500 2000001 CPF_Edit CPF_EditorData
    BITFIELD bWaterVolume : 1;  // 500 1 CPF_Edit
    BITFIELD bNoDecals : 1;  // 500 1 CPF_Edit
    BITFIELD bDamagesVehicles : 1;  // 500 1 CPF_Edit
    BITFIELD bDistanceFog : 1;  // 500 2000001 CPF_Edit CPF_EditorData
    FLOAT DistanceFogStart;  // 504 2000001 CPF_Edit CPF_EditorData
    FLOAT DistanceFogEnd;  // 508 2000001 CPF_Edit CPF_EditorData
    BITFIELD bDistanceFogColor : 1;  // 50C 2000001 CPF_Edit CPF_EditorData
    class FColor DistanceFogColor;  // 510 2000001 CPF_Edit CPF_EditorData
    FLOAT DistanceFogBlendTime;  // 514 1 CPF_Edit
    FLOAT KExtraLinearDamping;  // 518 2000001 CPF_Edit CPF_EditorData
    FLOAT KExtraAngularDamping;  // 51C 1 CPF_Edit
    FLOAT KBuoyancy;  // 520 2000001 CPF_Edit CPF_EditorData
    class FString RespawnPoint;  // 524 400001 CPF_Edit CPF_NeedCtorLink
    class AInfo* PainTimer;  // 52C 0
    class APhysicsVolume* NextPhysicsVolume;  // 530 0
    virtual ~APhysicsVolume(void);
    virtual unsigned int GetCPPSize(void);
    virtual void SetZone(int,int);
    virtual void CheckForErrors(void);
    APhysicsVolume(class APhysicsVolume const &);
    APhysicsVolume(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class APhysicsVolume & operator=(class APhysicsVolume const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void eventActorEnteredVolume(class AActor *);
    void eventActorLeavingVolume(class AActor *);
    void eventPawnEnteredVolume(class APawn *);
    void eventPawnLeavingVolume(class APawn *);
    void eventPhysicsChangedFor(class AActor *);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  LadderVolume
//------------------------------------------------------------------------------

//  LadderVolume.PhysicsChangedFor 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct ALadderVolume_eventPhysicsChangedFor_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  LadderVolume.PawnLeavingVolume 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct ALadderVolume_eventPawnLeavingVolume_Parms {
  class APawn* P;  // 0 80 CPF_Parm
};


//  LadderVolume.PawnEnteredVolume 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct ALadderVolume_eventPawnEnteredVolume_Parms {
  class APawn* P;  // 0 80 CPF_Parm
};


//  LadderVolume.InUse 20002 0 ( FUNC_Defined FUNC_Public )
struct ALadderVolume_execInUse_Parms {
  class APawn* Ignored;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  LadderVolume.PostBeginPlay 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct ALadderVolume_execPostBeginPlay_Parms {
};


// ALadderVolume 32 ( CLASS_Compiled CLASS_Parsed CLASS_Localized )
class DLL_IMPORT ALadderVolume : public APhysicsVolume {
  public:
    FName ClimbingAnimation;  // 534 2000001 CPF_Edit CPF_EditorData
    FName TopAnimation;  // 538 2000001 CPF_Edit CPF_EditorData
    class FRotator WallDir;  // 53C 1 CPF_Edit
    class FVector LookDir;  // 548 0
    class FVector ClimbDir;  // 554 2000000 CPF_EditorData
    class ALadder* LadderList;  // 560 2000002 CPF_Const CPF_EditorData
    BITFIELD bNoPhysicalLadder : 1;  // 564 2000001 CPF_Edit CPF_EditorData
    BITFIELD bAutoPath : 1;  // 564 2000001 CPF_Edit CPF_EditorData
    BITFIELD bAllowLadderStrafing : 1;  // 564 2000001 CPF_Edit CPF_EditorData
    class APawn* PendingClimber;  // 568 0
    virtual ~ALadderVolume(void);
    virtual unsigned int GetCPPSize(void);
    virtual void RenderEditorInfo(class FLevelSceneNode *,class FRenderInterface *,class FDynamicActor *);
    virtual int AddMyMarker(class AActor *);
    ALadderVolume(class ALadderVolume const &);
    ALadderVolume(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ALadderVolume & operator=(class ALadderVolume const &);
    class FVector FindCenter(void);
    class FVector FindTop(class FVector);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  DefaultPhysicsVolume
//------------------------------------------------------------------------------

// ADefaultPhysicsVolume 32 ( CLASS_Compiled CLASS_Parsed CLASS_Localized )
class DLL_IMPORT ADefaultPhysicsVolume : public APhysicsVolume {
  public:
    virtual ~ADefaultPhysicsVolume(void);
    virtual unsigned int GetCPPSize(void);
    ADefaultPhysicsVolume(class ADefaultPhysicsVolume const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ADefaultPhysicsVolume & operator=(class ADefaultPhysicsVolume const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    ADefaultPhysicsVolume(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  LineOfSightTrigger
//------------------------------------------------------------------------------

//  LineOfSightTrigger.Trigger 20002 0 ( FUNC_Defined FUNC_Public )
struct ALineOfSightTrigger_execTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


//  LineOfSightTrigger.PlayerSeesMe 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ALineOfSightTrigger_eventPlayerSeesMe_Parms {
  class APlayerController* P;  // 0 80 CPF_Parm
};


//  LineOfSightTrigger.PostBeginPlay 20002 0 ( FUNC_Defined FUNC_Public )
struct ALineOfSightTrigger_execPostBeginPlay_Parms {
};


// ALineOfSightTrigger 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT ALineOfSightTrigger : public ATriggers {
  public:
    FLOAT MaxViewDist;  // 420 2000001 CPF_Edit CPF_EditorData
    FLOAT OldTickTime;  // 424 0
    BITFIELD bEnabled : 1;  // 428 1 CPF_Edit
    BITFIELD bTriggered : 1;  // 428 0
    FName SeenActorTag;  // 42C 2000001 CPF_Edit CPF_EditorData
    class AActor* SeenActor;  // 430 0
    INT MaxViewAngle;  // 434 2000001 CPF_Edit CPF_EditorData
    FLOAT RequiredViewDir;  // 438 2000000 CPF_EditorData
    virtual ~ALineOfSightTrigger(void);
    virtual unsigned int GetCPPSize(void);
    virtual void TickAuthoritative(float);
    ALineOfSightTrigger(class ALineOfSightTrigger const &);
    ALineOfSightTrigger(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ALineOfSightTrigger & operator=(class ALineOfSightTrigger const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void eventPlayerSeesMe(class APlayerController *);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AIScript
//------------------------------------------------------------------------------

//  AIScript.TakeOver 20000 0 ( FUNC_Public )
struct AAIScript_execTakeOver_Parms {
  class APawn* P;  // 0 80 CPF_Parm
};


//  AIScript.GetMoveTarget 20002 0 ( FUNC_Defined FUNC_Public )
struct AAIScript_execGetMoveTarget_Parms {
  class AActor* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  AIScript.SpawnControllerFor 20002 0 ( FUNC_Defined FUNC_Public )
struct AAIScript_execSpawnControllerFor_Parms {
  class APawn* P;  // 0 80 CPF_Parm
};


// AAIScript 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT AAIScript : public AKeypoint {
  public:
    class UClass* ControllerClass;  // 420 1 CPF_Edit
    BITFIELD bNavigate : 1;  // 424 2000000 CPF_EditorData
    BITFIELD bLoggingEnabled : 1;  // 424 1 CPF_Edit
    class AAIMarker* myMarker;  // 428 0
    virtual ~AAIScript(void);
    virtual unsigned int GetCPPSize(void);
    virtual int AddMyMarker(class AActor *);
    virtual void ClearMarker(void);
    AAIScript(class AAIScript const &);
    AAIScript(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AAIScript & operator=(class AAIScript const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  DamageType
//------------------------------------------------------------------------------

//  DamageType.GetWeaponClass 22002 0 ( FUNC_Defined FUNC_Static FUNC_Public )
struct ADamageType_execGetWeaponClass_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  DamageType.GetHitEffects 22000 0 ( FUNC_Static FUNC_Public )
struct ADamageType_execGetHitEffects_Parms {
  class UClass* HitEffects[4];  // 0 180 CPF_Parm CPF_OutParm
  INT VictemHealth;  // 10 80 CPF_Parm
};


//  DamageType.IsOfType 22002 0 ( FUNC_Defined FUNC_Static FUNC_Public )
struct ADamageType_execIsOfType_Parms {
  INT Description;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  DamageType.GetPawnDamageSound 22002 0 ( FUNC_Defined FUNC_Static FUNC_Public )
struct ADamageType_execGetPawnDamageSound_Parms {
  class USound* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  DamageType.GetPawnDamageEmitter 22002 0 ( FUNC_Defined FUNC_Static FUNC_Public )
struct ADamageType_execGetPawnDamageEmitter_Parms {
  class FVector HitLocation;  // 0 80 CPF_Parm
  FLOAT Damage;  // C 80 CPF_Parm
  class FVector Momentum;  // 10 80 CPF_Parm
  class APawn* Victim;  // 1C 80 CPF_Parm
  BITFIELD bLowDetail : 1;  // 20 80 CPF_Parm
  class UClass* ReturnValue;  // 24 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  DamageType.GetPawnDamageEffect 22002 0 ( FUNC_Defined FUNC_Static FUNC_Public )
struct ADamageType_execGetPawnDamageEffect_Parms {
  class FVector HitLocation;  // 0 80 CPF_Parm
  FLOAT Damage;  // C 80 CPF_Parm
  class FVector Momentum;  // 10 80 CPF_Parm
  class APawn* Victim;  // 1C 80 CPF_Parm
  BITFIELD bLowDetail : 1;  // 20 80 CPF_Parm
  class UClass* ReturnValue;  // 24 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  DamageType.ScoreKill 22002 0 ( FUNC_Defined FUNC_Static FUNC_Public )
struct ADamageType_execScoreKill_Parms {
  class AController* Killer;  // 0 80 CPF_Parm
  class AController* Killed;  // 4 80 CPF_Parm
};


//  DamageType.IncrementKills 22000 0 ( FUNC_Static FUNC_Public )
struct ADamageType_execIncrementKills_Parms {
  class AController* Killer;  // 0 80 CPF_Parm
};


// ADamageType 33 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_Localized )
class DLL_IMPORT ADamageType : public AActor {
  public:
    class FString DeathString;  // 420 2408001 CPF_Edit CPF_Localized CPF_NeedCtorLink CPF_EditorData
    class FString FemaleSuicide;  // 428 408001 CPF_Edit CPF_Localized CPF_NeedCtorLink
    class FString MaleSuicide;  // 430 408001 CPF_Edit CPF_Localized CPF_NeedCtorLink
    FLOAT ViewFlash;  // 438 2000001 CPF_Edit CPF_EditorData
    class FVector ViewFog;  // 43C 2000001 CPF_Edit CPF_EditorData
    class UClass* DamageEffect;  // 448 2000001 CPF_Edit CPF_EditorData
    class FString DamageWeaponName;  // 44C 2400001 CPF_Edit CPF_NeedCtorLink CPF_EditorData
    BITFIELD bArmorStops : 1;  // 454 2000001 CPF_Edit CPF_EditorData
    BITFIELD bInstantHit : 1;  // 454 2000001 CPF_Edit CPF_EditorData
    BITFIELD bFastInstantHit : 1;  // 454 2000001 CPF_Edit CPF_EditorData
    BITFIELD bAlwaysGibs : 1;  // 454 1 CPF_Edit
    BITFIELD bLocationalHit : 1;  // 454 1 CPF_Edit
    BITFIELD bAlwaysSevers : 1;  // 454 1 CPF_Edit
    BITFIELD bSpecial : 1;  // 454 1 CPF_Edit
    BITFIELD bDetonatesGoop : 1;  // 454 1 CPF_Edit
    BITFIELD bSkeletize : 1;  // 454 2000001 CPF_Edit CPF_EditorData
    BITFIELD bCauseConvulsions : 1;  // 454 1 CPF_Edit
    BITFIELD bSuperWeapon : 1;  // 454 2000001 CPF_Edit CPF_EditorData
    BITFIELD bCausesBlood : 1;  // 454 1 CPF_Edit
    BITFIELD bKUseOwnDeathVel : 1;  // 454 2000001 CPF_Edit CPF_EditorData
    BITFIELD bKUseTearOffMomentum : 1;  // 454 2000001 CPF_Edit CPF_EditorData
    BITFIELD bDelayedDamage : 1;  // 454 2000000 CPF_EditorData
    BITFIELD bNeverSevers : 1;  // 454 0
    BITFIELD bThrowRagdoll : 1;  // 454 0
    BITFIELD bRagdollBullet : 1;  // 454 0
    BITFIELD bLeaveBodyEffect : 1;  // 454 0
    BITFIELD bExtraMomentumZ : 1;  // 454 2000000 CPF_EditorData
    BITFIELD bFlaming : 1;  // 454 0
    BITFIELD bRubbery : 1;  // 454 0
    BITFIELD bCausedByWorld : 1;  // 454 2000000 CPF_EditorData
    BITFIELD bDirectDamage : 1;  // 454 0
    BITFIELD bBulletHit : 1;  // 454 0
    BITFIELD bVehicleHit : 1;  // 454 2000000 CPF_EditorData
    FLOAT GibModifier;  // 458 1 CPF_Edit
    class UClass* PawnDamageEffect;  // 45C 2000001 CPF_Edit CPF_EditorData
    class UClass* PawnDamageEmitter;  // 460 2000001 CPF_Edit CPF_EditorData
    TArray<class USound*> PawnDamageSounds;  // 464 2400001 CPF_Edit CPF_NeedCtorLink CPF_EditorData
    class UClass* LowGoreDamageEffect;  // 470 2000001 CPF_Edit CPF_EditorData
    class UClass* LowGoreDamageEmitter;  // 474 2000001 CPF_Edit CPF_EditorData
    TArray<class USound*> LowGoreDamageSounds;  // 478 2400001 CPF_Edit CPF_NeedCtorLink CPF_EditorData
    class UClass* LowDetailEffect;  // 484 2000001 CPF_Edit CPF_EditorData
    class UClass* LowDetailEmitter;  // 488 2000001 CPF_Edit CPF_EditorData
    FLOAT FlashScale;  // 48C 2000001 CPF_Edit CPF_EditorData
    class FVector FlashFog;  // 490 1 CPF_Edit
    INT DamageDesc;  // 49C 2000001 CPF_Edit CPF_EditorData
    INT DamageThreshold;  // 4A0 2000001 CPF_Edit CPF_EditorData
    class FVector DamageKick;  // 4A4 1 CPF_Edit
    class UMaterial* DamageOverlayMaterial;  // 4B0 2000001 CPF_Edit CPF_EditorData
    class UMaterial* DeathOverlayMaterial;  // 4B4 2000001 CPF_Edit CPF_EditorData
    FLOAT DamageOverlayTime;  // 4B8 2000001 CPF_Edit CPF_EditorData
    FLOAT DeathOverlayTime;  // 4BC 2000001 CPF_Edit CPF_EditorData
    FLOAT GibPerterbation;  // 4C0 2000001 CPF_Edit CPF_EditorData
    FLOAT KDamageImpulse;  // 4C4 2000001 CPF_Edit CPF_EditorData
    FLOAT KDeathVel;  // 4C8 2000001 CPF_Edit CPF_EditorData
    FLOAT KDeathUpKick;  // 4CC 2000001 CPF_Edit CPF_EditorData
    FLOAT VehicleDamageScaling;  // 4D0 2000000 CPF_EditorData
    FLOAT VehicleMomentumScaling;  // 4D4 0
    virtual ~ADamageType(void);
    virtual unsigned int GetCPPSize(void);
    ADamageType(class ADamageType const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ADamageType & operator=(class ADamageType const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    ADamageType(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AIController
//------------------------------------------------------------------------------

//  AIController.Startle 20000 0 ( FUNC_Public )
struct AAIController_execStartle_Parms {
  class AActor* A;  // 0 80 CPF_Parm
};


//  AIController.PriorityObjective 20002 0 ( FUNC_Defined FUNC_Public )
struct AAIController_execPriorityObjective_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  AIController.MoverFinished 20002 0 ( FUNC_Defined FUNC_Public )
struct AAIController_execMoverFinished_Parms {
};


//  AIController.WaitForMover 20002 0 ( FUNC_Defined FUNC_Public )
struct AAIController_execWaitForMover_Parms {
  class AMover* M;  // 0 80 CPF_Parm
};


//  AIController.PrepareForMove 20800 0 ( FUNC_Event FUNC_Public )
struct AAIController_eventPrepareForMove_Parms {
  class ANavigationPoint* Goal;  // 0 80 CPF_Parm
  class UReachSpec* Path;  // 4 80 CPF_Parm
};


//  AIController.GetOrders 20002 0 ( FUNC_Defined FUNC_Public )
struct AAIController_execGetOrders_Parms {
  FName ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  AIController.GetOrderObject 20002 0 ( FUNC_Defined FUNC_Public )
struct AAIController_execGetOrderObject_Parms {
  class AActor* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  AIController.SetOrders 20000 0 ( FUNC_Public )
struct AAIController_execSetOrders_Parms {
  FName NewOrders;  // 0 80 CPF_Parm
  class AController* OrderGiver;  // 4 80 CPF_Parm
};


//  AIController.GetFacingDirection 20002 0 ( FUNC_Defined FUNC_Public )
struct AAIController_execGetFacingDirection_Parms {
  INT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  AIController.DisplayDebug 20002 0 ( FUNC_Defined FUNC_Public )
struct AAIController_execDisplayDebug_Parms {
  class UCanvas* Canvas;  // 0 80 CPF_Parm
  FLOAT YL;  // 4 180 CPF_Parm CPF_OutParm
  FLOAT YPos;  // 8 180 CPF_Parm CPF_OutParm
};


//  AIController.TriggerScript 20002 0 ( FUNC_Defined FUNC_Public )
struct AAIController_execTriggerScript_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  AIController.Trigger 20002 0 ( FUNC_Defined FUNC_Public )
struct AAIController_execTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


//  AIController.Reset 20002 0 ( FUNC_Defined FUNC_Public )
struct AAIController_execReset_Parms {
};


//  AIController.PreBeginPlay 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct AAIController_eventPreBeginPlay_Parms {
};


//  AIController.WaitToSeeEnemy 20409 0 ( FUNC_Final FUNC_Latent FUNC_Native FUNC_Public )
struct AAIController_execWaitToSeeEnemy_Parms {
};


// AAIController 1E ( CLASS_Compiled CLASS_Config CLASS_Transient CLASS_Parsed )
class DLL_IMPORT AAIController : public AController {
  public:
    BITFIELD bHunting : 1;  // 59C 2000000 CPF_EditorData
    BITFIELD bAdjustFromWalls : 1;  // 59C 2000000 CPF_EditorData
    BITFIELD bPlannedJump : 1;  // 59C 2000000 CPF_EditorData
    class AAIScript* MyScript;  // 5A0 0
    FLOAT Skill;  // 5A4 2000000 CPF_EditorData
    virtual ~AAIController(void);
    virtual unsigned int GetCPPSize(void);
    virtual int AcceptNearbyPath(class AActor *);
    virtual void AdjustFromWall(class FVector,class AActor *);
    virtual void SetAdjustLocation(class FVector);
    AAIController(class AAIController const &);
    AAIController(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AAIController & operator=(class AAIController const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void execPollWaitToSeeEnemy(struct FFrame &,void * const);
    void execWaitToSeeEnemy(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(AAIController,0,execPollWaitToSeeEnemy)
AUTOGENERATE_FUNCTION(AAIController,0,execWaitToSeeEnemy)


//------------------------------------------------------------------------------
//  LevelSummary
//------------------------------------------------------------------------------

// ULevelSummary 32 ( CLASS_Compiled CLASS_Parsed CLASS_Localized )
class DLL_IMPORT ULevelSummary : public UObject {
  public:
    class FString Title;  // 28 408001 CPF_Edit CPF_Localized CPF_NeedCtorLink
    class FString Description;  // 30 408001 CPF_Edit CPF_Localized CPF_NeedCtorLink
    class FString LevelEnterText;  // 38 408001 CPF_Edit CPF_Localized CPF_NeedCtorLink
    class FString Author;  // 40 400001 CPF_Edit CPF_NeedCtorLink
    class FString DecoTextName;  // 48 400001 CPF_Edit CPF_NeedCtorLink
    INT IdealPlayerCountMin;  // 50 1 CPF_Edit
    INT IdealPlayerCountMax;  // 54 1 CPF_Edit
    BITFIELD HideFromMenus : 1;  // 58 1 CPF_Edit
    INT SinglePlayerTeamSize;  // 5C 1 CPF_Edit
    class UMaterial* Screenshot;  // 60 1 CPF_Edit
    class FString ExtraInfo;  // 64 400001 CPF_Edit CPF_NeedCtorLink
    virtual ~ULevelSummary(void);
    virtual void PostLoad(void);
    virtual unsigned int GetCPPSize(void);
    ULevelSummary(class ULevelSummary const &);
    ULevelSummary(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ULevelSummary & operator=(class ULevelSummary const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  HUD
//------------------------------------------------------------------------------

// FConsoleMessage 0 ( )
struct DLL_IMPORT FConsoleMessage {
  public:
    class FString Text;  // 0 400000 CPF_NeedCtorLink
    class FColor TextColor;  // 8 0
    FLOAT MessageLife;  // C 0
    FConsoleMessage(struct FConsoleMessage const &);
    FConsoleMessage(void);
    ~FConsoleMessage(void);
    struct FConsoleMessage & operator=(struct FConsoleMessage const &);
};

//  HUD.RemoveHudOverlay 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AHUD_execRemoveHudOverlay_Parms {
  class AHudOverlay* Overlay;  // 0 80 CPF_Parm
};


//  HUD.AddHudOverlay 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AHUD_execAddHudOverlay_Parms {
  class AHudOverlay* Overlay;  // 0 80 CPF_Parm
};


//  HUD.DisplayHit 20002 0 ( FUNC_Defined FUNC_Public )
struct AHUD_execDisplayHit_Parms {
  class FVector HitDir;  // 0 80 CPF_Parm
  INT Damage;  // C 80 CPF_Parm
  class UClass* DamageType;  // 10 80 CPF_Parm
};


//  HUD.DrawTargeting 20100 0 ( FUNC_Simulated FUNC_Public )
struct AHUD_execDrawTargeting_Parms {
  class UCanvas* C;  // 0 80 CPF_Parm
};


//  HUD.AnnouncementPlayed 20800 0 ( FUNC_Event FUNC_Public )
struct AHUD_eventAnnouncementPlayed_Parms {
  FName AnnouncerSound;  // 0 80 CPF_Parm
  BYTE Switch;  // 4 80 CPF_Parm
};


//  HUD.LoadProgressFont 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AHUD_execLoadProgressFont_Parms {
  class UFont* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  HUD.LargerFontThan 22002 0 ( FUNC_Defined FUNC_Static FUNC_Public )
struct AHUD_execLargerFontThan_Parms {
  class UFont* aFont;  // 0 80 CPF_Parm
  class UFont* ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  HUD.GetMediumFont 20002 0 ( FUNC_Defined FUNC_Public )
struct AHUD_execGetMediumFont_Parms {
  FLOAT Size;  // 0 80 CPF_Parm
  class UFont* ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  HUD.GetMediumFontFor 22002 0 ( FUNC_Defined FUNC_Static FUNC_Public )
struct AHUD_execGetMediumFontFor_Parms {
  class UCanvas* Canvas;  // 0 80 CPF_Parm
  class UFont* ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  HUD.GetFontSizeIndex 20002 0 ( FUNC_Defined FUNC_Public )
struct AHUD_execGetFontSizeIndex_Parms {
  class UCanvas* C;  // 0 80 CPF_Parm
  INT FontSize;  // 4 80 CPF_Parm
  class UFont* ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  HUD.GetConsoleFont 22002 0 ( FUNC_Defined FUNC_Static FUNC_Public )
struct AHUD_execGetConsoleFont_Parms {
  class UCanvas* C;  // 0 80 CPF_Parm
  class UFont* ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  HUD.LoadFont 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AHUD_execLoadFont_Parms {
  INT i;  // 0 80 CPF_Parm
  class UFont* ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  HUD.LoadFontStatic 22002 0 ( FUNC_Defined FUNC_Static FUNC_Public )
struct AHUD_execLoadFontStatic_Parms {
  INT i;  // 0 80 CPF_Parm
  class UFont* ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  HUD.SetCropping 20100 0 ( FUNC_Simulated FUNC_Public )
struct AHUD_execSetCropping_Parms {
  BITFIELD Active : 1;  // 0 80 CPF_Parm
};


//  HUD.DrawCrosshair 20100 0 ( FUNC_Simulated FUNC_Public )
struct AHUD_execDrawCrosshair_Parms {
  class UCanvas* C;  // 0 80 CPF_Parm
};


//  HUD.SetTargeting 20100 0 ( FUNC_Simulated FUNC_Public )
struct AHUD_execSetTargeting_Parms {
  BITFIELD bShow : 1;  // 0 80 CPF_Parm
  class FVector TargetLocation;  // 4 90 CPF_OptionalParm CPF_Parm
  FLOAT Size;  // 10 90 CPF_OptionalParm CPF_Parm
};


//  HUD.FadeZoom 20000 0 ( FUNC_Public )
struct AHUD_execFadeZoom_Parms {
};


//  HUD.DisplayMessages 20002 0 ( FUNC_Defined FUNC_Public )
struct AHUD_execDisplayMessages_Parms {
  class UCanvas* C;  // 0 80 CPF_Parm
};


//  HUD.Message 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AHUD_execMessage_Parms {
  class FString Message;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString sender;  // 8 400090 CPF_OptionalParm CPF_Parm CPF_NeedCtorLink
  FName Type;  // 10 90 CPF_OptionalParm CPF_Parm
  INT Range;  // 14 90 CPF_OptionalParm CPF_Parm
};


//  HUD.LinkActors 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AHUD_execLinkActors_Parms {
};


//  HUD.DrawTypingPrompt 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AHUD_execDrawTypingPrompt_Parms {
  class UCanvas* C;  // 0 80 CPF_Parm
  class FString Text;  // 4 400080 CPF_Parm CPF_NeedCtorLink
  INT pos;  // C 90 CPF_OptionalParm CPF_Parm
};


//  HUD.IsInCinematic 20000 0 ( FUNC_Public )
struct AHUD_execIsInCinematic_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  HUD.DisplayBadConnectionAlert 20000 0 ( FUNC_Public )
struct AHUD_execDisplayBadConnectionAlert_Parms {
  class UCanvas* C;  // 0 80 CPF_Parm
};


//  HUD.DrawLevelAction 20000 0 ( FUNC_Public )
struct AHUD_execDrawLevelAction_Parms {
  class UCanvas* C;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  HUD.DrawSpectatingHud 20000 0 ( FUNC_Public )
struct AHUD_execDrawSpectatingHud_Parms {
  class UCanvas* C;  // 0 80 CPF_Parm
};


//  HUD.DrawHUD 20000 0 ( FUNC_Public )
struct AHUD_execDrawHUD_Parms {
  class UCanvas* C;  // 0 80 CPF_Parm
};


//  HUD.DisplayProgressMessages 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AHUD_execDisplayProgressMessages_Parms {
  class UCanvas* C;  // 0 80 CPF_Parm
};


//  HUD.DrawRoute 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AHUD_execDrawRoute_Parms {
};


//  HUD.CanvasDrawActors 20002 0 ( FUNC_Defined FUNC_Public )
struct AHUD_execCanvasDrawActors_Parms {
  class UCanvas* C;  // 0 80 CPF_Parm
  BITFIELD bClearedZBuffer : 1;  // 4 80 CPF_Parm
};


//  HUD.SetInstructionKeyText 20100 0 ( FUNC_Simulated FUNC_Public )
struct AHUD_execSetInstructionKeyText_Parms {
  class FString Text;  // 0 400080 CPF_Parm CPF_NeedCtorLink
};


//  HUD.SetInstructionText 20100 0 ( FUNC_Simulated FUNC_Public )
struct AHUD_execSetInstructionText_Parms {
  class FString Text;  // 0 400080 CPF_Parm CPF_NeedCtorLink
};


//  HUD.DrawInstructionGfx 20100 0 ( FUNC_Simulated FUNC_Public )
struct AHUD_execDrawInstructionGfx_Parms {
  class UCanvas* C;  // 0 80 CPF_Parm
};


//  HUD.DrawCinematicHUD 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AHUD_execDrawCinematicHUD_Parms {
  class UCanvas* C;  // 0 80 CPF_Parm
};


//  HUD.PostRender 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct AHUD_eventPostRender_Parms {
  class UCanvas* Canvas;  // 0 80 CPF_Parm
};


//  HUD.GetLocalStatsScreen 20000 0 ( FUNC_Public )
struct AHUD_execGetLocalStatsScreen_Parms {
};


//  HUD.WorldSpaceOverlays 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct AHUD_eventWorldSpaceOverlays_Parms {
};


//  HUD.Destroyed 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct AHUD_eventDestroyed_Parms {
};


//  HUD.CreateKeyMenus 20100 0 ( FUNC_Simulated FUNC_Public )
struct AHUD_execCreateKeyMenus_Parms {
};


//  HUD.Reset 20002 0 ( FUNC_Defined FUNC_Public )
struct AHUD_execReset_Parms {
};


//  HUD.PostBeginPlay 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct AHUD_eventPostBeginPlay_Parms {
};


//  HUD.StaticDrawCanvasLine 22401 0 ( FUNC_Final FUNC_Native FUNC_Static FUNC_Public )
struct AHUD_execStaticDrawCanvasLine_Parms {
  class UCanvas* C;  // 0 80 CPF_Parm
  FLOAT X1;  // 4 80 CPF_Parm
  FLOAT Y1;  // 8 80 CPF_Parm
  FLOAT X2;  // C 80 CPF_Parm
  FLOAT Y2;  // 10 80 CPF_Parm
  class FColor LineColor;  // 14 80 CPF_Parm
};


//  HUD.DrawCanvasLine 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AHUD_execDrawCanvasLine_Parms {
  FLOAT X1;  // 0 80 CPF_Parm
  FLOAT Y1;  // 4 80 CPF_Parm
  FLOAT X2;  // 8 80 CPF_Parm
  FLOAT Y2;  // C 80 CPF_Parm
  class FColor LineColor;  // 10 80 CPF_Parm
};


//  HUD.Draw3DLine 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AHUD_execDraw3DLine_Parms {
  class FVector Start;  // 0 80 CPF_Parm
  class FVector End;  // C 80 CPF_Parm
  class FColor LineColor;  // 18 80 CPF_Parm
};


// AHUD 403E ( CLASS_Compiled CLASS_Config CLASS_Transient CLASS_Parsed CLASS_Localized CLASS_ExportStructs )
class DLL_IMPORT AHUD : public AActor {
  public:
    class APlayerController* PlayerOwner;  // 420 1 CPF_Edit
    class APawn* PawnOwner;  // 424 1 CPF_Edit
    class UConsole* PlayerConsole;  // 428 1 CPF_Edit
    class FColor WhiteColor;  // 42C 0
    class FColor RedColor;  // 430 0
    class FColor GreenColor;  // 434 0
    class FColor CyanColor;  // 438 0
    class FColor BlueColor;  // 43C 0
    class FColor GoldColor;  // 440 0
    class FColor PurpleColor;  // 444 0
    class FColor TurqColor;  // 448 0
    class FColor GrayColor;  // 44C 0
    class FColor BlackColor;  // 450 0
    BITFIELD bHideHUD : 1;  // 454 44001 CPF_Edit CPF_Config CPF_GlobalConfig
    BITFIELD bShowDebugInfo : 1;  // 454 2000001 CPF_Edit CPF_EditorData
    BITFIELD bMessageBeep : 1;  // 454 44001 CPF_Edit CPF_Config CPF_GlobalConfig
    BITFIELD bNoEnemyNames : 1;  // 454 44000 CPF_Config CPF_GlobalConfig
    BITFIELD bShowLocalStats : 1;  // 454 0
    class FColor ConsoleColor;  // 458 1 CPF_Edit
    class FString ProgressFontName;  // 45C 408001 CPF_Edit CPF_Localized CPF_NeedCtorLink
    class UFont* ProgressFontFont;  // 464 1 CPF_Edit
    class FString OverrideConsoleFontName;  // 468 408001 CPF_Edit CPF_Localized CPF_NeedCtorLink
    class UFont* OverrideConsoleFont;  // 470 1 CPF_Edit
    FLOAT ProgressFadeTime;  // 474 1 CPF_Edit
    FLOAT HudScale;  // 478 2044001 CPF_Edit CPF_Config CPF_GlobalConfig CPF_EditorData
    FLOAT HudOpacity;  // 47C 2044001 CPF_Edit CPF_Config CPF_GlobalConfig CPF_EditorData
    FLOAT HudCanvasScale;  // 480 2044001 CPF_Edit CPF_Config CPF_GlobalConfig CPF_EditorData
    INT CrosshairStyle;  // 484 44001 CPF_Edit CPF_Config CPF_GlobalConfig
    FLOAT CrosshairScale;  // 488 44001 CPF_Edit CPF_Config CPF_GlobalConfig
    FLOAT CrosshairOpacity;  // 48C 44001 CPF_Edit CPF_Config CPF_GlobalConfig
    class FColor CrossHairColor;  // 490 44001 CPF_Edit CPF_Config CPF_GlobalConfig
    FLOAT ResScaleX;  // 494 2000 CPF_Transient
    FLOAT ResScaleY;  // 498 2000 CPF_Transient
    INT ConsoleMessageCount;  // 49C 44000 CPF_Config CPF_GlobalConfig
    INT ConsoleFontSize;  // 4A0 44000 CPF_Config CPF_GlobalConfig
    INT MessageFontOffset;  // 4A4 44000 CPF_Config CPF_GlobalConfig
    struct FConsoleMessage TextMessages[8];  // 4A8 400000 CPF_NeedCtorLink
    FLOAT ConsoleMessagePosX;  // 528 2000001 CPF_Edit CPF_EditorData
    FLOAT ConsoleMessagePosY;  // 52C 2000001 CPF_Edit CPF_EditorData
    class FString FontArrayNames[9];  // 530 408000 CPF_Localized CPF_NeedCtorLink
    class UFont* FontArrayFonts[9];  // 578 0
    INT FontScreenWidthMedium[9];  // 59C 0
    INT FontScreenWidthSmall[9];  // 5C0 0
    FLOAT LastVoiceGain;  // 5E4 2 CPF_Const
    FLOAT LastVoiceGainTime;  // 5E8 2 CPF_Const
    INT LastPlayerIDTalking;  // 5EC 0
    FLOAT LastPlayerIDTalkingTime;  // 5F0 2 CPF_Const
    class ASceneSubtitles* SubTitles;  // 5F4 0
    TArray<class AHudOverlay*> Overlays;  // 5F8 400000 CPF_NeedCtorLink
    virtual ~AHUD(void);
    virtual unsigned int GetCPPSize(void);
    AHUD(class AHUD const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AHUD & operator=(class AHUD const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void eventAnnouncementPlayed(class FName,unsigned char);
    void eventPostRender(class UCanvas *);
    void eventWorldSpaceOverlays(void);
    void execDraw3DLine(struct FFrame &,void * const);
    void execDrawCanvasLine(struct FFrame &,void * const);
    void execStaticDrawCanvasLine(struct FFrame &,void * const);
  protected:
    AHUD(void);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(AHUD,0,execDraw3DLine)
AUTOGENERATE_FUNCTION(AHUD,0,execDrawCanvasLine)
AUTOGENERATE_FUNCTION(AHUD,0,execStaticDrawCanvasLine)


//------------------------------------------------------------------------------
//  WarpZoneMarker
//------------------------------------------------------------------------------

//  WarpZoneMarker.SpecialHandling 20002 0 ( FUNC_Defined FUNC_Public )
struct AWarpZoneMarker_execSpecialHandling_Parms {
  class APawn* Other;  // 0 80 CPF_Parm
  class AActor* ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  WarpZoneMarker.FindTriggerActor 20002 0 ( FUNC_Defined FUNC_Public )
struct AWarpZoneMarker_execFindTriggerActor_Parms {
};


//  WarpZoneMarker.PostBeginPlay 20002 0 ( FUNC_Defined FUNC_Public )
struct AWarpZoneMarker_execPostBeginPlay_Parms {
};


// AWarpZoneMarker 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT AWarpZoneMarker : public ASmallNavigationPoint {
  public:
    class AWarpZoneInfo* markedWarpZone;  // 494 0
    class AActor* TriggerActor;  // 498 2000000 CPF_EditorData
    class AActor* TriggerActor2;  // 49C 0
    virtual ~AWarpZoneMarker(void);
    virtual unsigned int GetCPPSize(void);
    virtual void addReachSpecs(class APawn *,int);
    virtual int IsIdentifiedAs(class FName);
    AWarpZoneMarker(class AWarpZoneMarker const &);
    AWarpZoneMarker(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AWarpZoneMarker & operator=(class AWarpZoneMarker const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AIMarker
//------------------------------------------------------------------------------

// AAIMarker 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT AAIMarker : public ASmallNavigationPoint {
  public:
    class AAIScript* markedScript;  // 494 0
    virtual ~AAIMarker(void);
    virtual unsigned int GetCPPSize(void);
    virtual int IsIdentifiedAs(class FName);
    AAIMarker(class AAIMarker const &);
    AAIMarker(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AAIMarker & operator=(class AAIMarker const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  PlayerStart
//------------------------------------------------------------------------------

// APlayerStart 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT APlayerStart : public ASmallNavigationPoint {
  public:
    BYTE TeamNumber;  // 494 2000001 CPF_Edit CPF_EditorData
    BITFIELD bSinglePlayerStart : 1;  // 498 2000001 CPF_Edit CPF_EditorData
    BITFIELD bCoopStart : 1;  // 498 2000001 CPF_Edit CPF_EditorData
    BITFIELD bEnabled : 1;  // 498 1 CPF_Edit
    BITFIELD bPrimaryStart : 1;  // 498 2000001 CPF_Edit CPF_EditorData
    class FString NavigationTag;  // 49C 2400001 CPF_Edit CPF_NeedCtorLink CPF_EditorData
    virtual ~APlayerStart(void);
    virtual unsigned int GetCPPSize(void);
    virtual void addReachSpecs(class APawn *,int);
    APlayerStart(class APlayerStart const &);
    APlayerStart(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class APlayerStart & operator=(class APlayerStart const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Teleporter
//------------------------------------------------------------------------------

//  Teleporter.SpecialCost 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ATeleporter_eventSpecialCost_Parms {
  class APawn* Other;  // 0 80 CPF_Parm
  class UReachSpec* Path;  // 4 80 CPF_Parm
  INT ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Teleporter.SpecialHandling 20002 0 ( FUNC_Defined FUNC_Public )
struct ATeleporter_execSpecialHandling_Parms {
  class APawn* Other;  // 0 80 CPF_Parm
  class AActor* ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Teleporter.PostTouch 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct ATeleporter_execPostTouch_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Teleporter.Touch 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ATeleporter_eventTouch_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Teleporter.Trigger 20002 0 ( FUNC_Defined FUNC_Public )
struct ATeleporter_execTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


//  Teleporter.Accept 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct ATeleporter_execAccept_Parms {
  class AActor* Incoming;  // 0 80 CPF_Parm
  class AActor* Source;  // 4 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Teleporter.FindTriggerActor 20002 0 ( FUNC_Defined FUNC_Public )
struct ATeleporter_execFindTriggerActor_Parms {
};


//  Teleporter.PostBeginPlay 20002 0 ( FUNC_Defined FUNC_Public )
struct ATeleporter_execPostBeginPlay_Parms {
};


// ATeleporter 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT ATeleporter : public ASmallNavigationPoint {
  public:
    class FString URL;  // 494 400001 CPF_Edit CPF_NeedCtorLink
    FName ProductRequired;  // 49C 1 CPF_Edit
    BITFIELD bChangesVelocity : 1;  // 4A0 2000001 CPF_Edit CPF_EditorData
    BITFIELD bChangesYaw : 1;  // 4A0 2000001 CPF_Edit CPF_EditorData
    BITFIELD bReversesX : 1;  // 4A0 2000001 CPF_Edit CPF_EditorData
    BITFIELD bReversesY : 1;  // 4A0 2000001 CPF_Edit CPF_EditorData
    BITFIELD bReversesZ : 1;  // 4A0 2000001 CPF_Edit CPF_EditorData
    BITFIELD bEnabled : 1;  // 4A0 2000001 CPF_Edit CPF_EditorData
    class FVector TargetVelocity;  // 4A4 2000001 CPF_Edit CPF_EditorData
    class AActor* TriggerActor;  // 4B0 2000000 CPF_EditorData
    class AActor* TriggerActor2;  // 4B4 0
    FLOAT LastFired;  // 4B8 0
    virtual ~ATeleporter(void);
    virtual unsigned int GetCPPSize(void);
    virtual int ReachedBy(class APawn *,class FVector);
    virtual int NoReachDistance(void);
    virtual void addReachSpecs(class APawn *,int);
    ATeleporter(class ATeleporter const &);
    ATeleporter(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ATeleporter & operator=(class ATeleporter const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  ZoneInfo
//------------------------------------------------------------------------------

#define UCONST_ZoneInfo_CHECK_MUSIC_PLAYING_TIMER  1.0f
//  ZoneInfo.ActorLeaving 20800 0 ( FUNC_Event FUNC_Public )
struct AZoneInfo_eventActorLeaving_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  ZoneInfo.ActorEntered 20800 0 ( FUNC_Event FUNC_Public )
struct AZoneInfo_eventActorEntered_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  ZoneInfo.PreBeginPlay 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AZoneInfo_execPreBeginPlay_Parms {
};


//  ZoneInfo.LinkToSkybox 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AZoneInfo_execLinkToSkybox_Parms {
};


//  ZoneInfo.ZoneActors 20405 0 ( FUNC_Final FUNC_Iterator FUNC_Native FUNC_Public )
struct AZoneInfo_execZoneActors_Parms {
  class UClass* BaseClass;  // 0 80 CPF_Parm
  class AActor* Actor;  // 4 180 CPF_Parm CPF_OutParm
};


// AZoneInfo 232 ( CLASS_Compiled CLASS_Parsed CLASS_Localized CLASS_NoUserCreate )
class DLL_IMPORT AZoneInfo : public AInfo {
  public:
    class ASkyZoneInfo* SkyZone;  // 420 2000000 CPF_EditorData
    FName ZoneTag;  // 424 1 CPF_Edit
    class FString LocationName;  // 428 408001 CPF_Edit CPF_Localized CPF_NeedCtorLink
    FLOAT KillZ;  // 430 2000001 CPF_Edit CPF_EditorData
    BYTE KillZType;  // 434 2000001 CPF_Edit CPF_EditorData
    BITFIELD bSoftKillZ : 1;  // 438 2000001 CPF_Edit CPF_EditorData
    BITFIELD bTerrainZone : 1;  // 438 2000001 CPF_Edit CPF_EditorData
    BITFIELD bDistanceFog : 1;  // 438 2000001 CPF_Edit CPF_EditorData
    BITFIELD bHeightFog : 1;  // 438 2000001 CPF_Edit CPF_EditorData
    BITFIELD bClearToFogColor : 1;  // 438 2000001 CPF_Edit CPF_EditorData
    TArray<class ATerrainInfo*> Terrains;  // 43C 400002 CPF_Const CPF_NeedCtorLink
    class FVector AmbientVector;  // 448 0
    BYTE AmbientBrightness;  // 454 1 CPF_Edit
    BYTE AmbientHue;  // 455 1 CPF_Edit
    BYTE AmbientSaturation;  // 456 1 CPF_Edit
    class FColor DistanceFogColor;  // 458 1 CPF_Edit
    FLOAT DistanceFogStart;  // 45C 1 CPF_Edit
    FLOAT DistanceFogEnd;  // 460 1 CPF_Edit
    FLOAT RealDistanceFogEnd;  // 464 2000 CPF_Transient
    FLOAT DistanceFogEndMin;  // 468 1 CPF_Edit
    FLOAT DistanceFogBlendTime;  // 46C 1 CPF_Edit
    FLOAT DistanceFogUpperHeight;  // 470 1 CPF_Edit
    FLOAT DistanceFogLowerHeight;  // 474 1 CPF_Edit
    FLOAT FogUpperHeightLimit;  // 478 1 CPF_Edit
    class UTexture* EnvironmentMap;  // 47C 3 CPF_Edit CPF_Const
    FLOAT TexUPanSpeed;  // 480 1 CPF_Edit
    FLOAT TexVPanSpeed;  // 484 1 CPF_Edit
    FLOAT DramaticLightingScale;  // 488 1 CPF_Edit
    class UI3DL2Listener* ZoneEffect;  // 48C 4000001 CPF_Edit CPF_EditInline
    BITFIELD bLonelyZone : 1;  // 490 2000001 CPF_Edit CPF_EditorData
    TArray<class AZoneInfo*> ManualExcludes;  // 494 6400001 CPF_Edit CPF_NeedCtorLink CPF_EditorData CPF_EditInline
    class FString MapBlockTextureNamePrefix;  // 4A0 400001 CPF_Edit CPF_NeedCtorLink
    INT MapBlockSize;  // 4A8 1 CPF_Edit
    INT MapUnitsPerPixel;  // 4AC 1 CPF_Edit
    FLOAT MapMinX;  // 4B0 1 CPF_Edit
    FLOAT MapMinY;  // 4B4 1 CPF_Edit
    FLOAT MapMaxX;  // 4B8 1 CPF_Edit
    FLOAT MapMaxY;  // 4BC 1 CPF_Edit
    INT MapMinZoomStep;  // 4C0 1 CPF_Edit
    INT MapMaxZoomStep;  // 4C4 1 CPF_Edit
    INT MapDefaultZoomStep;  // 4C8 1 CPF_Edit
    FLOAT BloomContrast;  // 4CC 2000001 CPF_Edit CPF_EditorData
    FLOAT OriginalScreenAmount;  // 4D0 2000001 CPF_Edit CPF_EditorData
    FLOAT BloomScreenAmount;  // 4D4 2000001 CPF_Edit CPF_EditorData
    FLOAT BlurScreenAmount;  // 4D8 2000001 CPF_Edit CPF_EditorData
    INT NumBlurPasses;  // 4DC 2000001 CPF_Edit CPF_EditorData
    BITFIELD UseWideBlur : 1;  // 4E0 2000001 CPF_Edit CPF_EditorData
    FLOAT BackupBloomContrast;  // 4E4 2000 CPF_Transient
    FLOAT BackupBloomScreenAmount;  // 4E8 2000 CPF_Transient
    FLOAT BackupOriginalScreenAmount;  // 4EC 2000 CPF_Transient
    FLOAT BackupBlurScreenAmount;  // 4F0 2000 CPF_Transient
    class FColor BackupDistanceFogColor;  // 4F4 2000 CPF_Transient
    FLOAT BackupDistanceFogEnd;  // 4F8 2000 CPF_Transient
    FLOAT BackupDistanceFogEndMin;  // 4FC 2000 CPF_Transient
    FLOAT BackupDistanceFogStart;  // 500 2000 CPF_Transient
    BYTE BackupAmbientBrightness;  // 504 2000 CPF_Transient
    BYTE BackupAmbientHue;  // 505 2000 CPF_Transient
    BYTE BackupAmbientSaturation;  // 506 2000 CPF_Transient
    FLOAT BackupSunlightsBrightness;  // 508 2000 CPF_Transient
    FLOAT BackupSunlightsContrastAdjust;  // 50C 2000 CPF_Transient
    FLOAT BackupLightmapContrastAdjust;  // 510 2000 CPF_Transient
    struct FLocalizedString LevelAreaName;  // 514 400001 CPF_Edit CPF_NeedCtorLink
    class UPvPSettings* PvPSettings;  // 520 4000001 CPF_Edit CPF_EditInline
    class FString RespawnPoint;  // 524 400001 CPF_Edit CPF_NeedCtorLink
    BITFIELD EnableDayLightCycle : 1;  // 52C 1 CPF_Edit
    class FString TrackName;  // 530 400001 CPF_Edit CPF_NeedCtorLink
    FLOAT AmbientFadeOutDuration;  // 538 1 CPF_Edit
    FLOAT AmbientFadeInDuration;  // 53C 1 CPF_Edit
    FLOAT StartAmbientFadeInTime;  // 540 1 CPF_Edit
    FLOAT mCheckMusicTimer;  // 544 2000 CPF_Transient
    virtual ~AZoneInfo(void);
    virtual void PostLoad(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    AZoneInfo(class AZoneInfo const &);
    AZoneInfo(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AZoneInfo & operator=(class AZoneInfo const &);
    void BackupEnvironmentSettings(void);
    static void CDECL InternalConstructor(void *);
    void RestoreEnvironmentSettings(void);
    static class UClass * CDECL StaticClass(void);
    void eventActorEntered(class AActor *);
    void eventActorLeaving(class AActor *);
    void execZoneActors(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(AZoneInfo,0,execZoneActors)


//------------------------------------------------------------------------------
//  WarpZoneInfo
//------------------------------------------------------------------------------

//  WarpZoneInfo.ActorLeaving 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct AWarpZoneInfo_eventActorLeaving_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  WarpZoneInfo.ActorEntered 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AWarpZoneInfo_execActorEntered_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  WarpZoneInfo.ForceGenerate 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct AWarpZoneInfo_eventForceGenerate_Parms {
};


//  WarpZoneInfo.Generate 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct AWarpZoneInfo_eventGenerate_Parms {
};


//  WarpZoneInfo.Trigger 20002 0 ( FUNC_Defined FUNC_Public )
struct AWarpZoneInfo_execTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


//  WarpZoneInfo.PreBeginPlay 20002 0 ( FUNC_Defined FUNC_Public )
struct AWarpZoneInfo_execPreBeginPlay_Parms {
};


//  WarpZoneInfo.UnWarp 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AWarpZoneInfo_execUnWarp_Parms {
  class FVector loc;  // 0 180 CPF_Parm CPF_OutParm
  class FVector Vel;  // C 180 CPF_Parm CPF_OutParm
  class FRotator R;  // 18 180 CPF_Parm CPF_OutParm
};


//  WarpZoneInfo.Warp 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AWarpZoneInfo_execWarp_Parms {
  class FVector loc;  // 0 180 CPF_Parm CPF_OutParm
  class FVector Vel;  // C 180 CPF_Parm CPF_OutParm
  class FRotator R;  // 18 180 CPF_Parm CPF_OutParm
};


// AWarpZoneInfo 232 ( CLASS_Compiled CLASS_Parsed CLASS_Localized CLASS_NoUserCreate )
class DLL_IMPORT AWarpZoneInfo : public AZoneInfo {
  public:
    class FString OtherSideURL;  // 548 400001 CPF_Edit CPF_NeedCtorLink
    FName ThisTag;  // 550 1 CPF_Edit
    BITFIELD bNoTeleFrag : 1;  // 554 1 CPF_Edit
    INT iWarpZone;  // 558 2 CPF_Const
    class FCoords WarpCoords;  // 55C 2 CPF_Const
    class AWarpZoneInfo* OtherSideActor;  // 58C 2000 CPF_Transient
    class UObject* OtherSideLevel;  // 590 2000 CPF_Transient
    class FString Destinations[8];  // 594 400001 CPF_Edit CPF_NeedCtorLink
    INT numDestinations;  // 5D4 0
    virtual ~AWarpZoneInfo(void);
    virtual unsigned int GetCPPSize(void);
    virtual int AddMyMarker(class AActor *);
    AWarpZoneInfo(class AWarpZoneInfo const &);
    AWarpZoneInfo(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AWarpZoneInfo & operator=(class AWarpZoneInfo const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void eventForceGenerate(void);
    void eventGenerate(void);
    void execUnWarp(struct FFrame &,void * const);
    void execWarp(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(AWarpZoneInfo,0,execUnWarp)
AUTOGENERATE_FUNCTION(AWarpZoneInfo,0,execWarp)


//------------------------------------------------------------------------------
//  Decoration
//------------------------------------------------------------------------------

//  Decoration.Bump 20002 0 ( FUNC_Defined FUNC_Public )
struct ADecoration_execBump_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  Decoration.Timer 20002 0 ( FUNC_Defined FUNC_Public )
struct ADecoration_execTimer_Parms {
};


//  Decoration.Destroyed 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct ADecoration_execDestroyed_Parms {
};


//  Decoration.BaseChange 20022 0 ( FUNC_Defined FUNC_Singular FUNC_Public )
struct ADecoration_execBaseChange_Parms {
};


//  Decoration.Trigger 20002 0 ( FUNC_Defined FUNC_Public )
struct ADecoration_execTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


//  Decoration.PhysicsVolumeChange 20022 0 ( FUNC_Defined FUNC_Singular FUNC_Public )
struct ADecoration_execPhysicsVolumeChange_Parms {
  class APhysicsVolume* NewVolume;  // 0 80 CPF_Parm
};


//  Decoration.TakeDamage 20002 0 ( FUNC_Defined FUNC_Public )
struct ADecoration_execTakeDamage_Parms {
  INT NDamage;  // 0 80 CPF_Parm
  class APawn* instigatedBy;  // 4 80 CPF_Parm
  class FVector HitLocation;  // 8 80 CPF_Parm
  class FVector Momentum;  // 14 80 CPF_Parm
  class UClass* DamageType;  // 20 80 CPF_Parm
};


//  Decoration.HitWall 20002 0 ( FUNC_Defined FUNC_Public )
struct ADecoration_execHitWall_Parms {
  class FVector HitNormal;  // 0 80 CPF_Parm
  class AActor* Wall;  // C 80 CPF_Parm
};


//  Decoration.Landed 20002 0 ( FUNC_Defined FUNC_Public )
struct ADecoration_execLanded_Parms {
  class FVector HitNormal;  // 0 80 CPF_Parm
};


//  Decoration.Drop 20000 0 ( FUNC_Public )
struct ADecoration_execDrop_Parms {
  class FVector newVel;  // 0 80 CPF_Parm
};


//  Decoration.CanSplash 20002 0 ( FUNC_Defined FUNC_Public )
struct ADecoration_execCanSplash_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  Decoration.NotReachableBy 20800 0 ( FUNC_Event FUNC_Public )
struct ADecoration_eventNotReachableBy_Parms {
  class APawn* P;  // 0 80 CPF_Parm
};


// ADecoration 213 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT ADecoration : public AActor {
  public:
    class UClass* EffectWhenDestroyed;  // 420 1 CPF_Edit
    BITFIELD bPushable : 1;  // 424 1 CPF_Edit
    BITFIELD bDamageable : 1;  // 424 1 CPF_Edit
    BITFIELD bPushSoundPlaying : 1;  // 424 0
    BITFIELD bSplash : 1;  // 424 0
    class USound* PushSound;  // 428 1 CPF_Edit
    class USound* EndPushSound;  // 42C 1 CPF_Edit
    INT numLandings;  // 430 2000002 CPF_Const CPF_EditorData
    INT NumFrags;  // 434 2000001 CPF_Edit CPF_EditorData
    class UTexture* FragSkin;  // 438 2000001 CPF_Edit CPF_EditorData
    class UClass* FragType;  // 43C 2000001 CPF_Edit CPF_EditorData
    class FVector FragMomentum;  // 440 2000000 CPF_EditorData
    INT Health;  // 44C 1 CPF_Edit
    FLOAT SplashTime;  // 450 1 CPF_Edit
    class ANavigationPoint* LastAnchor;  // 454 2000002 CPF_Const CPF_EditorData
    FLOAT LastValidAnchorTime;  // 458 2000000 CPF_EditorData
    virtual ~ADecoration(void);
    virtual unsigned int GetCPPSize(void);
    virtual void processLanded(class FVector,class AActor *,float,int);
    ADecoration(class ADecoration const &);
    ADecoration(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ADecoration & operator=(class ADecoration const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void eventNotReachableBy(class APawn *);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  InterpolationPoint
//------------------------------------------------------------------------------

// AInterpolationPoint 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT AInterpolationPoint : public AKeypoint {
  public:
    virtual ~AInterpolationPoint(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual void PostEditMove(void);
    virtual void RenderEditorSelected(class FLevelSceneNode *,class FRenderInterface *,class FDynamicActor *);
    AInterpolationPoint(class AInterpolationPoint const &);
    AInterpolationPoint(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AInterpolationPoint & operator=(class AInterpolationPoint const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  ReachSpec
//------------------------------------------------------------------------------

// UReachSpec 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UReachSpec : public UObject {
  public:
    INT Distance;  // 28 0
    class ANavigationPoint* Start;  // 2C 2000002 CPF_Const CPF_EditorData
    class ANavigationPoint* End;  // 30 2000002 CPF_Const CPF_EditorData
    INT CollisionRadius;  // 34 0
    INT CollisionHeight;  // 38 0
    INT reachFlags;  // 3C 2000000 CPF_EditorData
    INT MaxLandingVelocity;  // 40 0
    BYTE bPruned;  // 44 0
    BITFIELD bForced : 1;  // 48 0
    virtual ~UReachSpec(void);
    virtual unsigned int GetCPPSize(void);
    UReachSpec(class UReachSpec const &);
    UReachSpec(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UReachSpec & operator=(class UReachSpec const &);
    int operator==(class UReachSpec const &);
    class UReachSpec * operator+(class UReachSpec const &)const ;
    int operator<=(class UReachSpec const &);
    int BotOnlyPath(void);
    void Init(void);
    static void CDECL InternalConstructor(void *);
    class FPlane PathColor(void);
    int PlaceScout(class AScout *);
    static class UClass * CDECL StaticClass(void);
    int defineFor(class ANavigationPoint *,class ANavigationPoint *,class APawn *);
    int findBestReachable(class AScout *);
    int supports(int,int,int,int);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SkyZoneInfo
//------------------------------------------------------------------------------

//  SkyZoneInfo.cl_OnTick 20C00 0 ( FUNC_Native FUNC_Event FUNC_Public )
struct ASkyZoneInfo_eventcl_OnTick_Parms {
  FLOAT aDeltaSeconds;  // 0 80 CPF_Parm
};


// ASkyZoneInfo 232 ( CLASS_Compiled CLASS_Parsed CLASS_Localized CLASS_NoUserCreate )
class DLL_IMPORT ASkyZoneInfo : public AZoneInfo {
  public:
    class UConstantMaterial* OverlaySkyColor;  // 548 1 CPF_Edit
    FLOAT RelativeOffsetDevider;  // 54C 2000001 CPF_Edit CPF_EditorData
    class FVector mOriginalLocation;  // 550 2002000 CPF_Transient CPF_EditorData
    virtual ~ASkyZoneInfo(void);
    virtual unsigned int GetCPPSize(void);
    virtual void PostBeginPlay(void);
    ASkyZoneInfo(class ASkyZoneInfo const &);
    ASkyZoneInfo(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ASkyZoneInfo & operator=(class ASkyZoneInfo const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void execcl_OnTick(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(ASkyZoneInfo,0,execcl_OnTick)


//------------------------------------------------------------------------------
//  Camera
//------------------------------------------------------------------------------

// ACamera 16 ( CLASS_Compiled CLASS_Config CLASS_Parsed )
class DLL_IMPORT ACamera : public APlayerController {
  public:
    virtual ~ACamera(void);
    virtual unsigned int GetCPPSize(void);
    virtual void RenderEditorInfo(class FLevelSceneNode *,class FRenderInterface *,class FDynamicActor *);
    virtual void RenderEditorSelected(class FLevelSceneNode *,class FRenderInterface *,class FDynamicActor *);
    ACamera(class ACamera const &);
    ACamera(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ACamera & operator=(class ACamera const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  LevelInfo
//------------------------------------------------------------------------------

enum ENetMode {
  NM_Standalone = 0,
  NM_DedicatedServer = 1,
  NM_ListenServer = 2,
  NM_Client = 3
};

enum ELevelAction {
  LEVACT_None = 0,
  LEVACT_Loading = 1,
  LEVACT_Saving = 2,
  LEVACT_Connecting = 3,
  LEVACT_Precaching = 4
};

enum EMeshLODDetailLevel {
  MDL_Low = 0,
  MDL_Medium = 1,
  MDL_High = 2,
  MDL_Ultra = 3
};

enum EPhysicsDetailLevel {
  PDL_Low = 0,
  PDL_Medium = 1,
  PDL_High = 2
};

//  LevelInfo.GetEnvironmentManager 20400 0 ( FUNC_Native FUNC_Public )
struct ALevelInfo_execGetEnvironmentManager_Parms {
  class AEnvironmentManager* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  LevelInfo.GetObjectPool 20002 0 ( FUNC_Defined FUNC_Public )
struct ALevelInfo_execGetObjectPool_Parms {
  class UObjectPool* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  LevelInfo.GetLocalPlayerController 20400 0 ( FUNC_Native FUNC_Public )
struct ALevelInfo_execGetLocalPlayerController_Parms {
  class APlayerController* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  LevelInfo.PreBeginPlay 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct ALevelInfo_eventPreBeginPlay_Parms {
};


//  LevelInfo.Reset 20002 0 ( FUNC_Defined FUNC_Public )
struct ALevelInfo_execReset_Parms {
};


//  LevelInfo.ThisIsNeverExecuted 20002 0 ( FUNC_Defined FUNC_Public )
struct ALevelInfo_execThisIsNeverExecuted_Parms {
};


//  LevelInfo.ServerTravel 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ALevelInfo_eventServerTravel_Parms {
  class FString URL;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD bItems : 1;  // 8 80 CPF_Parm
};


//  LevelInfo.GetAddressURL 20500 0 ( FUNC_Simulated FUNC_Native FUNC_Public )
struct ALevelInfo_execGetAddressURL_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  LevelInfo.IsSoftwareRendering 22501 0 ( FUNC_Final FUNC_Simulated FUNC_Native FUNC_Static FUNC_Public )
struct ALevelInfo_execIsSoftwareRendering_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  LevelInfo.IsDemoBuild 22501 0 ( FUNC_Final FUNC_Simulated FUNC_Native FUNC_Static FUNC_Public )
struct ALevelInfo_execIsDemoBuild_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  LevelInfo.GetLocalURL 20500 0 ( FUNC_Simulated FUNC_Native FUNC_Public )
struct ALevelInfo_execGetLocalURL_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  LevelInfo.AddPrecacheStaticMesh 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct ALevelInfo_execAddPrecacheStaticMesh_Parms {
  class UStaticMesh* stat;  // 0 80 CPF_Parm
};


//  LevelInfo.AddPrecacheMaterial 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct ALevelInfo_execAddPrecacheMaterial_Parms {
  class UMaterial* mat;  // 0 80 CPF_Parm
};


//  LevelInfo.FillPrecacheStaticMeshesArray 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct ALevelInfo_eventFillPrecacheStaticMeshesArray_Parms {
  BITFIELD FullPrecache : 1;  // 0 80 CPF_Parm
};


//  LevelInfo.PrecacheAnnouncements 20100 0 ( FUNC_Simulated FUNC_Public )
struct ALevelInfo_execPrecacheAnnouncements_Parms {
};


//  LevelInfo.FillPrecacheMaterialsArray 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct ALevelInfo_eventFillPrecacheMaterialsArray_Parms {
  BITFIELD FullPrecache : 1;  // 0 80 CPF_Parm
};


//  LevelInfo.PostBeginPlay 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct ALevelInfo_execPostBeginPlay_Parms {
};


//  LevelInfo.GetPhysicsVolume 20500 0 ( FUNC_Simulated FUNC_Native FUNC_Public )
struct ALevelInfo_execGetPhysicsVolume_Parms {
  class FVector loc;  // 0 80 CPF_Parm
  class APhysicsVolume* ReturnValue;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  LevelInfo.ForceLoadTexture 20500 0 ( FUNC_Simulated FUNC_Native FUNC_Public )
struct ALevelInfo_execForceLoadTexture_Parms {
  class UTexture* Texture;  // 0 80 CPF_Parm
};


//  LevelInfo.UpdateDistanceFogLOD 20500 0 ( FUNC_Simulated FUNC_Native FUNC_Public )
struct ALevelInfo_execUpdateDistanceFogLOD_Parms {
  FLOAT LOD;  // 0 80 CPF_Parm
};


//  LevelInfo.GetDetailMode 20500 0 ( FUNC_Simulated FUNC_Native FUNC_Public )
struct ALevelInfo_execGetDetailMode_Parms {
  BYTE ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  LevelInfo.DetailChange 20500 0 ( FUNC_Simulated FUNC_Native FUNC_Public )
struct ALevelInfo_execDetailChange_Parms {
  BYTE NewDetailMode;  // 0 80 CPF_Parm
};


// ALevelInfo 836 ( CLASS_Compiled CLASS_Config CLASS_Parsed CLASS_Localized CLASS_NativeReplication )
class DLL_IMPORT ALevelInfo : public AZoneInfo {
  public:
    FLOAT TimeDilation;  // 548 2000000 CPF_EditorData
    FLOAT TimeSeconds;  // 54C 2002000 CPF_Transient CPF_EditorData
    INT Year;  // 550 2002000 CPF_Transient CPF_EditorData
    INT Month;  // 554 2002000 CPF_Transient CPF_EditorData
    INT Day;  // 558 2002000 CPF_Transient CPF_EditorData
    INT DayOfWeek;  // 55C 2002000 CPF_Transient CPF_EditorData
    INT Hour;  // 560 2002000 CPF_Transient CPF_EditorData
    INT Minute;  // 564 2002000 CPF_Transient CPF_EditorData
    INT Second;  // 568 2002000 CPF_Transient CPF_EditorData
    INT Millisecond;  // 56C 2002000 CPF_Transient CPF_EditorData
    class AActor* SunLights[4];  // 570 2000 CPF_Transient
    INT NumSunLights;  // 580 2000 CPF_Transient
    FLOAT PauseDelay;  // 584 2000000 CPF_EditorData
    FLOAT RelativeTimeOfDay;  // 588 2000002 CPF_Const CPF_EditorData
    class AEnvironmentManager* EnvironmentManager;  // 58C 2002000 CPF_Transient CPF_EditorData
    class FString Title;  // 590 2408001 CPF_Edit CPF_Localized CPF_NeedCtorLink CPF_EditorData
    class FString Author;  // 598 400001 CPF_Edit CPF_NeedCtorLink
    class FString Description;  // 5A0 400001 CPF_Edit CPF_NeedCtorLink
    class UMaterial* Screenshot;  // 5A8 1 CPF_Edit
    class FString DecoTextName;  // 5AC 400001 CPF_Edit CPF_NeedCtorLink
    INT IdealPlayerCountMin;  // 5B4 1 CPF_Edit
    INT IdealPlayerCountMax;  // 5B8 1 CPF_Edit
    class FString ExtraInfo;  // 5BC 400001 CPF_Edit CPF_NeedCtorLink
    INT SinglePlayerTeamSize;  // 5C4 1 CPF_Edit
    class UMaterial* RadarMapImage;  // 5C8 1 CPF_Edit
    FLOAT CustomRadarRange;  // 5CC 1 CPF_Edit
    BYTE PhysicsDetailLevel;  // 5D0 4001 CPF_Edit CPF_Config
    BYTE MeshLODDetailLevel;  // 5D1 4001 CPF_Edit CPF_Config
    FLOAT KarmaTimeScale;  // 5D4 2000001 CPF_Edit CPF_EditorData
    FLOAT RagdollTimeScale;  // 5D8 2000001 CPF_Edit CPF_EditorData
    INT MaxRagdolls;  // 5DC 2000001 CPF_Edit CPF_EditorData
    FLOAT KarmaGravScale;  // 5E0 2000001 CPF_Edit CPF_EditorData
    BITFIELD bKStaticFriction : 1;  // 5E4 2000001 CPF_Edit CPF_EditorData
    BITFIELD bKNoInit : 1;  // 5E4 2000001 CPF_Edit CPF_EditorData
    INT LastTaunt[2];  // 5E8 2000000 CPF_EditorData
    FLOAT DecalStayScale;  // 5F0 2004000 CPF_Config CPF_EditorData
    class FString LevelEnterText;  // 5F4 2408001 CPF_Edit CPF_Localized CPF_NeedCtorLink CPF_EditorData
    class FString LocalizedPkg;  // 5FC 2400001 CPF_Edit CPF_NeedCtorLink CPF_EditorData
    class ULevelSummary* Summary;  // 604 0
    class FString VisibleGroups;  // 608 22400000 CPF_NeedCtorLink CPF_EditorData CPF_Deprecated
    BITFIELD HideFromMenus : 1;  // 610 1 CPF_Edit
    BITFIELD bLonePlayer : 1;  // 610 2000001 CPF_Edit CPF_EditorData
    BITFIELD bBegunPlay : 1;  // 610 2000000 CPF_EditorData
    BITFIELD bPlayersOnly : 1;  // 610 2000000 CPF_EditorData
    BITFIELD bFreezeKarma : 1;  // 610 2000000 CPF_EditorData
    BYTE DetailMode;  // 614 2000002 CPF_Const CPF_EditorData
    BITFIELD bDropDetail : 1;  // 618 2000000 CPF_EditorData
    BITFIELD bAggressiveLOD : 1;  // 618 2000000 CPF_EditorData
    BITFIELD bStartup : 1;  // 618 2000000 CPF_EditorData
    BITFIELD bLowSoundDetail : 1;  // 618 4000 CPF_Config
    BITFIELD bPathsRebuilt : 1;  // 618 2000000 CPF_EditorData
    BITFIELD bHasPathNodes : 1;  // 618 0
    BITFIELD bLevelChange : 1;  // 618 0
    BITFIELD bShouldPreload : 1;  // 618 2044000 CPF_Config CPF_GlobalConfig CPF_EditorData
    BITFIELD bDesireSkinPreload : 1;  // 618 2044000 CPF_Config CPF_GlobalConfig CPF_EditorData
    BITFIELD bKickLiveIdlers : 1;  // 618 2044000 CPF_Config CPF_GlobalConfig CPF_EditorData
    BITFIELD bSkinsPreloaded : 1;  // 618 2000000 CPF_EditorData
    BITFIELD bClassicView : 1;  // 618 2000000 CPF_EditorData
    BITFIELD bShowRadarMap : 1;  // 618 1 CPF_Edit
    BITFIELD bUseTerrainForRadarRange : 1;  // 618 1 CPF_Edit
    BITFIELD bIsSaveGame : 1;  // 618 2000000 CPF_EditorData
    BITFIELD bSupportSaveGames : 1;  // 618 2000001 CPF_Edit CPF_EditorData
    BITFIELD bNeverPrecache : 1;  // 618 4000 CPF_Config
    INT LevelTextureLODBias;  // 61C 1 CPF_Edit
    FLOAT AnimMeshGlobalLOD;  // 620 2000000 CPF_EditorData
    class FVector CameraLocationDynamic;  // 624 1 CPF_Edit
    class FVector CameraLocationTop;  // 630 1 CPF_Edit
    class FVector CameraLocationFront;  // 63C 1 CPF_Edit
    class FVector CameraLocationSide;  // 648 1 CPF_Edit
    class FRotator CameraRotationDynamic;  // 654 1 CPF_Edit
    class FString Song;  // 660 2400001 CPF_Edit CPF_NeedCtorLink CPF_EditorData
    FLOAT PlayerDoppler;  // 668 2000001 CPF_Edit CPF_EditorData
    FLOAT MusicVolumeOverride;  // 66C 1 CPF_Edit
    FLOAT Brightness;  // 670 1 CPF_Edit
    class UTexture* DefaultTexture;  // 674 0
    class UTexture* WireframeTexture;  // 678 0
    class UTexture* WhiteSquareTexture;  // 67C 0
    class UTexture* LargeVertex;  // 680 0
    INT HubStackLevel;  // 684 0
    BYTE LevelAction;  // 688 2000 CPF_Transient
    BYTE NetMode;  // 689 0
    class FString ComputerName;  // 68C 2400000 CPF_NeedCtorLink CPF_EditorData
    class FString EngineVersion;  // 694 2400000 CPF_NeedCtorLink CPF_EditorData
    class FString MinNetVersion;  // 69C 2400000 CPF_NeedCtorLink CPF_EditorData
    class FString DefaultGameType;  // 6A4 400001 CPF_Edit CPF_NeedCtorLink
    class FString PreCacheGame;  // 6AC 400001 CPF_Edit CPF_NeedCtorLink
    FLOAT DefaultGravity;  // 6B4 0
    FLOAT LastVehicleCheck;  // 6B8 0
    FLOAT StallZ;  // 6BC 2000001 CPF_Edit CPF_EditorData
    class ANavigationPoint* NavigationPointList;  // 6C0 2 CPF_Const
    class AController* ControllerList;  // 6C4 2 CPF_Const
    BITFIELD bUseHeadlights : 1;  // 6C8 1 CPF_Edit
    FLOAT HeadlightScaling;  // 6CC 1 CPF_Edit
    class FString NextURL;  // 6D0 400000 CPF_NeedCtorLink
    BITFIELD bNextItems : 1;  // 6D8 0
    FLOAT NextSwitchCountdown;  // 6DC 0
    class UObjectPool* ObjectPool;  // 6E0 2000 CPF_Transient
    TArray<class UMaterial*> PrecacheMaterials;  // 6E4 402000 CPF_Transient CPF_NeedCtorLink
    TArray<class UStaticMesh*> PrecacheStaticMeshes;  // 6F0 402000 CPF_Transient CPF_NeedCtorLink
    class UStaticMesh* IndoorCamouflageMesh;  // 6FC 1 CPF_Edit
    FLOAT IndoorMeshDrawscale;  // 700 1 CPF_Edit
    class UStaticMesh* OutdoorCamouflageMesh;  // 704 1 CPF_Edit
    FLOAT OutdoorMeshDrawscale;  // 708 1 CPF_Edit
    class FColor DustColor;  // 70C 1 CPF_Edit
    class FColor WaterDustColor;  // 710 1 CPF_Edit
    FLOAT MoveRepSize;  // 714 0
    FLOAT MaxClientFrameRate;  // 718 44000 CPF_Config CPF_GlobalConfig
    FLOAT MaxTimeMargin;  // 71C 44000 CPF_Config CPF_GlobalConfig
    FLOAT TimeMarginSlack;  // 720 44000 CPF_Config CPF_GlobalConfig
    FLOAT MinTimeMargin;  // 724 44000 CPF_Config CPF_GlobalConfig
    class APlayerController* ReplicationViewer;  // 728 2000002 CPF_Const CPF_EditorData
    class AActor* ReplicationViewTarget;  // 72C 2000002 CPF_Const CPF_EditorData
    class USBLightingCubemap* LightingCubeMap;  // 730 2002 CPF_Const CPF_Transient
    virtual ~ALevelInfo(void);
    virtual void Destroy(void);
    virtual unsigned int GetCPPSize(void);
    virtual void SetZone(int,int);
    virtual void SetVolumes(void);
    virtual void SetVolumes(class TArray<class AVolume *> const &);
    virtual void CheckForErrors(void);
    ALevelInfo(class ALevelInfo const &);
    ALevelInfo(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ALevelInfo & operator=(class ALevelInfo const &);
    class APhysicsVolume * GetDefaultPhysicsVolume(void);
    class AEnvironmentManager * GetEnvironmentManager(void);
    class APlayerController * GetLocalPlayerController(void)const ;
    class APhysicsVolume * GetPhysicsVolume(class FVector,class AActor *,int);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void UpdateDistanceFogLOD(float);
    void eventFillPrecacheMaterialsArray(unsigned long);
    void eventFillPrecacheStaticMeshesArray(unsigned long);
    void eventServerTravel(class FString const &,unsigned long);
    void execDetailChange(struct FFrame &,void * const);
    void execForceLoadTexture(struct FFrame &,void * const);
    void execGetAddressURL(struct FFrame &,void * const);
    void execGetDetailMode(struct FFrame &,void * const);
    void execGetEnvironmentManager(struct FFrame &,void * const);
    void execGetLocalPlayerController(struct FFrame &,void * const);
    void execGetLocalURL(struct FFrame &,void * const);
    void execGetPhysicsVolume(struct FFrame &,void * const);
    void execIsDemoBuild(struct FFrame &,void * const);
    void execIsSoftwareRendering(struct FFrame &,void * const);
    void execUpdateDistanceFogLOD(struct FFrame &,void * const);
  protected:
    class ULevel * GetLevel(void)const ;
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(ALevelInfo,0,execDetailChange)
AUTOGENERATE_FUNCTION(ALevelInfo,0,execForceLoadTexture)
AUTOGENERATE_FUNCTION(ALevelInfo,0,execGetAddressURL)
AUTOGENERATE_FUNCTION(ALevelInfo,0,execGetDetailMode)
AUTOGENERATE_FUNCTION(ALevelInfo,0,execGetEnvironmentManager)
AUTOGENERATE_FUNCTION(ALevelInfo,0,execGetLocalPlayerController)
AUTOGENERATE_FUNCTION(ALevelInfo,0,execGetLocalURL)
AUTOGENERATE_FUNCTION(ALevelInfo,0,execGetPhysicsVolume)
AUTOGENERATE_FUNCTION(ALevelInfo,0,execIsDemoBuild)
AUTOGENERATE_FUNCTION(ALevelInfo,0,execIsSoftwareRendering)
AUTOGENERATE_FUNCTION(ALevelInfo,0,execUpdateDistanceFogLOD)


//------------------------------------------------------------------------------
//  AmbientSound
//------------------------------------------------------------------------------

// FSoundEmitter 0 ( )
struct DLL_IMPORT FSoundEmitter {
  public:
    FLOAT EmitInterval;  // 0 1 CPF_Edit
    FLOAT EmitVariance;  // 4 1 CPF_Edit
    FLOAT EmitTime;  // 8 2000 CPF_Transient
    class USound* EmitSound;  // C 1 CPF_Edit
    struct FSoundEmitter & operator=(struct FSoundEmitter const &);
};

// AAmbientSound 4016 ( CLASS_Compiled CLASS_Config CLASS_Parsed CLASS_ExportStructs )
class DLL_IMPORT AAmbientSound : public AKeypoint {
  public:
    TArray<struct FSoundEmitter> SoundEmitters;  // 420 400001 CPF_Edit CPF_NeedCtorLink
    FLOAT AmbientVolume;  // 42C 2044000 CPF_Config CPF_GlobalConfig CPF_EditorData
    virtual ~AAmbientSound(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Tick(float,enum ELevelTick);
    virtual void PostBeginPlay(void);
    AAmbientSound(class AAmbientSound const &);
    AAmbientSound(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AAmbientSound & operator=(class AAmbientSound const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  Note
//------------------------------------------------------------------------------

// ANote 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT ANote : public AActor {
  public:
    class FString Text;  // 420 400001 CPF_Edit CPF_NeedCtorLink
    virtual ~ANote(void);
    virtual unsigned int GetCPPSize(void);
    virtual void CheckForErrors(void);
    ANote(class ANote const &);
    ANote(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ANote & operator=(class ANote const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  PolyMarker
//------------------------------------------------------------------------------

// APolyMarker 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT APolyMarker : public AKeypoint {
  public:
    virtual ~APolyMarker(void);
    virtual unsigned int GetCPPSize(void);
    APolyMarker(class APolyMarker const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class APolyMarker & operator=(class APolyMarker const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    APolyMarker(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  ClipMarker
//------------------------------------------------------------------------------

// AClipMarker 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT AClipMarker : public AKeypoint {
  public:
    virtual ~AClipMarker(void);
    virtual unsigned int GetCPPSize(void);
    AClipMarker(class AClipMarker const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AClipMarker & operator=(class AClipMarker const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    AClipMarker(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  DynamicLight
//------------------------------------------------------------------------------

// ADynamicLight 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT ADynamicLight : public ALight {
  public:
    virtual ~ADynamicLight(void);
    virtual unsigned int GetCPPSize(void);
    ADynamicLight(class ADynamicLight const &);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ADynamicLight & operator=(class ADynamicLight const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  protected:
    ADynamicLight(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  MultiCombiner
//------------------------------------------------------------------------------

// UMultiCombiner 2112 ( CLASS_Compiled CLASS_Parsed CLASS_NoExport CLASS_CollapseCategories )
class DLL_IMPORT UMultiCombiner : public UMaterial {
  public:
    virtual ~UMultiCombiner(void);
    virtual unsigned int GetCPPSize(void);
    UMultiCombiner(class UMultiCombiner const &);
    UMultiCombiner(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UMultiCombiner & operator=(class UMultiCombiner const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  KMeshProps
//------------------------------------------------------------------------------

// UKMeshProps 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UKMeshProps : public UObject {
  public:
    char Unknown0[84];
    virtual ~UKMeshProps(void);
    virtual void Serialize(class FArchive &);
    virtual unsigned int GetCPPSize(void);
    UKMeshProps(class UKMeshProps const &);
    UKMeshProps(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UKMeshProps & operator=(class UKMeshProps const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  NullRenderDevice
//------------------------------------------------------------------------------

// UNullRenderDevice 1E ( CLASS_Compiled CLASS_Config CLASS_Transient CLASS_Parsed )
class DLL_IMPORT UNullRenderDevice : public URenderDevice/*,FExec*/  {
  public:
    char Unknown0[36];
    //virtual int Exec(unsigned short const *,class FOutputDevice &);
    virtual ~UNullRenderDevice(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Init(void);
    virtual int SetRes(class UViewport *,int,int,int,int,int);
    virtual void Exit(class UViewport *);
    virtual void Flush(enum EFlushType);
    virtual int FlushResource(unsigned __int64);
    virtual int FlushManagedResource(unsigned __int64);
    virtual void PreloadResource(unsigned __int64);
    virtual void DecreaseResourcePriority(unsigned __int64);
    virtual void EnableMultiPass(int);
    virtual int IsMultiPassEnabled(void)const ;
    virtual void UpdateGamma(class UViewport *);
    virtual void RestoreGamma(void);
    virtual class FRenderInterface * Lock(class UViewport *,unsigned char *,int *);
    virtual void Unlock(class FRenderInterface *);
    virtual void Present(class UViewport *);
    virtual void ReadPixels(class UViewport *,class FColor *,int);
    virtual void SetEmulationMode(enum EHardwareEmulationMode);
    virtual struct FRenderCaps * GetRenderCaps(void);
    virtual int SupportsTextureFormat(enum ETextureFormat);
    UNullRenderDevice(class UNullRenderDevice const &);
    UNullRenderDevice(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UNullRenderDevice & operator=(class UNullRenderDevice const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
    void StaticConstructor(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  xWeatherEffect
//------------------------------------------------------------------------------

enum EWeatherType {
  WT_Rain = 0,
  WT_Snow = 1,
  WT_Dust = 2
};

// FWeatherPcl 0 ( )
struct DLL_IMPORT FWeatherPcl {
  public:
    class FVector pos;  // 0 0
    class FVector Vel;  // C 0
    FLOAT Life;  // 18 0
    FLOAT Size;  // 1C 0
    FLOAT HitTime;  // 20 0
    FLOAT InvLifeSpan;  // 24 0
    FLOAT DistAtten;  // 28 0
    BYTE frame;  // 2C 0
    BYTE Dummy1;  // 2D 0
    BYTE Visible;  // 2E 0
    BYTE Dummy2;  // 2F 0
    FWeatherPcl(void);
    struct FWeatherPcl & operator=(struct FWeatherPcl const &);
};

// AxWeatherEffect 4212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate CLASS_ExportStructs )
class DLL_IMPORT AxWeatherEffect : public AActor {
  public:
    BYTE WeatherType;  // 420 1 CPF_Edit
    INT numParticles;  // 424 1 CPF_Edit
    INT numActive;  // 428 2000 CPF_Transient
    class FBox Box;  // 42C 2000 CPF_Transient
    class FVector eyePos;  // 448 2000 CPF_Transient
    class FVector eyeDir;  // 454 2000 CPF_Transient
    class FVector spawnOrigin;  // 460 2000 CPF_Transient
    class FVector eyeMoveVec;  // 46C 2000 CPF_Transient
    FLOAT eyeVel;  // 478 2000 CPF_Transient
    FLOAT deviation;  // 47C 1 CPF_Edit
    FLOAT maxPclEyeDist;  // 480 1 CPF_Edit
    FLOAT numCols;  // 484 1 CPF_Edit
    FLOAT numRows;  // 488 1 CPF_Edit
    FLOAT numFrames;  // 48C 2000 CPF_Transient
    FLOAT texU;  // 490 2000 CPF_Transient
    FLOAT texV;  // 494 2000 CPF_Transient
    BITFIELD noReference : 1;  // 498 2002000 CPF_Transient CPF_EditorData
    class FVector spawnVecU;  // 49C 0
    class FVector spawnVecV;  // 4A8 0
    class FVector spawnVel;  // 4B4 1 CPF_Edit
    class FRangeVector Position;  // 4C0 1 CPF_Edit
    class FRange speed;  // 4D8 1 CPF_Edit
    class FRange Life;  // 4E0 1 CPF_Edit
    class FRange Size;  // 4E8 1 CPF_Edit
    class FRange EyeSizeClamp;  // 4F0 1 CPF_Edit
    BITFIELD bForceAffected : 1;  // 4F8 1 CPF_Edit
    TArray<struct FWeatherPcl> pcl;  // 4FC 402000 CPF_Transient CPF_NeedCtorLink
    TArray<class AVolume*> pclBlockers;  // 508 402000 CPF_Transient CPF_NeedCtorLink
    virtual ~AxWeatherEffect(void);
    virtual void PostLoad(void);
    virtual void Destroy(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Tick(float,enum ELevelTick);
    virtual void PostEditLoad(void);
    virtual void Spawned(void);
    virtual void SetZone(int,int);
    AxWeatherEffect(class AxWeatherEffect const &);
    AxWeatherEffect(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AxWeatherEffect & operator=(class AxWeatherEffect const &);
    void CacheBlockers(void);
    void InitParticle(struct FWeatherPcl &);
    static void CDECL InternalConstructor(void *);
    void PreCalc(void);
    void Render(class FLevelSceneNode *,class FRenderInterface *);
    static class UClass * CDECL StaticClass(void);
    void UpdateViewer(class FLevelSceneNode *);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  xProcMesh
//------------------------------------------------------------------------------

enum EProcMeshType {
  MT_Water = 0,
  MT_Deform = 1
};

// FProcMeshVertex 0 ( )
struct DLL_IMPORT FProcMeshVertex {
  public:
    class FVector Position;  // 0 0
    class FVector Normal;  // C 0
    class FColor Color;  // 18 0
    FLOAT U;  // 1C 0
    FLOAT V;  // 20 0
    FProcMeshVertex(void);
    struct FProcMeshVertex & operator=(struct FProcMeshVertex const &);
};

//  xProcMesh.Touch 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AxProcMesh_execTouch_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  xProcMesh.TakeDamage 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AxProcMesh_execTakeDamage_Parms {
  INT Damage;  // 0 80 CPF_Parm
  class APawn* instigatedBy;  // 4 80 CPF_Parm
  class FVector HitLocation;  // 8 80 CPF_Parm
  class FVector Momentum;  // 14 80 CPF_Parm
  class UClass* DamageType;  // 20 80 CPF_Parm
};


//  xProcMesh.ProcPling 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct AxProcMesh_execProcPling_Parms {
  class FVector Position;  // 0 80 CPF_Parm
  FLOAT Strength;  // C 80 CPF_Parm
  FLOAT Radius;  // 10 80 CPF_Parm
  class FVector EffectLocation;  // 14 180 CPF_Parm CPF_OutParm
  class FVector EffectNormal;  // 20 180 CPF_Parm CPF_OutParm
};


// AxProcMesh 4212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate CLASS_ExportStructs )
class DLL_IMPORT AxProcMesh : public AActor {
  public:
    TArray<struct FProcMeshVertex> Vertices;  // 420 400002 CPF_Const CPF_NeedCtorLink
    TArray<INT> SectionOffsets;  // 42C 400002 CPF_Const CPF_NeedCtorLink
    FLOAT Dampening;  // 438 2000001 CPF_Edit CPF_EditorData
    class FRange DampeningRange;  // 43C 1 CPF_Edit
    class FRange MovementClamp;  // 444 1 CPF_Edit
    class FRange ForceClamp;  // 44C 1 CPF_Edit
    FLOAT ForceAttenuation;  // 454 1 CPF_Edit
    FLOAT Tension;  // 458 1 CPF_Edit
    FLOAT RestTension;  // 45C 1 CPF_Edit
    BITFIELD CheckCollision : 1;  // 460 1 CPF_Edit
    FLOAT Noise;  // 464 1 CPF_Edit
    class FRange NoiseForce;  // 468 1 CPF_Edit
    class FRange NoiseTimer;  // 470 1 CPF_Edit
    FLOAT NoiseCounter;  // 478 2000 CPF_Transient
    BYTE ProcType;  // 47C 1 CPF_Edit
    BITFIELD bForceAffected : 1;  // 480 1 CPF_Edit
    BITFIELD bRigidEdges : 1;  // 480 1 CPF_Edit
    DWORD pProcData;  // 484 2002002 CPF_Const CPF_Transient CPF_EditorData
    class UClass* HitEffect;  // 488 1 CPF_Edit
    class UClass* BigHitEffect;  // 48C 1 CPF_Edit
    FLOAT BigMomentumThreshold;  // 490 1 CPF_Edit
    FLOAT BigTouchThreshold;  // 494 1 CPF_Edit
    FLOAT ShootStrength;  // 498 1 CPF_Edit
    FLOAT TouchStrength;  // 49C 1 CPF_Edit
    FLOAT InfluenceRadius;  // 4A0 1 CPF_Edit
    virtual ~AxProcMesh(void);
    virtual void PostLoad(void);
    virtual void Destroy(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Tick(float,enum ELevelTick);
    virtual void Spawned(void);
    AxProcMesh(class AxProcMesh const &);
    AxProcMesh(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AxProcMesh & operator=(class AxProcMesh const &);
    void CalcMeshData(void);
    static void CDECL InternalConstructor(void *);
    void Render(class FLevelSceneNode *,class TList<class FDynamicLight *> *,class FRenderInterface *);
    static class UClass * CDECL StaticClass(void);
    void execProcPling(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(AxProcMesh,0,execProcPling)


//------------------------------------------------------------------------------
//  xEmitter
//------------------------------------------------------------------------------

enum EAttenFunc {
  ATF_LerpInOut = 0,
  ATF_ExpInOut = 1,
  ATF_SmoothStep = 2,
  ATF_Pulse = 3,
  ATF_Random = 4,
  ATF_None = 5
};

enum ExSpawningTypes {
  ST_Sphere = 0,
  ST_Line = 1,
  ST_Disc = 2,
  ST_Cylinder = 3,
  ST_AimedSphere = 4,
  ST_StaticMesh = 5,
  ST_Explode = 6,
  ST_ExplodeRing = 7,
  ST_OwnerSkeleton = 8,
  ST_Test = 9
};

enum ExParticleTypes {
  PT_Sprite = 0,
  PT_Stream = 1,
  PT_Line = 2,
  PT_Disc = 3,
  PT_Mesh = 4,
  PT_Branch = 5,
  PT_Beam = 6
};

//  xEmitter.PrecacheContent 22002 0 ( FUNC_Defined FUNC_Static FUNC_Public )
struct AxEmitter_execPrecacheContent_Parms {
  class ALevelInfo* Level;  // 0 80 CPF_Parm
};


//  xEmitter.UpdatePrecacheMaterials 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AxEmitter_execUpdatePrecacheMaterials_Parms {
};


//  xEmitter.Trigger 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct AxEmitter_eventTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


//  xEmitter.ClampToMaxParticles 20103 0 ( FUNC_Final FUNC_Defined FUNC_Simulated FUNC_Public )
struct AxEmitter_execClampToMaxParticles_Parms {
  FLOAT InPart;  // 0 80 CPF_Parm
  FLOAT ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  xEmitter.PreSpawned 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct AxEmitter_eventPreSpawned_Parms {
};


//  xEmitter.CollisionSound 20800 0 ( FUNC_Event FUNC_Public )
struct AxEmitter_eventCollisionSound_Parms {
};


// AxEmitter 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT AxEmitter : public AActor {
  public:
    BYTE mParticleType;  // 420 1 CPF_Edit
    BYTE mSpawningType;  // 421 1 CPF_Edit
    BITFIELD mRegen : 1;  // 424 1 CPF_Edit
    BITFIELD mRegenPause : 1;  // 424 1 CPF_Edit
    FLOAT mRegenOnTime[2];  // 428 1 CPF_Edit
    FLOAT mRegenOffTime[2];  // 430 1 CPF_Edit
    INT mStartParticles;  // 438 2000001 CPF_Edit CPF_EditorData
    INT mMaxParticles;  // 43C 1 CPF_Edit
    FLOAT mDelayRange[2];  // 440 1 CPF_Edit
    FLOAT mLifeRange[2];  // 448 1 CPF_Edit
    FLOAT mRegenRange[2];  // 450 1 CPF_Edit
    FLOAT mRegenDist;  // 458 1 CPF_Edit
    FName mSourceActor;  // 45C 1 CPF_Edit
    FName mChildName;  // 460 1 CPF_Edit
    class AxEmitter* mChildEmitter;  // 464 0
    class AStaticMeshActor* SourceStaticMesh;  // 468 1 CPF_Edit
    BITFIELD bSuspendWhenNotVisible : 1;  // 46C 1 CPF_Edit
    BITFIELD mDistanceAtten : 1;  // 46C 1 CPF_Edit
    class FVector mDirDev;  // 470 1 CPF_Edit
    class FVector mPosDev;  // 47C 1 CPF_Edit
    class FVector mSpawnVecA;  // 488 1 CPF_Edit
    class FVector mSpawnVecB;  // 494 1 CPF_Edit
    FLOAT mSpeedRange[2];  // 4A0 1 CPF_Edit
    BITFIELD mPosRelative : 1;  // 4A8 1 CPF_Edit
    FLOAT mMassRange[2];  // 4AC 1 CPF_Edit
    FLOAT mAirResistance;  // 4B4 1 CPF_Edit
    BITFIELD mCollision : 1;  // 4B8 1 CPF_Edit
    FLOAT mOwnerVelocityFactor;  // 4BC 1 CPF_Edit
    BITFIELD mRandOrient : 1;  // 4C0 1 CPF_Edit
    FLOAT mSpinRange[2];  // 4C4 1 CPF_Edit
    FLOAT mSizeRange[2];  // 4CC 1 CPF_Edit
    FLOAT mGrowthRate;  // 4D4 1 CPF_Edit
    class FColor mColorRange[2];  // 4D8 1 CPF_Edit
    BITFIELD mAttenuate : 1;  // 4E0 1 CPF_Edit
    FLOAT mAttenKa;  // 4E4 1 CPF_Edit
    FLOAT mAttenKb;  // 4E8 1 CPF_Edit
    BYTE mAttenFunc;  // 4EC 1 CPF_Edit
    INT mpAttenFunc;  // 4F0 0
    BITFIELD mRandTextures : 1;  // 4F4 2000001 CPF_Edit CPF_EditorData
    BITFIELD mTileAnimation : 1;  // 4F4 2000001 CPF_Edit CPF_EditorData
    INT mNumTileColumns;  // 4F8 1 CPF_Edit
    INT mNumTileRows;  // 4FC 1 CPF_Edit
    BITFIELD mUseMeshNodes : 1;  // 500 1 CPF_Edit
    BITFIELD mRandMeshes : 1;  // 500 1 CPF_Edit
    class UStaticMesh* mMeshNodes[8];  // 504 2000001 CPF_Edit CPF_EditorData
    class UTexture* mPosColorMapXY;  // 524 1 CPF_Edit
    class UTexture* mPosColorMapXZ;  // 528 1 CPF_Edit
    class UTexture* mLifeColorMap;  // 52C 1 CPF_Edit
    FLOAT springK;  // 530 1 CPF_Edit
    FLOAT springD;  // 534 1 CPF_Edit
    FLOAT springMaxStretch;  // 538 1 CPF_Edit
    FLOAT springMaxCompress;  // 53C 1 CPF_Edit
    FLOAT mColElasticity;  // 540 2000001 CPF_Edit CPF_EditorData
    FLOAT mAttraction;  // 544 2000001 CPF_Edit CPF_EditorData
    BITFIELD mColMakeSound : 1;  // 548 1 CPF_Edit
    FLOAT mWaveFrequency;  // 54C 1 CPF_Edit
    FLOAT mWaveAmplitude;  // 550 1 CPF_Edit
    FLOAT mWaveShift;  // 554 1 CPF_Edit
    FLOAT mBendStrength;  // 558 1 CPF_Edit
    BITFIELD mWaveLockEnd : 1;  // 55C 1 CPF_Edit
    BITFIELD bForceAffected : 1;  // 55C 1 CPF_Edit
    INT SystemHandle;  // 560 2000 CPF_Transient
    INT Expire;  // 564 2000 CPF_Transient
    DWORD mpParticles;  // 568 2002000 CPF_Transient CPF_EditorData
    INT mNumActivePcl;  // 56C 2000 CPF_Transient
    DWORD mpIterator;  // 570 2000 CPF_Transient
    INT mbSpinningNodes;  // 574 2000 CPF_Transient
    class FVector mLastPos;  // 578 2000 CPF_Transient
    class FVector mLastVector;  // 584 2000 CPF_Transient
    FLOAT mTime;  // 590 2000 CPF_Transient
    FLOAT mT;  // 594 2002000 CPF_Transient CPF_EditorData
    FLOAT mRegenBias;  // 598 2000 CPF_Transient
    FLOAT mRegenTimer;  // 59C 2000 CPF_Transient
    FLOAT mPauseTimer;  // 5A0 2000 CPF_Transient
    class FBox mBounds;  // 5A4 2000 CPF_Transient
    class FPlane mSphere;  // 5C0 2000 CPF_Transient
    class FVector mDir;  // 5D0 2000 CPF_Transient
    INT mNumUpdates;  // 5DC 2000 CPF_Transient
    INT mAtLeastOneFrame;  // 5E0 2000 CPF_Transient
    INT mRenderableVerts;  // 5E4 2000 CPF_Transient
    FLOAT mTexU;  // 5E8 2000 CPF_Transient
    FLOAT mTexV;  // 5EC 2000 CPF_Transient
    FLOAT mTotalTiles;  // 5F0 2000 CPF_Transient
    FLOAT mInvTileCols;  // 5F4 2000 CPF_Transient
    DWORD mpSprings;  // 5F8 2002000 CPF_Transient CPF_EditorData
    INT mNumSprings;  // 5FC 2000 CPF_Transient
    FLOAT mWavePhaseA;  // 600 2000 CPF_Transient
    FLOAT mWavePhaseB;  // 604 2000 CPF_Transient
    BITFIELD blockOnNet : 1;  // 608 0
    BITFIELD bCallPreSpawn : 1;  // 608 0
    INT mHeadIndex;  // 60C 2000 CPF_Transient
    virtual ~AxEmitter(void);
    virtual void Destroy(void);
    virtual void PostEditChange(void);
    virtual unsigned int GetCPPSize(void);
    virtual int Tick(float,enum ELevelTick);
    virtual void Spawned(void);
    virtual void PostBeginPlay(void);
    AxEmitter(class AxEmitter const &);
    AxEmitter(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class AxEmitter & operator=(class AxEmitter const &);
    void InitParticle(int);
    void Initialize(void);
    static void CDECL InternalConstructor(void *);
    int IsForceAffected(void);
    void PreCalc(void);
    void Render(class FLevelSceneNode *,class FRenderInterface *);
    void Reset(void);
    static class UClass * CDECL StaticClass(void);
    void eventCollisionSound(void);
    void eventPreSpawned(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  SceneSubtitles
//------------------------------------------------------------------------------

enum ESST_Mode {
  ESST_SkipToNextLine = 0
};

//  SceneSubtitles.Reset 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ASceneSubtitles_eventReset_Parms {
};


//  SceneSubtitles.GetSubTitles 20002 0 ( FUNC_Defined FUNC_Public )
struct ASceneSubtitles_execGetSubTitles_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  SceneSubtitles.ProcessEvent 20401 0 ( FUNC_Final FUNC_Native FUNC_Public )
struct ASceneSubtitles_execProcessEvent_Parms {
  BYTE Mode;  // 0 80 CPF_Parm
};


// ASceneSubtitles 232 ( CLASS_Compiled CLASS_Parsed CLASS_Localized CLASS_NoUserCreate )
class DLL_IMPORT ASceneSubtitles : public AInfo {
  public:
    TArray<class FString> SubTitles;  // 420 2408001 CPF_Edit CPF_Localized CPF_NeedCtorLink CPF_EditorData
    INT CurrentIndex;  // 42C 2000000 CPF_EditorData
    virtual ~ASceneSubtitles(void);
    virtual unsigned int GetCPPSize(void);
    ASceneSubtitles(class ASceneSubtitles const &);
    ASceneSubtitles(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class ASceneSubtitles & operator=(class ASceneSubtitles const &);
    static void CDECL InternalConstructor(void *);
    void ProcessEvent(enum ESST_Mode);
    static class UClass * CDECL StaticClass(void);
    void execProcessEvent(struct FFrame &,void * const);
  private:
    static class UClass PrivateStaticClass;
};
AUTOGENERATE_FUNCTION(ASceneSubtitles,0,execProcessEvent)


//------------------------------------------------------------------------------
//  AnimNotify_Howler
//------------------------------------------------------------------------------

// UAnimNotify_Howler 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UAnimNotify_Howler : public UAnimNotify {
  public:
    BITFIELD bHide : 1;  // 30 1 CPF_Edit
    virtual ~UAnimNotify_Howler(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Notify(class UMeshInstance *,class AActor *);
    UAnimNotify_Howler(class UAnimNotify_Howler const &);
    UAnimNotify_Howler(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UAnimNotify_Howler & operator=(class UAnimNotify_Howler const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  AnimNotify_FSkill
//------------------------------------------------------------------------------

// UAnimNotify_FSkill 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UAnimNotify_FSkill : public UAnimNotify {
  public:
    FName KeyFrameName;  // 30 1 CPF_Edit
    virtual ~UAnimNotify_FSkill(void);
    virtual unsigned int GetCPPSize(void);
    virtual void Notify(class UMeshInstance *,class AActor *);
    UAnimNotify_FSkill(class UAnimNotify_FSkill const &);
    UAnimNotify_FSkill(void);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,unsigned short const *,unsigned long);
    static void * CDECL operator new(unsigned int,class UObject *,class FName,unsigned long);
    static void * CDECL operator new(unsigned int,enum EInternal *);
    class UAnimNotify_FSkill & operator=(class UAnimNotify_FSkill const &);
    static void CDECL InternalConstructor(void *);
    static class UClass * CDECL StaticClass(void);
  private:
    static class UClass PrivateStaticClass;
};


//------------------------------------------------------------------------------
//  VolumeTimer
//------------------------------------------------------------------------------

//  VolumeTimer.Timer 20002 0 ( FUNC_Defined FUNC_Public )
struct AVolumeTimer_execTimer_Parms {
};


//  VolumeTimer.PostBeginPlay 20002 0 ( FUNC_Defined FUNC_Public )
struct AVolumeTimer_execPostBeginPlay_Parms {
};


// AVolumeTimer 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT AVolumeTimer : public AInfo {
  public:
    class AActor* A;  // 420 0
    FLOAT TimerFrequency;  // 424 0
};


//------------------------------------------------------------------------------
//  ObjectPool
//------------------------------------------------------------------------------

//  ObjectPool.Shrink 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct UObjectPool_execShrink_Parms {
};


//  ObjectPool.FreeObject 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct UObjectPool_execFreeObject_Parms {
  class UObject* Obj;  // 0 80 CPF_Parm
};


//  ObjectPool.AllocateObject 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct UObjectPool_execAllocateObject_Parms {
  class UClass* ObjectClass;  // 0 80 CPF_Parm
  class UObject* ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


// UObjectPool 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UObjectPool : public UObject {
  public:
    TArray<class UObject*> Objects;  // 28 400000 CPF_NeedCtorLink
};


//------------------------------------------------------------------------------
//  Effects
//------------------------------------------------------------------------------

// AEffects 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT AEffects : public AActor {
};


//------------------------------------------------------------------------------
//  DamTypeTelefragged
//------------------------------------------------------------------------------

// ADamTypeTelefragged 33 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_Localized )
class DLL_IMPORT ADamTypeTelefragged : public ADamageType {
};


//------------------------------------------------------------------------------
//  Gibbed
//------------------------------------------------------------------------------

// AGibbed 33 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_Localized )
class DLL_IMPORT AGibbed : public ADamageType {
};


//------------------------------------------------------------------------------
//  fell
//------------------------------------------------------------------------------

// Afell 33 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_Localized )
class DLL_IMPORT Afell : public ADamageType {
};


//------------------------------------------------------------------------------
//  Crushed
//------------------------------------------------------------------------------

// ACrushed 33 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_Localized )
class DLL_IMPORT ACrushed : public ADamageType {
};


//------------------------------------------------------------------------------
//  EFFECT_WaterVolume
//------------------------------------------------------------------------------

// UEFFECT_WaterVolume 1012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew )
class DLL_IMPORT UEFFECT_WaterVolume : public UI3DL2Listener {
};


//------------------------------------------------------------------------------
//  HudOverlay
//------------------------------------------------------------------------------

//  HudOverlay.Destroyed 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AHudOverlay_execDestroyed_Parms {
};


//  HudOverlay.Render 20100 0 ( FUNC_Simulated FUNC_Public )
struct AHudOverlay_execRender_Parms {
  class UCanvas* C;  // 0 80 CPF_Parm
};


// AHudOverlay 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT AHudOverlay : public AActor {
};


//------------------------------------------------------------------------------
//  DynamicProjector
//------------------------------------------------------------------------------

//  DynamicProjector.cl_OnTick 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ADynamicProjector_eventcl_OnTick_Parms {
  FLOAT delta;  // 0 80 CPF_Parm
};


// ADynamicProjector 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT ADynamicProjector : public AProjector {
};


//------------------------------------------------------------------------------
//  SBDecoration
//------------------------------------------------------------------------------

//  SBDecoration.PostBeginPlay 20002 0 ( FUNC_Defined FUNC_Public )
struct ASBDecoration_execPostBeginPlay_Parms {
};


// ASBDecoration 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT ASBDecoration : public AActor {
  public:
    FName Animation;  // 420 1 CPF_Edit
    FLOAT speed;  // 424 1 CPF_Edit
};


//------------------------------------------------------------------------------
//  StreamPlaylistManager
//------------------------------------------------------------------------------

// FPlaylistParser 0 ( )
struct DLL_IMPORT FPlaylistParser {
  public:
    BYTE Type;  // 0 1 CPF_Edit
    class FString ParserClass;  // 4 400001 CPF_Edit CPF_NeedCtorLink
};

//  StreamPlaylistManager.GetCurrentTitle 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execGetCurrentTitle_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  StreamPlaylistManager.Save 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execSave_Parms {
};


//  StreamPlaylistManager.HandleDebugExec 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execHandleDebugExec_Parms {
  class FString Command;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString Param;  // 8 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.CreatePlaylist 80002 0 ( FUNC_Defined FUNC_Protected )
struct UStreamPlaylistManager_execCreatePlaylist_Parms {
  class FString PlaylistName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class UStreamPlaylist* ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.SetRepeatAll 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execSetRepeatAll_Parms {
  BITFIELD bEnable : 1;  // 0 80 CPF_Parm
};


//  StreamPlaylistManager.SetRepeat 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execSetRepeat_Parms {
  BITFIELD bEnable : 1;  // 0 80 CPF_Parm
};


//  StreamPlaylistManager.SetShuffleAll 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execSetShuffleAll_Parms {
  BITFIELD bEnable : 1;  // 0 80 CPF_Parm
};


//  StreamPlaylistManager.SetShuffle 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execSetShuffle_Parms {
  BITFIELD bEnable : 1;  // 0 80 CPF_Parm
};


//  StreamPlaylistManager.GetRepeatAll 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execGetRepeatAll_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.GetRepeat 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execGetRepeat_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.GetShuffleAll 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execGetShuffleAll_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.GetShuffle 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execGetShuffle_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.ValidName 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execValidName_Parms {
  class FString Test;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.FindPlaylistIndex 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execFindPlaylistIndex_Parms {
  class UStreamPlaylist* Playlist;  // 0 80 CPF_Parm
  INT ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.FindNameIndex 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execFindNameIndex_Parms {
  class FString PlaylistName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  INT ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.ValidIndex 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execValidIndex_Parms {
  INT Index;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.GetPlaylistCount 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execGetPlaylistCount_Parms {
  INT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.GetPlaylistAt 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execGetPlaylistAt_Parms {
  INT idx;  // 0 80 CPF_Parm
  class UStreamPlaylist* ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.GetRandomPlaylist 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execGetRandomPlaylist_Parms {
  class UStreamPlaylist* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.GetCurrentPlaylist 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execGetCurrentPlaylist_Parms {
  class UStreamPlaylist* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.GetCurrentIndex 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execGetCurrentIndex_Parms {
  INT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.GetRandomSong 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execGetRandomSong_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  StreamPlaylistManager.PrevSong 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execPrevSong_Parms {
  BITFIELD bForce : 1;  // 0 90 CPF_OptionalParm CPF_Parm
  class FString ReturnValue;  // 4 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  StreamPlaylistManager.NextSong 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execNextSong_Parms {
  BITFIELD bForce : 1;  // 0 90 CPF_OptionalParm CPF_Parm
  class FString ReturnValue;  // 4 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  StreamPlaylistManager.ImportPlaylist 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execImportPlaylist_Parms {
  INT PlaylistIndex;  // 0 80 CPF_Parm
  INT InsertPosition;  // 4 80 CPF_Parm
  class FString Path;  // 8 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.AddDirectory 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execAddDirectory_Parms {
  INT PlaylistIndex;  // 0 80 CPF_Parm
  INT InsertPosition;  // 4 80 CPF_Parm
  class FString Path;  // 8 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD bRecurseDirectories : 1;  // 10 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 14 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.GetPlaylistType 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execGetPlaylistType_Parms {
  class FString Path;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BYTE ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.ClearCurrentPlaylist 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execClearCurrentPlaylist_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.RemoveFromCurrentPlaylist 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execRemoveFromCurrentPlaylist_Parms {
  class FString Path;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD bSkipNotification : 1;  // 8 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.InsertInPlaylist 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execInsertInPlaylist_Parms {
  INT PlaylistIndex;  // 0 80 CPF_Parm
  INT InsertPosition;  // 4 80 CPF_Parm
  class FString Path;  // 8 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD bSkipNotification : 1;  // 10 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 14 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.AddToPlaylist 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execAddToPlaylist_Parms {
  INT PlaylistIndex;  // 0 80 CPF_Parm
  class FString Path;  // 4 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD bSkipNotification : 1;  // C 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.RenamePlaylist 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execRenamePlaylist_Parms {
  INT Index;  // 0 80 CPF_Parm
  class FString NewName;  // 4 400180 CPF_Parm CPF_OutParm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.RemovePlaylistAt 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execRemovePlaylistAt_Parms {
  INT Index;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.RemovePlaylist 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execRemovePlaylist_Parms {
  class FString PlaylistName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.AppendPlaylist 80002 0 ( FUNC_Defined FUNC_Protected )
struct UStreamPlaylistManager_execAppendPlaylist_Parms {
  class UStreamPlaylist* Playlist;  // 0 80 CPF_Parm
  INT ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.AddPlaylist 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execAddPlaylist_Parms {
  class FString NewPlaylistName;  // 0 400180 CPF_Parm CPF_OutParm CPF_NeedCtorLink
  INT ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.ActivatePlaylist 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execActivatePlaylist_Parms {
  INT ListIndex;  // 0 80 CPF_Parm
  BITFIELD bNoFail : 1;  // 4 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.CreateDefaultPlaylist 80002 0 ( FUNC_Defined FUNC_Protected )
struct UStreamPlaylistManager_execCreateDefaultPlaylist_Parms {
  class UStreamPlaylist* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylistManager.InitializeParsers 80002 0 ( FUNC_Defined FUNC_Protected )
struct UStreamPlaylistManager_execInitializeParsers_Parms {
};


//  StreamPlaylistManager.InitializePlaylists 80002 0 ( FUNC_Defined FUNC_Protected )
struct UStreamPlaylistManager_execInitializePlaylists_Parms {
};


//  StreamPlaylistManager.Initialize 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylistManager_execInitialize_Parms {
  class UStreamInterface* InFileManager;  // 0 80 CPF_Parm
};


//  StreamPlaylistManager.ChangedActivePlaylist 120000 0 ( FUNC_Public FUNC_Delegate )
struct UStreamPlaylistManager_execChangedActivePlaylist_Parms {
  class UStreamPlaylist* NewPlaylist;  // 0 80 CPF_Parm
};


// UStreamPlaylistManager 36 ( CLASS_Compiled CLASS_Config CLASS_Parsed CLASS_Localized )
class DLL_IMPORT UStreamPlaylistManager : public UStreamBase {
  public:
    INT CurrentPlaylist;  // 28 2024001 CPF_Edit CPF_Config CPF_EditConst CPF_EditorData
    class UStreamInterface* FileManager;  // 2C 4020001 CPF_Edit CPF_EditConst CPF_EditInline
    TArray<class UStreamPlaylist*> Playlists;  // 30 4400041 CPF_Edit CPF_ConstRef CPF_NeedCtorLink CPF_EditInline
    BITFIELD bDisableNotification : 1;  // 3C 1 CPF_Edit
    BITFIELD bDirty : 1;  // 3C 2001 CPF_Edit CPF_Transient
    BITFIELD bShuffle : 1;  // 3C 4001 CPF_Edit CPF_Config
    BITFIELD bShuffleAll : 1;  // 3C 4001 CPF_Edit CPF_Config
    BITFIELD bRepeat : 1;  // 3C 4001 CPF_Edit CPF_Config
    BITFIELD bRepeatAll : 1;  // 3C 4001 CPF_Edit CPF_Config
    class FString DefaultPlaylistName;  // 40 408001 CPF_Edit CPF_Localized CPF_NeedCtorLink
    TArray<struct FPlaylistParser> ParserType;  // 48 404001 CPF_Edit CPF_Config CPF_NeedCtorLink
    TArray<class UPlaylistParserBase*> Parsers;  // 54 4420041 CPF_Edit CPF_ConstRef CPF_EditConst CPF_NeedCtorLink CPF_EditInline
    struct FScriptDelegate __ChangedActivePlaylist__Delegate;  // 60 400000 CPF_NeedCtorLink
};


//------------------------------------------------------------------------------
//  StreamPlaylist
//------------------------------------------------------------------------------

//  StreamPlaylist.Save 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execSave_Parms {
};


//  StreamPlaylist.HandleDebugExec 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execHandleDebugExec_Parms {
  class FString Command;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString Param;  // 8 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.DebugInfo 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execDebugInfo_Parms {
};


//  StreamPlaylist.ValidStreamIndex 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execValidStreamIndex_Parms {
  INT Index;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.ValidStreamName 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execValidStreamName_Parms {
  class FString fileName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.FindIndexByFileName 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execFindIndexByFileName_Parms {
  class FString Test;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  INT ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.FindIndexByFullName 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execFindIndexByFullName_Parms {
  class FString Test;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  INT ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.FindIndexByPath 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execFindIndexByPath_Parms {
  class FString Test;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  INT ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.FindIndexByName 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execFindIndexByName_Parms {
  class FString Test;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  INT ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.GetPlaylistLength 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execGetPlaylistLength_Parms {
  INT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.GetStreamAt 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execGetStreamAt_Parms {
  INT Index;  // 0 80 CPF_Parm
  class UStream* ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.GetStream 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execGetStream_Parms {
  class FString StreamName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class UStream* ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.GetCurrentStream 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execGetCurrentStream_Parms {
  class UStream* ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.GetSongs 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execGetSongs_Parms {
  TArray<class UStream*> SongArray;  // 0 400180 CPF_Parm CPF_OutParm CPF_NeedCtorLink
};


//  StreamPlaylist.GetCurrent 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execGetCurrent_Parms {
  INT ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.GetTitle 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execGetTitle_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  StreamPlaylist.IsInitialized 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execIsInitialized_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.SetSongs 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execSetSongs_Parms {
  TArray<class UStream*> NewSongs;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.SetCurrent 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execSetCurrent_Parms {
  INT Index;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.SetTitle 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execSetTitle_Parms {
  class FString NewTitle;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.ResetRandomPool 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execResetRandomPool_Parms {
};


//  StreamPlaylist.GetRandomSong 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execGetRandomSong_Parms {
  class FString ReturnValue;  // 0 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  StreamPlaylist.ClearPlaylist 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execClearPlaylist_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.ReplaceWith 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execReplaceWith_Parms {
  class UStreamPlaylist* Other;  // 0 80 CPF_Parm
};


//  StreamPlaylist.PrevSong 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execPrevSong_Parms {
  BITFIELD bMayRepeat : 1;  // 0 80 CPF_Parm
  class FString ReturnValue;  // 4 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  StreamPlaylist.NextSong 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execNextSong_Parms {
  BITFIELD bMayRepeat : 1;  // 0 80 CPF_Parm
  class FString ReturnValue;  // 4 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  StreamPlaylist.RemoveSongAt 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execRemoveSongAt_Parms {
  INT idx;  // 0 80 CPF_Parm
  BITFIELD bSkipNotification : 1;  // 4 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.RemoveSong 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execRemoveSong_Parms {
  class FString SongFileName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD bSkipNotification : 1;  // 8 90 CPF_OptionalParm CPF_Parm
  BITFIELD ReturnValue : 1;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.InsertSong 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execInsertSong_Parms {
  INT idx;  // 0 80 CPF_Parm
  class FString Path;  // 4 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD bSkipNotification : 1;  // C 90 CPF_OptionalParm CPF_Parm
  INT ReturnValue;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.AddStream 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execAddStream_Parms {
  INT Index;  // 0 80 CPF_Parm
  class UStream* NewStream;  // 4 80 CPF_Parm
  BITFIELD bSkipNotification : 1;  // 8 90 CPF_OptionalParm CPF_Parm
  INT ReturnValue;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.AddSong 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execAddSong_Parms {
  class FString SongFileName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD bSkipNotification : 1;  // 8 90 CPF_OptionalParm CPF_Parm
  INT ReturnValue;  // C 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.CreateStream 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execCreateStream_Parms {
  class FString fileName;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class UStream* ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.LoadPlaylist 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execLoadPlaylist_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.InitializePlaylist 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamPlaylist_execInitializePlaylist_Parms {
  class UStreamInterface* InManager;  // 0 80 CPF_Parm
  BITFIELD ReturnValue : 1;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamPlaylist.OnPlaylistChanged 120000 0 ( FUNC_Public FUNC_Delegate )
struct UStreamPlaylist_execOnPlaylistChanged_Parms {
};


// UStreamPlaylist 416 ( CLASS_Compiled CLASS_Config CLASS_Parsed CLASS_PerObjectConfig )
class DLL_IMPORT UStreamPlaylist : public UStreamBase {
  public:
    INT current;  // 28 4001 CPF_Edit CPF_Config
    TArray<class FString> Playlist;  // 2C 404001 CPF_Edit CPF_Config CPF_NeedCtorLink
    class FString Title;  // 38 400001 CPF_Edit CPF_NeedCtorLink
    BITFIELD bNeedSave : 1;  // 40 4001 CPF_Edit CPF_Config
    TArray<INT> RandomPool;  // 44 4422041 CPF_Edit CPF_ConstRef CPF_Transient CPF_EditConst CPF_NeedCtorLink CPF_EditInline
    class UStreamInterface* FileManager;  // 50 4020001 CPF_Edit CPF_EditConst CPF_EditInline
    TArray<class UStream*> Songs;  // 54 4420041 CPF_Edit CPF_ConstRef CPF_EditConst CPF_NeedCtorLink CPF_EditInline
    struct FScriptDelegate __OnPlaylistChanged__Delegate;  // 60 400000 CPF_NeedCtorLink
};


//------------------------------------------------------------------------------
//  PlaylistParserBase
//------------------------------------------------------------------------------

// FHtmlChar 0 ( )
struct DLL_IMPORT FHtmlChar {
  public:
    class FString Plain;  // 0 400000 CPF_NeedCtorLink
    class FString Coded;  // 8 400000 CPF_NeedCtorLink
};

//  PlaylistParserBase.HtmlDecode 22002 0 ( FUNC_Defined FUNC_Static FUNC_Public )
struct UPlaylistParserBase_execHtmlDecode_Parms {
  class FString src;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString ReturnValue;  // 8 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  PlaylistParserBase.GetTagged 22002 0 ( FUNC_Defined FUNC_Static FUNC_Public )
struct UPlaylistParserBase_execGetTagged_Parms {
  class FString Text;  // 0 400180 CPF_Parm CPF_OutParm CPF_NeedCtorLink
  class FString ReturnValue;  // 8 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  PlaylistParserBase.GetValue 22002 0 ( FUNC_Defined FUNC_Static FUNC_Public )
struct UPlaylistParserBase_execGetValue_Parms {
  class FString KeyValuePair;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD bAllowSpaces : 1;  // 8 90 CPF_OptionalParm CPF_Parm
  class FString ReturnValue;  // C 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  PlaylistParserBase.ParseLines 20002 0 ( FUNC_Defined FUNC_Public )
struct UPlaylistParserBase_execParseLines_Parms {
};


//  PlaylistParserBase.ImportedPlaylist 20002 0 ( FUNC_Defined FUNC_Public )
struct UPlaylistParserBase_execImportedPlaylist_Parms {
  INT PlaylistIndex;  // 0 80 CPF_Parm
  INT InsertPosition;  // 4 80 CPF_Parm
};


//  PlaylistParserBase.Import 20002 0 ( FUNC_Defined FUNC_Public )
struct UPlaylistParserBase_execImport_Parms {
  INT PlaylistIndex;  // 0 80 CPF_Parm
  INT InsertPosition;  // 4 80 CPF_Parm
  class FString Path;  // 8 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  PlaylistParserBase.SetType 20002 0 ( FUNC_Defined FUNC_Public )
struct UPlaylistParserBase_execSetType_Parms {
  BYTE InType;  // 0 80 CPF_Parm
};


//  PlaylistParserBase.GetType 20002 0 ( FUNC_Defined FUNC_Public )
struct UPlaylistParserBase_execGetType_Parms {
  BYTE ReturnValue;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


// UPlaylistParserBase 16 ( CLASS_Compiled CLASS_Config CLASS_Parsed )
class DLL_IMPORT UPlaylistParserBase : public UStreamInterface {
  public:
    BYTE Type;  // 30 0
    class FString PlaylistName;  // 34 400000 CPF_NeedCtorLink
    TArray<class FString> Paths;  // 3C 400000 CPF_NeedCtorLink
    TArray<class FString> Lines;  // 48 400000 CPF_NeedCtorLink
    TArray<struct FHtmlChar> SpecialChars;  // 54 400000 CPF_NeedCtorLink
};


//------------------------------------------------------------------------------
//  ZoneTrigger
//------------------------------------------------------------------------------

//  ZoneTrigger.UnTouch 20002 0 ( FUNC_Defined FUNC_Public )
struct AZoneTrigger_execUnTouch_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  ZoneTrigger.Touch 20002 0 ( FUNC_Defined FUNC_Public )
struct AZoneTrigger_execTouch_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


// AZoneTrigger 232 ( CLASS_Compiled CLASS_Parsed CLASS_Localized CLASS_NoUserCreate )
class DLL_IMPORT AZoneTrigger : public ATrigger {
};


//------------------------------------------------------------------------------
//  Fragment
//------------------------------------------------------------------------------

//  Fragment.RandSpin 20103 0 ( FUNC_Final FUNC_Defined FUNC_Simulated FUNC_Public )
struct AFragment_execRandSpin_Parms {
  FLOAT spinRate;  // 0 80 CPF_Parm
};


//  Fragment.HitWall 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AFragment_execHitWall_Parms {
  class FVector HitNormal;  // 0 80 CPF_Parm
  class AActor* HitWall;  // C 80 CPF_Parm
};


//  Fragment.CalcVelocity 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AFragment_execCalcVelocity_Parms {
  class FVector Momentum;  // 0 80 CPF_Parm
};


//  Fragment.CanSplash 20002 0 ( FUNC_Defined FUNC_Public )
struct AFragment_execCanSplash_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


// AFragment 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT AFragment : public AEffects {
  public:
    class UMesh* Fragments[11];  // 420 1 CPF_Edit
    INT numFragmentTypes;  // 44C 0
    BITFIELD bFirstHit : 1;  // 450 0
    class USound* ImpactSound;  // 454 1 CPF_Edit
    class USound* AltImpactSound;  // 458 1 CPF_Edit
    FLOAT SplashTime;  // 45C 1 CPF_Edit
};


//------------------------------------------------------------------------------
//  B4SParser
//------------------------------------------------------------------------------

//  B4SParser.ParseLines 20002 0 ( FUNC_Defined FUNC_Public )
struct UB4SParser_execParseLines_Parms {
};


// UB4SParser 16 ( CLASS_Compiled CLASS_Config CLASS_Parsed )
class DLL_IMPORT UB4SParser : public UPlaylistParserBase {
};


//------------------------------------------------------------------------------
//  M3UParser
//------------------------------------------------------------------------------

//  M3UParser.MatchPath 20002 0 ( FUNC_Defined FUNC_Public )
struct UM3UParser_execMatchPath_Parms {
  class FString str;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString ReturnValue;  // 8 400580 CPF_Parm CPF_OutParm CPF_ReturnParm CPF_NeedCtorLink
};


//  M3UParser.ParseLines 20002 0 ( FUNC_Defined FUNC_Public )
struct UM3UParser_execParseLines_Parms {
};


//  M3UParser.Import 20002 0 ( FUNC_Defined FUNC_Public )
struct UM3UParser_execImport_Parms {
  INT PlaylistIndex;  // 0 80 CPF_Parm
  INT InsertPosition;  // 4 80 CPF_Parm
  class FString Path;  // 8 400080 CPF_Parm CPF_NeedCtorLink
  BITFIELD ReturnValue : 1;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


// UM3UParser 16 ( CLASS_Compiled CLASS_Config CLASS_Parsed )
class DLL_IMPORT UM3UParser : public UPlaylistParserBase {
  public:
    struct FFilePath ParsedPath;  // 60 400000 CPF_NeedCtorLink
};


//------------------------------------------------------------------------------
//  PLSParser
//------------------------------------------------------------------------------

//  PLSParser.ParseLines 20002 0 ( FUNC_Defined FUNC_Public )
struct UPLSParser_execParseLines_Parms {
};


// UPLSParser 16 ( CLASS_Compiled CLASS_Config CLASS_Parsed )
class DLL_IMPORT UPLSParser : public UPlaylistParserBase {
};


//------------------------------------------------------------------------------
//  xMaterialController
//------------------------------------------------------------------------------

enum EMatTickFunc {
  MTF_PulseConstantColor = 0,
  MTF_FadeConstantColor = 1,
  MTF_NoAction = 2
};

enum EMatAction {
  MTA_SwapShaderDiffuse = 0,
  MTA_SwapShaderSelfIllum = 1,
  MTA_SwapShaderSpecular = 2,
  MTA_SwapCombinerMat1 = 3,
  MTA_SwapCombinerMat2 = 4,
  MTA_NoAction = 5
};

//  xMaterialController.Trigger 20902 0 ( FUNC_Defined FUNC_Simulated FUNC_Event FUNC_Public )
struct AxMaterialController_eventTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


//  xMaterialController.CombinerAction 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AxMaterialController_execCombinerAction_Parms {
  class UCombiner* cb;  // 0 80 CPF_Parm
};


//  xMaterialController.ShaderAction 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AxMaterialController_execShaderAction_Parms {
  class UShader* sh;  // 0 80 CPF_Parm
};


//  xMaterialController.Tick 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AxMaterialController_execTick_Parms {
  FLOAT t;  // 0 80 CPF_Parm
};


//  xMaterialController.TickConstantColor 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AxMaterialController_execTickConstantColor_Parms {
  class UConstantColor* cc;  // 0 80 CPF_Parm
  FLOAT t;  // 4 80 CPF_Parm
};


//  xMaterialController.PostBeginPlay 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AxMaterialController_execPostBeginPlay_Parms {
};


//  xMaterialController.Pulse 20102 0 ( FUNC_Defined FUNC_Simulated FUNC_Public )
struct AxMaterialController_execPulse_Parms {
  FLOAT X;  // 0 80 CPF_Parm
  FLOAT ReturnValue;  // 4 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


// AxMaterialController 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT AxMaterialController : public AActor {
  public:
    class UMaterial* Target;  // 420 1 CPF_Edit
    class UMaterial* SwapMaterialA;  // 424 1 CPF_Edit
    class UMaterial* SwapMaterialB;  // 428 1 CPF_Edit
    BYTE MatTriggerAction;  // 42C 1 CPF_Edit
    BYTE MatTickFunc;  // 42D 1 CPF_Edit
    FLOAT MatTickValue;  // 430 1 CPF_Edit
    FLOAT tickAccum;  // 434 2000 CPF_Transient
    FLOAT tickPtA;  // 438 2000 CPF_Transient
    FLOAT tickPtB;  // 43C 2000 CPF_Transient
    BITFIELD triggerOn : 1;  // 440 2000 CPF_Transient
};


//------------------------------------------------------------------------------
//  MaterialTrigger
//------------------------------------------------------------------------------

//  MaterialTrigger.Trigger 20002 0 ( FUNC_Defined FUNC_Public )
struct AMaterialTrigger_execTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


//  MaterialTrigger.PostBeginPlay 20002 0 ( FUNC_Defined FUNC_Public )
struct AMaterialTrigger_execPostBeginPlay_Parms {
};


// AMaterialTrigger 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT AMaterialTrigger : public ATriggers {
  public:
    TArray<class UMaterial*> MaterialsToTrigger;  // 420 400001 CPF_Edit CPF_NeedCtorLink
};


//------------------------------------------------------------------------------
//  SBProjectileEmitter
//------------------------------------------------------------------------------

//  SBProjectileEmitter.SetTargetActor 20002 0 ( FUNC_Defined FUNC_Public )
struct ASBProjectileEmitter_execSetTargetActor_Parms {
  class AActor* anActor;  // 0 80 CPF_Parm
};


//  SBProjectileEmitter.SetTimeToTarget 20002 0 ( FUNC_Defined FUNC_Public )
struct ASBProjectileEmitter_execSetTimeToTarget_Parms {
  FLOAT aTime;  // 0 80 CPF_Parm
};


//  SBProjectileEmitter.PrepareProjectile 20002 0 ( FUNC_Defined FUNC_Public )
struct ASBProjectileEmitter_execPrepareProjectile_Parms {
};


//  SBProjectileEmitter.cl_OnTick 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ASBProjectileEmitter_eventcl_OnTick_Parms {
  FLOAT DeltaTime;  // 0 80 CPF_Parm
};


//  SBProjectileEmitter.UnTrigger 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ASBProjectileEmitter_eventUnTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


//  SBProjectileEmitter.Trigger 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ASBProjectileEmitter_eventTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


//  SBProjectileEmitter.BeginPlay 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct ASBProjectileEmitter_eventBeginPlay_Parms {
};


// ASBProjectileEmitter 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT ASBProjectileEmitter : public AEmitter {
  public:
    class AActor* TargetActor;  // 4B8 1 CPF_Edit
    FLOAT TimeToTarget;  // 4BC 1 CPF_Edit
    BITFIELD StartActive : 1;  // 4C0 1 CPF_Edit
    BITFIELD ResetableWhileActive : 1;  // 4C0 2000001 CPF_Edit CPF_EditorData
    class FVector StartLocation;  // 4C4 2000 CPF_Transient
    BITFIELD Active : 1;  // 4D0 2000 CPF_Transient
    FLOAT ProjectileTimer;  // 4D4 2000 CPF_Transient
};


//------------------------------------------------------------------------------
//  StreamCommandlet
//------------------------------------------------------------------------------

//  StreamCommandlet.RevInStr 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamCommandlet_execRevInStr_Parms {
  class FString src;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  class FString match;  // 8 400080 CPF_Parm CPF_NeedCtorLink
  INT ReturnValue;  // 10 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


//  StreamCommandlet.Chart 20002 0 ( FUNC_Defined FUNC_Public )
struct UStreamCommandlet_execChart_Parms {
  class FString src;  // 0 400080 CPF_Parm CPF_NeedCtorLink
};


//  StreamCommandlet.Main 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UStreamCommandlet_eventMain_Parms {
  class FString Parms;  // 0 400080 CPF_Parm CPF_NeedCtorLink
  INT ReturnValue;  // 8 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


// UStreamCommandlet 3A ( CLASS_Compiled CLASS_Transient CLASS_Parsed CLASS_Localized )
class DLL_IMPORT UStreamCommandlet : public UCommandlet {
};


//------------------------------------------------------------------------------
//  AnimNotify_Trigger
//------------------------------------------------------------------------------

//  AnimNotify_Trigger.Notify 20802 0 ( FUNC_Defined FUNC_Event FUNC_Public )
struct UAnimNotify_Trigger_eventNotify_Parms {
  class AActor* Owner;  // 0 80 CPF_Parm
};


// UAnimNotify_Trigger 3012 ( CLASS_Compiled CLASS_Parsed CLASS_EditInlineNew CLASS_CollapseCategories )
class DLL_IMPORT UAnimNotify_Trigger : public UAnimNotify_Scripted {
  public:
    FName EventName;  // 30 1 CPF_Edit
};


//------------------------------------------------------------------------------
//  MusicTrigger
//------------------------------------------------------------------------------

//  MusicTrigger.Trigger 20002 0 ( FUNC_Defined FUNC_Public )
struct AMusicTrigger_execTrigger_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
  class APawn* EventInstigator;  // 4 80 CPF_Parm
};


// AMusicTrigger 212 ( CLASS_Compiled CLASS_Parsed CLASS_NoUserCreate )
class DLL_IMPORT AMusicTrigger : public ATriggers {
  public:
    class FString Song;  // 420 400001 CPF_Edit CPF_NeedCtorLink
    FLOAT FadeInTime;  // 428 1 CPF_Edit
    FLOAT FadeOutTime;  // 42C 1 CPF_Edit
    BITFIELD FadeOutAllSongs : 1;  // 430 1 CPF_Edit
    BITFIELD Triggered : 1;  // 430 2000 CPF_Transient
    INT SongHandle;  // 434 2000 CPF_Transient
};


//------------------------------------------------------------------------------
//  UseTrigger
//------------------------------------------------------------------------------

//  UseTrigger.Touch 20002 0 ( FUNC_Defined FUNC_Public )
struct AUseTrigger_execTouch_Parms {
  class AActor* Other;  // 0 80 CPF_Parm
};


//  UseTrigger.UsedBy 20002 0 ( FUNC_Defined FUNC_Public )
struct AUseTrigger_execUsedBy_Parms {
  class APawn* User;  // 0 80 CPF_Parm
};


//  UseTrigger.SelfTriggered 20002 0 ( FUNC_Defined FUNC_Public )
struct AUseTrigger_execSelfTriggered_Parms {
  BITFIELD ReturnValue : 1;  // 0 580 CPF_Parm CPF_OutParm CPF_ReturnParm
};


// AUseTrigger 232 ( CLASS_Compiled CLASS_Parsed CLASS_Localized CLASS_NoUserCreate )
class DLL_IMPORT AUseTrigger : public ATriggers {
  public:
    class FString Message;  // 420 408001 CPF_Edit CPF_Localized CPF_NeedCtorLink
};


//------------------------------------------------------------------------------
//  Bitmap
//------------------------------------------------------------------------------

// UBitmap 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UBitmap : public UObject {
};


//------------------------------------------------------------------------------
//  ClientMover
//------------------------------------------------------------------------------

//  ClientMover.PostBeginPlay 20002 0 ( FUNC_Defined FUNC_Public )
struct AClientMover_execPostBeginPlay_Parms {
};


// AClientMover 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT AClientMover : public AMover {
};


//------------------------------------------------------------------------------
//  DamRanOver
//------------------------------------------------------------------------------

// ADamRanOver 33 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_Localized )
class DLL_IMPORT ADamRanOver : public ADamageType {
};


//------------------------------------------------------------------------------
//  FellLava
//------------------------------------------------------------------------------

// AFellLava 33 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed CLASS_Localized )
class DLL_IMPORT AFellLava : public Afell {
};


//------------------------------------------------------------------------------
//  xMaterialTrigger
//------------------------------------------------------------------------------

// AxMaterialTrigger 12 ( CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT AxMaterialTrigger : public AActor {
};


//------------------------------------------------------------------------------
//  Resource
//------------------------------------------------------------------------------

// UResource 13 ( CLASS_Abstract CLASS_Compiled CLASS_Parsed )
class DLL_IMPORT UResource : public UObject {
};



//------------------------------------------------------------------------------
//  TArray<unsigned char>
//------------------------------------------------------------------------------

/*
template class DLL_IMPORT TArray<unsigned char> {
  public:
    TArray<unsigned char>(class TArray<unsigned char> const &);
    TArray<unsigned char>(int);
    TArray<unsigned char>(enum ENoInit);
    TArray<unsigned char>(void);
    ~TArray<unsigned char>(void);
    class TArray<unsigned char> & operator=(class TArray<unsigned char> const &);
    unsigned char & operator[](int);
    unsigned char const & operator[](int)const ;
    class TArray<unsigned char> & operator+(class TArray<unsigned char> const &);
    unsigned char & operator()(int);
    unsigned char const & operator()(int)const ;
    class TArray<unsigned char> & operator+=(class TArray<unsigned char> const &);
    int Add(int);
    int AddItem(unsigned char const &);
    int AddUniqueItem(unsigned char const &);
    int AddZeroed(int);
    void CountBytes(class FArchive &);
    void Empty(int);
    void EmptyFast(void);
    int FindItem(unsigned char const &,int &)const ;
    int FindItemIndex(unsigned char const &)const ;
    void Insert(int,int);
    void InsertZeroed(int,int);
    unsigned char & Last(int);
    unsigned char const & Last(int)const ;
    unsigned char Pop(void);
    void Remove(int,int,int);
    int RemoveItem(unsigned char const &);
    void Reverse(int,int);
    void SetSize(int);
    void SetSizeZeroed(int);
    void SetToZero(void);
    void Shrink(void);
    bool const print(class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > *)const ;
    unsigned int const size(void)const ;
};
*/

//------------------------------------------------------------------------------
//  TLazyArray<unsigned char>
//------------------------------------------------------------------------------

/*
template class DLL_IMPORT TLazyArray<unsigned char> {
  public:
    virtual ~TLazyArray<unsigned char>(void);
    virtual void Load(bool);
    virtual bool AsyncLoad(void (__cdecl*)(void *),void *);
    virtual void Unload(void);
    TLazyArray<unsigned char>(class TLazyArray<unsigned char> const &);
    TLazyArray<unsigned char>(int);
    class TLazyArray<unsigned char> & operator=(class TLazyArray<unsigned char> const &);
    static void CDECL HandleAsyncLoadDone(void *,bool);
  protected:
    void CancelAsyncLoad(void);
};
*/

//------------------------------------------------------------------------------
//  AnimDescriptor
//------------------------------------------------------------------------------

class DLL_IMPORT AnimDescriptor {
  public:
    AnimDescriptor(class AnimDescriptor const &);
    AnimDescriptor(unsigned long);
    AnimDescriptor(void);
    ~AnimDescriptor(void);
    class AnimDescriptor & operator=(class AnimDescriptor const &);
    class AnimDescriptor & operator=(class TArray<unsigned long> const &);
    bool operator==(class AnimDescriptor const &)const ;
    void CleanUp(void);
    void DumpToString(class FString &);
    bool Get(unsigned long);
    bool IsNull(void)const ;
    void Set(unsigned long);
    void SetToNull(void);
    void Unset(unsigned long);
};

//------------------------------------------------------------------------------
//  BitArray
//------------------------------------------------------------------------------

class DLL_IMPORT BitArray {
  public:
    BitArray(class BitArray const &);
    BitArray(class TArray<int> const &);
    BitArray(class TArray<unsigned long> const &);
    BitArray(unsigned long);
    BitArray(void);
    ~BitArray(void);
    class BitArray & operator=(class BitArray const &);
    class BitArray & operator=(class TArray<int> const &);
    class BitArray & operator=(class TArray<unsigned long> const &);
    bool operator==(class BitArray const &)const ;
    bool operator==(int)const ;
    class BitArray operator&(class BitArray const &);
    class BitArray operator&(class TArray<unsigned long> const &);
    class BitArray operator|(class BitArray const &);
    class BitArray operator|(class TArray<unsigned long> const &);
    bool operator&&(class BitArray const &)const ;
    void CleanUp(void);
    void ConvertTo(class TArray<int> &)const ;
    void ConvertTo(class TArray<unsigned long> &)const ;
    void DumpToString(class FString &,bool,bool)const ;
    bool Get(int)const ;
    bool Get(unsigned long)const ;
    bool IsNull(void)const ;
    void Set(int);
    void Set(unsigned long);
    void SetToNull(void);
    void Unset(int);
    void Unset(unsigned long);
  private:
    static int const _mMaxBlockBitIndex;
    static int const _mNumberBitsPerBlock;
};

//------------------------------------------------------------------------------
//  FActorClassStats
//------------------------------------------------------------------------------

struct DLL_IMPORT FActorClassStats {
  public:
    FActorClassStats(void);
    struct FActorClassStats & operator=(struct FActorClassStats const &);
    void Reset(void);
    void UpdateClientFrameTime(float);
    void UpdateClientTickTime(float);
    void UpdateServerFrameTime(float);
    void UpdateTickTime(float);
};

//------------------------------------------------------------------------------
//  FActorFrameData
//------------------------------------------------------------------------------

struct DLL_IMPORT FActorFrameData {
  public:
    FActorFrameData(class AActor *);
    struct FActorFrameData & operator=(struct FActorFrameData const &);
};

//------------------------------------------------------------------------------
//  FActorGrid
//------------------------------------------------------------------------------

class DLL_IMPORT FActorGrid {
  public:
    virtual ~FActorGrid(void);
    FActorGrid(class FActorGrid const &);
    FActorGrid(void);
    class FActorGrid & operator=(class FActorGrid const &);
    struct FCheckResult * ActorEncroachmentCheck(struct FCheckResult *,class FMemStack &,class AActor *,class FVector,class FRotator,unsigned long,unsigned long);
    struct FCheckResult * ActorLineCheck(struct FCheckResult *,class FMemStack &,class FVector const &,class FVector const &,class FVector const &,unsigned long,unsigned long,class AActor *);
    struct FCheckResult * ActorPointCheck(struct FCheckResult *,class FMemStack &,class FVector const &,class FVector const &,unsigned long,unsigned long,int);
    struct FCheckResult * ActorRadiusCheck(struct FCheckResult *,class FMemStack &,class FVector const &,float,unsigned long);
    void AddActor(class AActor *);
    void RemoveActor(class AActor *);
  protected:
    void InitBucketTestVariables(class FBox const &);
  private:
    void AddList(class AActor *);
    void RemoveList(class AActor *);
};

//------------------------------------------------------------------------------
//  FActorSceneNode
//------------------------------------------------------------------------------

class DLL_IMPORT FActorSceneNode {
  public:
    virtual ~FActorSceneNode(void);
    virtual void Render(class FRenderInterface *);
    virtual class FActorSceneNode * GetActorSceneNode(void);
    FActorSceneNode(class FActorSceneNode const &);
    FActorSceneNode(class UViewport *,class FRenderTarget *,class AActor *,class AActor *,class FVector,class FRotator,float,class TArray<class UCameraEffect *> const *);
    class FActorSceneNode & operator=(class FActorSceneNode const &);
};

//------------------------------------------------------------------------------
//  FActorStats
//------------------------------------------------------------------------------

struct DLL_IMPORT FActorStats {
  public:
    FActorStats(struct FActorStats const &);
    FActorStats(void);
    ~FActorStats(void);
    struct FActorStats & operator=(struct FActorStats const &);
    void EndFrame(void);
    struct FActorClassStats & GetClassData(class AActor *);
    void Reset(void);
    void StartFrame(bool);
};

//------------------------------------------------------------------------------
//  FAnimMeshVertexStream
//------------------------------------------------------------------------------

class DLL_IMPORT FAnimMeshVertexStream {
  public:
    virtual ~FAnimMeshVertexStream(void);
    virtual int GetRevision(void);
    virtual int GetStride(void);
    virtual int GetSize(void);
    virtual int GetComponents(struct FVertexComponent *);
    virtual void GetStreamData(void *);
    virtual void GetRawStreamData(void * *,int);
    virtual int GetPartialSize(void);
    virtual int SetPartialSize(int);
    FAnimMeshVertexStream(class FAnimMeshVertexStream const &);
    FAnimMeshVertexStream(void);
    class FAnimMeshVertexStream & operator=(class FAnimMeshVertexStream const &);
    friend class FArchive & CDECL operator<<(class FArchive &,class FAnimMeshVertexStream &);
};

//------------------------------------------------------------------------------
//  FAuxRenderTarget
//------------------------------------------------------------------------------

class DLL_IMPORT FAuxRenderTarget {
  public:
    virtual ~FAuxRenderTarget(void);
    virtual int GetRevision(void);
    virtual int GetWidth(void);
    virtual int GetHeight(void);
    virtual int GetFirstMip(void);
    virtual int GetNumMips(void);
    virtual enum ETextureFormat GetFormat(void);
    virtual enum ETexClampMode GetUClamp(void);
    virtual enum ETexClampMode GetVClamp(void);
    FAuxRenderTarget(class FAuxRenderTarget const &);
    FAuxRenderTarget(int,int,enum ETextureFormat);
    class FAuxRenderTarget & operator=(class FAuxRenderTarget const &);
};

//------------------------------------------------------------------------------
//  FBezier
//------------------------------------------------------------------------------

class DLL_IMPORT FBezier {
  public:
    virtual ~FBezier(void);
    FBezier(class FBezier const &);
    FBezier(void);
    class FBezier & operator=(class FBezier const &);
    float Evaluate(class FVector *,int,class TArray<class FVector> *);
};

//------------------------------------------------------------------------------
//  FBspSection
//------------------------------------------------------------------------------

class DLL_IMPORT FBspSection {
  public:
    FBspSection(class FBspSection const &);
    FBspSection(void);
    ~FBspSection(void);
    class FBspSection & operator=(class FBspSection const &);
    friend class FArchive & CDECL operator<<(class FArchive &,class FBspSection &);
};

//------------------------------------------------------------------------------
//  FBspVertex
//------------------------------------------------------------------------------

struct DLL_IMPORT FBspVertex {
  public:
    FBspVertex(void);
    struct FBspVertex & operator=(struct FBspVertex const &);
    friend class FArchive & CDECL operator<<(class FArchive &,struct FBspVertex &);
};

//------------------------------------------------------------------------------
//  FBspVertexStream
//------------------------------------------------------------------------------

class DLL_IMPORT FBspVertexStream {
  public:
    virtual ~FBspVertexStream(void);
    virtual int GetRevision(void);
    virtual int GetStride(void);
    virtual int GetSize(void);
    virtual int GetComponents(struct FVertexComponent *);
    virtual void GetStreamData(void *);
    virtual void GetRawStreamData(void * *,int);
    FBspVertexStream(class FBspVertexStream const &);
    FBspVertexStream(void);
    class FBspVertexStream & operator=(class FBspVertexStream const &);
    friend class FArchive & CDECL operator<<(class FArchive &,class FBspVertexStream &);
};

//------------------------------------------------------------------------------
//  FCameraSceneNode
//------------------------------------------------------------------------------

class DLL_IMPORT FCameraSceneNode {
  public:
    virtual ~FCameraSceneNode(void);
    virtual void Render(class FRenderInterface *);
    virtual class FCameraSceneNode * GetCameraSceneNode(void);
    virtual void UpdateMatrices(void);
    virtual int PreRenderCameraEffects(class UViewport *,class FRenderInterface *,class TArray<class UCameraEffect *> const &);
    virtual void PostRenderCameraEffects(class UViewport *,class FRenderInterface *,class TArray<class UCameraEffect *> const &,int);
    FCameraSceneNode(class FCameraSceneNode const &);
    FCameraSceneNode(class UViewport *,class ULevel *,class FRenderTarget *,class AActor *,class FVector,class FRotator,float);
    class FCameraSceneNode & operator=(class FCameraSceneNode const &);
    class FMatrix ComputeProjectionMatrix(float,float);
};

//------------------------------------------------------------------------------
//  FCanvasUtil
//------------------------------------------------------------------------------

class DLL_IMPORT FCanvasUtil {
  public:
    FCanvasUtil(class FCanvasUtil const &);
    FCanvasUtil(class FRenderTarget *,class FRenderInterface *);
    ~FCanvasUtil(void);
    class FCanvasUtil & operator=(class FCanvasUtil const &);
    void BeginPrimitive(enum EPrimitiveType,class UMaterial *);
    void Clear(void);
    void DrawCircle(float,float,float,float,int,class FColor);
    void DrawLine(float,float,float,float,class FColor);
    void DrawPoint(float,float,float,float,float,class FColor);
    int DrawString(int,int,unsigned short const *,class UFont *,class FColor);
    void DrawTile(float,float,float,float,float,float,float,float,float,class UMaterial *,class FColor);
    void EnableBatching(int);
    void Flush(void);
    void FlushBatches(void);
    class FMatrix const & GetCanvasToScreen(void)const ;
    class FMatrix const & GetScreenToCanvas(void)const ;
    int IsBatching(void)const ;
    void Update(class FRenderInterface *,int,int);
    void Update(class FRenderTarget *,class FRenderInterface *);
    void Update(class UViewport *);
};

//------------------------------------------------------------------------------
//  FCanvasVertex
//------------------------------------------------------------------------------

class DLL_IMPORT FCanvasVertex {
  public:
    FCanvasVertex(class FVector,class FColor,float,float);
    FCanvasVertex(void);
    class FCanvasVertex & operator=(class FCanvasVertex const &);
};

//------------------------------------------------------------------------------
//  FCollisionHash
//------------------------------------------------------------------------------

class DLL_IMPORT FCollisionHash {
  public:
    virtual ~FCollisionHash(void);
    virtual void Tick(void);
    virtual void AddActor(class AActor *);
    virtual void RemoveActor(class AActor *);
    virtual struct FCheckResult * ActorEncroachmentCheck(class FMemStack &,class AActor *,class FVector,class FRotator,unsigned long,unsigned long);
    virtual struct FCheckResult * ActorOverlapCheck(class FMemStack &,class AActor *,class FBox *,int);
    virtual void CheckActorNotReferenced(class AActor *);
    virtual void CheckIsEmpty(void);
    virtual void CheckActorLocations(class ULevel *);
    FCollisionHash(class FCollisionHash const &);
    FCollisionHash(void);
    class FCollisionHash & operator=(class FCollisionHash const &);
    struct FCheckResult * ActorLineCheck(class FMemStack &,class FVector const &,class FVector const &,class FVector const &,unsigned long,unsigned long,class AActor *);
    struct FCheckResult * ActorPointCheck(class FMemStack &,class FVector const &,class FVector const &,unsigned long,unsigned long,int);
    struct FCheckResult * ActorRadiusCheck(class FMemStack &,class FVector const &,float,unsigned long);
    static int CollisionTag;
    void GetActorExtent(class AActor *,int &,int &,int &,int &,int &,int &);
    void GetHashIndices(class FVector,int &,int &,int &);
    struct FCollisionLink * & FCollisionHash::GetHashLink(int,int,int,int &);
    static int * HashX;
    static int * HashY;
    static int * HashZ;
    static int Inited;
  private:
    float DistanceToHashPlane(int,float,float,int);
};

//------------------------------------------------------------------------------
//  FCollisionInstancedOctree
//------------------------------------------------------------------------------

class DLL_IMPORT FCollisionInstancedOctree {
  public:
    virtual ~FCollisionInstancedOctree(void);
    virtual void AddActor(class AActor *);
    virtual void RemoveActor(class AActor *);
    virtual struct FCheckResult * ActorLineCheck(class FMemStack &,class AActor *,class FVector const &,class FVector const &,class FVector const &,unsigned long,unsigned long);
    virtual struct FCheckResult * ActorPointCheck(class FMemStack &,class AActor *,class FVector const &,class FVector const &,unsigned long,unsigned long,int);
    virtual struct FCheckResult * ActorRadiusCheck(class FMemStack &,class AActor *,class FVector const &,float,unsigned long);
    virtual struct FCheckResult * ActorEncroachmentCheck(class FMemStack &,class AActor *,class FVector,class FRotator,unsigned long,unsigned long);
    virtual void StartInstance(int);
    virtual void StopInstance(int);
    FCollisionInstancedOctree(class FCollisionInstancedOctree const &);
    FCollisionInstancedOctree(void);
    class FCollisionInstancedOctree & operator=(class FCollisionInstancedOctree const &);
};

//------------------------------------------------------------------------------
//  FCollisionMixedOctree
//------------------------------------------------------------------------------

class DLL_IMPORT FCollisionMixedOctree {
  public:
    virtual ~FCollisionMixedOctree(void);
    virtual void AddActor(class AActor *);
    virtual void RemoveActor(class AActor *);
    virtual struct FCheckResult * ActorLineCheck(class FMemStack &,class AActor *,class FVector const &,class FVector const &,class FVector const &,unsigned long,unsigned long);
    virtual struct FCheckResult * ActorPointCheck(class FMemStack &,class AActor *,class FVector const &,class FVector const &,unsigned long,unsigned long,int);
    virtual struct FCheckResult * ActorRadiusCheck(class FMemStack &,class AActor *,class FVector const &,float,unsigned long);
    virtual struct FCheckResult * ActorEncroachmentCheck(class FMemStack &,class AActor *,class FVector,class FRotator,unsigned long,unsigned long);
    virtual void StartInstance(int);
    virtual void StopInstance(int);
    FCollisionMixedOctree(class FCollisionMixedOctree const &);
    FCollisionMixedOctree(void);
    class FCollisionMixedOctree & operator=(class FCollisionMixedOctree const &);
};

//------------------------------------------------------------------------------
//  FCollisionOctree
//------------------------------------------------------------------------------

class DLL_IMPORT FCollisionOctree {
  public:
    virtual ~FCollisionOctree(void);
    virtual void Tick(void);
    virtual void AddActor(class AActor *);
    virtual void RemoveActor(class AActor *);
    virtual struct FCheckResult * ActorLineCheck(class FMemStack &,class AActor *,class FVector const &,class FVector const &,class FVector const &,unsigned long,unsigned long);
    virtual struct FCheckResult * ActorPointCheck(class FMemStack &,class AActor *,class FVector const &,class FVector const &,unsigned long,unsigned long,int);
    virtual struct FCheckResult * ActorRadiusCheck(class FMemStack &,class AActor *,class FVector const &,float,unsigned long);
    virtual struct FCheckResult * ActorEncroachmentCheck(class FMemStack &,class AActor *,class FVector,class FRotator,unsigned long,unsigned long);
    virtual struct FCheckResult * ActorOverlapCheck(class FMemStack &,class AActor *,class FBox *,int);
    virtual void CheckActorNotReferenced(class AActor *);
    virtual void CheckIsEmpty(void);
    virtual void CheckActorLocations(class ULevel *);
    FCollisionOctree(class FCollisionOctree const &);
    FCollisionOctree(void);
    class FCollisionOctree & operator=(class FCollisionOctree const &);
};

//------------------------------------------------------------------------------
//  FConvexVolume
//------------------------------------------------------------------------------

class DLL_IMPORT FConvexVolume {
  public:
    FConvexVolume(class FConvexVolume const &);
    FConvexVolume(void);
    class FConvexVolume & operator=(class FConvexVolume const &);
    unsigned char BoxCheck(class FVector const &,class FVector const &);
    class FPoly ClipPolygon(class FPoly);
    unsigned char SphereCheck(class FSphere const &);
};

//------------------------------------------------------------------------------
//  FDXTCompressionOptions
//------------------------------------------------------------------------------

struct DLL_IMPORT FDXTCompressionOptions {
  public:
    FDXTCompressionOptions(void);
    struct FDXTCompressionOptions & operator=(struct FDXTCompressionOptions const &);
};

//------------------------------------------------------------------------------
//  FDirectionalLightMapSceneNode
//------------------------------------------------------------------------------

class DLL_IMPORT FDirectionalLightMapSceneNode {
  public:
    virtual ~FDirectionalLightMapSceneNode(void);
    virtual void GetViewFrustum(class FConvexVolume &);
    FDirectionalLightMapSceneNode(class FDirectionalLightMapSceneNode const &);
    FDirectionalLightMapSceneNode(class UViewport *,class AActor *,class FBspSurf &,class FLightMap *);
    class FDirectionalLightMapSceneNode & operator=(class FDirectionalLightMapSceneNode const &);
};

//------------------------------------------------------------------------------
//  FDynamicActor
//------------------------------------------------------------------------------

class DLL_IMPORT FDynamicActor {
  public:
    FDynamicActor(class FDynamicActor const &);
    FDynamicActor(class AActor *);
    ~FDynamicActor(void);
    class FDynamicActor & operator=(class FDynamicActor const &);
    void Render(class FLevelSceneNode *,class TList<class FDynamicLight *> *,class TList<struct FProjectorRenderInfo *> *,class FRenderInterface *);
    void Update(void);
};

//------------------------------------------------------------------------------
//  FDynamicCubemap
//------------------------------------------------------------------------------

class DLL_IMPORT FDynamicCubemap {
  public:
    virtual ~FDynamicCubemap(void);
    virtual int GetRevision(void);
    virtual int GetWidth(void);
    virtual int GetHeight(void);
    virtual int GetFirstMip(void);
    virtual int GetNumMips(void);
    virtual enum ETextureFormat GetFormat(void);
    virtual enum ETexClampMode GetUClamp(void);
    virtual enum ETexClampMode GetVClamp(void);
    virtual class FTexture * GetFace(int);
    virtual int IsDynamic(void);
    FDynamicCubemap(class FDynamicCubemap const &);
    FDynamicCubemap(class UDynamicCubemap *);
    class FDynamicCubemap & operator=(class FDynamicCubemap const &);
};

//------------------------------------------------------------------------------
//  FDynamicLight
//------------------------------------------------------------------------------

class DLL_IMPORT FDynamicLight {
  public:
    FDynamicLight(class FDynamicLight const &);
    FDynamicLight(class AActor *);
    class FDynamicLight & operator=(class FDynamicLight const &);
    float SampleIntensity(class FVector,class FVector);
    class FColor SampleLight(class FVector const &,class FVector const &);
    void Update(void);
};

//------------------------------------------------------------------------------
//  FEngineStats
//------------------------------------------------------------------------------

class DLL_IMPORT FEngineStats {
  public:
    FEngineStats(void);
    class FEngineStats & operator=(class FEngineStats const &);
    void Init(void);
};

//------------------------------------------------------------------------------
//  FFrameHeader
//------------------------------------------------------------------------------

struct DLL_IMPORT FFrameHeader {
  public:
    FFrameHeader(struct FFrameHeader const &);
    FFrameHeader(unsigned long);
    struct FFrameHeader & operator=(struct FFrameHeader const &);
    unsigned short const * GetID(unsigned short *)const ;
    int GetSize(void)const ;
};

//------------------------------------------------------------------------------
//  FHitCause
//------------------------------------------------------------------------------

struct DLL_IMPORT FHitCause {
  public:
    FHitCause(class FHitObserver *,class UViewport *,unsigned long,float,float);
    struct FHitCause & operator=(struct FHitCause const &);
};

//------------------------------------------------------------------------------
//  FHitObserver
//------------------------------------------------------------------------------

class DLL_IMPORT FHitObserver {
  public:
    virtual ~FHitObserver(void);
    virtual void Click(struct FHitCause const &,struct HHitProxy const &);
    FHitObserver(class FHitObserver const &);
    FHitObserver(void);
    class FHitObserver & operator=(class FHitObserver const &);
};

//------------------------------------------------------------------------------
//  FID3Tag
//------------------------------------------------------------------------------

struct DLL_IMPORT FID3Tag {
  public:
    FID3Tag(struct FID3Tag const &);
    FID3Tag(void);
    struct FID3Tag & operator=(struct FID3Tag const &);
};

//------------------------------------------------------------------------------
//  FID3TagV1
//------------------------------------------------------------------------------

struct DLL_IMPORT FID3TagV1 {
  public:
    virtual void DumpTag(void);
    FID3TagV1(struct FID3TagV1 const &);
    FID3TagV1(unsigned char,unsigned char,enum ETagGenre);
    struct FID3TagV1 & operator=(struct FID3TagV1 const &);
    void ByteToString(unsigned char const *,class FString &,int)const ;
    int RenderFields(class UStreamTag *)const ;
};

//------------------------------------------------------------------------------
//  FID3TagV2
//------------------------------------------------------------------------------

struct DLL_IMPORT FID3TagV2 {
  public:
    virtual void DumpTag(void);
    FID3TagV2(struct FID3TagV2 const &);
    FID3TagV2(void);
    ~FID3TagV2(void);
    struct FID3TagV2 & operator=(struct FID3TagV2 const &);
    int AddFrame(class FArchive &,unsigned long);
    int GetSize(void)const ;
};

//------------------------------------------------------------------------------
//  FID3V2ExtendedTagHeader
//------------------------------------------------------------------------------

struct DLL_IMPORT FID3V2ExtendedTagHeader {
  public:
    FID3V2ExtendedTagHeader(unsigned long);
    struct FID3V2ExtendedTagHeader & operator=(struct FID3V2ExtendedTagHeader const &);
    int GetPaddingSize(void)const ;
    int GetSize(void)const ;
};

//------------------------------------------------------------------------------
//  FID3V2Frame
//------------------------------------------------------------------------------

struct DLL_IMPORT FID3V2Frame {
  public:
    FID3V2Frame(struct FID3V2Frame const &);
    FID3V2Frame(struct FFrameHeader,enum EID3TextEncoding);
    FID3V2Frame(enum EID3TextEncoding);
    ~FID3V2Frame(void);
    struct FID3V2Frame & operator=(struct FID3V2Frame const &);
    void DumpFrame(void);
    unsigned short const * GetID(unsigned short *)const ;
    int GetSize(void)const ;
};

//------------------------------------------------------------------------------
//  FID3V2TagHeader
//------------------------------------------------------------------------------

struct DLL_IMPORT FID3V2TagHeader {
  public:
    FID3V2TagHeader(void);
    struct FID3V2TagHeader & operator=(struct FID3V2TagHeader const &);
    int GetSize(void)const ;
};

//------------------------------------------------------------------------------
//  FLeafRenderInfo
//------------------------------------------------------------------------------

struct DLL_IMPORT FLeafRenderInfo {
  public:
    FLeafRenderInfo(struct FLeafRenderInfo const &);
    FLeafRenderInfo(void);
    ~FLeafRenderInfo(void);
    struct FLeafRenderInfo & operator=(struct FLeafRenderInfo const &);
};

//------------------------------------------------------------------------------
//  FLevelSceneNode
//------------------------------------------------------------------------------

class DLL_IMPORT FLevelSceneNode {
  public:
    virtual ~FLevelSceneNode(void);
    virtual void Render(class FRenderInterface *);
    virtual class FLevelSceneNode * GetLevelSceneNode(void);
    virtual void GetViewFrustum(class FConvexVolume &);
    virtual int FilterActor(class AActor *);
    virtual int FilterAttachment(class AActor *);
    virtual int FilterProjector(class AProjector *);
    FLevelSceneNode(class FLevelSceneNode const &);
    FLevelSceneNode(class FLevelSceneNode *,int,class FMatrix);
    FLevelSceneNode(class UViewport *,class ULevel *,class FRenderTarget *);
    class FLevelSceneNode & operator=(class FLevelSceneNode const &);
};

//------------------------------------------------------------------------------
//  FLightMap
//------------------------------------------------------------------------------

class DLL_IMPORT FLightMap {
  public:
    virtual ~FLightMap(void);
    virtual int GetRevision(void);
    virtual int GetWidth(void);
    virtual int GetHeight(void);
    virtual int GetFirstMip(void);
    virtual int GetNumMips(void);
    virtual enum ETextureFormat GetFormat(void);
    virtual enum ETexClampMode GetUClamp(void);
    virtual enum ETexClampMode GetVClamp(void);
    virtual void * GetRawTextureData(int);
    virtual unsigned long GetTextureData(int,void *,int,enum ETextureFormat);
    virtual void UnloadRawTextureData(int);
    virtual class UTexture * GetUTexture(void);
    virtual int GetMaxMipLOD(void)const ;
    FLightMap(class FLightMap const &);
    FLightMap(class ULevel *,int,int);
    FLightMap(void);
    class FLightMap & operator=(class FLightMap const &);
    friend class FArchive & CDECL operator<<(class FArchive &,class FLightMap &);
};

//------------------------------------------------------------------------------
//  FLightMapIndex
//------------------------------------------------------------------------------

class DLL_IMPORT FLightMapIndex {
  public:
    FLightMapIndex(void);
    ~FLightMapIndex(void);
    class FLightMapIndex & operator=(class FLightMapIndex const &);
};

//------------------------------------------------------------------------------
//  FLightMapSceneNode
//------------------------------------------------------------------------------

class DLL_IMPORT FLightMapSceneNode {
  public:
    virtual ~FLightMapSceneNode(void);
    virtual void Render(class FRenderInterface *);
    virtual int FilterActor(class AActor *);
    FLightMapSceneNode(class FLightMapSceneNode const &);
    FLightMapSceneNode(class UViewport *,class AActor *,class FLightMap *);
    class FLightMapSceneNode & operator=(class FLightMapSceneNode const &);
};

//------------------------------------------------------------------------------
//  FLightMapTexture
//------------------------------------------------------------------------------

class DLL_IMPORT FLightMapTexture {
  public:
    virtual ~FLightMapTexture(void);
    virtual int GetRevision(void);
    virtual int GetWidth(void);
    virtual int GetHeight(void);
    virtual int GetFirstMip(void);
    virtual int GetNumMips(void);
    virtual enum ETextureFormat GetFormat(void);
    virtual enum ETexClampMode GetUClamp(void);
    virtual enum ETexClampMode GetVClamp(void);
    virtual int GetNumChildren(void);
    virtual class FTexture * GetChild(int,int *,int *);
    FLightMapTexture(class FLightMapTexture const &);
    FLightMapTexture(class ULevel *);
    FLightMapTexture(void);
    class FLightMapTexture & operator=(class FLightMapTexture const &);
    friend class FArchive & CDECL operator<<(class FArchive &,class FLightMapTexture &);
};

//------------------------------------------------------------------------------
//  FLineBatcher
//------------------------------------------------------------------------------

class DLL_IMPORT FLineBatcher {
  public:
    virtual ~FLineBatcher(void);
    virtual int GetRevision(void);
    virtual int GetStride(void);
    virtual int GetSize(void);
    virtual int GetComponents(struct FVertexComponent *);
    virtual void GetStreamData(void *);
    virtual void GetRawStreamData(void * *,int);
    FLineBatcher(class FLineBatcher const &);
    FLineBatcher(class FRenderInterface *,int);
    class FLineBatcher & operator=(class FLineBatcher const &);
    void DrawAlignedCylinder(class FCoords &,class FColor,float,float,int);
    void DrawBox(class FBox,class FColor);
    void DrawCapsule(class FCoords &,class FColor,float,float,int,int);
    void DrawCircle(class FVector,class FVector,class FVector,class FColor,float,int);
    void DrawCone(class FVector,class FVector,class FVector,class FVector,class FColor,float,float,int);
    void DrawConvexVolume(class FConvexVolume,class FColor);
    void DrawCylinder(class FVector,class FVector,class FVector,class FVector,class FColor,float,float,int);
    void DrawDirectionalArrow3D(class FVector,class FVector,class FColor,float);
    void DrawDirectionalArrow(class FVector,class FRotator,class FColor,float);
    void DrawDoughnut(class FCoords &,class FColor,float,float,int);
    void DrawHemisphere(class FCoords &,class FColor,float,int);
    void DrawLine(class FVector,class FVector,class FColor);
    void DrawPoint(class FSceneNode *,class FVector,class FColor);
    void DrawSemiCircle(class FVector &,class FVector &,class FVector &,class FColor &,float,int);
    void DrawSphere(class FVector,class FColor,float,int);
    void Flush(unsigned long);
};

//------------------------------------------------------------------------------
//  FLineVertex
//------------------------------------------------------------------------------

class DLL_IMPORT FLineVertex {
  public:
    FLineVertex(class FVector,class FColor);
    FLineVertex(void);
    class FLineVertex & operator=(class FLineVertex const &);
};

//------------------------------------------------------------------------------
//  FListener
//------------------------------------------------------------------------------

class DLL_IMPORT FListener {
  public:
    virtual ~FListener(void);
    virtual void Update(class FVector,class FVector,class FVector,class FVector,struct FPointRegion,float,class UI3DL2Listener *);
    virtual void Reset(void);
    FListener(class FListener const &);
    FListener(void);
    class FListener & operator=(class FListener const &);
};

//------------------------------------------------------------------------------
//  FMatineeTools
//------------------------------------------------------------------------------

class DLL_IMPORT FMatineeTools {
  public:
    virtual ~FMatineeTools(void);
    FMatineeTools(class FMatineeTools const &);
    FMatineeTools(void);
    class FMatineeTools & operator=(class FMatineeTools const &);
    class UMatAction * GetActionFromIP(class ASceneManager *,class AInterpolationPoint *);
    int GetActionIdx(class ASceneManager *,class UMatAction *);
    class ASceneManager * GetCurrent(void);
    class UMatAction * GetCurrentAction(void);
    class UMatSubAction * GetCurrentSubAction(void);
    class UMatAction * GetNextAction(class ASceneManager *,class UMatAction *);
    class UMatAction * GetNextMovementAction(class ASceneManager *,class UMatAction *);
    class FString GetOrientationDesc(int);
    int GetPathStyle(class UMatAction *);
    class UMatAction * GetPrevAction(class ASceneManager *,class UMatAction *);
    void GetSamples(class ASceneManager *,class UMatAction *,class TArray<class FVector> *);
    int GetSubActionIdx(class UMatSubAction *);
    void Init(void);
    class ASceneManager * SetCurrent(class UEngine *,class ULevel *,class ASceneManager *);
    class ASceneManager * SetCurrent(class UEngine *,class ULevel *,class FString);
    class UMatAction * SetCurrentAction(class UMatAction *);
    class UMatSubAction * SetCurrentSubAction(class UMatSubAction *);
};

//------------------------------------------------------------------------------
//  FMipmap
//------------------------------------------------------------------------------

struct DLL_IMPORT FMipmap {
  public:
    FMipmap(struct FMipmap const &);
    FMipmap(unsigned char,unsigned char);
    FMipmap(unsigned char,unsigned char,int);
    FMipmap(void);
    ~FMipmap(void);
    struct FMipmap & operator=(struct FMipmap const &);
    void Clear(void);
};

//------------------------------------------------------------------------------
//  FMipmapBase
//------------------------------------------------------------------------------

struct DLL_IMPORT FMipmapBase {
  public:
    FMipmapBase(unsigned char,unsigned char);
    FMipmapBase(void);
    struct FMipmapBase & operator=(struct FMipmapBase const &);
};

//------------------------------------------------------------------------------
//  FMirrorSceneNode
//------------------------------------------------------------------------------

class DLL_IMPORT FMirrorSceneNode {
  public:
    virtual ~FMirrorSceneNode(void);
    virtual class FMirrorSceneNode * GetMirrorSceneNode(void);
    FMirrorSceneNode(class FMirrorSceneNode const &);
    FMirrorSceneNode(class FLevelSceneNode *,class FPlane,int,int);
    class FMirrorSceneNode & operator=(class FMirrorSceneNode const &);
};

//------------------------------------------------------------------------------
//  FOctreeNode
//------------------------------------------------------------------------------

class DLL_IMPORT FOctreeNode {
  public:
    FOctreeNode(class FOctreeNode const &);
    FOctreeNode(void);
    ~FOctreeNode(void);
    class FOctreeNode & operator=(class FOctreeNode const &);
    void ActorEncroachmentCheck(class FCollisionOctree *,class FPlane const *);
    void ActorNonZeroExtentLineCheck(class FCollisionOctree *,class FPlane const *);
    void ActorOverlapCheck(class FCollisionOctree *,class FPlane const *);
    void ActorPointCheck(class FCollisionOctree *,class FPlane const *);
    void ActorRadiusCheck(class FCollisionOctree *,class FPlane const *);
    void ActorZeroExtentLineCheck(class FCollisionOctree *,float,float,float,float,float,float,class FPlane const *);
    void CheckActorNotReferenced(class AActor *);
    void CheckIsEmpty(void);
    void Draw(class FColor,int,class FPlane const *);
    void DrawFlaggedActors(class FCollisionOctree *,class FPlane const *);
    void FilterTest(class FBox *,int,class TArray<class FOctreeNode *> *,class FPlane const *);
    void MultiNodeFilter(class AActor *,class FCollisionOctree *,class FPlane const *);
    void RemoveAllActors(class FCollisionOctree *);
    void SingleNodeFilter(class AActor *,class FCollisionOctree *,class FPlane const *);
  private:
    void StoreActor(class AActor *,class FCollisionOctree *,class FPlane const *);
};

//------------------------------------------------------------------------------
//  FPlayerSceneNode
//------------------------------------------------------------------------------

class DLL_IMPORT FPlayerSceneNode {
  public:
    virtual ~FPlayerSceneNode(void);
    virtual void Render(class FRenderInterface *);
    FPlayerSceneNode(class FPlayerSceneNode const &);
    FPlayerSceneNode(class UViewport *,class ULevel *,class FRenderTarget *,class AActor *,class FVector,class FRotator,float);
    class FPlayerSceneNode & operator=(class FPlayerSceneNode const &);
    void AddCameraEffect(class UCameraEffect *,int);
    void RemoveCameraEffect(class UCameraEffect *,int);
};

//------------------------------------------------------------------------------
//  FPointLightMapSceneNode
//------------------------------------------------------------------------------

class DLL_IMPORT FPointLightMapSceneNode {
  public:
    virtual ~FPointLightMapSceneNode(void);
    virtual void GetViewFrustum(class FConvexVolume &);
    FPointLightMapSceneNode(class FPointLightMapSceneNode const &);
    FPointLightMapSceneNode(class UViewport *,class AActor *,class FBspSurf &,class FLightMap *,int,int,int,int);
    class FPointLightMapSceneNode & operator=(class FPointLightMapSceneNode const &);
};

//------------------------------------------------------------------------------
//  FPoly
//------------------------------------------------------------------------------

class DLL_IMPORT FPoly {
  public:
    FPoly(void);
    class FPoly & operator=(class FPoly const &);
    friend class FArchive & CDECL operator<<(class FArchive &,class FPoly &);
    int operator==(class FPoly);
    int operator!=(class FPoly);
    float Area(void);
    int CalcNormal(int);
    int DoesLineIntersect(class FVector,class FVector,class FVector *);
    int Faces(class FPoly const &)const ;
    int Finalize(int);
    int Fix(void);
    class FVector GetTextureSize(void);
    void Init(void);
    void InsertVertex(int,class FVector);
    int IsBackfaced(class FVector const &)const ;
    int IsCoplanar(class FPoly const &)const ;
    int OnPlane(class FVector);
    int OnPoly(class FVector);
    int RemoveColinears(void);
    void Reverse(void);
    int Split(class FVector const &,class FVector const &,int);
    void SplitInHalf(class FPoly *);
    int SplitWithNode(class UModel const *,int,class FPoly *,class FPoly *,int)const ;
    int SplitWithPlane(class FVector const &,class FVector const &,class FPoly *,class FPoly *,int)const ;
    int SplitWithPlaneFast(class FPlane,class FPoly *,class FPoly *)const ;
    void Transform(class FModelCoords const &,class FVector const &,class FVector const &,float);
};

//------------------------------------------------------------------------------
//  FRaw32BitIndexBuffer
//------------------------------------------------------------------------------

class DLL_IMPORT FRaw32BitIndexBuffer {
  public:
    virtual ~FRaw32BitIndexBuffer(void);
    virtual int GetRevision(void);
    virtual int GetSize(void);
    virtual void GetContents(void *);
    virtual int GetIndexSize(void);
    FRaw32BitIndexBuffer(class FRaw32BitIndexBuffer const &);
    FRaw32BitIndexBuffer(void);
    class FRaw32BitIndexBuffer & operator=(class FRaw32BitIndexBuffer const &);
    friend class FArchive & CDECL operator<<(class FArchive &,class FRaw32BitIndexBuffer &);
};

//------------------------------------------------------------------------------
//  FRawColorStream
//------------------------------------------------------------------------------

class DLL_IMPORT FRawColorStream {
  public:
    virtual ~FRawColorStream(void);
    virtual int GetRevision(void);
    virtual int GetStride(void);
    virtual int GetSize(void);
    virtual int GetComponents(struct FVertexComponent *);
    virtual void GetStreamData(void *);
    virtual void GetRawStreamData(void * *,int);
    FRawColorStream(class FRawColorStream const &);
    FRawColorStream(void);
    class FRawColorStream & operator=(class FRawColorStream const &);
    friend class FArchive & CDECL operator<<(class FArchive &,class FRawColorStream &);
};

//------------------------------------------------------------------------------
//  FRawIndexBuffer
//------------------------------------------------------------------------------

class DLL_IMPORT FRawIndexBuffer {
  public:
    virtual ~FRawIndexBuffer(void);
    virtual int GetRevision(void);
    virtual int GetSize(void);
    virtual void GetContents(void *);
    virtual int GetIndexSize(void);
    virtual int Stripify(void);
    virtual void CacheOptimize(void);
    FRawIndexBuffer(class FRawIndexBuffer const &);
    FRawIndexBuffer(void);
    class FRawIndexBuffer & operator=(class FRawIndexBuffer const &);
    friend class FArchive & CDECL operator<<(class FArchive &,class FRawIndexBuffer &);
};

//------------------------------------------------------------------------------
//  FRebuildOptions
//------------------------------------------------------------------------------

class DLL_IMPORT FRebuildOptions {
  public:
    FRebuildOptions(class FRebuildOptions const &);
    FRebuildOptions(void);
    ~FRebuildOptions(void);
    class FRebuildOptions operator=(class FRebuildOptions);
    class FString GetName(void);
    void Init(void);
};

//------------------------------------------------------------------------------
//  FRebuildTools
//------------------------------------------------------------------------------

class DLL_IMPORT FRebuildTools {
  public:
    FRebuildTools(class FRebuildTools const &);
    FRebuildTools(void);
    ~FRebuildTools(void);
    class FRebuildTools & operator=(class FRebuildTools const &);
    void Delete(class FString);
    class FRebuildOptions * GetCurrent(void);
    class FRebuildOptions * GetFromName(class FString);
    int GetIdxFromName(class FString);
    void Init(void);
    class FRebuildOptions * Save(class FString);
    void SetCurrent(class FString);
    void Shutdown(void);
};

//------------------------------------------------------------------------------
//  FRenderInterface
//------------------------------------------------------------------------------

class DLL_IMPORT FRenderInterface {
  public:
    virtual ~FRenderInterface(void);
    virtual void PixoSetHint(unsigned long);
    virtual void PixoResetHint(unsigned long);
    virtual class UTexture * PixoCreateTexture(class FRenderTarget *,int);
    virtual void SetPixelShader(enum EPixelShader);
    virtual void SetPixelShaderConstant(unsigned long,void const *,unsigned long);
    virtual int LockDynBuffer(unsigned char * *,int,int,unsigned long);
    virtual int UnlockDynBuffer(void);
    virtual void DrawDynQuads(int);
    virtual void DrawQuads(int,int);
    virtual void SetPixelShaderVariable(int,float *,int);
    virtual void SetVertexShaderVariable(int,float *,int);
    virtual void SetHLSLShaders(class USBMaterial *,int,int);
    virtual void SetSBLightmap(int,class FBaseTexture *);
    virtual int GetRenderTargetData(class FRenderTarget *,class FTextureDataCopyInterface *);
    virtual int CopyRenderTargetData(class FRenderTarget *,class FRenderTarget *);
    virtual int CopyCurrentRenderTargetData(class FRenderTarget *,float,float,float,float);
    virtual void ClearGetRenderTargetDataCache(void);
    FRenderInterface(class FRenderInterface const &);
    FRenderInterface(void);
    class FRenderInterface & operator=(class FRenderInterface const &);
};

//------------------------------------------------------------------------------
//  FRenderInterfaceDecorator
//------------------------------------------------------------------------------

class DLL_IMPORT FRenderInterfaceDecorator {
  public:
    virtual ~FRenderInterfaceDecorator(void);
    virtual void PushState(void);
    virtual void PopState(void);
    virtual void PushAlphaFogStates(void);
    virtual void PopAlphaFogStates(void);
    virtual int SetRenderTarget(class FRenderTarget *);
    virtual void SetViewport(int,int,int,int,float,float);
    virtual void Clear(int,class FColor,int,float,int,unsigned long);
    virtual void PushHit(unsigned char const *,int);
    virtual void PopHit(int,int);
    virtual void SetCullMode(enum ECullMode);
    virtual void SetAmbientLight(class FColor);
    virtual void EnableLighting(int,int,int,class FBaseTexture *,int,class FSphere);
    virtual void EnableSunLighting(int,class FBaseTexture *);
    virtual void SetPostProcessingModulation(float);
    virtual float GetPostProcessingModulation(void);
    virtual void SetLight(int,class FDynamicLight *,float);
    virtual void SetSunLight(int,class FDynamicLight *,float);
    virtual void SetNPatchTesselation(float);
    virtual void SetDistanceFog(enum EFogSettings,float,float,class FColor);
    virtual void UseExpFog(int);
    virtual void SetHeightFog(int,float,float,float);
    virtual void SetFogColor(class FColor *,float);
    virtual void SetGlobalColor(class FColor);
    virtual void SetTransform(enum ETransformType,class FMatrix const &);
    virtual void SetMaterial(class UMaterial *,class FString *,class UMaterial * *,int *);
    virtual void SetStencilOp(enum ECompareFunction,unsigned long,unsigned long,enum EStencilOp,enum EStencilOp,enum EStencilOp,unsigned long);
    virtual void SetColorMask(unsigned long);
    virtual void SetPrecacheMode(enum EPrecacheMode);
    virtual enum EPrecacheMode GetPrecacheMode(void);
    virtual void PrecacheResources(void);
    virtual void SetZBias(int);
    virtual void SetMipMapRange(enum EMipRange);
    virtual int SetVertexStreams(enum EVertexShader,class FVertexStream * *,int);
    virtual int SetDynamicStream(enum EVertexShader,class FVertexStream *);
    virtual int SetIndexBuffer(class FIndexBuffer *,int);
    virtual int SetDynamicIndexBuffer(class FIndexBuffer *,int);
    virtual void DrawPrimitive(enum EPrimitiveType,int,int,int,int);
    virtual void DrawDynQuads(int);
    virtual void DrawQuads(int,int);
    FRenderInterfaceDecorator(class FRenderInterfaceDecorator const &);
    FRenderInterfaceDecorator(class FRenderInterface *);
    class FRenderInterfaceDecorator & operator=(class FRenderInterfaceDecorator const &);
};

//------------------------------------------------------------------------------
//  FRenderResource
//------------------------------------------------------------------------------

class DLL_IMPORT FRenderResource {
  public:
    virtual ~FRenderResource(void);
    virtual void SetCache(int);
    virtual int UpdateCache(class URenderDevice *,int);
    FRenderResource(class FRenderResource const &);
    FRenderResource(void);
    class FRenderResource & operator=(class FRenderResource const &);
    unsigned __int64 GetCacheId(void)const ;
};

//------------------------------------------------------------------------------
//  FRenderTargetPool
//------------------------------------------------------------------------------

class DLL_IMPORT FRenderTargetPool {
  public:
    FRenderTargetPool(class FRenderTargetPool const &);
    FRenderTargetPool(int,int,enum ETextureFormat,int);
    ~FRenderTargetPool(void);
    class FRenderTargetPool & operator=(class FRenderTargetPool const &);
    void CachePool(class URenderDevice *);
    void CreatePool(void);
    void DestroyPool(void);
    enum ETextureFormat GetFormat(void)const ;
    class FAuxRenderTarget * GetNext(void);
    int GetUSize(void)const ;
    int GetVSize(void)const ;
    bool IsAvailable(int)const ;
    void ResetPool(void);
  private:
    bool CacheRenderTarget(class URenderDevice *,class FAuxRenderTarget *);
    class FAuxRenderTarget * CreateRenderTarget(void);
};

//------------------------------------------------------------------------------
//  FRotatorF
//------------------------------------------------------------------------------

class DLL_IMPORT FRotatorF {
  public:
    FRotatorF(float,float,float);
    FRotatorF(class FRotator);
    FRotatorF(void);
    class FRotatorF & operator=(class FRotatorF const &);
    class FRotatorF operator*(float)const ;
    class FRotatorF operator-(class FRotatorF)const ;
    class FRotatorF operator+(class FRotatorF)const ;
    class FRotatorF operator*=(float);
    class FRotatorF operator+=(class FRotatorF);
    class FRotatorF operator-=(class FRotatorF);
    class FRotator Rotator(void);
    class FVector Vector(void);
};

//------------------------------------------------------------------------------
//  FSBDepthSceneNode
//------------------------------------------------------------------------------

class DLL_IMPORT FSBDepthSceneNode {
  public:
    virtual ~FSBDepthSceneNode(void);
    virtual class FSceneNode * GetLodSceneNode(void);
    virtual int FilterActor(class AActor *);
    virtual int FilterAttachment(class AActor *);
    virtual int FilterProjector(class AProjector *);
    FSBDepthSceneNode(class FSBDepthSceneNode const &);
    FSBDepthSceneNode(class UViewport *,class ULevel *,class FRenderTarget *,class AActor *,class FVector,class FRotator,float);
    class FSBDepthSceneNode & operator=(class FSBDepthSceneNode const &);
};

//------------------------------------------------------------------------------
//  FSBLightMapCanvasUtil
//------------------------------------------------------------------------------

class DLL_IMPORT FSBLightMapCanvasUtil {
  public:
    virtual ~FSBLightMapCanvasUtil(void);
    virtual int GetRevision(void);
    virtual int GetStride(void);
    virtual int GetSize(void);
    virtual int GetComponents(struct FVertexComponent *);
    virtual void GetStreamData(void *);
    virtual void GetRawStreamData(void * *,int);
    FSBLightMapCanvasUtil(class FSBLightMapCanvasUtil const &);
    FSBLightMapCanvasUtil(class FRenderTarget *,class FRenderInterface *);
    class FSBLightMapCanvasUtil & operator=(class FSBLightMapCanvasUtil const &);
    void BeginPrimitive(enum EPrimitiveType,class UMaterial *);
    void Flush(void);
};

//------------------------------------------------------------------------------
//  FSBLightMapCanvasVertex
//------------------------------------------------------------------------------

class DLL_IMPORT FSBLightMapCanvasVertex {
  public:
    FSBLightMapCanvasVertex(class FVector,class FVector,class FColor,float,float);
    FSBLightMapCanvasVertex(void);
    class FSBLightMapCanvasVertex & operator=(class FSBLightMapCanvasVertex const &);
};

//------------------------------------------------------------------------------
//  FSBLightMapGenerator
//------------------------------------------------------------------------------

class DLL_IMPORT FSBLightMapGenerator {
  public:
    virtual ~FSBLightMapGenerator(void);
    FSBLightMapGenerator(class FSBLightMapGenerator const &);
    FSBLightMapGenerator(void);
    class FSBLightMapGenerator & operator=(class FSBLightMapGenerator const &);
    class FStaticSBLightMapTexture * CreateSBLightMap(class TArray<class FDynamicLight *> const &,class AActor *,class FBox const &,class FMatrix const &,class ISBLightMapTriangleProvider *);
    class UViewport * GetLightingViewport(void)const ;
    void Init(class ULevel *);
  private:
    void AddLightIntoLightmap(int,class FDynamicLight *,class AActor *,class FBox const &,class FMatrix const &,class ISBLightMapTriangleProvider *,int);
    void CreateRenderTargetIfNeeded(int);
    int UpdateShadowMap(class FDynamicLight *,class AActor *,class FBox const &,int);
};

//------------------------------------------------------------------------------
//  FSBMeshClustering
//------------------------------------------------------------------------------

class DLL_IMPORT FSBMeshClustering {
  public:
    FSBMeshClustering(class FSBMeshClustering const &);
    FSBMeshClustering(void);
    ~FSBMeshClustering(void);
    class FSBMeshClustering & operator=(class FSBMeshClustering const &);
    void BuildClusters(class TArray<struct FSBMeshClustering::Element *> &,struct FSBMeshClustering::Element * &);
    void BuildElements(class ULevel *);
    void BunchThem(class TArray<class TArray<class AActor *> > &);
    void BunchThemComplex(class TArray<class TArray<class AActor *> > &);
    float CheckDistanceRatio(struct FSBMeshClustering::Element &,struct FSBMeshClustering::Element &);
    struct Couple * FSBMeshClustering::CreateNewCouple(struct FSBMeshClustering::Element &,struct FSBMeshClustering::Element &,float);
    static class FSphere CDECL FindMinimumSphere(class FSphere const &,class FSphere const &);
    void SetWeights(float,float,float);
  private:
    static float CDECL BalancingFunction(int,int,int);
    struct std::pair<class std::_Tree<class std::_Tset_traits<struct Couple *,struct FSBMeshClustering::MyLess,class std::allocator<struct FSBMeshClustering::Couple *>,0> >::iterator,bool> FSBMeshClustering::CheckAndInsert(struct FSBMeshClustering::Couple *);
    void MergeAndUpdate(class std::_Tree<class std::_Tset_traits<struct FSBMeshClustering::Couple *,struct FSBMeshClustering::MyLess,class std::allocator<struct FSBMeshClustering::Couple *>,0> >::iterator &,class TArray<struct FSBMeshClustering::Element *> &);
};

//------------------------------------------------------------------------------
//  FSBProjectorRenderInfo
//------------------------------------------------------------------------------

struct DLL_IMPORT FSBProjectorRenderInfo {
  public:
    FSBProjectorRenderInfo(struct FSBProjectorRenderInfo const &);
    FSBProjectorRenderInfo(void);
    ~FSBProjectorRenderInfo(void);
    struct FSBProjectorRenderInfo & operator=(struct FSBProjectorRenderInfo const &);
    friend class FArchive & CDECL operator<<(class FArchive &,struct FSBProjectorRenderInfo *);
};

//------------------------------------------------------------------------------
//  FSBSunlightRenderInfo
//------------------------------------------------------------------------------

struct DLL_IMPORT FSBSunlightRenderInfo {
  public:
    FSBSunlightRenderInfo(struct FSBSunlightRenderInfo const &);
    FSBSunlightRenderInfo(void);
    ~FSBSunlightRenderInfo(void);
    struct FSBSunlightRenderInfo & operator=(struct FSBSunlightRenderInfo const &);
    friend class FArchive & CDECL operator<<(class FArchive &,struct FSBSunlightRenderInfo *);
};

//------------------------------------------------------------------------------
//  FSceneNode
//------------------------------------------------------------------------------

class DLL_IMPORT FSceneNode {
  public:
    virtual ~FSceneNode(void);
    virtual class FSceneNode * GetLodSceneNode(void);
    virtual class FLevelSceneNode * GetLevelSceneNode(void);
    virtual class FCameraSceneNode * GetCameraSceneNode(void);
    virtual class FActorSceneNode * GetActorSceneNode(void);
    virtual class FSkySceneNode * GetSkySceneNode(void);
    virtual class FMirrorSceneNode * GetMirrorSceneNode(void);
    virtual class FWarpZoneSceneNode * GetWarpZoneSceneNode(void);
    FSceneNode(class FSceneNode const &);
    FSceneNode(class FSceneNode *);
    FSceneNode(class UViewport *,class FRenderTarget *);
    class FSceneNode & operator=(class FSceneNode const &);
    class FVector Deproject(class FPlane);
    class FPlane Project(class FVector);
    class FMatrix const & SafeSetZBias(float,float);
    class FMatrix const & SafeUnsetZBias(void);
};

//------------------------------------------------------------------------------
//  FScriptedPortalSceneNode
//------------------------------------------------------------------------------

class DLL_IMPORT FScriptedPortalSceneNode {
  public:
    virtual ~FScriptedPortalSceneNode(void);
    virtual class FSceneNode * GetLodSceneNode(void);
    FScriptedPortalSceneNode(class FScriptedPortalSceneNode const &);
    FScriptedPortalSceneNode(class UViewport *,class ULevel *,class FRenderTarget *,class AActor *,class FVector,class FRotator,float);
    class FScriptedPortalSceneNode & operator=(class FScriptedPortalSceneNode const &);
};

//------------------------------------------------------------------------------
//  FShadowSceneNode
//------------------------------------------------------------------------------

class DLL_IMPORT FShadowSceneNode {
  public:
    virtual ~FShadowSceneNode(void);
    virtual class FSceneNode * GetLodSceneNode(void);
    virtual int FilterAttachment(class AActor *);
    FShadowSceneNode(class FShadowSceneNode const &);
    FShadowSceneNode(class UViewport *,class FRenderTarget *,class AActor *,class AActor *,class FVector,class FRotator,float);
    class FShadowSceneNode & operator=(class FShadowSceneNode const &);
};

//------------------------------------------------------------------------------
//  FSkinUVStream
//------------------------------------------------------------------------------

class DLL_IMPORT FSkinUVStream {
  public:
    virtual ~FSkinUVStream(void);
    virtual int GetRevision(void);
    virtual int GetStride(void);
    virtual int GetSize(void);
    virtual int GetComponents(struct FVertexComponent *);
    virtual void GetStreamData(void *);
    virtual void GetRawStreamData(void * *,int);
    FSkinUVStream(class FSkinUVStream const &);
    FSkinUVStream(void);
    class FSkinUVStream & operator=(class FSkinUVStream const &);
    friend class FArchive & CDECL operator<<(class FArchive &,class FSkinUVStream &);
};

//------------------------------------------------------------------------------
//  FSkinVertexStream
//------------------------------------------------------------------------------

class DLL_IMPORT FSkinVertexStream {
  public:
    virtual ~FSkinVertexStream(void);
    virtual int GetRevision(void);
    virtual int GetStride(void);
    virtual int GetSize(void);
    virtual int GetComponents(struct FVertexComponent *);
    virtual void GetStreamData(void *);
    virtual void GetRawStreamData(void * *,int);
    FSkinVertexStream(class FSkinVertexStream const &);
    FSkinVertexStream(void);
    class FSkinVertexStream & operator=(class FSkinVertexStream const &);
    friend class FArchive & CDECL operator<<(class FArchive &,class FSkinVertexStream &);
};

//------------------------------------------------------------------------------
//  FSkySceneNode
//------------------------------------------------------------------------------

class DLL_IMPORT FSkySceneNode {
  public:
    virtual ~FSkySceneNode(void);
    virtual void Render(class FRenderInterface *);
    virtual class FSkySceneNode * GetSkySceneNode(void);
    FSkySceneNode(class FSkySceneNode const &);
    FSkySceneNode(class FLevelSceneNode *,int);
    class FSkySceneNode & operator=(class FSkySceneNode const &);
};

//------------------------------------------------------------------------------
//  FSolidColorTexture
//------------------------------------------------------------------------------

class DLL_IMPORT FSolidColorTexture {
  public:
    virtual ~FSolidColorTexture(void);
    virtual int GetRevision(void);
    virtual int GetWidth(void);
    virtual int GetHeight(void);
    virtual int GetFirstMip(void);
    virtual int GetNumMips(void);
    virtual enum ETextureFormat GetFormat(void);
    virtual enum ETexClampMode GetUClamp(void);
    virtual enum ETexClampMode GetVClamp(void);
    virtual void * GetRawTextureData(int);
    virtual unsigned long GetTextureData(int,void *,int,enum ETextureFormat);
    virtual void UnloadRawTextureData(int);
    virtual class UTexture * GetUTexture(void);
    virtual int GetMaxMipLOD(void)const ;
    FSolidColorTexture(class FSolidColorTexture const &);
    FSolidColorTexture(class FColor);
    class FSolidColorTexture & operator=(class FSolidColorTexture const &);
};

//------------------------------------------------------------------------------
//  FSoundData
//------------------------------------------------------------------------------

class DLL_IMPORT FSoundData {
  public:
    virtual ~FSoundData(void);
    FSoundData(class FSoundData const &);
    FSoundData(class USound *);
    class FSoundData & operator=(class FSoundData const &);
    float GetPeriod(void);
    void Load(void);
};

//------------------------------------------------------------------------------
//  FSoundSource
//------------------------------------------------------------------------------

class DLL_IMPORT FSoundSource {
  public:
    virtual ~FSoundSource(void);
    virtual void Init(class AActor *,int,class USound *,class FVector,float,float,float,int,float);
    virtual int Update(float);
    virtual void UpdateRadii(void);
    virtual void UpdatePriority(void);
    virtual void Play(void);
    virtual void Stop(void);
    virtual void Pause(void);
    virtual int IsPlaying(void);
    virtual int IsPaused(void);
    virtual int IsStopped(void);
    virtual int IsFinished(float);
    virtual float GetDuration(void);
    virtual int Seek(float);
    virtual void DumpInfo(class FString &);
    FSoundSource(class FSoundSource const &);
    FSoundSource(class UAudioSubsystem *);
    class FSoundSource & operator=(class FSoundSource const &);
    int UpdateBase(float);
};

//------------------------------------------------------------------------------
//  FStatGraph
//------------------------------------------------------------------------------

class DLL_IMPORT FStatGraph {
  public:
    FStatGraph(class FStatGraph const &);
    FStatGraph(void);
    ~FStatGraph(void);
    class FStatGraph & operator=(class FStatGraph const &);
    void AddDataPoint(class FString,float,int);
    void AddLine(class FString,class FColor,float,float);
    void AddLineAutoRange(class FString,class FColor);
    int Exec(unsigned short const *,class FOutputDevice &);
    void Render(class UViewport *,class FRenderInterface *);
    void Reset(void);
};

//------------------------------------------------------------------------------
//  FStatGraphLine
//------------------------------------------------------------------------------

class DLL_IMPORT FStatGraphLine {
  public:
    FStatGraphLine(class FStatGraphLine const &);
    FStatGraphLine(void);
    ~FStatGraphLine(void);
    class FStatGraphLine & operator=(class FStatGraphLine const &);
    int operator==(class FStatGraphLine const &)const ;
};

//------------------------------------------------------------------------------
//  FStaticCubemap
//------------------------------------------------------------------------------

class DLL_IMPORT FStaticCubemap {
  public:
    virtual ~FStaticCubemap(void);
    virtual int GetRevision(void);
    virtual int GetWidth(void);
    virtual int GetHeight(void);
    virtual int GetFirstMip(void);
    virtual int GetNumMips(void);
    virtual enum ETextureFormat GetFormat(void);
    virtual enum ETexClampMode GetUClamp(void);
    virtual enum ETexClampMode GetVClamp(void);
    virtual class FTexture * GetFace(int);
    virtual int IsDynamic(void);
    FStaticCubemap(class FStaticCubemap const &);
    FStaticCubemap(class UCubemap *);
    class FStaticCubemap & operator=(class FStaticCubemap const &);
};

//------------------------------------------------------------------------------
//  FStaticLightMapTexture
//------------------------------------------------------------------------------

class DLL_IMPORT FStaticLightMapTexture {
  public:
    virtual ~FStaticLightMapTexture(void);
    virtual int GetRevision(void);
    virtual int GetWidth(void);
    virtual int GetHeight(void);
    virtual int GetFirstMip(void);
    virtual int GetNumMips(void);
    virtual enum ETextureFormat GetFormat(void);
    virtual enum ETexClampMode GetUClamp(void);
    virtual enum ETexClampMode GetVClamp(void);
    virtual void * GetRawTextureData(int);
    virtual unsigned long GetTextureData(int,void *,int,enum ETextureFormat);
    virtual void UnloadRawTextureData(int);
    virtual class UTexture * GetUTexture(void);
    virtual int GetMaxMipLOD(void)const ;
    FStaticLightMapTexture(class FStaticLightMapTexture const &);
    FStaticLightMapTexture(void);
    class FStaticLightMapTexture & operator=(class FStaticLightMapTexture const &);
    friend class FArchive & CDECL operator<<(class FArchive &,class FStaticLightMapTexture &);
};

//------------------------------------------------------------------------------
//  FStaticMeshActorVertexStream
//------------------------------------------------------------------------------

class DLL_IMPORT FStaticMeshActorVertexStream {
  public:
    virtual ~FStaticMeshActorVertexStream(void);
    virtual int GetRevision(void);
    virtual int UpdateCache(class URenderDevice *,int);
    virtual int GetStride(void);
    virtual int GetSize(void);
    virtual int GetComponents(struct FVertexComponent *);
    virtual void GetStreamData(void *);
    virtual void GetRawStreamData(void * *,int);
    FStaticMeshActorVertexStream(class FStaticMeshActorVertexStream const &);
    FStaticMeshActorVertexStream(class AActor const *);
    class FStaticMeshActorVertexStream & operator=(class FStaticMeshActorVertexStream const &);
};

//------------------------------------------------------------------------------
//  FStaticMeshBatch
//------------------------------------------------------------------------------

class DLL_IMPORT FStaticMeshBatch {
  public:
    FStaticMeshBatch(class FStaticMeshBatch const &);
    FStaticMeshBatch(class UMaterial *,class AActor *,int);
    ~FStaticMeshBatch(void);
    class FStaticMeshBatch & operator=(class FStaticMeshBatch const &);
    int AddElement(class AActor *,int,unsigned short &,int &);
    static bool CDECL IsUnchainable(int);
    static class TArray<bool> IsUnchainableArray;
    void PrepareElements(void);
    static void CDECL ResetUnchainable(void);
    static void CDECL SetAsUnchainable(int);
    static class TArray<bool> & CDECL UnchainableArray(void);
};

//------------------------------------------------------------------------------
//  FStaticMeshBatchIndexBuffer
//------------------------------------------------------------------------------

class DLL_IMPORT FStaticMeshBatchIndexBuffer {
  public:
    virtual ~FStaticMeshBatchIndexBuffer(void);
    virtual int GetRevision(void);
    virtual int GetSize(void);
    virtual void GetContents(void *);
    virtual int GetIndexSize(void);
    FStaticMeshBatchIndexBuffer(class FStaticMeshBatchIndexBuffer const &);
    FStaticMeshBatchIndexBuffer(void);
    class FStaticMeshBatchIndexBuffer & operator=(class FStaticMeshBatchIndexBuffer const &);
};

//------------------------------------------------------------------------------
//  FStaticMeshBatchNormalVertex
//------------------------------------------------------------------------------

struct DLL_IMPORT FStaticMeshBatchNormalVertex {
  public:
    FStaticMeshBatchNormalVertex(void);
    struct FStaticMeshBatchNormalVertex & operator=(struct FStaticMeshBatchNormalVertex const &);
};

//------------------------------------------------------------------------------
//  FStaticMeshBatchSimpleVertex
//------------------------------------------------------------------------------

struct DLL_IMPORT FStaticMeshBatchSimpleVertex {
  public:
    FStaticMeshBatchSimpleVertex(void);
    struct FStaticMeshBatchSimpleVertex & operator=(struct FStaticMeshBatchSimpleVertex const &);
};

//------------------------------------------------------------------------------
//  FStaticMeshBatchVertex
//------------------------------------------------------------------------------

struct DLL_IMPORT FStaticMeshBatchVertex {
  public:
    FStaticMeshBatchVertex(void);
    struct FStaticMeshBatchVertex & operator=(struct FStaticMeshBatchVertex const &);
};

//------------------------------------------------------------------------------
//  FStaticMeshBatchVertexStream
//------------------------------------------------------------------------------

class DLL_IMPORT FStaticMeshBatchVertexStream {
  public:
    virtual ~FStaticMeshBatchVertexStream(void);
    virtual int GetRevision(void);
    virtual int GetStride(void);
    virtual int GetSize(void);
    virtual int GetComponents(struct FVertexComponent *);
    virtual void GetStreamData(void *);
    virtual void GetRawStreamData(void * *,int);
    FStaticMeshBatchVertexStream(class FStaticMeshBatchVertexStream const &);
    FStaticMeshBatchVertexStream(class UMaterial *,int,int);
    class FStaticMeshBatchVertexStream & operator=(class FStaticMeshBatchVertexStream const &);
};

//------------------------------------------------------------------------------
//  FStaticMeshCollisionNode
//------------------------------------------------------------------------------

struct DLL_IMPORT FStaticMeshCollisionNode {
  public:
    FStaticMeshCollisionNode(void);
    struct FStaticMeshCollisionNode & operator=(struct FStaticMeshCollisionNode const &);
    friend class FArchive & CDECL operator<<(class FArchive &,struct FStaticMeshCollisionNode &);
};

//------------------------------------------------------------------------------
//  FStaticMeshCollisionTriangle
//------------------------------------------------------------------------------

struct DLL_IMPORT FStaticMeshCollisionTriangle {
  public:
    FStaticMeshCollisionTriangle(struct FStaticMeshCollisionTriangle const &);
    FStaticMeshCollisionTriangle(void);
    struct FStaticMeshCollisionTriangle & operator=(struct FStaticMeshCollisionTriangle const &);
    friend class FArchive & CDECL operator<<(class FArchive &,struct FStaticMeshCollisionTriangle &);
};

//------------------------------------------------------------------------------
//  FStaticMeshColorStream
//------------------------------------------------------------------------------

class DLL_IMPORT FStaticMeshColorStream {
  public:
    virtual ~FStaticMeshColorStream(void);
    virtual int GetComponents(struct FVertexComponent *);
    FStaticMeshColorStream(class FStaticMeshColorStream const &);
    FStaticMeshColorStream(void);
    class FStaticMeshColorStream & operator=(class FStaticMeshColorStream const &);
};

//------------------------------------------------------------------------------
//  FStaticMeshMaterial
//------------------------------------------------------------------------------

class DLL_IMPORT FStaticMeshMaterial {
  public:
    FStaticMeshMaterial(class UMaterial *);
    class FStaticMeshMaterial & operator=(class FStaticMeshMaterial const &);
    friend class FArchive & CDECL operator<<(class FArchive &,class FStaticMeshMaterial &);
};

//------------------------------------------------------------------------------
//  FStaticMeshSection
//------------------------------------------------------------------------------

class DLL_IMPORT FStaticMeshSection {
  public:
    FStaticMeshSection(void);
    class FStaticMeshSection & operator=(class FStaticMeshSection const &);
    friend class FArchive & CDECL operator<<(class FArchive &,class FStaticMeshSection &);
};

//------------------------------------------------------------------------------
//  FStaticMeshTriangle
//------------------------------------------------------------------------------

struct DLL_IMPORT FStaticMeshTriangle {
  public:
    FStaticMeshTriangle(void);
    struct FStaticMeshTriangle & operator=(struct FStaticMeshTriangle const &);
};

//------------------------------------------------------------------------------
//  FStaticMeshUVStream
//------------------------------------------------------------------------------

class DLL_IMPORT FStaticMeshUVStream {
  public:
    virtual ~FStaticMeshUVStream(void);
    virtual int GetRevision(void);
    virtual int GetStride(void);
    virtual int GetSize(void);
    virtual int GetComponents(struct FVertexComponent *);
    virtual void GetStreamData(void *);
    virtual void GetRawStreamData(void * *,int);
    FStaticMeshUVStream(class FStaticMeshUVStream const &);
    FStaticMeshUVStream(void);
    class FStaticMeshUVStream & operator=(class FStaticMeshUVStream const &);
    friend class FArchive & CDECL operator<<(class FArchive &,class FStaticMeshUVStream &);
};

//------------------------------------------------------------------------------
//  FStaticMeshVertex
//------------------------------------------------------------------------------

struct DLL_IMPORT FStaticMeshVertex {
  public:
    FStaticMeshVertex(void);
    struct FStaticMeshVertex & operator=(struct FStaticMeshVertex const &);
    friend class FArchive & CDECL operator<<(class FArchive &,struct FStaticMeshVertex &);
};

//------------------------------------------------------------------------------
//  FStaticMeshVertexStream
//------------------------------------------------------------------------------

class DLL_IMPORT FStaticMeshVertexStream {
  public:
    virtual ~FStaticMeshVertexStream(void);
    virtual int GetRevision(void);
    virtual int GetStride(void);
    virtual int GetSize(void);
    virtual int GetComponents(struct FVertexComponent *);
    virtual void GetStreamData(void *);
    virtual void GetRawStreamData(void * *,int);
    FStaticMeshVertexStream(class FStaticMeshVertexStream const &);
    FStaticMeshVertexStream(void);
    class FStaticMeshVertexStream & operator=(class FStaticMeshVertexStream const &);
    friend class FArchive & CDECL operator<<(class FArchive &,class FStaticMeshVertexStream &);
};

//------------------------------------------------------------------------------
//  FStaticProjectorInfo
//------------------------------------------------------------------------------

struct DLL_IMPORT FStaticProjectorInfo {
  public:
    FStaticProjectorInfo(struct FStaticProjectorInfo const &);
    FStaticProjectorInfo(void);
    ~FStaticProjectorInfo(void);
    struct FStaticProjectorInfo & operator=(struct FStaticProjectorInfo const &);
    friend class FArchive & CDECL operator<<(class FArchive &,struct FStaticProjectorInfo *);
};

//------------------------------------------------------------------------------
//  FStaticProjectorVertex
//------------------------------------------------------------------------------

struct DLL_IMPORT FStaticProjectorVertex {
  public:
    FStaticProjectorVertex(void);
    struct FStaticProjectorVertex & operator=(struct FStaticProjectorVertex const &);
};

//------------------------------------------------------------------------------
//  FStaticSBLightMapTexture
//------------------------------------------------------------------------------

class DLL_IMPORT FStaticSBLightMapTexture {
  public:
    virtual ~FStaticSBLightMapTexture(void);
    virtual int GetRevision(void);
    virtual int UpdateCache(class URenderDevice *,int);
    virtual int GetWidth(void);
    virtual int GetHeight(void);
    virtual int GetFirstMip(void);
    virtual int GetNumMips(void);
    virtual enum ETextureFormat GetFormat(void);
    virtual enum ETexClampMode GetUClamp(void);
    virtual enum ETexClampMode GetVClamp(void);
    virtual void * GetRawTextureData(int);
    virtual int AGetRawTextureData(int);
    virtual unsigned long GetTextureData(int,void *,int,enum ETextureFormat);
    virtual void UnloadRawTextureData(int);
    virtual class UTexture * GetUTexture(void);
    virtual int GetMaxMipLOD(void)const ;
    FStaticSBLightMapTexture(class FStaticSBLightMapTexture const &);
    FStaticSBLightMapTexture(void);
    class FStaticSBLightMapTexture & operator=(class FStaticSBLightMapTexture const &);
    friend class FArchive & CDECL operator<<(class FArchive &,class FStaticSBLightMapTexture &);
};

//------------------------------------------------------------------------------
//  FStaticTexture
//------------------------------------------------------------------------------

class DLL_IMPORT FStaticTexture {
  public:
    virtual ~FStaticTexture(void);
    virtual int GetRevision(void);
    virtual int UpdateCache(class URenderDevice *,int);
    virtual int GetWidth(void);
    virtual int GetHeight(void);
    virtual int GetFirstMip(void);
    virtual int GetNumMips(void);
    virtual enum ETextureFormat GetFormat(void);
    virtual enum ETexClampMode GetUClamp(void);
    virtual enum ETexClampMode GetVClamp(void);
    virtual void * GetRawTextureData(int);
    virtual int AGetRawTextureData(int);
    virtual unsigned long GetTextureData(int,void *,int,enum ETextureFormat);
    virtual void UnloadRawTextureData(int);
    virtual class UTexture * GetUTexture(void);
    virtual int GetMaxMipLOD(void)const ;
    FStaticTexture(class FStaticTexture const &);
    FStaticTexture(class UTexture *);
    class FStaticTexture & operator=(class FStaticTexture const &);
};

//------------------------------------------------------------------------------
//  FStats
//------------------------------------------------------------------------------

class DLL_IMPORT FStats {
  public:
    FStats(class FStats const &);
    FStats(void);
    ~FStats(void);
    class FStats & operator=(class FStats const &);
    void CalcMovingAverage(int,unsigned long);
    void Clear(void);
    int RegisterStats(enum EStatsType,enum EStatsDataType,class FString,class FString,enum EStatsUnit);
    void Render(class UViewport *,class UEngine *);
    void UpdateString(class FString &,int);
};

//------------------------------------------------------------------------------
//  FTempLineBatcher
//------------------------------------------------------------------------------

class DLL_IMPORT FTempLineBatcher {
  public:
    FTempLineBatcher(class FTempLineBatcher const &);
    FTempLineBatcher(void);
    ~FTempLineBatcher(void);
    class FTempLineBatcher & operator=(class FTempLineBatcher const &);
    void AddBox(class FBox,class FColor);
    void AddCircle(class FVector,class FVector,class FVector,class FColor,float,int);
    void AddLine(class FVector,class FVector,class FColor);
    void AddSphere(class FVector,class FColor,float,int);
    void AddStayingLine(class FVector,class FVector,class FColor);
    void AddTemporaryArrow(class FVector,class FRotator,class FColor,int,float);
    void AddTemporaryCapsule(class FCoords &,float,float,class FColor,int,bool);
    void AddTemporaryCircle(class FVector,class FVector,class FVector,class FColor,float,int,int);
    void AddTemporaryCylinder(class FCoords &,float,float,class FColor,int);
    void AddTemporaryLine(class FVector,class FVector,class FColor,int);
    void AddTemporarySphere(class FVector,class FColor,float,int,int);
    void ClearStayingLines(void);
    void ClearTemporaryArrows(void);
    void ClearTemporaryCapsules(void);
    void ClearTemporaryCircles(void);
    void ClearTemporaryCylinders(void);
    void ClearTemporaryLines(void);
    void ClearTemporarySpheres(void);
    void Render(class FRenderInterface *,int);
};

//------------------------------------------------------------------------------
//  FTerrainTools
//------------------------------------------------------------------------------

class DLL_IMPORT FTerrainTools {
  public:
    virtual ~FTerrainTools(void);
    FTerrainTools(class FTerrainTools const &);
    FTerrainTools(void);
    class FTerrainTools & operator=(class FTerrainTools const &);
    void AdjustAlignedActors(void);
    void CleanupDestroyed(void);
    void FindActorsToAlign(void);
    int GetAdjust(void);
    class ATerrainInfo * GetCurrentTerrainInfo(void);
    class FString GetExecFromBrushName(class FString &);
    int GetInnerRadius(void);
    int GetMirrorAxis(void);
    int GetOuterRadius(void);
    int GetStrength(void);
    void Init(void);
    void SetAdjust(int);
    void SetCurrentBrush(int);
    void SetCurrentTerrainInfo(class ATerrainInfo *);
    void SetInnerRadius(int);
    void SetMirrorAxis(int);
    void SetOuterRadius(int);
    void SetStrength(int);
};

//------------------------------------------------------------------------------
//  FTriangleBatcher
//------------------------------------------------------------------------------

class DLL_IMPORT FTriangleBatcher {
  public:
    virtual ~FTriangleBatcher(void);
    virtual int GetRevision(void);
    virtual int GetStride(void);
    virtual int GetSize(void);
    virtual int GetComponents(struct FVertexComponent *);
    virtual void GetStreamData(void *);
    virtual void GetRawStreamData(void * *,int);
    FTriangleBatcher(class FTriangleBatcher const &);
    FTriangleBatcher(class FRenderInterface *,int);
    class FTriangleBatcher & operator=(class FTriangleBatcher const &);
    void DrawConvexVolume(class FConvexVolume,class FColor);
    void DrawTriangle(class FVector,class FVector,class FVector,class FColor);
    void Flush(unsigned long);
};

//------------------------------------------------------------------------------
//  FTriangleVertex
//------------------------------------------------------------------------------

class DLL_IMPORT FTriangleVertex {
  public:
    FTriangleVertex(class FVector,class FColor);
    FTriangleVertex(void);
    class FTriangleVertex & operator=(class FTriangleVertex const &);
};

//------------------------------------------------------------------------------
//  FVideoMixer
//------------------------------------------------------------------------------

class DLL_IMPORT FVideoMixer {
  public:
    virtual void Open(unsigned short const *);
    virtual void Release(void);
    virtual void Init(class URenderDevice *);
    virtual void Play(unsigned int);
    virtual void Pause(void);
    virtual void Stop(bool);
    virtual bool IsPlaying(void)const ;
    virtual void SetAlpha(float);
    virtual void ToggleFullScreen(void);
    virtual void Tick(void);
    virtual void SetVolume(float);
    virtual void Resize(int,int);
    FVideoMixer(class FVideoMixer const &);
    FVideoMixer(void);
    class FVideoMixer & operator=(class FVideoMixer const &);
};

//------------------------------------------------------------------------------
//  FWarpZoneSceneNode
//------------------------------------------------------------------------------

class DLL_IMPORT FWarpZoneSceneNode {
  public:
    virtual ~FWarpZoneSceneNode(void);
    virtual class FWarpZoneSceneNode * GetWarpZoneSceneNode(void);
    FWarpZoneSceneNode(class FWarpZoneSceneNode const &);
    FWarpZoneSceneNode(class FLevelSceneNode *,class AWarpZoneInfo *);
    class FWarpZoneSceneNode & operator=(class FWarpZoneSceneNode const &);
};

//------------------------------------------------------------------------------
//  FWaveModInfo
//------------------------------------------------------------------------------

class DLL_IMPORT FWaveModInfo {
  public:
    FWaveModInfo(void);
    class FWaveModInfo & operator=(class FWaveModInfo const &);
    void HalveData(void);
    void HalveReduce16to8(void);
    void NoiseGateFilter(void);
    unsigned long Pad16Bit(unsigned long);
    int ReadWaveInfo(class TArray<unsigned char> &);
    void Reduce16to8(void);
    int UpdateWaveData(class TArray<unsigned char> &);
};

//------------------------------------------------------------------------------
//  FZoneRenderInfo
//------------------------------------------------------------------------------

struct DLL_IMPORT FZoneRenderInfo {
  public:
    FZoneRenderInfo(struct FZoneRenderInfo const &);
    FZoneRenderInfo(void);
    ~FZoneRenderInfo(void);
    struct FZoneRenderInfo & operator=(struct FZoneRenderInfo const &);
};

//------------------------------------------------------------------------------
//  HActor
//------------------------------------------------------------------------------

struct DLL_IMPORT HActor {
  public:
    virtual ~HActor(void);
    virtual unsigned short const * GetName(void)const ;
    virtual int IsA(unsigned short const *)const ;
    virtual class AActor * GetActor(void);
    HActor(struct HActor const &);
    HActor(class AActor *);
    struct HActor & operator=(struct HActor const &);
};

//------------------------------------------------------------------------------
//  HBspSurf
//------------------------------------------------------------------------------

struct DLL_IMPORT HBspSurf {
  public:
    virtual ~HBspSurf(void);
    virtual unsigned short const * GetName(void)const ;
    virtual int IsA(unsigned short const *)const ;
    HBspSurf(struct HBspSurf const &);
    HBspSurf(int);
    struct HBspSurf & operator=(struct HBspSurf const &);
};

//------------------------------------------------------------------------------
//  HCoords
//------------------------------------------------------------------------------

struct DLL_IMPORT HCoords {
  public:
    virtual ~HCoords(void);
    virtual unsigned short const * GetName(void)const ;
    virtual int IsA(unsigned short const *)const ;
    HCoords(struct HCoords const &);
    HCoords(class FCameraSceneNode *);
    struct HCoords & operator=(struct HCoords const &);
};

//------------------------------------------------------------------------------
//  HHitProxy
//------------------------------------------------------------------------------

struct DLL_IMPORT HHitProxy {
  public:
    virtual ~HHitProxy(void);
    virtual unsigned short const * GetName(void)const ;
    virtual int IsA(unsigned short const *)const ;
    virtual void Click(struct FHitCause const &);
    virtual class AActor * GetActor(void);
    HHitProxy(struct HHitProxy const &);
    HHitProxy(void);
    struct HHitProxy & operator=(struct HHitProxy const &);
};

//------------------------------------------------------------------------------
//  HMaterialTree
//------------------------------------------------------------------------------

struct DLL_IMPORT HMaterialTree {
  public:
    virtual ~HMaterialTree(void);
    virtual unsigned short const * GetName(void)const ;
    virtual int IsA(unsigned short const *)const ;
    HMaterialTree(struct HMaterialTree const &);
    HMaterialTree(class UMaterial *,unsigned long);
    struct HMaterialTree & operator=(struct HMaterialTree const &);
};

//------------------------------------------------------------------------------
//  HMatineeAction
//------------------------------------------------------------------------------

struct DLL_IMPORT HMatineeAction {
  public:
    virtual ~HMatineeAction(void);
    virtual unsigned short const * GetName(void)const ;
    virtual int IsA(unsigned short const *)const ;
    HMatineeAction(struct HMatineeAction const &);
    HMatineeAction(class ASceneManager *,class UMatAction *);
    struct HMatineeAction & operator=(struct HMatineeAction const &);
};

//------------------------------------------------------------------------------
//  HMatineeScene
//------------------------------------------------------------------------------

struct DLL_IMPORT HMatineeScene {
  public:
    virtual ~HMatineeScene(void);
    virtual unsigned short const * GetName(void)const ;
    virtual int IsA(unsigned short const *)const ;
    HMatineeScene(struct HMatineeScene const &);
    HMatineeScene(class ASceneManager *);
    struct HMatineeScene & operator=(struct HMatineeScene const &);
};

//------------------------------------------------------------------------------
//  HMatineeSubAction
//------------------------------------------------------------------------------

struct DLL_IMPORT HMatineeSubAction {
  public:
    virtual ~HMatineeSubAction(void);
    virtual unsigned short const * GetName(void)const ;
    virtual int IsA(unsigned short const *)const ;
    HMatineeSubAction(struct HMatineeSubAction const &);
    HMatineeSubAction(class UMatSubAction *,class UMatAction *);
    struct HMatineeSubAction & operator=(struct HMatineeSubAction const &);
};

//------------------------------------------------------------------------------
//  HMatineeTimePath
//------------------------------------------------------------------------------

struct DLL_IMPORT HMatineeTimePath {
  public:
    virtual ~HMatineeTimePath(void);
    virtual unsigned short const * GetName(void)const ;
    virtual int IsA(unsigned short const *)const ;
    HMatineeTimePath(struct HMatineeTimePath const &);
    HMatineeTimePath(class ASceneManager *);
    struct HMatineeTimePath & operator=(struct HMatineeTimePath const &);
};

//------------------------------------------------------------------------------
//  HTerrain
//------------------------------------------------------------------------------

struct DLL_IMPORT HTerrain {
  public:
    virtual ~HTerrain(void);
    virtual unsigned short const * GetName(void)const ;
    virtual int IsA(unsigned short const *)const ;
    virtual class AActor * GetActor(void);
    HTerrain(struct HTerrain const &);
    HTerrain(class ATerrainInfo *);
    struct HTerrain & operator=(struct HTerrain const &);
};

//------------------------------------------------------------------------------
//  HTerrainToolLayer
//------------------------------------------------------------------------------

struct DLL_IMPORT HTerrainToolLayer {
  public:
    virtual ~HTerrainToolLayer(void);
    virtual unsigned short const * GetName(void)const ;
    virtual int IsA(unsigned short const *)const ;
    HTerrainToolLayer(struct HTerrainToolLayer const &);
    HTerrainToolLayer(class ATerrainInfo *,int,class UTexture *);
    struct HTerrainToolLayer & operator=(struct HTerrainToolLayer const &);
};

//------------------------------------------------------------------------------
//  ISBLightMapTriangleProvider
//------------------------------------------------------------------------------

class DLL_IMPORT ISBLightMapTriangleProvider {
  public:
    virtual ~ISBLightMapTriangleProvider(void);
    ISBLightMapTriangleProvider(class ISBLightMapTriangleProvider const &);
    ISBLightMapTriangleProvider(void);
    class ISBLightMapTriangleProvider & operator=(class ISBLightMapTriangleProvider const &);
};

//------------------------------------------------------------------------------
//  SBActorsPool
//------------------------------------------------------------------------------

class DLL_IMPORT SBActorsPool {
  protected:
    virtual int IsMatching(class AActor const *)const ;
    virtual void OnMatch(class AActor *);
    virtual void Initialize(class SBRenderList *);
    virtual void PostRender(void);
    virtual void Dispose(void);
  public:
    SBActorsPool(class SBActorsPool const &);
    SBActorsPool(void);
    class SBActorsPool & operator=(class SBActorsPool const &);
};

//------------------------------------------------------------------------------
//  SBAnimationDescriptor
//------------------------------------------------------------------------------

class DLL_IMPORT SBAnimationDescriptor {
  public:
    SBAnimationDescriptor(class SBAnimationDescriptor const &);
    SBAnimationDescriptor(void);
    ~SBAnimationDescriptor(void);
    class SBAnimationDescriptor & operator=(class SBAnimationDescriptor const &);
    bool operator==(class SBAnimationDescriptor const &)const ;
    bool ActionFlagsEqual(class SBAnimationDescriptor const &)const ;
    bool ActionFlagsEqualTo(class TArray<unsigned long> const &)const ;
    void ActionFlagsToString(class FString &)const ;
    void CleanUp(void);
    void ClearActionFlags(void);
    void ClearDirectionFlags(void);
    void ClearWeaponFlags(void);
    bool DirectionFlagsEqual(class SBAnimationDescriptor const &)const ;
    bool DirectionFlagsEqualTo(class TArray<unsigned long> const &)const ;
    void DirectionFlagsToString(class FString &)const ;
    void DumpToString(class FString &)const ;
    bool GetActionFlag(unsigned long)const ;
    void GetActionFlags(class TArray<int> &)const ;
    void GetActionFlags(class TArray<unsigned long> &)const ;
    void GetActionFlags(class BitArray &)const ;
    void GetActionString(unsigned long,class FString &)const ;
    bool GetDirectionFlag(unsigned long)const ;
    void GetDirectionFlags(class TArray<int> &)const ;
    void GetDirectionFlags(class TArray<unsigned long> &)const ;
    void GetDirectionFlags(class BitArray &)const ;
    void GetDirectionString(unsigned long,class FString &)const ;
    int GetVariationNumber(void)const ;
    void GetWeaponFlags(class TArray<int> &)const ;
    void GetWeaponFlags(class TArray<unsigned long> &)const ;
    void GetWeaponFlags(class BitArray &)const ;
    void GetWeaponString(unsigned long,class FString &)const ;
    bool GetWeaponTypeFlag(unsigned long)const ;
    bool IsNull(void)const ;
    bool IsVariation(void)const ;
    bool IsVariationOf(class SBAnimationDescriptor const &)const ;
    void SetActionFlag(unsigned long);
    void SetActionFlags(class TArray<int> const &);
    void SetActionFlags(class TArray<unsigned long> const &);
    void SetDirectionFlag(unsigned long);
    void SetToNull(void);
    void SetVariationNumber(int);
    void SetWeaponTypeFlag(unsigned long);
    void UnsetActionFlag(unsigned long);
    void UnsetDirectionFlag(unsigned long);
    void UnsetWeaponTypeFlag(unsigned long);
    bool WeaponFlagsCompatibleWith(class SBAnimationDescriptor const &)const ;
    bool WeaponFlagsEqual(class SBAnimationDescriptor const &)const ;
    void WeaponFlagsToString(class FString &)const ;
    bool WeaponTypeFlagsEqualTo(class TArray<unsigned long> const &)const ;
};

//------------------------------------------------------------------------------
//  SBBatchBasePool
//------------------------------------------------------------------------------

class DLL_IMPORT SBBatchBasePool {
  public:
    SBBatchBasePool(class SBBatchBasePool const &);
    SBBatchBasePool(void);
    class SBBatchBasePool & operator=(class SBBatchBasePool const &);
};

//------------------------------------------------------------------------------
//  SBBatchRenderPool
//------------------------------------------------------------------------------

class DLL_IMPORT SBBatchRenderPool {
  protected:
    virtual int IsMatching(class AActor const *)const ;
    virtual void OnMatch(class AActor *);
    virtual void Initialize(class SBRenderList *);
  public:
    SBBatchRenderPool(class SBBatchRenderPool const &);
    SBBatchRenderPool(void);
    class SBBatchRenderPool & operator=(class SBBatchRenderPool const &);
  protected:
    void RenderBatches(void);
};

//------------------------------------------------------------------------------
//  SBBatchVertexLitPool
//------------------------------------------------------------------------------

class DLL_IMPORT SBBatchVertexLitPool {
  protected:
    virtual void OnMatch(class AActor *);
    virtual void Dispose(void);
  public:
    SBBatchVertexLitPool(class SBBatchVertexLitPool const &);
    SBBatchVertexLitPool(void);
    class SBBatchVertexLitPool & operator=(class SBBatchVertexLitPool const &);
};

//------------------------------------------------------------------------------
//  SBBunchRenderPool
//------------------------------------------------------------------------------

class DLL_IMPORT SBBunchRenderPool {
  protected:
    virtual int IsMatching(class AActor const *)const ;
    virtual void OnMatch(class AActor *);
  public:
    SBBunchRenderPool(class SBBunchRenderPool const &);
    SBBunchRenderPool(void);
    class SBBunchRenderPool & operator=(class SBBunchRenderPool const &);
};

//------------------------------------------------------------------------------
//  SBLitPassPool
//------------------------------------------------------------------------------

class DLL_IMPORT SBLitPassPool {
  protected:
    virtual int IsMatching(class AActor const *)const ;
    virtual void OnMatch(class AActor *);
    virtual void Initialize(class SBRenderList *);
    virtual void PreRender(void);
    virtual void RenderPool(void);
    virtual void PostRender(void);
    virtual int GetID(void);
    virtual void Dispose(void);
  public:
    SBLitPassPool(class SBLitPassPool const &);
    SBLitPassPool(void);
    class SBLitPassPool & operator=(class SBLitPassPool const &);
  private:
    void DrawAllSections(void)const ;
    void DrawSection(class UStaticMesh *,int,class UMaterial *)const ;
};

//------------------------------------------------------------------------------
//  SBRenderList
//------------------------------------------------------------------------------

class DLL_IMPORT SBRenderList {
  public:
    SBRenderList(void);
    class SBRenderList & operator=(class SBRenderList const &);
    void AddPool(class SBRenderPool *);
    void DisposePools(void);
    void FillPools(class AActor *);
    class FRenderInterface & GetRenderInterface(void)const ;
    class FLevelSceneNode * GetSceneNode(void)const ;
    void Initialize(class FLevelSceneNode *,class FRenderInterface *);
    void PushScratchActor(struct FScratchData *);
    int RenderPools(void);
};

//------------------------------------------------------------------------------
//  SBRenderPool
//------------------------------------------------------------------------------

class DLL_IMPORT SBRenderPool {
  protected:
    virtual void OnMatch(class AActor *);
  public:
    virtual void Initialize(class SBRenderList *);
    SBRenderPool(class SBRenderPool const &);
    SBRenderPool(void);
    class SBRenderPool & operator=(class SBRenderPool const &);
    int AddActor(class AActor *);
    class SBRenderList & GetContainer(void)const ;
    class ULevel * GetLevel(void)const ;
    class FRenderInterface & GetRenderInterface(void)const ;
    class FLevelSceneNode * GetSceneNode(void)const ;
    int NumActorsMached(void)const ;
    void PushActor(class AActor *);
    void SetRenderInterface(class FRenderInterface *);
};

//------------------------------------------------------------------------------
//  SBSolidActorsPool
//------------------------------------------------------------------------------

class DLL_IMPORT SBSolidActorsPool {
  protected:
    virtual int IsMatching(class AActor const *)const ;
    virtual void PreRender(void);
    virtual void RenderPool(void);
    virtual int GetID(void);
  public:
    SBSolidActorsPool(class SBSolidActorsPool const &);
    SBSolidActorsPool(void);
    class SBSolidActorsPool & operator=(class SBSolidActorsPool const &);
};

//------------------------------------------------------------------------------
//  SBSolidBatchBasePool
//------------------------------------------------------------------------------

class DLL_IMPORT SBSolidBatchBasePool {
  protected:
    virtual int IsMatching(class AActor const *)const ;
    virtual void PreRender(void);
    virtual void RenderPool(void);
    virtual void PostRender(void);
    virtual int GetID(void);
    virtual void Dispose(void);
    virtual int SpecialBreakCondition(class AActor *)const ;
    virtual int IsMatchingSection(class AActor *,int)const ;
    virtual void OnSpecialBreakCondition(class AActor *);
    virtual void OnStartChain(class AActor *);
  private:
    virtual void SetMaterial(void);
  public:
    SBSolidBatchBasePool(class SBSolidBatchBasePool const &);
    SBSolidBatchBasePool(void);
    class SBSolidBatchBasePool & operator=(class SBSolidBatchBasePool const &);
};

//------------------------------------------------------------------------------
//  SBSolidBatchVertexLitPool
//------------------------------------------------------------------------------

class DLL_IMPORT SBSolidBatchVertexLitPool {
  protected:
    virtual int IsMatching(class AActor const *)const ;
    virtual void PreRender(void);
    virtual void RenderPool(void);
    virtual void PostRender(void);
    virtual int GetID(void);
    virtual int SpecialBreakCondition(class AActor *)const ;
    virtual int IsMatchingSection(class AActor *,int)const ;
    virtual void OnSpecialBreakCondition(class AActor *);
    virtual void OnStartChain(class AActor *);
  private:
    virtual void SetMaterial(void);
  public:
    SBSolidBatchVertexLitPool(class SBSolidBatchVertexLitPool const &);
    SBSolidBatchVertexLitPool(void);
    class SBSolidBatchVertexLitPool & operator=(class SBSolidBatchVertexLitPool const &);
};

//------------------------------------------------------------------------------
//  SBSolidEmissiveBaseBatchPool
//------------------------------------------------------------------------------

class DLL_IMPORT SBSolidEmissiveBaseBatchPool {
  protected:
    virtual int IsMatching(class AActor const *)const ;
    virtual void Initialize(class SBRenderList *);
    virtual void PreRender(void);
    virtual int GetID(void);
    virtual int SpecialBreakCondition(class AActor *)const ;
    virtual int IsMatchingSection(class AActor *,int)const ;
    virtual void OnStartChain(class AActor *);
  private:
    virtual void SetMaterial(void);
  public:
    SBSolidEmissiveBaseBatchPool(class SBSolidEmissiveBaseBatchPool const &);
    SBSolidEmissiveBaseBatchPool(void);
    class SBSolidEmissiveBaseBatchPool & operator=(class SBSolidEmissiveBaseBatchPool const &);
};

//------------------------------------------------------------------------------
//  SBSolidEmissiveVLBatchPool
//------------------------------------------------------------------------------

class DLL_IMPORT SBSolidEmissiveVLBatchPool {
  protected:
    virtual int IsMatching(class AActor const *)const ;
    virtual void Initialize(class SBRenderList *);
    virtual void PreRender(void);
    virtual int GetID(void);
    virtual int SpecialBreakCondition(class AActor *)const ;
    virtual int IsMatchingSection(class AActor *,int)const ;
    virtual void OnStartChain(class AActor *);
  private:
    virtual void SetMaterial(void);
  public:
    SBSolidEmissiveVLBatchPool(class SBSolidEmissiveVLBatchPool const &);
    SBSolidEmissiveVLBatchPool(void);
    class SBSolidEmissiveVLBatchPool & operator=(class SBSolidEmissiveVLBatchPool const &);
};

//------------------------------------------------------------------------------
//  SBTransActorsPool
//------------------------------------------------------------------------------

class DLL_IMPORT SBTransActorsPool {
  protected:
    virtual int IsMatching(class AActor const *)const ;
    virtual void PreRender(void);
    virtual void RenderPool(void);
    virtual int GetID(void);
  public:
    SBTransActorsPool(class SBTransActorsPool const &);
    SBTransActorsPool(void);
    class SBTransActorsPool & operator=(class SBTransActorsPool const &);
};

//------------------------------------------------------------------------------
//  SBTransBatchBasePool
//------------------------------------------------------------------------------

class DLL_IMPORT SBTransBatchBasePool {
  protected:
    virtual int IsMatching(class AActor const *)const ;
    virtual void Initialize(class SBRenderList *);
    virtual void PreRender(void);
    virtual void RenderPool(void);
    virtual void PostRender(void);
    virtual int GetID(void);
    virtual void Dispose(void);
    virtual int SpecialBreakCondition(class AActor *)const ;
    virtual int IsMatchingSection(class AActor *,int)const ;
    virtual void OnSpecialBreakCondition(class AActor *);
    virtual void OnStartChain(class AActor *);
  public:
    SBTransBatchBasePool(class SBTransBatchBasePool const &);
    SBTransBatchBasePool(void);
    class SBTransBatchBasePool & operator=(class SBTransBatchBasePool const &);
};

//------------------------------------------------------------------------------
//  SBTransBatchVertexLitPool
//------------------------------------------------------------------------------

class DLL_IMPORT SBTransBatchVertexLitPool {
  protected:
    virtual int IsMatching(class AActor const *)const ;
    virtual void PreRender(void);
    virtual void RenderPool(void);
    virtual void PostRender(void);
    virtual int GetID(void);
    virtual int SpecialBreakCondition(class AActor *)const ;
    virtual int IsMatchingSection(class AActor *,int)const ;
    virtual void OnSpecialBreakCondition(class AActor *);
    virtual void OnStartChain(class AActor *);
  private:
    virtual void SetMaterial(void);
  public:
    SBTransBatchVertexLitPool(class SBTransBatchVertexLitPool const &);
    SBTransBatchVertexLitPool(void);
    class SBTransBatchVertexLitPool & operator=(class SBTransBatchVertexLitPool const &);
};

//------------------------------------------------------------------------------
//  SBTransEmissiveVLBatchPool
//------------------------------------------------------------------------------

class DLL_IMPORT SBTransEmissiveVLBatchPool {
  protected:
    virtual int IsMatching(class AActor const *)const ;
    virtual void Initialize(class SBRenderList *);
    virtual int GetID(void);
    virtual int SpecialBreakCondition(class AActor *)const ;
    virtual int IsMatchingSection(class AActor *,int)const ;
    virtual void OnStartChain(class AActor *);
  private:
    virtual void SetMaterial(void);
  public:
    SBTransEmissiveVLBatchPool(class SBTransEmissiveVLBatchPool const &);
    SBTransEmissiveVLBatchPool(void);
    class SBTransEmissiveVLBatchPool & operator=(class SBTransEmissiveVLBatchPool const &);
};

//------------------------------------------------------------------------------
//  UMeshCollisionAggregateGeom
//------------------------------------------------------------------------------

class DLL_IMPORT UMeshCollisionAggregateGeom {
  public:
    UMeshCollisionAggregateGeom(class UMeshCollisionAggregateGeom const &);
    UMeshCollisionAggregateGeom(void);
    ~UMeshCollisionAggregateGeom(void);
    class UMeshCollisionAggregateGeom & operator=(class UMeshCollisionAggregateGeom const &);
    void EmptyElements(void);
    int GetElementCount(void);
};

//------------------------------------------------------------------------------
//  UMeshCollisionBoxElem
//------------------------------------------------------------------------------

class DLL_IMPORT UMeshCollisionBoxElem {
  public:
    UMeshCollisionBoxElem(float);
    UMeshCollisionBoxElem(float,float,float);
    UMeshCollisionBoxElem(void);
    ~UMeshCollisionBoxElem(void);
    class UMeshCollisionBoxElem & operator=(class UMeshCollisionBoxElem const &);
};

//------------------------------------------------------------------------------
//  UMeshCollisionConvexElem
//------------------------------------------------------------------------------

class DLL_IMPORT UMeshCollisionConvexElem {
  public:
    UMeshCollisionConvexElem(class UMeshCollisionConvexElem const &);
    UMeshCollisionConvexElem(void);
    ~UMeshCollisionConvexElem(void);
    class UMeshCollisionConvexElem & operator=(class UMeshCollisionConvexElem const &);
};

//------------------------------------------------------------------------------
//  UMeshCollisionCylinderElem
//------------------------------------------------------------------------------

class DLL_IMPORT UMeshCollisionCylinderElem {
  public:
    UMeshCollisionCylinderElem(float,float);
    UMeshCollisionCylinderElem(void);
    ~UMeshCollisionCylinderElem(void);
    class UMeshCollisionCylinderElem & operator=(class UMeshCollisionCylinderElem const &);
};

//------------------------------------------------------------------------------
//  UMeshCollisionSphereElem
//------------------------------------------------------------------------------

class DLL_IMPORT UMeshCollisionSphereElem {
  public:
    UMeshCollisionSphereElem(float);
    UMeshCollisionSphereElem(void);
    ~UMeshCollisionSphereElem(void);
    class UMeshCollisionSphereElem & operator=(class UMeshCollisionSphereElem const &);
};

//------------------------------------------------------------------------------
//  UTerrainBrush
//------------------------------------------------------------------------------

class DLL_IMPORT UTerrainBrush {
  public:
    virtual ~UTerrainBrush(void);
    virtual void Execute(int);
    virtual void MouseMove(float,float);
    virtual void MouseButtonDown(class UViewport *);
    virtual void MouseButtonUp(class UViewport *);
    virtual class FBox GetRect(void);
    UTerrainBrush(class UTerrainBrush const &);
    UTerrainBrush(void);
    class UTerrainBrush & operator=(class UTerrainBrush const &);
    int BeginPainting(class UTexture * *,class ATerrainInfo * *);
    void EndPainting(class UTexture *,class ATerrainInfo *);
};

//------------------------------------------------------------------------------
//  UTerrainBrushColor
//------------------------------------------------------------------------------

class DLL_IMPORT UTerrainBrushColor {
  public:
    virtual ~UTerrainBrushColor(void);
    virtual void Execute(int);
    UTerrainBrushColor(class UTerrainBrushColor const &);
    UTerrainBrushColor(void);
    class UTerrainBrushColor & operator=(class UTerrainBrushColor const &);
};

//------------------------------------------------------------------------------
//  UTerrainBrushEdgeTurn
//------------------------------------------------------------------------------

class DLL_IMPORT UTerrainBrushEdgeTurn {
  public:
    virtual ~UTerrainBrushEdgeTurn(void);
    virtual void Execute(int);
    virtual class FBox GetRect(void);
    UTerrainBrushEdgeTurn(class UTerrainBrushEdgeTurn const &);
    UTerrainBrushEdgeTurn(void);
    class UTerrainBrushEdgeTurn & operator=(class UTerrainBrushEdgeTurn const &);
};

//------------------------------------------------------------------------------
//  UTerrainBrushFlatten
//------------------------------------------------------------------------------

class DLL_IMPORT UTerrainBrushFlatten {
  public:
    virtual ~UTerrainBrushFlatten(void);
    virtual void Execute(int);
    UTerrainBrushFlatten(class UTerrainBrushFlatten const &);
    UTerrainBrushFlatten(void);
    class UTerrainBrushFlatten & operator=(class UTerrainBrushFlatten const &);
};

//------------------------------------------------------------------------------
//  UTerrainBrushNoise
//------------------------------------------------------------------------------

class DLL_IMPORT UTerrainBrushNoise {
  public:
    virtual ~UTerrainBrushNoise(void);
    virtual void Execute(int);
    UTerrainBrushNoise(class UTerrainBrushNoise const &);
    UTerrainBrushNoise(void);
    class UTerrainBrushNoise & operator=(class UTerrainBrushNoise const &);
};

//------------------------------------------------------------------------------
//  UTerrainBrushPaint
//------------------------------------------------------------------------------

class DLL_IMPORT UTerrainBrushPaint {
  public:
    virtual ~UTerrainBrushPaint(void);
    virtual void Execute(int);
    UTerrainBrushPaint(class UTerrainBrushPaint const &);
    UTerrainBrushPaint(void);
    class UTerrainBrushPaint & operator=(class UTerrainBrushPaint const &);
};

//------------------------------------------------------------------------------
//  UTerrainBrushSelect
//------------------------------------------------------------------------------

class DLL_IMPORT UTerrainBrushSelect {
  public:
    virtual ~UTerrainBrushSelect(void);
    virtual void Execute(int);
    virtual void MouseMove(float,float);
    virtual void MouseButtonDown(class UViewport *);
    virtual class FBox GetRect(void);
    UTerrainBrushSelect(class UTerrainBrushSelect const &);
    UTerrainBrushSelect(void);
    class UTerrainBrushSelect & operator=(class UTerrainBrushSelect const &);
};

//------------------------------------------------------------------------------
//  UTerrainBrushSmooth
//------------------------------------------------------------------------------

class DLL_IMPORT UTerrainBrushSmooth {
  public:
    virtual ~UTerrainBrushSmooth(void);
    virtual void Execute(int);
    UTerrainBrushSmooth(class UTerrainBrushSmooth const &);
    UTerrainBrushSmooth(void);
    class UTerrainBrushSmooth & operator=(class UTerrainBrushSmooth const &);
};

//------------------------------------------------------------------------------
//  UTerrainBrushTexPan
//------------------------------------------------------------------------------

class DLL_IMPORT UTerrainBrushTexPan {
  public:
    virtual ~UTerrainBrushTexPan(void);
    virtual void MouseMove(float,float);
    UTerrainBrushTexPan(class UTerrainBrushTexPan const &);
    UTerrainBrushTexPan(void);
    class UTerrainBrushTexPan & operator=(class UTerrainBrushTexPan const &);
};

//------------------------------------------------------------------------------
//  UTerrainBrushTexRotate
//------------------------------------------------------------------------------

class DLL_IMPORT UTerrainBrushTexRotate {
  public:
    virtual ~UTerrainBrushTexRotate(void);
    virtual void MouseMove(float,float);
    UTerrainBrushTexRotate(class UTerrainBrushTexRotate const &);
    UTerrainBrushTexRotate(void);
    class UTerrainBrushTexRotate & operator=(class UTerrainBrushTexRotate const &);
};

//------------------------------------------------------------------------------
//  UTerrainBrushTexScale
//------------------------------------------------------------------------------

class DLL_IMPORT UTerrainBrushTexScale {
  public:
    virtual ~UTerrainBrushTexScale(void);
    virtual void MouseMove(float,float);
    UTerrainBrushTexScale(class UTerrainBrushTexScale const &);
    UTerrainBrushTexScale(void);
    class UTerrainBrushTexScale & operator=(class UTerrainBrushTexScale const &);
};

//------------------------------------------------------------------------------
//  UTerrainBrushVertexEdit
//------------------------------------------------------------------------------

class DLL_IMPORT UTerrainBrushVertexEdit {
  public:
    virtual ~UTerrainBrushVertexEdit(void);
    UTerrainBrushVertexEdit(class UTerrainBrushVertexEdit const &);
    UTerrainBrushVertexEdit(void);
    class UTerrainBrushVertexEdit & operator=(class UTerrainBrushVertexEdit const &);
};

//------------------------------------------------------------------------------
//  UTerrainBrushVisibility
//------------------------------------------------------------------------------

class DLL_IMPORT UTerrainBrushVisibility {
  public:
    virtual ~UTerrainBrushVisibility(void);
    virtual void Execute(int);
    virtual class FBox GetRect(void);
    UTerrainBrushVisibility(class UTerrainBrushVisibility const &);
    UTerrainBrushVisibility(void);
    class UTerrainBrushVisibility & operator=(class UTerrainBrushVisibility const &);
};

//------------------------------------------------------------------------------
//  FFontCharacter
//------------------------------------------------------------------------------

struct DLL_IMPORT FFontCharacter {
  public:
    struct FFontCharacter & operator=(struct FFontCharacter const &);
};

//------------------------------------------------------------------------------
//  FID3V2TagVersion
//------------------------------------------------------------------------------

struct DLL_IMPORT FID3V2TagVersion {
  public:
    struct FID3V2TagVersion & operator=(struct FID3V2TagVersion const &);
};

//------------------------------------------------------------------------------
//  FPathBuilder
//------------------------------------------------------------------------------

class DLL_IMPORT FPathBuilder {
  public:
    class FPathBuilder & operator=(class FPathBuilder const &);
    void ReviewPaths(class ULevel *);
    int buildPaths(class ULevel *);
    void defineChangedPaths(class ULevel *);
    void definePaths(class ULevel *);
    int removePaths(class ULevel *);
    void undefinePaths(class ULevel *);
  private:
    void FindBlockingNormal(class FVector &);
    void Pass2From(class FVector,class FVector,float);
    void SetPathCollision(int);
    int TestReach(class FVector,class FVector);
    int TestWalk(class FVector,struct FCheckResult,float);
    int ValidNode(class ANavigationPoint *,class AActor *);
    int createPaths(void);
    void getScout(void);
    class ANavigationPoint * newPath(class FVector);
    void testPathsFrom(class FVector);
    void testPathwithRadius(class FVector,float);
};

//------------------------------------------------------------------------------
//  FReachSpec
//------------------------------------------------------------------------------

class DLL_IMPORT FReachSpec {
  public:
    class FReachSpec & operator=(class FReachSpec const &);
};

//------------------------------------------------------------------------------
//  FScratchData
//------------------------------------------------------------------------------

struct DLL_IMPORT FScratchData {
  public:
    struct FScratchData & operator=(struct FScratchData const &);
};

//------------------------------------------------------------------------------
//  FStaticMeshUV
//------------------------------------------------------------------------------

struct DLL_IMPORT FStaticMeshUV {
  public:
    struct FStaticMeshUV & operator=(struct FStaticMeshUV const &);
    friend class FArchive & CDECL operator<<(class FArchive &,struct FStaticMeshUV &);
};

//------------------------------------------------------------------------------
//  FStaticProjectorUV
//------------------------------------------------------------------------------

struct DLL_IMPORT FStaticProjectorUV {
  public:
    struct FStaticProjectorUV & operator=(struct FStaticProjectorUV const &);
};

//------------------------------------------------------------------------------
//  FZoneProperties
//------------------------------------------------------------------------------

class DLL_IMPORT FZoneProperties {
  public:
    class FZoneProperties & operator=(class FZoneProperties const &);
};

//------------------------------------------------------------------------------
//  FGridCell
//------------------------------------------------------------------------------

struct DLL_IMPORT FGridCell {
  public:
    friend class FArchive & CDECL operator<<(class FArchive &,struct FGridCell &);
};

//------------------------------------------------------------------------------
//  FPosNormTexData
//------------------------------------------------------------------------------

struct DLL_IMPORT FPosNormTexData {
  public:
    friend class FArchive & CDECL operator<<(class FArchive &,struct FPosNormTexData &);
};

//------------------------------------------------------------------------------
//  FSkinVertex
//------------------------------------------------------------------------------

struct DLL_IMPORT FSkinVertex {
  public:
    friend class FArchive & CDECL operator<<(class FArchive &,struct FSkinVertex &);
};

//------------------------------------------------------------------------------
//  FTerrainVertex
//------------------------------------------------------------------------------

struct DLL_IMPORT FTerrainVertex {
  public:
    friend class FArchive & CDECL operator<<(class FArchive &,struct FTerrainVertex &);
};

//------------------------------------------------------------------------------
//  FUV2Data
//------------------------------------------------------------------------------

struct DLL_IMPORT FUV2Data {
  public:
    friend class FArchive & CDECL operator<<(class FArchive &,struct FUV2Data &);
};

//------------------------------------------------------------------------------
//  FUntransformedVertex
//------------------------------------------------------------------------------

struct DLL_IMPORT FUntransformedVertex {
  public:
    friend class FArchive & CDECL operator<<(class FArchive &,struct FUntransformedVertex &);
};

//------------------------------------------------------------------------------
//  FkDOP
//------------------------------------------------------------------------------

struct DLL_IMPORT FkDOP {
  public:
    friend class FArchive & CDECL operator<<(class FArchive &,struct FkDOP &);
};

//------------------------------------------------------------------------------
//  FkDOPCollisionTriangle
//------------------------------------------------------------------------------

struct DLL_IMPORT FkDOPCollisionTriangle {
  public:
    friend class FArchive & CDECL operator<<(class FArchive &,struct FkDOPCollisionTriangle &);
};

//------------------------------------------------------------------------------
//  FkDOPNode
//------------------------------------------------------------------------------

struct DLL_IMPORT FkDOPNode {
  public:
    friend class FArchive & CDECL operator<<(class FArchive &,struct FkDOPNode &);
};

//------------------------------------------------------------------------------
//  FkDOPTree
//------------------------------------------------------------------------------

struct DLL_IMPORT FkDOPTree {
  public:
    friend class FArchive & CDECL operator<<(class FArchive &,struct FkDOPTree &);
};

//------------------------------------------------------------------------------
//  FBspNode
//------------------------------------------------------------------------------

class DLL_IMPORT FBspNode {
  public:
    friend class FArchive & CDECL operator<<(class FArchive &,class FBspNode &);
};

//------------------------------------------------------------------------------
//  FBspSurf
//------------------------------------------------------------------------------

class DLL_IMPORT FBspSurf {
  public:
    friend class FArchive & CDECL operator<<(class FArchive &,class FBspSurf &);
};

//------------------------------------------------------------------------------
//  FDecoVertexStream
//------------------------------------------------------------------------------

class DLL_IMPORT FDecoVertexStream {
  public:
    friend class FArchive & CDECL operator<<(class FArchive &,class FDecoVertexStream &);
};

//------------------------------------------------------------------------------
//  FStaticMeshLightInfo
//------------------------------------------------------------------------------

class DLL_IMPORT FStaticMeshLightInfo {
  public:
    friend class FArchive & CDECL operator<<(class FArchive &,class FStaticMeshLightInfo &);
};

//------------------------------------------------------------------------------
//  FTerrainVertexStream
//------------------------------------------------------------------------------

class DLL_IMPORT FTerrainVertexStream {
  public:
    friend class FArchive & CDECL operator<<(class FArchive &,class FTerrainVertexStream &);
};

//------------------------------------------------------------------------------
//  FProjectorRenderInfo
//------------------------------------------------------------------------------

struct DLL_IMPORT FProjectorRenderInfo {
  public:
    friend class FArchive & CDECL operator<<(class FArchive &,struct FProjectorRenderInfo *);
};


//state Trigger.OtherTriggerTurnsOff 1

//state Trigger.OtherTriggerTurnsOn 1

//state Trigger.OtherTriggerToggles 1

//state Trigger.NormalTrigger 1

//state PlayerController.PlayerFlying 0

//state PlayerController.PlayerWalking 0

//state Volume.AssociatedTouch 0

//state SBSunlight.NoProjection 0

//state SBProjector.NoProjection 0

//state Mover.RotatingMover 1

//state Mover.LeadInOutLooping 0

//state Mover.LeadInOutLooper 1

//state Mover.ConstantLoop 1

//state Mover.WasBumpButton 0

//state Mover.BumpButton 1

//state Mover.WasTriggerAdvance 0

//state Mover.TriggerAdvance 1

//state Mover.WasTriggerPound 0

//state Mover.TriggerPound 1

//state Mover.WasTriggerControl 0

//state Mover.TriggerControl 1

//state Mover.TriggerToggle 1

//state Mover.LoopMove 1

//state Mover.TriggerOpenTimed 1

//state Mover.BumpOpenTimed 1

//state Mover.StandOpenTimed 1

//state Mover.WasOpenTimedMover 0

//state Mover.OpenTimedMover 0

//state Projector.NoProjection 0

//state Console.Typing 0

//state AntiPortalActor.TriggerToggle 1

//state AntiPortalActor.TriggerControl 1

//state WarpZoneInfo.DelayedWarp 0

//state Fragment.Dying 0

//state Fragment.Flying 2

//state ClientMover.ServerIdle 0


AUTOGENERATE_CLASS(AAIController)
AUTOGENERATE_CLASS(AAIMarker)
AUTOGENERATE_CLASS(AAIScript)
AUTOGENERATE_CLASS(AActor)
AUTOGENERATE_CLASS(AAmbientSound)
AUTOGENERATE_CLASS(AAntiPortalActor)
AUTOGENERATE_CLASS(AAutoDoor)
AUTOGENERATE_CLASS(AAutoLadder)
AUTOGENERATE_CLASS(AAvoidMarker)
AUTOGENERATE_CLASS(ABlockingVolume)
AUTOGENERATE_CLASS(ABrush)
AUTOGENERATE_CLASS(ACamera)
AUTOGENERATE_CLASS(AClipMarker)
AUTOGENERATE_CLASS(AController)
AUTOGENERATE_CLASS(ACrowd)
AUTOGENERATE_CLASS(ADamageType)
AUTOGENERATE_CLASS(ADecoVolumeObject)
AUTOGENERATE_CLASS(ADecoration)
AUTOGENERATE_CLASS(ADecorationList)
AUTOGENERATE_CLASS(ADefaultPhysicsVolume)
AUTOGENERATE_CLASS(ADeformableAttachment)
AUTOGENERATE_CLASS(ADoor)
AUTOGENERATE_CLASS(ADynamicLight)
AUTOGENERATE_CLASS(AEmitter)
AUTOGENERATE_CLASS(AEnvironmentEffect)
AUTOGENERATE_CLASS(AEnvironmentManager)
AUTOGENERATE_CLASS(AFluidSurfaceInfo)
AUTOGENERATE_CLASS(AFluidSurfaceOscillator)
AUTOGENERATE_CLASS(AFlyingPathNode)
AUTOGENERATE_CLASS(AGameInfo)
AUTOGENERATE_CLASS(AHUD)
AUTOGENERATE_CLASS(AInfo)
AUTOGENERATE_CLASS(AInterpolationPoint)
AUTOGENERATE_CLASS(AKeypoint)
AUTOGENERATE_CLASS(ALadder)
AUTOGENERATE_CLASS(ALadderVolume)
AUTOGENERATE_CLASS(ALevelInfo)
AUTOGENERATE_CLASS(ALight)
AUTOGENERATE_CLASS(ALineOfSightTrigger)
AUTOGENERATE_CLASS(ALookTarget)
AUTOGENERATE_CLASS(AMatDemoActor)
AUTOGENERATE_CLASS(AMover)
AUTOGENERATE_CLASS(ANavigationPoint)
AUTOGENERATE_CLASS(ANote)
AUTOGENERATE_CLASS(APathNode)
AUTOGENERATE_CLASS(APawn)
AUTOGENERATE_CLASS(APhysicsVolume)
AUTOGENERATE_CLASS(APlayerController)
AUTOGENERATE_CLASS(APlayerStart)
AUTOGENERATE_CLASS(APolyMarker)
AUTOGENERATE_CLASS(APotentialClimbWatcher)
AUTOGENERATE_CLASS(AProjector)
AUTOGENERATE_CLASS(ARigidAttachment)
AUTOGENERATE_CLASS(ARoadPathNode)
AUTOGENERATE_CLASS(ASBActor)
AUTOGENERATE_CLASS(ASBAnimatedPawn)
AUTOGENERATE_CLASS(ASBAttachment)
AUTOGENERATE_CLASS(ASBMover)
AUTOGENERATE_CLASS(ASBProjector)
AUTOGENERATE_CLASS(ASBSunlight)
AUTOGENERATE_CLASS(ASceneManager)
AUTOGENERATE_CLASS(ASceneSubtitles)
AUTOGENERATE_CLASS(AScout)
AUTOGENERATE_CLASS(AShadowProjector)
AUTOGENERATE_CLASS(ASkyZoneInfo)
AUTOGENERATE_CLASS(ASmallNavigationPoint)
AUTOGENERATE_CLASS(AStaticMeshActor)
AUTOGENERATE_CLASS(ATeleporter)
AUTOGENERATE_CLASS(ATerrainInfo)
AUTOGENERATE_CLASS(ATimedEnvironmentEffect)
AUTOGENERATE_CLASS(ATrigger)
AUTOGENERATE_CLASS(ATriggers)
AUTOGENERATE_CLASS(AVolume)
AUTOGENERATE_CLASS(AWarpZoneInfo)
AUTOGENERATE_CLASS(AWarpZoneMarker)
AUTOGENERATE_CLASS(AZoneInfo)
AUTOGENERATE_CLASS(AxEmitter)
AUTOGENERATE_CLASS(AxProcMesh)
AUTOGENERATE_CLASS(AxWeatherEffect)
AUTOGENERATE_CLASS(UActionMoveCamera)
AUTOGENERATE_CLASS(UActionPause)
AUTOGENERATE_CLASS(UActorGroup)
AUTOGENERATE_CLASS(UAnimNotify)
AUTOGENERATE_CLASS(UAnimNotify_DestroyEffect)
AUTOGENERATE_CLASS(UAnimNotify_DrawWeapon)
AUTOGENERATE_CLASS(UAnimNotify_Effect)
AUTOGENERATE_CLASS(UAnimNotify_FSkill)
AUTOGENERATE_CLASS(UAnimNotify_Footstep)
AUTOGENERATE_CLASS(UAnimNotify_Howler)
AUTOGENERATE_CLASS(UAnimNotify_Impact)
AUTOGENERATE_CLASS(UAnimNotify_LIPSinc)
AUTOGENERATE_CLASS(UAnimNotify_MatSubAction)
AUTOGENERATE_CLASS(UAnimNotify_ModifyMovement)
AUTOGENERATE_CLASS(UAnimNotify_SBSound)
AUTOGENERATE_CLASS(UAnimNotify_Script)
AUTOGENERATE_CLASS(UAnimNotify_Scripted)
AUTOGENERATE_CLASS(UAnimNotify_SheatheWeapon)
AUTOGENERATE_CLASS(UAnimNotify_Sound)
AUTOGENERATE_CLASS(UAnimNotify_Voice)
AUTOGENERATE_CLASS(UAnimation)
AUTOGENERATE_CLASS(UAudioSubsystem)
AUTOGENERATE_CLASS(UBaseGUIController)
AUTOGENERATE_CLASS(UBeamEmitter)
AUTOGENERATE_CLASS(UBitmapMaterial)
AUTOGENERATE_CLASS(UBlackWhite)
AUTOGENERATE_CLASS(UCameraEffect)
AUTOGENERATE_CLASS(UCameraOverlay)
AUTOGENERATE_CLASS(UCanvas)
AUTOGENERATE_CLASS(UClient)
AUTOGENERATE_CLASS(UColorModifier)
AUTOGENERATE_CLASS(UCombiner)
AUTOGENERATE_CLASS(UConsole)
AUTOGENERATE_CLASS(UConstantColor)
AUTOGENERATE_CLASS(UConstantMaterial)
AUTOGENERATE_CLASS(UConvexVolume)
AUTOGENERATE_CLASS(UCubemap)
AUTOGENERATE_CLASS(UDynamicCubemap)
AUTOGENERATE_CLASS(UEngine)
AUTOGENERATE_CLASS(UEnvironmentSettings)
AUTOGENERATE_CLASS(UFadeBlackWhite)
AUTOGENERATE_CLASS(UFadeColor)
AUTOGENERATE_CLASS(UFinalBlend)
AUTOGENERATE_CLASS(UFluidSurfacePrimitive)
AUTOGENERATE_CLASS(UFont)
AUTOGENERATE_CLASS(UGUI_BaseDesktop)
AUTOGENERATE_CLASS(UGUI_BaseWindow)
AUTOGENERATE_CLASS(UGameEngine)
AUTOGENERATE_CLASS(UGlobalTempObjects)
AUTOGENERATE_CLASS(UI3DL2Listener)
AUTOGENERATE_CLASS(UIndexBuffer)
AUTOGENERATE_CLASS(UInput)
AUTOGENERATE_CLASS(UInteraction)
AUTOGENERATE_CLASS(UInteractionMaster)
AUTOGENERATE_CLASS(UInteractions)
AUTOGENERATE_CLASS(UKMeshProps)
AUTOGENERATE_CLASS(ULevel)
AUTOGENERATE_CLASS(ULevelBase)
AUTOGENERATE_CLASS(ULevelGrid)
AUTOGENERATE_CLASS(ULevelSummary)
AUTOGENERATE_CLASS(ULodMesh)
AUTOGENERATE_CLASS(ULodMeshInstance)
AUTOGENERATE_CLASS(UMatAction)
AUTOGENERATE_CLASS(UMatObject)
AUTOGENERATE_CLASS(UMatSubAction)
AUTOGENERATE_CLASS(UMaterial)
AUTOGENERATE_CLASS(UMaterialSequence)
AUTOGENERATE_CLASS(UMaterialSwitch)
AUTOGENERATE_CLASS(UMesh)
AUTOGENERATE_CLASS(UMeshAnimation)
AUTOGENERATE_CLASS(UMeshEmitter)
AUTOGENERATE_CLASS(UMeshInstance)
AUTOGENERATE_CLASS(UMeshObject)
AUTOGENERATE_CLASS(UModel)
AUTOGENERATE_CLASS(UModifier)
AUTOGENERATE_CLASS(UMotionBlur)
AUTOGENERATE_CLASS(UMultiCombiner)
AUTOGENERATE_CLASS(UNullRenderDevice)
AUTOGENERATE_CLASS(UOpacityModifier)
AUTOGENERATE_CLASS(UPalette)
AUTOGENERATE_CLASS(UParticleEmitter)
AUTOGENERATE_CLASS(UParticleMaterial)
AUTOGENERATE_CLASS(UPlayInfo)
AUTOGENERATE_CLASS(UPlayer)
AUTOGENERATE_CLASS(UPlayerInput)
AUTOGENERATE_CLASS(UPolys)
AUTOGENERATE_CLASS(UPrimitive)
AUTOGENERATE_CLASS(UProceduralSound)
AUTOGENERATE_CLASS(UProjectorMaterial)
AUTOGENERATE_CLASS(UProjectorPrimitive)
AUTOGENERATE_CLASS(UProxyBitmapMaterial)
AUTOGENERATE_CLASS(UPvPSettings)
AUTOGENERATE_CLASS(UReachSpec)
AUTOGENERATE_CLASS(URenderDevice)
AUTOGENERATE_CLASS(URenderResource)
AUTOGENERATE_CLASS(URenderedMaterial)
AUTOGENERATE_CLASS(URibbonEmitter)
AUTOGENERATE_CLASS(USBAnimationFlags)
AUTOGENERATE_CLASS(USBAudioManager)
AUTOGENERATE_CLASS(USBBloomEffect)
AUTOGENERATE_CLASS(USBCharacterMaterial)
AUTOGENERATE_CLASS(USBDecoMaterial)
AUTOGENERATE_CLASS(USBFogColorMaterial)
AUTOGENERATE_CLASS(USBLightColorMaterial)
AUTOGENERATE_CLASS(USBLightingCubemap)
AUTOGENERATE_CLASS(USBLightmapGenerationMaterial)
AUTOGENERATE_CLASS(USBLuminancePassMaterial)
AUTOGENERATE_CLASS(USBMaterial)
AUTOGENERATE_CLASS(USBOverrideModulation)
AUTOGENERATE_CLASS(USBProjectorPrimitive)
AUTOGENERATE_CLASS(USBSeparatedGaussMaterial)
AUTOGENERATE_CLASS(USBSettings)
AUTOGENERATE_CLASS(USBShadowMap)
AUTOGENERATE_CLASS(USBShadowmapGenerationMaterial)
AUTOGENERATE_CLASS(USBSimpleEffect)
AUTOGENERATE_CLASS(USBSkyMaterial)
AUTOGENERATE_CLASS(USBStandardMaterial)
AUTOGENERATE_CLASS(USBSunlightPrimitive)
AUTOGENERATE_CLASS(USBToneMapMaterial)
AUTOGENERATE_CLASS(UScriptedTexture)
AUTOGENERATE_CLASS(UShader)
AUTOGENERATE_CLASS(UShadowBitmapMaterial)
AUTOGENERATE_CLASS(UShrinkCommandlet)
AUTOGENERATE_CLASS(USkeletalMesh)
AUTOGENERATE_CLASS(USkeletalMeshInstance)
AUTOGENERATE_CLASS(USkinVertexBuffer)
AUTOGENERATE_CLASS(USound)
AUTOGENERATE_CLASS(USoundGroup)
AUTOGENERATE_CLASS(USparkEmitter)
AUTOGENERATE_CLASS(USpline)
AUTOGENERATE_CLASS(USpriteEmitter)
AUTOGENERATE_CLASS(UStaticMesh)
AUTOGENERATE_CLASS(UStaticMeshInstance)
AUTOGENERATE_CLASS(UStream)
AUTOGENERATE_CLASS(UStreamBase)
AUTOGENERATE_CLASS(UStreamInteraction)
AUTOGENERATE_CLASS(UStreamInterface)
AUTOGENERATE_CLASS(UStreamTag)
AUTOGENERATE_CLASS(USubActionCameraEffect)
AUTOGENERATE_CLASS(USubActionCameraShake)
AUTOGENERATE_CLASS(USubActionFOV)
AUTOGENERATE_CLASS(USubActionFade)
AUTOGENERATE_CLASS(USubActionGameSpeed)
AUTOGENERATE_CLASS(USubActionOrientation)
AUTOGENERATE_CLASS(USubActionSceneSpeed)
AUTOGENERATE_CLASS(USubActionSubTitle)
AUTOGENERATE_CLASS(USubActionTrigger)
AUTOGENERATE_CLASS(USurfaceSoundGroup)
AUTOGENERATE_CLASS(UTerrainMaterial)
AUTOGENERATE_CLASS(UTerrainPrimitive)
AUTOGENERATE_CLASS(UTerrainSector)
AUTOGENERATE_CLASS(UTexCoordMaterial)
AUTOGENERATE_CLASS(UTexCoordSource)
AUTOGENERATE_CLASS(UTexEnvMap)
AUTOGENERATE_CLASS(UTexMatrix)
AUTOGENERATE_CLASS(UTexModifier)
AUTOGENERATE_CLASS(UTexOscillator)
AUTOGENERATE_CLASS(UTexOscillatorTriggered)
AUTOGENERATE_CLASS(UTexPanner)
AUTOGENERATE_CLASS(UTexPannerTriggered)
AUTOGENERATE_CLASS(UTexRotator)
AUTOGENERATE_CLASS(UTexScaler)
AUTOGENERATE_CLASS(UTexture)
AUTOGENERATE_CLASS(UTrailEmitter)
AUTOGENERATE_CLASS(UUCCCheckCommandlet)
AUTOGENERATE_CLASS(UUModUnpackCommandlet)
AUTOGENERATE_CLASS(UVariableTexPanner)
AUTOGENERATE_CLASS(UVertMesh)
AUTOGENERATE_CLASS(UVertMeshInstance)
AUTOGENERATE_CLASS(UVertexBuffer)
AUTOGENERATE_CLASS(UVertexColor)
AUTOGENERATE_CLASS(UVertexStreamBase)
AUTOGENERATE_CLASS(UVertexStreamCOLOR)
AUTOGENERATE_CLASS(UVertexStreamPosNormTex)
AUTOGENERATE_CLASS(UVertexStreamUV)
AUTOGENERATE_CLASS(UVertexStreamVECTOR)
AUTOGENERATE_CLASS(UViewport)

AUTOGENERATE_PACKAGE(Engine)


//public: void TLazyArray<unsigned char>::`default constructor closure'(void) 8ae9b0
//public: void FDynamicLight::`default constructor closure'(void) 890e10
//public: void FFrameHeader::`default constructor closure'(void) a2c2d0
//public: void FID3Field::`default constructor closure'(void) 8752f0
//public: void FID3TagV1::`default constructor closure'(void) a2c530
//public: void FID3V2ExtendedTagHeader::`default constructor closure'(void) a2c290
//public: void FID3V2Frame::`default constructor closure'(void) a2c340
//public: void FURL::`default constructor closure'(void) 88d6e0
//unsigned long CDECL CalcBlendFlags(unsigned char,class AActor *) 863000
//float CDECL DistanceBetweenLinesSquared(class FVector const &,class FVector const &,class FVector const &,class FVector const &,float &,float &) a412b0
//void CDECL DrawStat(class UCanvas *,class FColor,int,unsigned short const *,...) 9b89b0
//class FPlane CDECL FPlaneToHSV(class FPlane const &) a15230
//void CDECL FPlaneToLightHSV(class FPlane const &,unsigned char *,unsigned char *,float *) a15370
//struct FActorStats GActorClassStats d78848
//class FMemCache GCache bd7650
//class FMemStack GEngineMem bd7538
//class FEngineStats GEngineStats d621a8
//class UGlobalTempObjects * GGlobalTempObjects c2feb4
//unsigned char GIsBaking d45628
//class FMatineeTools GMatineeTools bd75e8
//class FCollisionHashBase * CDECL GNewCollisionHash(void) 8f6dc0
//class FRebuildTools GRebuildTools bd7548
//class USBSettings * GSBSettings d6aa30
//class FStatGraph * GStatGraph d61074
//class FStats GStats d62040
//class FTempLineBatcher * GTempLineBatcher d53ee0
//class FTerrainTools GTerrainTools bd7558
//int CDECL GetFROTATOR(unsigned short const *,unsigned short const *,class FRotator &,int) 961d80
//int CDECL GetFROTATOR(unsigned short const *,class FRotator &,int) 961bc0
//int CDECL GetFVECTOR(unsigned short const *,unsigned short const *,class FVector &) 961b10
//int CDECL GetFVECTOR(unsigned short const *,class FVector &) 9618e0
//int CDECL GetSUBSTRING(unsigned short const *,unsigned short const *,unsigned short *,int) 961a30
//class FPlane CDECL HSVToFPlane(unsigned char,unsigned char,unsigned char) a15080
//class FColor CDECL HSVToRGB(unsigned char,unsigned char,unsigned char) a14790
//bool CDECL IntersectLineCapsule(class FVector const &,class FVector const &,class FVector const &,class FVector const &,float,float,float &,float &,float) a42150
//float CDECL PointDoughnutDistanceSquared(class FVector const &,class FVector const &,class FVector const &,float) a42030
//float CDECL PointLineSegmentDistanceSquared(class FVector const &,class FVector const &,class FVector const &,float &) a419a0
//float CDECL PointTriangleDistanceSquared(class FVector const &,class FVector const &,class FVector const &,class FVector const &,class FVector &) a41ac0
//void CDECL PrecacheMaterials(class UViewport *,class TArrayNoInit<class UMaterial *> &) 9283e0
//int QueueScreenShot c2c220
//class FColor CDECL RGBtoHSV(class FColor) a14eb0
//void CDECL RenderLevel(class UViewport *,class FPlayerSceneNode &) 927d70
//void CDECL SetFixedVisibility(class UViewport *,class FMatrix,class FVector &,class FRotator &) 927da0
//void CDECL UpdateLevelAudio(class UViewport *,class UAudioSubsystem *,class AActor *,class FPlayerSceneNode &) 928250
//unsigned short const * const `public: FDirectionalLightMapSceneNode::FDirectionalLightMapSceneNode(class UViewport *,class AActor *,class FBspSurf &,class FLightMap *)'::`3'::__FUNC_NAME__ af8ed8
//unsigned short const * const `public: FPointLightMapSceneNode::FPointLightMapSceneNode(class UViewport *,class AActor *,class FBspSurf &,class FLightMap *,int,int,int,int)'::`3'::__FUNC_NAME__ af8e40
//unsigned short const * const `public: virtual TLazyArray<unsigned char>::~TLazyArray<unsigned char>(void)'::`3'::__FUNC_NAME__ ad69d0
//unsigned short const * const `public: virtual bool TLazyArray<unsigned char>::AsyncLoad(void (__cdecl*)(void *),void *)'::`3'::__FUNC_NAME__ ad6a24
//unsigned short const * const `public: float ABrush::BuildCoords(class FModelCoords *,class FModelCoords *)'::`3'::__FUNC_NAME__ ad0a54
//unsigned short const * const `protected: void TLazyArray<unsigned char>::CancelAsyncLoad(void)'::`3'::__FUNC_NAME__ ad684c
//unsigned short const * const `public: virtual void ABrush::CopyPosRotScaleFrom(class ABrush *)'::`3'::__FUNC_NAME__ ad0a7c
//unsigned short const * const `public: unsigned char ATerrainInfo::GetLayerAlpha(int,int,int,class UTexture *)'::`3'::__FUNC_NAME__ b08448
//unsigned short const * const `public: virtual void FAnimMeshVertexStream::GetStreamData(void *)'::`3'::__FUNC_NAME__ ad66a0
//unsigned short const * const `public: virtual void FBspVertexStream::GetStreamData(void *)'::`3'::__FUNC_NAME__ ad64e0
//unsigned short const * const `public: virtual void FSkinUVStream::GetStreamData(void *)'::`3'::__FUNC_NAME__ ad66ec
//unsigned short const * const `public: virtual void FStaticMeshUVStream::GetStreamData(void *)'::`3'::__FUNC_NAME__ ad6778
//unsigned short const * const `public: virtual void FStaticMeshVertexStream::GetStreamData(void *)'::`3'::__FUNC_NAME__ ad6728
//unsigned short const * const `public: static void CDECL TLazyArray<unsigned char>::HandleAsyncLoadDone(void *,bool)'::`3'::__FUNC_NAME__ ad67f0
//unsigned short const * const `public: int UTerrainSector::IsTriangleAll(int,int,int,int,int,unsigned char)'::`3'::__FUNC_NAME__ b0865c
//unsigned short const * const `public: virtual void TLazyArray<unsigned char>::Load(bool)'::`3'::__FUNC_NAME__ ad6a00
//unsigned short const * const `public: float ABrush::OldBuildCoords(class FModelCoords *,class FModelCoords *)'::`3'::__FUNC_NAME__ ad0a24
//unsigned short const * const `public: virtual void ULevelSummary::PostLoad(void)'::`3'::__FUNC_NAME__ ad491c
//unsigned short const * const `public: virtual void UKMeshProps::Serialize(class FArchive &)'::`3'::__FUNC_NAME__ ae3b14
//unsigned short const * const `public: virtual void UPolys::Serialize(class FArchive &)'::`3'::__FUNC_NAME__ ad8dd4
//unsigned short const * const `public: virtual void UVertexBuffer::Serialize(class FArchive &)'::`3'::__FUNC_NAME__ ad7194
//unsigned short const * const `public: virtual void UVertexStreamCOLOR::Serialize(class FArchive &)'::`3'::__FUNC_NAME__ ad7354
//unsigned short const * const `public: virtual void UVertexStreamPosNormTex::Serialize(class FArchive &)'::`3'::__FUNC_NAME__ ad7518
//unsigned short const * const `public: virtual void UVertexStreamUV::Serialize(class FArchive &)'::`3'::__FUNC_NAME__ ad7434
//unsigned short const * const `public: virtual void UVertexStreamVECTOR::Serialize(class FArchive &)'::`3'::__FUNC_NAME__ ad726c
//unsigned short const * const `public: virtual void TLazyArray<unsigned char>::Unload(void)'::`3'::__FUNC_NAME__ ad6a50
//_DllMain@12 86f930

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATET_FUNCTION
#undef AUTOGENERATE_CLASS
#undef AUTOGENERATE_PACKAGE
#endif NAMES_ONLY

#if _MSC_VER
#pragma pack (pop)
#endif

