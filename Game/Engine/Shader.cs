//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using TCosReborn.Framework.Common;


namespace Engine
{
    
    
    public class Shader : RenderedMaterial
    {
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Shader")]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        public Material Diffuse;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Shader")]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        public Material Opacity;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Shader")]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        public Material Specular;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Shader")]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        public Material SpecularityMask;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Shader")]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        public Material SelfIllumination;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Shader")]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        public Material SelfIlluminationMask;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Shader")]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        public Material Detail;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Shader")]
        public float DetailScale;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Shader")]
        public bool ModulateOpacityWithDiffuseAlpha;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Shader")]
        public byte OutputBlending;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Shader")]
        public bool TwoSided;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Shader")]
        public bool Wireframe;
        
        public bool ModulateStaticLighting2X;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Shader")]
        public bool PerformLightingOnSpecularPass;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Shader")]
        public bool ModulateSpecular2X;
        
        public Shader()
        {
        }
        
        public enum EOutputBlending
        {
            
            OB_Normal ,
            
            OB_Masked ,
            
            OB_Modulate ,
            
            OB_Translucent ,
            
            OB_Invisible ,
            
            OB_Brighten ,
            
            OB_Darken,
        }
    }
}
/*
function Trigger(Actor Other,Actor EventInstigator) {
if (Diffuse != None) {                                                      
Diffuse.Trigger(Other,EventInstigator);                                   
}
if (Opacity != None) {                                                      
Opacity.Trigger(Other,EventInstigator);                                   
}
if (Specular != None) {                                                     
Specular.Trigger(Other,EventInstigator);                                  
}
if (SpecularityMask != None) {                                              
SpecularityMask.Trigger(Other,EventInstigator);                           
}
if (SelfIllumination != None) {                                             
SelfIllumination.Trigger(Other,EventInstigator);                          
}
if (SelfIlluminationMask != None) {                                         
SelfIlluminationMask.Trigger(Other,EventInstigator);                      
}
if (FallbackMaterial != None) {                                             
FallbackMaterial.Trigger(Other,EventInstigator);                          
}
}
function Reset() {
if (Diffuse != None) {                                                      
Diffuse.Reset();                                                          
}
if (Opacity != None) {                                                      
Opacity.Reset();                                                          
}
if (Specular != None) {                                                     
Specular.Reset();                                                         
}
if (SpecularityMask != None) {                                              
SpecularityMask.Reset();                                                  
}
if (SelfIllumination != None) {                                             
SelfIllumination.Reset();                                                 
}
if (SelfIlluminationMask != None) {                                         
SelfIlluminationMask.Reset();                                             
}
if (FallbackMaterial != None) {                                             
FallbackMaterial.Reset();                                                 
}
}
*/
