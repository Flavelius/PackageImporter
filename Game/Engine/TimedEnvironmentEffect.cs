//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using TCosReborn.Framework.Common;


namespace Engine
{
    
    
    public class TimedEnvironmentEffect : EnvironmentEffect
    {
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Preview")]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public float PreviewSpeed;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Preview")]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public byte PreviewProgress;
        
        public float PreviewRelative;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Preview")]
        public float UpdateSpeed;
        
        public float UpdateTimer;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Events")]
        public List<EventRange> Events = new List<EventRange>();
        
        public float mDefaultTime;
        
        public TimedEnvironmentEffect()
        {
        }
        
        public struct EventRange
        {
            
            public NameProperty Event;
            
            public NameProperty InRangeEvent;
            
            public NameProperty OutOfRangeEvent;
            
            public float RangeBeginTime;
            
            public float RangeEndTime;
            
            public int WasInRange;
        }
    }
}
