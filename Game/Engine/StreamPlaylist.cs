//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using TCosReborn.Framework.Common;


namespace Engine
{
    
    
    public class StreamPlaylist : StreamBase
    {
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamPlaylist")]
        [TCosReborn.Framework.Attributes.FieldConfigAttribute()]
        public int current;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamPlaylist")]
        [TCosReborn.Framework.Attributes.FieldConfigAttribute()]
        public List<string> Playlist = new List<string>();
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamPlaylist")]
        public string Title = string.Empty;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamPlaylist")]
        [TCosReborn.Framework.Attributes.FieldConfigAttribute()]
        public bool bNeedSave;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamPlaylist")]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        private List<int> RandomPool = new List<int>();
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamPlaylist")]
        public StreamInterface FileManager;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamPlaylist")]
        public List<Stream> Songs = new List<Stream>();
        
        public delegate<OnPlaylistChanged> @__OnPlaylistChanged__Delegate;
        
        public StreamPlaylist()
        {
        }
    }
}
/*
function Save() {
local int i;
if (!bNeedSave) {                                                           
return;                                                                   
}
Playlist.Remove(0,Playlist.Length);                                         
i = 0;                                                                      
while (i < Songs.Length) {                                                  
if (Songs[i] != None) {                                                   
Playlist[i] = Songs[i].GetPath();                                       
}
i++;                                                                      
}
bNeedSave = False;                                                          
SaveConfig();                                                               
}
function bool HandleDebugExec(string Command,string Param) {
local int i;
if (Super.HandleDebugExec(Command,Param)) {                                 
return True;                                                              
}
switch (Locs(Command)) {                                                    
case "Addsong" :                                                          
AddSong(Param);                                                         
return True;                                                            
case "dumptags" :                                                         
i = 0;                                                                  
while (i < Songs.Length) {                                              
Songs[i].DumpTags();                                                  
i++;                                                                  
}
return True;                                                            
case "scripttags" :                                                       
i = 0;                                                                  
while (i < Songs.Length) {                                              
Songs[i].DumpScriptTag();                                             
i++;                                                                  
}
case "showsongs" :                                                        
Log("Playlist" @ GetTitle() @ "has"
@ string(Songs.Length)
@ "songs",'MusicPlayer');
i = 0;                                                                  
while (i < Songs.Length) {                                              
Log("  " $ string(i) $ ")" @ Songs[i].GetPath(),'MusicPlayer');       
i++;                                                                  
}
return True;                                                            
default:                                                                  
return False;                                                           
}
}
}
function DebugInfo() {
local int i;
Log("   Playlist '" $ GetTitle() $ "', Length:"
$ string(GetPlaylistLength()),'MusicPlayer');
i = 0;                                                                      
while (i < GetPlaylistLength()) {                                           
Log("    " $ string(i) $ ")" @ Songs[i].GetSongTitle(),'MusicPlayer');    
i++;                                                                      
}
}
function bool ValidStreamIndex(int Index) {
return Index >= 0 && Index < Songs.Length;                                  
}
function bool ValidStreamName(string fileName) {
if (fileName == "") {                                                       
return False;                                                             
}
return ValidStreamIndex(FindIndexByName(fileName));                         
}
function int FindIndexByFileName(string Test) {
local int i;
local int num;
if (Test == "") {                                                           
return -1;                                                                
}
num = GetPlaylistLength();                                                  
i = 0;                                                                      
while (i < num) {                                                           
if (Songs[i].GetFileName() ~= Test) {                                     
return i;                                                               
}
i++;                                                                      
}
return -1;                                                                  
}
function int FindIndexByFullName(string Test) {
local int i;
local int num;
if (Test == "") {                                                           
return -1;                                                                
}
num = GetPlaylistLength();                                                  
i = 0;                                                                      
while (i < num) {                                                           
if (Songs[i].GetFullName() ~= Test) {                                     
return i;                                                               
}
i++;                                                                      
}
return -1;                                                                  
}
function int FindIndexByPath(string Test) {
local int i;
if (Test == "") {                                                           
return -1;                                                                
}
i = 0;                                                                      
while (i < Songs.Length) {                                                  
if (Songs[i].GetPath() ~= Test) {                                         
return i;                                                               
}
i++;                                                                      
}
return -1;                                                                  
}
function int FindIndexByName(string Test) {
local FilePath APath;
if (static.ParsePath(Test,APath)) {                                         
if (APath.Extension != "") {                                              
if (APath.Directory != "") {                                            
return FindIndexByPath(APath.FullPath);                               
} else {                                                                
if (APath.fileName != "") {                                           
return FindIndexByFullName(APath.fileName $ "." $ APath.Extension); 
}
}
} else {                                                                  
return FindIndexByFileName(APath.fileName);                             
}
}
return -1;                                                                  
}
function int GetPlaylistLength() {
return Songs.Length;                                                        
}
function Stream GetStreamAt(int Index) {
if (ValidStreamIndex(Index)) {                                              
return Songs[Index];                                                      
}
return None;                                                                
}
function Stream GetStream(string StreamName) {
local int i;
i = FindIndexByName(StreamName);                                            
return GetStreamAt(i);                                                      
}
function Stream GetCurrentStream() {
return GetStreamAt(GetCurrent());                                           
}
function GetSongs(out array<Stream> SongArray) {
SongArray = Songs;                                                          
}
function int GetCurrent() {
return current;                                                             
}
function string GetTitle() {
return Title;                                                               
}
function bool IsInitialized() {
return FileManager != None;                                                 
}
function bool SetSongs(array<Stream> NewSongs) {
Songs = NewSongs;                                                           
ResetRandomPool();                                                          
bNeedSave = True;                                                           
return True;                                                                
}
function bool SetCurrent(int Index) {
if (!ValidStreamIndex(Index)) {                                             
return False;                                                             
}
current = Index;                                                            
bNeedSave = True;                                                           
return True;                                                                
}
function bool SetTitle(string NewTitle) {
if (NewTitle == "") {                                                       
return False;                                                             
}
Title = NewTitle;                                                           
OnPlaylistChanged();                                                        
Save();                                                                     
return True;                                                                
}
function ResetRandomPool() {
local int i;
RandomPool.Length = Songs.Length;                                           
i = 0;                                                                      
while (i < Songs.Length) {                                                  
RandomPool[i] = i;                                                        
i++;                                                                      
}
}
function string GetRandomSong() {
local int idx;
local Stream RandomStream;
if (RandomPool.Length == 0) {                                               
ResetRandomPool();                                                        
}
if (RandomPool.Length > 0) {                                                
idx = Rand(RandomPool.Length - 1);                                        
if (ValidStreamIndex(RandomPool[idx])) {                                  
RandomStream = Songs[RandomPool[idx]];                                  
RandomPool.Remove(idx,1);                                               
return RandomStream.GetPath();                                          
}
}
return "";                                                                  
}
function bool ClearPlaylist() {
bNeedSave = bNeedSave || Songs.Length > 0;                                  
Songs.Remove(0,Songs.Length);                                               
RandomPool.Remove(0,RandomPool.Length);                                     
return True;                                                                
}
function ReplaceWith(StreamPlaylist Other) {
if (Other == None) {                                                        
return;                                                                   
}
FileManager = Other.FileManager;                                            
Other.GetSongs(Songs);                                                      
ResetRandomPool();                                                          
SetCurrent(Other.GetCurrent());                                             
bNeedSave = True;                                                           
}
function string PrevSong(bool bMayRepeat) {
local int i;
i = GetCurrent() - 1;                                                       
if (!ValidStreamIndex(i) && bMayRepeat) {                                   
i = GetPlaylistLength() - 1;                                              
}
if (SetCurrent(i)) {                                                        
return Songs[current].GetPath();                                          
}
return "";                                                                  
}
function string NextSong(bool bMayRepeat) {
local int i;
i = GetCurrent() + 1;                                                       
if (!ValidStreamIndex(i) && bMayRepeat) {                                   
i = 0;                                                                    
}
if (SetCurrent(i)) {                                                        
return Songs[current].GetPath();                                          
}
return "";                                                                  
}
function bool RemoveSongAt(int idx,optional bool bSkipNotification) {
local int i;
if (!ValidStreamIndex(idx)) {                                               
return False;                                                             
}
Songs.Remove(idx,1);                                                        
i = 0;                                                                      
while (i < RandomPool.Length) {                                             
if (RandomPool[i] == Songs.Length) {                                      
RandomPool.Remove(i,1);                                                 
goto jl0064;                                                            
}
i++;                                                                      
}
if (idx == current && !SetCurrent(idx - 1)) {                               
SetCurrent(0);                                                            
}
bNeedSave = True;                                                           
if (!bSkipNotification) {                                                   
OnPlaylistChanged();                                                      
}
return True;                                                                
}
function bool RemoveSong(string SongFileName,optional bool bSkipNotification) {
return RemoveSongAt(FindIndexByName(SongFileName),bSkipNotification);       
}
function int InsertSong(int idx,string Path,optional bool bSkipNotification) {
local Stream NewStream;
local byte Type;
local int i;
if (!ValidStreamIndex(idx)) {                                               
return AddSong(Path,bSkipNotification);                                   
}
if (Path == "") {                                                           
return -1;                                                                
}
Type = static.ConvertToFileType(Path);                                      
if (Type == 4) {                                                            
NewStream = CreateStream(Path);                                           
if (NewStream == None) {                                                  
return -1;                                                              
}
i = AddStream(idx,NewStream,bSkipNotification);                           
bNeedSave = bNeedSave || ValidStreamIndex(i);                             
return i;                                                                 
}
return -1;                                                                  
}
function int AddStream(int Index,Stream NewStream,optional bool bSkipNotification) {
local int i;
local string str;
if (NewStream == None) {                                                    
return -1;                                                                
}
str = NewStream.GetFileName();                                              
if (str == "") {                                                            
return -1;                                                                
}
i = FindIndexByName(str);                                                   
if (!ValidStreamIndex(i)) {                                                 
if (!ValidStreamIndex(Index)) {                                           
Index = GetPlaylistLength();                                            
}
Songs.Insert(Index,1);                                                    
Songs[Index] = NewStream;                                                 
RandomPool[RandomPool.Length] = Index;                                    
if (!bSkipNotification) {                                                 
OnPlaylistChanged();                                                    
}
return Index;                                                             
}
return i;                                                                   
}
function int AddSong(string SongFileName,optional bool bSkipNotification) {
local Stream NewStream;
local byte Type;
local int i;
if (SongFileName == "") {                                                   
return -1;                                                                
}
Type = static.ConvertToFileType(SongFileName);                              
if (Type == 4) {                                                            
NewStream = CreateStream(SongFileName);                                   
if (NewStream == None) {                                                  
return -1;                                                              
}
i = AddStream(GetPlaylistLength(),NewStream,bSkipNotification);           
bNeedSave = bNeedSave || ValidStreamIndex(i);                             
return i;                                                                 
}
return -1;                                                                  
}
function Stream CreateStream(string fileName) {
if (fileName == "") {                                                       
return None;                                                              
}
return FileManager.CreateStream(fileName);                                  
}
function bool LoadPlaylist() {
local int i;
ClearPlaylist();                                                            
i = 0;                                                                      
while (i < Playlist.Length) {                                               
if (!FileManager.ValidFile(Playlist[i])) {                                
Log("Removing file from playlist '"
$ GetTitle()
$ "' - file not found",'MusicPlayer');
Playlist.Remove(i--,1);                                                 
} else {                                                                  
AddSong(Playlist[i]);                                                   
}
i++;                                                                      
}
ResetRandomPool();                                                          
bNeedSave = False;                                                          
return True;                                                                
}
function bool InitializePlaylist(StreamInterface InManager) {
if (InManager == None || IsInitialized()) {                                 
return False;                                                             
}
FileManager = InManager;                                                    
LoadPlaylist();                                                             
return True;                                                                
}
delegate OnPlaylistChanged();
*/
