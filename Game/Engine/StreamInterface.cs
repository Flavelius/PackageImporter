//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using TCosReborn.Framework.Common;


namespace Engine
{
    
    
    public class StreamInterface : StreamBase
    {
        
        private string CurrentDirectory = string.Empty;
        
        public StreamInterface()
        {
        }
    }
}
/*
function bool HandleDebugExec(string Command,string Param) {
local string str;
local array<string> Test;
local int i;
if (Super.HandleDebugExec(Command,Param)) {                                 
return True;                                                              
}
switch (Locs(Command)) {                                                    
case "getbase" :                                                          
Log(GetBaseDirectory());                                                
return True;                                                            
case "getcurrent" :                                                       
Log(GetCurrentDirectory());                                             
return True;                                                            
case "validfilename" :                                                    
Log(string(ValidFile(Param)));                                          
return True;                                                            
case "dir" :                                                              
GetDirectoryContents(Test,Param);                                       
Log("directory list for" @ Param);                                      
i = 0;                                                                  
while (i < Test.Length) {                                               
Log("   >" @ Test[i]);                                                
i++;                                                                  
}
return True;                                                            
case "chdir" :                                                            
str = GetCurrentDirectory();                                            
ChangeDirectory(Param);                                                 
Log("old:" $ str @ "new:" $ GetCurrentDirectory());                     
return True;                                                            
default:                                                                  
return False;                                                           
}
}
}
function ChangeDirectory(string DirectoryName) {
local bool bSave;
bSave = DirectoryName != CurrentDirectory;                                  
CurrentDirectory = DirectoryName;                                           
if (bSave) {                                                                
SaveConfig();                                                             
}
}
function string GetCurrentDirectory() {
if (CurrentDirectory == ""
|| !ValidDirectory(CurrentDirectory)) {    
ChangeDirectory(GetBaseDirectory());                                      
}
return CurrentDirectory;                                                    
}
final native function bool LoadPlaylist(string fileName,out array<string> Lines,optional bool bStrict);
final native function bool ValidFile(string fileName);
final native function Stream CreateStream(string fileName,optional bool bStrict);
final native function bool ValidDirectory(optional string DirectoryPath);
final native function bool RemoveDirectory(string DirectoryName);
final native function string CreateDirectory(string DirectoryName);
final native function bool GetDirectoryContents(out array<string> Contents,optional string DirectoryName,optional byte FileType);
final native function bool GetDriveLetters(out array<string> Letters);
private final native function string GetBaseDirectory();
*/
