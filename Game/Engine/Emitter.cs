//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;


namespace Engine
{


    public class Emitter : Actor
    {
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Emitter")]
        public List<ParticleEmitter> Emitters = new List<ParticleEmitter>();
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Global")]
        public RangeVector GlobalOffsetRange;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Global")]
        public Range TimeTillResetRange;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Global")]
        public bool AutoDestroy;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Global")]
        public bool AutoReset;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Global")]
        public bool DisableFogging;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Size")]
        public float LocalDrawScale;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Size")]
        public bool AddEffectScaleFromBase;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public Vector OldLocation;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public Vector GlobalOffset;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public Vector AbsoluteVelocity;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public int Initialized;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public Box BoundingBox;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public float EmitterRadius;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public float EmitterHeight;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public float TimeTillReset;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public bool UseParticleProjectors;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public bool DeleteParticleEmitters;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public bool ActorForcesEnabled;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public ParticleMaterial ParticleMaterial;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public float KillDuration;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public float KillTimer;
        
        public Emitter()
        {
        }
    }
}
/*
simulated function Reset() {
local int i;
i = 0;                                                                      
while (i < Emitters.Length) {                                               
if (Emitters[i] != None) {                                                
Emitters[i].Reset();                                                    
}
i++;                                                                      
}
}
simulated event SpawnParticle(int Amount) {
local int i;
i = 0;                                                                      
while (i < Emitters.Length) {                                               
if (Emitters[i] != None) {                                                
Emitters[i].SpawnParticle(Amount);                                      
}
i++;                                                                      
}
}
simulated event UnTrigger(Actor Other,Pawn EventInstigator) {
local int i;
i = 0;                                                                      
while (i < Emitters.Length) {                                               
if (Emitters[i] != None) {                                                
Emitters[i].UnTrigger();                                                
}
i++;                                                                      
}
}
simulated event Trigger(Actor Other,Pawn EventInstigator) {
local int i;
i = 0;                                                                      
while (i < Emitters.Length) {                                               
if (Emitters[i] != None) {                                                
Emitters[i].Trigger();                                                  
}
i++;                                                                      
}
}
simulated function UpdatePrecacheMaterials() {
local int i;
Super.UpdatePrecacheMaterials();                                            
i = 0;                                                                      
while (i < Emitters.Length) {                                               
if (Emitters[i] != None) {                                                
if (Emitters[i].Texture != None) {                                      
Level.AddPrecacheMaterial(Emitters[i].Texture);                       
}
}
i++;                                                                      
}
}
native function RenderScaleFactor(float aScale);
function ScaleFactor(float aScale) {
local int i;
if (aScale > 0.00000000) {                                                  
i = 0;                                                                    
while (i < Emitters.Length) {                                             
if (Emitters[i] != None) {                                              
Emitters[i].ScaleFactor(aScale);                                      
}
++i;                                                                    
}
}
}
native function Kill(optional float aDuration);
*/
