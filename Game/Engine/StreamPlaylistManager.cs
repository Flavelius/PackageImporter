//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using TCosReborn.Framework.Common;


namespace Engine
{
    
    
    public class StreamPlaylistManager : StreamBase
    {
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamPlaylistManager")]
        [TCosReborn.Framework.Attributes.FieldConfigAttribute()]
        public int CurrentPlaylist;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamPlaylistManager")]
        public StreamInterface FileManager;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamPlaylistManager")]
        public List<StreamPlaylist> Playlists = new List<StreamPlaylist>();
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamPlaylistManager")]
        public bool bDisableNotification;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamPlaylistManager")]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public bool bDirty;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamPlaylistManager")]
        [TCosReborn.Framework.Attributes.FieldConfigAttribute()]
        public bool bShuffle;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamPlaylistManager")]
        [TCosReborn.Framework.Attributes.FieldConfigAttribute()]
        public bool bShuffleAll;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamPlaylistManager")]
        [TCosReborn.Framework.Attributes.FieldConfigAttribute()]
        public bool bRepeat;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamPlaylistManager")]
        [TCosReborn.Framework.Attributes.FieldConfigAttribute()]
        public bool bRepeatAll;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamPlaylistManager")]
        public string DefaultPlaylistName = string.Empty;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamPlaylistManager")]
        [TCosReborn.Framework.Attributes.FieldConfigAttribute()]
        public List<PlaylistParser> ParserType = new List<PlaylistParser>();
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamPlaylistManager")]
        public List<PlaylistParserBase> Parsers = new List<PlaylistParserBase>();
        
        public delegate<ChangedActivePlaylist> @__ChangedActivePlaylist__Delegate;
        
        public StreamPlaylistManager()
        {
        }
        
        public struct PlaylistParser
        {
            
            public byte Type;
            
            public string ParserClass;
        }
    }
}
/*
function string GetCurrentTitle() {
return Playlists[GetCurrentIndex()].GetTitle();                             
}
function Save() {
local int i;
i = 0;                                                                      
while (i < Playlists.Length) {                                              
Playlists[i].Save();                                                      
i++;                                                                      
}
if (!bDirty) {                                                              
return;                                                                   
}
SaveConfig();                                                               
bDirty = False;                                                             
}
function bool HandleDebugExec(string Command,string Param) {
local int i;
local bool Result;
if (Super.HandleDebugExec(Command,Param)) {                                 
return True;                                                              
}
switch (Locs(Command)) {                                                    
case "activate" :                                                         
if (Playlists.Length > 0) {                                             
ActivatePlaylist(0);                                                  
} else {                                                                
ActivatePlaylist(int(Param));                                         
}
Log("Active Playlist:"
$ Playlists[CurrentPlaylist].GetTitle()
@ "Tracks:"
$ string(Playlists[CurrentPlaylist].GetPlaylistLength()),'MusicPlayer');
break;                                                                  
case "lists" :                                                            
Log(" === All existing playlists === ",'MusicPlayer');                  
i = 0;                                                                  
while (i < Playlists.Length) {                                          
Log(" Playlist" @ string(i) @ " '" $ Playlists[i].GetTitle(),'MusicPlayer');
i++;                                                                  
}
default:                                                                  
}
i = 0;                                                                      
while (i < Playlists.Length) {                                              
Result = Playlists[i].HandleDebugExec(Command,Param)
|| Result;   
i++;                                                                      
}
return Result;                                                              
}
protected function StreamPlaylist CreatePlaylist(string PlaylistName) {
local StreamPlaylist List;
if (PlaylistName == "") {                                                   
return None;                                                              
}
List = new (None,Repl(PlaylistName," ",Chr(27))) Class'StreamPlaylist';     
if (List != None) {                                                         
List.SetTitle(Repl(PlaylistName,Chr(27)," "));                            
List.Save();                                                              
}
return List;                                                                
}
function SetRepeatAll(bool bEnable) {
bDirty = bDirty || bEnable != bRepeatAll;                                   
bRepeatAll = bEnable;                                                       
if (bEnable && bRepeat) {                                                   
SetRepeat(False);                                                         
}
}
function SetRepeat(bool bEnable) {
bDirty = bDirty || bEnable != bRepeat;                                      
bRepeat = bEnable;                                                          
if (bEnable && bRepeatAll) {                                                
SetRepeatAll(False);                                                      
}
}
function SetShuffleAll(bool bEnable) {
bDirty = bDirty || bEnable != bShuffleAll;                                  
bShuffleAll = bEnable;                                                      
if (bEnable && bShuffle) {                                                  
SetShuffle(False);                                                        
}
}
function SetShuffle(bool bEnable) {
bDirty = bDirty || bEnable != bShuffle;                                     
bShuffle = bEnable;                                                         
if (bEnable && bShuffleAll) {                                               
SetShuffleAll(False);                                                     
}
}
function bool GetRepeatAll() {
return bRepeatAll;                                                          
}
function bool GetRepeat() {
return bRepeat;                                                             
}
function bool GetShuffleAll() {
return bShuffleAll;                                                         
}
function bool GetShuffle() {
return bShuffle;                                                            
}
function bool ValidName(string Test) {
local int i;
i = 0;                                                                      
while (i < Playlists.Length) {                                              
if (Test ~= Playlists[i].GetTitle()) {                                    
return True;                                                            
}
i++;                                                                      
}
return False;                                                               
}
function int FindPlaylistIndex(StreamPlaylist Playlist) {
local int i;
if (Playlist == None) {                                                     
return -1;                                                                
}
i = 0;                                                                      
while (i < Playlists.Length) {                                              
if (Playlists[i] == Playlist) {                                           
return i;                                                               
}
i++;                                                                      
}
return -1;                                                                  
}
function int FindNameIndex(string PlaylistName) {
local int i;
if (PlaylistName == "") {                                                   
return -1;                                                                
}
i = 0;                                                                      
while (i < Playlists.Length) {                                              
if (Playlists[i].GetTitle() ~= PlaylistName) {                            
return i;                                                               
}
i++;                                                                      
}
return -1;                                                                  
}
function bool ValidIndex(int Index) {
return Index >= 0 && Index < Playlists.Length;                              
}
function int GetPlaylistCount() {
return Playlists.Length;                                                    
}
function StreamPlaylist GetPlaylistAt(int idx) {
if (!ValidIndex(idx)) {                                                     
return None;                                                              
}
return Playlists[idx];                                                      
}
function StreamPlaylist GetRandomPlaylist() {
local int i;
local int idx;
if (Playlists.Length == 0) {                                                
return None;                                                              
}
idx = Rand(Playlists.Length - 1);                                           
while (++i < 10) {                                                          
if (ActivatePlaylist(idx)) {                                              
return Playlists[CurrentPlaylist];                                      
}
idx = Rand(Playlists.Length - 1);                                         
}
return None;                                                                
}
function StreamPlaylist GetCurrentPlaylist() {
if (ValidIndex(CurrentPlaylist)) {                                          
return Playlists[CurrentPlaylist];                                        
}
if (ActivatePlaylist(0)) {                                                  
return Playlists[0];                                                      
}
return CreateDefaultPlaylist();                                             
}
function int GetCurrentIndex() {
if (ValidIndex(CurrentPlaylist)) {                                          
return CurrentPlaylist;                                                   
}
return -1;                                                                  
}
function string GetRandomSong() {
local StreamPlaylist List;
if (GetShuffle()) {                                                         
List = GetCurrentPlaylist();                                              
} else {                                                                    
if (GetShuffleAll()) {                                                    
List = GetRandomPlaylist();                                             
}
}
if (List != None) {                                                         
return List.GetRandomSong();                                              
}
return "";                                                                  
}
function string PrevSong(optional bool bForce) {
local StreamPlaylist List;
local Stream s;
local string str;
if (GetShuffleAll() || GetShuffle()) {                                      
return GetRandomSong();                                                   
}
List = GetCurrentPlaylist();                                                
if (List == None) {                                                         
Log("PlaylistManager.PrevSong() - no playlists found!",'MusicPlayer');    
return "";                                                                
}
if (GetRepeat()) {                                                          
s = List.GetCurrentStream();                                              
if (s != None) {                                                          
return s.GetPath();                                                     
}
} else {                                                                    
str = List.PrevSong(bForce || GetRepeat());                               
if (str == "" && GetRepeatAll()
&& ActivatePlaylist(CurrentPlaylist - 1)) {
str = Playlists[CurrentPlaylist].PrevSong(bForce);                      
}
if (str != "") {                                                          
return str;                                                             
}
}
return "";                                                                  
}
function string NextSong(optional bool bForce) {
local StreamPlaylist List;
local Stream s;
local string str;
if (GetShuffleAll() || GetShuffle()) {                                      
return GetRandomSong();                                                   
}
List = GetCurrentPlaylist();                                                
if (List == None) {                                                         
Log("PlaylistManager.NextSong() - no playlists found!",'MusicPlayer');    
return "";                                                                
}
if (GetRepeat()) {                                                          
s = List.GetCurrentStream();                                              
if (s != None) {                                                          
return s.GetPath();                                                     
}
} else {                                                                    
str = List.NextSong(bForce || GetRepeat());                               
if (str == "" && GetRepeatAll()
&& ActivatePlaylist(CurrentPlaylist + 1)) {
str = Playlists[CurrentPlaylist].NextSong(bForce);                      
}
if (str != "") {                                                          
return str;                                                             
}
}
return "";                                                                  
}
function bool ImportPlaylist(int PlaylistIndex,int InsertPosition,string Path) {
local int i;
local byte Type;
Type = GetPlaylistType(Path);                                               
i = 0;                                                                      
while (i < Parsers.Length) {                                                
if (Parsers[i].GetType() == Type) {                                       
return Parsers[i].Import(PlaylistIndex,InsertPosition,Path);            
}
i++;                                                                      
}
return False;                                                               
}
function bool AddDirectory(int PlaylistIndex,int InsertPosition,string Path,bool bRecurseDirectories) {
local int i;
local bool bValue;
local array<string> Results;
if (bRecurseDirectories) {                                                  
if (FileManager.GetDirectoryContents(Results,Path,1)) {                   
i = Results.Length - 1;                                                 
while (i >= 0) {                                                        
bValue = AddDirectory(PlaylistIndex,InsertPosition,Path $ Results[i] $ static.GetPathSeparator(),True)
|| bValue;
i--;                                                                  
}
}
}
Results.Remove(0,Results.Length);                                           
if (FileManager.GetDirectoryContents(Results,Path,4)) {                     
if (!Playlists[PlaylistIndex].ValidStreamIndex(InsertPosition)) {         
InsertPosition = Playlists[PlaylistIndex].GetPlaylistLength();          
}
i = Results.Length - 1;                                                   
while (i >= 0) {                                                          
bValue = Playlists[PlaylistIndex].InsertSong(InsertPosition,Path $ Results[i],bDisableNotification) != -1
|| bValue;
i--;                                                                    
}
}
return bValue;                                                              
}
function byte GetPlaylistType(string Path) {
local string Ext;
Ext = static.ParseExtension(Path);                                          
switch (Locs(Ext)) {                                                        
case "m3u" :                                                              
return 1;                                                               
case "b4s" :                                                              
return 3;                                                               
case "pls" :                                                              
return 2;                                                               
default:                                                                  
return 0;                                                               
}
}
}
function bool ClearCurrentPlaylist() {
if (!ValidIndex(CurrentPlaylist)) {                                         
return False;                                                             
}
return Playlists[CurrentPlaylist].ClearPlaylist();                          
}
function bool RemoveFromCurrentPlaylist(string Path,optional bool bSkipNotification) {
if (ValidIndex(CurrentPlaylist)) {                                          
return Playlists[CurrentPlaylist].RemoveSong(Path,bSkipNotification);     
}
return False;                                                               
}
function bool InsertInPlaylist(int PlaylistIndex,int InsertPosition,string Path,optional bool bSkipNotification) {
local byte Type;
local bool bResult;
if (!ValidIndex(PlaylistIndex)) {                                           
return False;                                                             
}
Type = static.ConvertToFileType(Path);                                      
Playlists[PlaylistIndex].InitializePlaylist(FileManager);                   
switch (Type) {                                                             
case 0 :                                                                  
bDisableNotification = True;                                            
bResult = AddDirectory(PlaylistIndex,InsertPosition,Path,True);         
bDisableNotification = False;                                           
if (bResult && !bSkipNotification) {                                    
Playlists[PlaylistIndex].OnPlaylistChanged();                         
}
return bResult;                                                         
case 5 :                                                                  
bDisableNotification = True;                                            
bResult = ImportPlaylist(PlaylistIndex,InsertPosition,Path);            
bDisableNotification = False;                                           
if (bResult && !bSkipNotification) {                                    
Playlists[PlaylistIndex].OnPlaylistChanged();                         
}
return bResult;                                                         
case 4 :                                                                  
return Playlists[PlaylistIndex].InsertSong(InsertPosition,Path,bDisableNotification || bSkipNotification) != -1;
default:                                                                  
return False;                                                           
}
}
}
function bool AddToPlaylist(int PlaylistIndex,string Path,optional bool bSkipNotification) {
if (!ValidIndex(PlaylistIndex)) {                                           
if (!ValidIndex(CurrentPlaylist)) {                                       
return False;                                                           
}
PlaylistIndex = CurrentPlaylist;                                          
}
return InsertInPlaylist(PlaylistIndex,-1,Path,bSkipNotification);           
}
function bool RenamePlaylist(int Index,out string NewName) {
local StreamPlaylist Temp;
local string str;
local int i;
if (!ValidIndex(Index) || NewName == "") {                                  
return False;                                                             
}
str = NewName;                                                              
while (ValidName(NewName)) {                                                
NewName = str $ string(i++);                                              
}
Temp = CreatePlaylist(NewName);                                             
if (Temp == None) {                                                         
return False;                                                             
}
Temp.ReplaceWith(Playlists[Index]);                                         
Playlists[Index].ClearConfig();                                             
Playlists[Index] = Temp;                                                    
Playlists[Index].Save();                                                    
if (!bDisableNotification) {                                                
ChangedActivePlaylist(Playlists[Index]);                                  
}
return True;                                                                
}
function bool RemovePlaylistAt(int Index) {
local bool bWasActive;
if (!ValidIndex(Index)) {                                                   
return False;                                                             
}
bWasActive = CurrentPlaylist == Index;                                      
Playlists[Index].ClearConfig();                                             
Playlists.Remove(Index,1);                                                  
if (bWasActive) {                                                           
ActivatePlaylist(0);                                                      
}
return True;                                                                
}
function bool RemovePlaylist(string PlaylistName) {
local int i;
i = FindNameIndex(PlaylistName);                                            
if (i != -1) {                                                              
return RemovePlaylistAt(i);                                               
}
return False;                                                               
}
protected function int AppendPlaylist(StreamPlaylist Playlist) {
local int i;
if (Playlist == None) {                                                     
return -1;                                                                
}
i = FindPlaylistIndex(Playlist);                                            
if (i == -1) {                                                              
i = Playlists.Length;                                                     
}
Playlists[i] = Playlist;                                                    
bDirty = True;                                                              
return i;                                                                   
}
function int AddPlaylist(out string NewPlaylistName) {
local string str;
local int i;
if (NewPlaylistName == "") {                                                
NewPlaylistName = DefaultPlaylistName;                                    
}
str = NewPlaylistName;                                                      
while (ValidName(NewPlaylistName)) {                                        
NewPlaylistName = str $ string(i++);                                      
}
return AppendPlaylist(CreatePlaylist(NewPlaylistName));                     
}
function bool ActivatePlaylist(int ListIndex,optional bool bNoFail) {
if (!ValidIndex(ListIndex)) {                                               
if (bNoFail) {                                                            
return False;                                                           
}
if (GetRepeatAll()) {                                                     
if (ListIndex < 0) {                                                    
ListIndex = Playlists.Length - 1;                                     
} else {                                                                
if (ListIndex >= Playlists.Length) {                                  
ListIndex = 0;                                                      
}
}
if (!ValidIndex(ListIndex)) {                                           
return False;                                                         
}
} else {                                                                  
return False;                                                           
}
}
bDirty = bDirty || ListIndex != CurrentPlaylist;                            
Playlists[ListIndex].InitializePlaylist(FileManager);                       
CurrentPlaylist = ListIndex;                                                
if (!bDisableNotification) {                                                
ChangedActivePlaylist(Playlists[ListIndex]);                              
}
return True;                                                                
}
protected function StreamPlaylist CreateDefaultPlaylist() {
local int i;
local string Nothing;
Nothing = DefaultPlaylistName;                                              
i = AddPlaylist(Nothing);                                                   
if (ValidIndex(i) && ActivatePlaylist(i)) {                                 
return Playlists[CurrentPlaylist];                                        
}
return None;                                                                
}
protected function InitializeParsers() {
local int i;
local int j;
local class<PlaylistParserBase> ParseClass;
i = 0;                                                                      
while (i < ParserType.Length) {                                             
if (ParserType[i].ParserClass != "") {                                    
ParseClass = Class<PlaylistParserBase>(static.DynamicLoadObject(ParserType[i].ParserClass,Class'Class'));
if (ParseClass != None) {                                               
j = Parsers.Length;                                                   
Parsers[j] = new (self) ParseClass;                                   
Parsers[j].SetType(ParserType[i].Type);                               
}
}
i++;                                                                      
}
}
protected function InitializePlaylists() {
local array<string> PlaylistNames;
local StreamPlaylist NewList;
local int i;
PlaylistNames = static.GetPerObjectNames("UPlaylists","StreamPlaylist");    
i = 0;                                                                      
while (i < PlaylistNames.Length) {                                          
if (PlaylistNames[i] == "") {                                             
} else {                                                                  
NewList = CreatePlaylist(PlaylistNames[i]);                             
AppendPlaylist(NewList);                                                
}
i++;                                                                      
}
if (Playlists.Length == 0) {                                                
CreateDefaultPlaylist();                                                  
} else {                                                                    
if (!ActivatePlaylist(CurrentPlaylist)) {                                 
ActivatePlaylist(0);                                                    
}
}
}
function Initialize(StreamInterface InFileManager) {
FileManager = InFileManager;                                                
InitializePlaylists();                                                      
InitializeParsers();                                                        
}
delegate ChangedActivePlaylist(StreamPlaylist NewPlaylist);
*/
