//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using TCosReborn.Framework.Common;


namespace Engine
{
    
    
    public class StreamInteraction : Interaction
    {
        
        public const int INVALIDSONGHANDLE = 0;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamInteraction")]
        [TCosReborn.Framework.Attributes.FieldConfigAttribute()]
        public float FadeInSeconds;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamInteraction")]
        [TCosReborn.Framework.Attributes.FieldConfigAttribute()]
        public float FadeOutSeconds;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamInteraction")]
        [TCosReborn.Framework.Attributes.FieldConfigAttribute()]
        public string PlaylistManagerType = string.Empty;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamInteraction")]
        public StreamPlaylistManager PlaylistManager;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamInteraction")]
        public StreamInterface FileManager;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamInteraction")]
        public int CurrentSongHandle;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamInteraction")]
        public float CurrentSongPosition;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamInteraction")]
        public float LastPlayTime;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamInteraction")]
        public float CurrentSongDuration;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamInteraction")]
        public string CurrentSong = string.Empty;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamInteraction")]
        public Stream CurrentStreamAttachment;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamInteraction")]
        [TCosReborn.Framework.Attributes.FieldConfigAttribute()]
        public bool bAutoStart;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamInteraction")]
        [TCosReborn.Framework.Attributes.FieldConfigAttribute()]
        public bool bDisplayTrackChanges;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamInteraction")]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public bool bRestartTrack;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="StreamInteraction")]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public bool bTrackWaiting;
        
        public delegate<OnStreamChanged> @__OnStreamChanged__Delegate;
        
        public delegate<OnStreamingStopped> @__OnStreamingStopped__Delegate;
        
        public delegate<OnAdjustVolume> @__OnAdjustVolume__Delegate;
        
        public StreamInteraction()
        {
        }
    }
}
/*
protected function PlayerController PC() {
if (HasPlayer()) {                                                          
return ViewportOwner.Actor;                                               
}
return None;                                                                
}
protected function KillMusic() {
if (!HasPlayer()) {                                                         
return;                                                                   
}
PC().StopAllMusic();                                                        
PC().AllowMusicPlayback(False);                                             
}
function ClearSongInfo() {
SetStreamAttachment(None);                                                  
CurrentSong = "";                                                           
CurrentSongHandle = 0;                                                      
CurrentSongPosition = 0.00000000;                                           
CurrentSongDuration = 0.00000000;                                           
}
function bool HasPlayer() {
if (ViewportOwner == None) {                                                
Log("StreamInteraction::HasPlayer() - No ViewportOwner!",'MusicPlayer');  
return False;                                                             
}
if (ViewportOwner.Actor == None) {                                          
Log("StreamInteraction::HasPlayer() - No PlayerController!",'MusicPlayer');
return False;                                                             
}
return True;                                                                
}
function bool IsPlaying() {
return CurrentSongHandle != 0;                                              
}
function float GetStreamDuration() {
if (!IsPlaying()) {                                                         
return 0.00000000;                                                        
}
if (CurrentSongDuration == 0.00000000) {                                    
CurrentSongDuration = float(PC().ConsoleCommand("GETDURATION" @ string(CurrentSongHandle)));
}
return CurrentSongDuration;                                                 
}
function float GetStreamVolume() {
if (HasPlayer()) {                                                          
return float(PC().ConsoleCommand("get ini:Engine.Engine.AudioDevice MusicVolume"));
}
return 0.80000001;                                                          
}
function float GetStreamPosition() {
return CurrentSongPosition;                                                 
}
function PlayStream(string fileName,optional int SeekSeconds) {
local int LastSongHandle;
if (fileName != "") {                                                       
if (fileName == CurrentSong && IsPaused()
&& SeekSeconds == 0.00000000) {
PauseSong();                                                            
return;                                                                 
}
SeekSeconds = 0;                                                          
LastSongHandle = CurrentSongHandle;                                       
if (SeekSeconds > 0.00000000 && CurrentSong == fileName) {                
CurrentSongHandle = PC().PlayStream(fileName,True);                     
} else {                                                                  
CurrentSongHandle = PC().PlayStream(fileName,True);                     
}
if (CurrentSongHandle == 0) {                                             
Log("StreamInteraction::PlaySong() Invalid song name:"
@ fileName,'MusicPlayer');
} else {                                                                  
KillMusic();                                                            
CurrentSongPosition = SeekSeconds;                                      
CurrentSongDuration = 0.00000000;                                       
if (LastSongHandle != 0) {                                              
if (SeekSeconds > 0.00000000 && CurrentSong == fileName) {            
PC().StopStream(LastSongHandle);                                    
} else {                                                              
PC().StopStream(LastSongHandle,FadeOutSeconds);                     
}
}
CurrentSong = fileName;                                                 
OnStreamChanged(CurrentSong);                                           
}
} else {                                                                    
if (CurrentSongHandle == 0) {                                             
PC().AllowMusicPlayback(True);                                          
ClearSongInfo();                                                        
}
}
}
function bool Seek(float SeekSeconds) {
return False;                                                               
if (CurrentSongHandle != 0) {                                               
if (PC().SeekStream(CurrentSongHandle,SeekSeconds) > 0) {                 
CurrentSongPosition = SeekSeconds;                                      
return True;                                                            
}
}
return False;                                                               
}
function SeekStream(float Seconds) {
Seek(Seconds);                                                              
}
function SetMusicVolume(float NewVolume) {
if (HasPlayer()) {                                                          
PC().AdjustVolume(CurrentSongHandle,FClamp(NewVolume,0.00000000,1.00000000));
OnAdjustVolume(NewVolume);                                                
}
}
function StopSong() {
if (!HasPlayer()) {                                                         
return;                                                                   
}
if (CurrentSongHandle != 0) {                                               
PC().StopStream(CurrentSongHandle,FadeOutSeconds);                        
}
PC().AllowMusicPlayback(True);                                              
ClearSongInfo();                                                            
}
function PlaySong(string SongName,float InitialTime) {
if (!HasPlayer()) {                                                         
return;                                                                   
}
PlayStream(SongName,InitialTime);                                           
}
function PauseSong() {
if (!HasPlayer()) {                                                         
return;                                                                   
}
if (CurrentSongHandle != 0) {                                               
PC().PauseStream(CurrentSongHandle);                                      
}
}
function PrevSong(optional bool bForce) {
if (!HasPlayer()) {                                                         
return;                                                                   
}
bTrackWaiting = False;                                                      
if (CurrentSongPosition > 3.00000000) {                                     
PlayStream(CurrentSong);                                                  
} else {                                                                    
PlayStream(PlaylistManager.PrevSong(bForce));                             
}
}
function NextSong(optional bool bForce) {
if (!HasPlayer()) {                                                         
return;                                                                   
}
bTrackWaiting = False;                                                      
PlayStream(PlaylistManager.NextSong(bForce));                               
}
function int CurrentHandle() {
return CurrentSongHandle;                                                   
}
function string GetCurrentStream() {
HasPlayer();                                                                
Log("CurrentSongHandle:" $ string(CurrentSongHandle)
@ "CurrentSong:"
$ CurrentSong
@ "IsPaused:"
$ string(IsPaused()));
return CurrentSong;                                                         
}
event NotifyLevelChange() {
if (CurrentSongHandle != 0 && CurrentSong != "") {                          
bRestartTrack = True;                                                     
}
}
function StreamFinished(int Handle,byte Reason) {
Super.StreamFinished(Handle,Reason);                                        
PlaylistManager.Save();                                                     
Log("StreamFinished() Handle:" $ string(Handle)
@ "Reason:"
$ string(static.GetEnum(Enum'EStreamFinishReason',Reason)),'MusicPlayer');
if (Handle == CurrentSongHandle && CurrentSongHandle != 0) {                
Log("CurrentSongPosition:"
$ Class'StreamBase'.static.FormatTimeDisplay(CurrentSongPosition)
@ "Total song time:"
$ Class'StreamBase'.static.FormatTimeDisplay(GetStreamDuration()));
CurrentSongPosition = 0.00000000;                                         
CurrentSongHandle = 0;                                                    
SetStreamAttachment(None);                                                
OnStreamingStopped();                                                     
QueueNextSong();                                                          
} else {                                                                    
Log(string(Name)
@ "StreamFinished Invalid Song Handle",'MusicPlayer');
}
}
function SetStreamAttachment(Stream StreamObj) {
local StreamTag sTag;
CurrentStreamAttachment = StreamObj;                                        
if (CurrentStreamAttachment != None) {                                      
sTag = CurrentStreamAttachment.GetTag();                                  
if (sTag != None) {                                                       
CurrentSongDuration = float(sTag.Duration.FieldValue) / 1000.00000000;  
}
}
}
final native function bool IsPaused(optional int SongHandle);
event Tick(float DeltaTime) {
if (bTrackWaiting) {                                                        
NextSong();                                                               
} else {                                                                    
if (bRestartTrack) {                                                      
bRestartTrack = False;                                                  
PlayStream(CurrentSong,CurrentSongPosition);                            
} else {                                                                  
if (!IsPaused() && CurrentSongHandle != 0) {                            
CurrentSongPosition += DeltaTime / ViewportOwner.Actor.Level.TimeDilation;
}
}
}
}
function QueueNextSong() {
bTrackWaiting = True;                                                       
}
function StreamPlaylistManager CreatePlaylistManager() {
local class<StreamPlaylistManager> PlaylistManagerClass;
if (PlaylistManagerType != "") {                                            
PlaylistManagerClass = Class<StreamPlaylistManager>(static.DynamicLoadObject(PlaylistManagerType,Class'Class'));
}
if (PlaylistManagerClass == None) {                                         
PlaylistManagerClass = Class'StreamPlaylistManager';                      
}
return new PlaylistManagerClass;                                            
}
function StreamInterface CreateFileManager() {
return new Class'StreamInterface';                                          
}
event Initialized() {
Super.Initialized();                                                        
ClearSongInfo();                                                            
FileManager = CreateFileManager();                                          
PlaylistManager = CreatePlaylistManager();                                  
if (PlaylistManager != None) {                                              
PlaylistManager.Initialize(FileManager);                                  
}
if (bAutoStart) {                                                           
QueueNextSong();                                                          
}
}
delegate OnAdjustVolume(float NewVolume);
delegate OnStreamingStopped();
delegate OnStreamChanged(string NewStreamFileName);
*/
