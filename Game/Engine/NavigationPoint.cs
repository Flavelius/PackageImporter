//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using TCosReborn.Framework.Common;


namespace Engine
{
    
    
    public class NavigationPoint : Actor
    {
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public bool bEndPoint;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public bool bTransientEndPoint;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public bool bHideEditorPaths;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public bool bCanReach;
        
        public bool taken;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="NavigationPoint")]
        public bool bBlocked;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="NavigationPoint")]
        public bool bPropagatesSound;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="NavigationPoint")]
        public bool bOneWayPath;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="NavigationPoint")]
        public bool bNeverUseStrafing;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="NavigationPoint")]
        public bool bAlwaysUseStrafing;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public bool bForceNoStrafing;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public bool bAutoBuilt;
        
        public bool bSpecialMove;
        
        public bool bNoAutoConnect;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public bool bNotBased;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public bool bPathsChanged;
        
        public bool bDestinationOnly;
        
        public bool bSourceOnly;
        
        public bool bSpecialForced;
        
        public bool bMustBeReachable;
        
        public bool bBlockable;
        
        public bool bFlyingPreferred;
        
        public bool bMayCausePain;
        
        public bool bReceivePlayerToucherDiedNotify;
        
        public bool bAlreadyVisited;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="NavigationPoint")]
        public bool bVehicleDestination;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="NavigationPoint")]
        public bool bMakeSourceOnly;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="NavigationPoint")]
        public bool bNoSuperSize;
        
        public bool bForcedOnly;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public List<ReachSpec> PathList = new List<ReachSpec>();
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="NavigationPoint")]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=4)]
        public NameProperty[] ProscribedPaths = new NameProperty[0];
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="NavigationPoint")]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=4)]
        public NameProperty[] ForcedPaths = new NameProperty[0];
        
        public int visitedWeight;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int bestPathWeight;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public NavigationPoint nextNavigationPoint;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public NavigationPoint nextOrdered;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public NavigationPoint prevOrdered;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public NavigationPoint previousPath;
        
        public int cost;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="NavigationPoint")]
        public int ExtraCost;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public int TransientCost;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public int FearCost;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float LastDetourWeight;
        
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=2)]
        public byte[] BaseVisible = new byte[0];
        
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=2)]
        public float[] BaseDist = new float[0];
        
        public Vector MaxPathSize;
        
        public NavigationPoint()
        {
        }
    }
}
/*
function PlayerToucherDied(Pawn P);
function MoverClosed();
function MoverOpened();
function bool ProceedWithMove(Pawn Other) {
return True;                                                                
}
event bool SuggestMovePreparation(Pawn Other) {
return False;                                                               
}
event float DetourWeight(Pawn Other,float PathWeight);
event bool Accept(Actor Incoming,Actor Source) {
taken = Incoming.SetLocation(Location);                                     
if (taken) {                                                                
Incoming.Velocity = vect(0.000000, 0.000000, 0.000000);                   
Incoming.SetRotation(Rotation);                                           
}
Incoming.PlayTeleportEffect(True,False);                                    
TriggerEvent(Event,self,Pawn(Incoming));                                    
return taken;                                                               
}
event int SpecialCost(Pawn Seeker,ReachSpec Path);
function SetBaseVisibility(int BaseNum) {
local NavigationPoint N;
BaseVisible[BaseNum] = 1;                                                   
N = Level.NavigationPointList;                                              
while (N != None) {                                                         
if (N.BaseVisible[BaseNum] == 0
&& FastTrace(N.Location + (88 - 2 * N.CollisionHeight) * vect(0.000000, 0.000000, 1.000000),Location + (88 - 2 * N.CollisionHeight) * vect(0.000000, 0.000000, 1.000000))) {
N.BaseVisible[BaseNum] = 1;                                             
}
N = N.nextNavigationPoint;                                                
}
}
final native function SetBaseDistance(int BaseNum);
function PostBeginPlay() {
local int i;
ExtraCost = Max(ExtraCost,0);                                               
i = 0;                                                                      
while (i < PathList.Length) {                                               
MaxPathSize.X = FMax(MaxPathSize.X,PathList[i].CollisionRadius);          
MaxPathSize.Z = FMax(MaxPathSize.Z,PathList[i].CollisionHeight);          
i++;                                                                      
}
MaxPathSize.Y = MaxPathSize.X;                                              
Super.PostBeginPlay();                                                      
}
*/
