//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;


namespace Engine
{


    public class TerrainInfo : Info
    {
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="TerrainInfo")]
        public int TerrainSectorSize;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="TerrainInfo")]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        public Texture TerrainMap;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="TerrainInfo")]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        public Texture VertexLightMap;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="TerrainInfo")]
        public Vector TerrainScale;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="TerrainInfo")]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=32)]
        public TerrainLayer[] Layers = new TerrainLayer[0];
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="TerrainInfo")]
        public List<DecorationLayer> DecoLayers = new List<DecorationLayer>();
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="TerrainInfo")]
        public float DecoLayerOffset;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="TerrainInfo")]
        public bool Inverted;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="TerrainInfo")]
        public bool bKCollisionHalfRes;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public int JustLoaded;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public List<DecorationLayerData> DecoLayerData = new List<DecorationLayerData>();
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public List<TerrainSector> Sectors = new List<TerrainSector>();
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public List<Vector> Vertices = new List<Vector>();
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int HeightmapX;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int HeightmapY;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int SectorsX;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int SectorsY;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public TerrainPrimitive Primitive;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public List<NormalPair> FaceNormals = new List<NormalPair>();
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=4)]
        public Vector[] ToWorld = new Vector[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=4)]
        public Vector[] ToHeightmap = new Vector[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public List<int> SelectedVertices = new List<int>();
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int ShowGrid;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public List<int> QuadVisibilityBitmap = new List<int>();
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public List<int> EdgeTurnBitmap = new List<int>();
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public List<Material> QuadDomMaterialBitmap = new List<Material>();
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public List<int> RenderCombinations = new List<int>();
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public List<int> VertexStreams = new List<int>();
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public List<int> DecoVertexStreams = new List<int>();
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public List<Color> VertexColors = new List<Color>();
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public List<Color> PaintedColor = new List<Color>();
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        public Texture CollapsedLayers;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public int SectorProjectorsPtr;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        public Texture OldTerrainMap;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public List<byte> OldHeightmap = new List<byte>();
        
        public TerrainInfo()
        {
        }
        
        public struct DecoInfo
        {
            
            public Vector Location;
            
            public Rotator Rotation;
            
            public Vector Scale;
            
            public Vector TempScale;
            
            public Color Color;
            
            public int Distance;
        }
        
        public struct DecoSectorInfo
        {
            
            public List<DecoInfo> DecoInfo;
            
            public Vector Location;
            
            public float Radius;
            
            public int VertexStreamNum;
            
            public int NumPrimitives;
            
            public float LastRenderTime;
            
            public float CoordinateScale;
            
            public byte VertexStreamOffsetLo;
            
            public byte VertexStreamOffsetHi;
        }
        
        public struct DecorationLayerData
        {
            
            public List<DecoSectorInfo> DecoSectorInfos;
        }
        
        public struct DecorationLayer
        {
            
            public int ShowOnTerrain;
            
            public Texture ScaleMap;
            
            public Texture DensityMap;
            
            public Texture ColorMap;
            
            public StaticMesh StaticMesh;
            
            public RangeVector ScaleMultiplier;
            
            public Range FadeoutRadius;
            
            public Range FadeinRadius;
            
            public Range DensityMultiplier;
            
            public int MaxPerQuad;
            
            public int Seed;
            
            public int AlignToTerrain;
            
            public byte DrawOrder;
            
            public int ShowOnInvisibleTerrain;
            
            public int LitDirectional;
            
            public int DisregardTerrainLighting;
            
            public int RandomYaw;
            
            public byte DetailMode;
        }
        
        public struct TerrainLayer
        {
            
            public Material Texture;
            
            public Texture AlphaMap;
            
            public float UScale;
            
            public float VScale;
            
            public float UPan;
            
            public float VPan;
            
            public byte TextureMapAxis;
            
            public float TextureRotation;
            
            public Rotator LayerRotation;
            
            public Matrix TerrainMatrix;
            
            public float KFriction;
            
            public float KRestitution;
            
            public Texture LayerWeightMap;
        }
        
        public struct NormalPair
        {
            
            public Vector Normal1;
            
            public Vector Normal2;
        }
        
        public enum ESortOrder
        {
            
            SORT_NoSort ,
            
            SORT_BackToFront ,
            
            SORT_FrontToBack,
        }
        
        public enum ETexMapAxis
        {
            
            TEXMAPAXIS_XY ,
            
            TEXMAPAXIS_XZ ,
            
            TEXMAPAXIS_YZ,
        }
    }
}
/*
final native function PokeTerrain(Vector WorldLocation,int Radius,int MaxDepth);
*/
