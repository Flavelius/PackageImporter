//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using TCosReborn.Framework.Common;


namespace Engine
{
    
    
    public class SBProjectileEmitter : Emitter
    {
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Projectile")]
        public Actor TargetActor;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Projectile")]
        public float TimeToTarget;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Projectile")]
        public bool StartActive;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Projectile")]
        public bool ResetableWhileActive;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public Vector StartLocation;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public bool Active;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public float ProjectileTimer;
        
        public SBProjectileEmitter()
        {
        }
    }
}
/*
function SetTargetActor(Actor anActor) {
TargetActor = anActor;                                                      
}
function SetTimeToTarget(float aTime) {
TimeToTarget = aTime;                                                       
}
function PrepareProjectile() {
SetLocation(StartLocation);                                                 
ProjectileTimer = 0.00000000;                                               
}
event cl_OnTick(float DeltaTime) {
if (Active) {                                                               
ProjectileTimer += DeltaTime;                                             
if (ProjectileTimer <= TimeToTarget) {                                    
SetLocation(StartLocation + ProjectileTimer / TimeToTarget * (TargetActor.Location - StartLocation));
} else {                                                                  
SetLocation(TargetActor.Location);                                      
UnTrigger(None,None);                                                   
Active = False;                                                         
}
}
}
event UnTrigger(Actor Other,Pawn EventInstigator) {
PrepareProjectile();                                                        
Active = False;                                                             
Super.UnTrigger(Other,EventInstigator);                                     
}
event Trigger(Actor Other,Pawn EventInstigator) {
Super.Trigger(Other,EventInstigator);                                       
if (!Active || ResetableWhileActive) {                                      
PrepareProjectile();                                                      
Active = True;                                                            
}
}
event BeginPlay() {
StartLocation = Location;                                                   
Active = StartActive;                                                       
}
*/
