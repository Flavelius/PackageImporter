//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using TCosReborn.Framework.Common;


namespace Engine
{
    
    
    public class PlayInfo : UObject
    {
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public List<PlayInfoData> Settings = new List<PlayInfoData>();
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.TypeProxyDefinition(TypeName="Info")]
        public List<SerializableTypeProxy> InfoClasses = new List<SerializableTypeProxy>();
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public List<int> ClassStack = new List<int>();
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public List<string> Groups = new List<string>();
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public string LastError = string.Empty;
        
        public PlayInfo()
        {
        }
        
        public struct PlayInfoData
        {
            
            //public Property ThisProp;
            
            public SerializableTypeProxy ClassFrom;
            
            public string SettingName;
            
            public string DisplayName;
            
            public string Description;
            
            public string Grouping;
            
            public string Data;
            
            public string ExtraPriv;
            
            public string Value;
            
            public byte RenderType;
            
            public byte SecLevel;
            
            public byte Weight;
            
            public bool bMPOnly;
            
            public bool bAdvanced;
            
            public bool bGlobal;
            
            public bool bStruct;
            
            public int ArrayDim;
        }
        
        public enum EPlayInfoType
        {
            
            PIT_Check ,
            
            PIT_Select ,
            
            PIT_Text ,
            
            PIT_Custom,
        }
    }
}
/*
final function SplitStringToArray(out array<string> Parts,string Source,string Delim) {
Split(Source,Delim,Parts);                                                  
}
final function class<GameInfo> GetGameInfo() {
local int i;
i = 0;                                                                      
while (i < InfoClasses.Length) {                                            
if (Class<GameInfo>(InfoClasses[i]) != None) {                            
return Class<GameInfo>(InfoClasses[i]);                                 
}
i++;                                                                      
}
return None;                                                                
}
final function bool Init(array<class<Info>> Classes,optional bool bStrict) {
local int i;
local int j;
local bool B;
if (Classes.Length == 0) {                                                  
return B;                                                                 
}
B = True;                                                                   
Clear();                                                                    
i = 0;                                                                      
while (i < Classes.Length) {                                                
if (Classes[i] == None) {                                                 
Log("Call in PlayInfo.Init() with 'None' value for Class array member.  Index:"
$ string(i));
Classes.Remove(i--,1);                                                  
} else {                                                                  
Classes[i].FillPlayInfo(self);                                          
}
i++;                                                                      
}
if (bStrict) {                                                              
i = InfoClasses.Length - 1;                                               
while (i >= 0) {                                                          
j = 0;                                                                  
while (j < Classes.Length) {                                            
if (InfoClasses[i] == Classes[j]) {                                   
goto jl012F;                                                        
}
j++;                                                                  
}
if (j < Classes.Length) {                                               
} else {                                                                
B = B && RemoveClass(InfoClasses[i]);                                 
}
i--;                                                                    
}
}
return B;                                                                   
}
final function Dump(optional string Group) {
local int i;
Log("** Dumping settings array for PlayInfo object '"
$ string(Name)
$ "' **");
Log("** Classes:" @ string(InfoClasses.Length));                            
i = 0;                                                                      
while (i < InfoClasses.Length) {                                            
Log("   " $ string(i) $ ")" @ string(InfoClasses[i].Name));               
i++;                                                                      
}
Log("");                                                                    
Log("** Groups:" @ string(Groups.Length));                                  
i = 0;                                                                      
while (i < Groups.Length) {                                                 
Log("   " $ string(i) $ ")" @ Groups[i]);                                 
i++;                                                                      
}
Log("");                                                                    
Log("** Settings:" @ string(Settings.Length));                              
i = 0;                                                                      
while (i < Settings.Length) {                                               
if (Group == "" || Group ~= Settings[i].Grouping) {                       
Log(string(i) $ ")" @ Settings[i].SettingName);                         
Log("            DisplayName:" @ Settings[i].DisplayName);              
Log("              ClassFrom:" @ string(Settings[i].ClassFrom));        
Log("                  Group:" @ Settings[i].Grouping);                 
Log("                  Value:" @ Settings[i].Value);                    
Log("                   Data:" @ Settings[i].Data);                     
Log("                 Weight:" @ string(Settings[i].Weight));           
Log("                 Struct:" @ string(Settings[i].bStruct));          
Log("                 Global:" @ string(Settings[i].bGlobal));          
Log("                 MPOnly:" @ string(Settings[i].bMPOnly));          
Log("               SecLevel:" @ string(Settings[i].SecLevel));         
Log("               ArrayDim:" @ string(Settings[i].ArrayDim));         
Log("              bAdvanced:" @ string(Settings[i].bAdvanced));        
Log("              ExtraPriv:" @ Settings[i].ExtraPriv);                
Log("             RenderType:"
@ string(static.GetEnum(Enum'EPlayInfoType',Settings[i].RenderType)));
Log("");                                                                
}
i++;                                                                      
}
}
final native(709) function Sort(byte SortingMethod);
final native(708) function int FindIndex(string SettingName);
final native(707) function bool GetSettings(string GroupName,out array<PlayInfoData> GroupSettings);
final native(706) function bool StoreSetting(int Index,coerce string NewVal,optional string RangeData);
final native(705) function bool SaveSettings();
final native(704) function bool AddSetting(string Group,string PropertyName,string Description,byte SecLevel,byte Weight,string RenderType,optional string Extras,optional string ExtraPrivs,optional bool bMultiPlayerOnly,optional bool bAdvanced);
final native(703) function bool PopClass();
final native(702) function bool RemoveClass(class<Info> RemovingClass);
final native(701) function bool AddClass(class<Info> AddingClass);
final native(700) function bool Clear();
*/
