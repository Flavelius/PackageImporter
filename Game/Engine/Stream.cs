//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using TCosReborn.Framework.Common;


namespace Engine
{
    
    
    public class Stream : StreamBase
    {
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Stream")]
        public int Handle;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Stream")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        private string DefaultExtension = string.Empty;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Stream")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public StreamTag IDTag;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Stream")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        private FilePath PathName;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Stream")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        private byte Type;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Stream")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public bool bReadOnly;
        
        public Stream()
        {
        }
    }
}
/*
function DumpTags() {
IDTag.DumpTag();                                                            
}
function DumpScriptTag() {
IDTag.DumpScriptTag();                                                      
}
event bool SetHandle(int NewHandle) {
Handle = NewHandle;                                                         
return True;                                                                
}
function string GetSongTitle() {
if (IDTag == None || IDTag.Title.FieldValue == "") {                        
return GetFileName();                                                     
}
return IDTag.Title.FieldValue;                                              
}
function string GetFullName() {
return GetFileName() $ "." $ GetExtension();                                
}
function string GetPath() {
return PathName.FullPath;                                                   
}
function string GetExtension() {
return PathName.Extension;                                                  
}
function string GetFileName() {
return PathName.fileName;                                                   
}
function string GetDirectory() {
return PathName.Directory;                                                  
}
function byte GetType() {
return Type;                                                                
}
function StreamTag GetTag() {
return IDTag;                                                               
}
function int GetHandle() {
return Handle;                                                              
}
function bool IsReadOnly() {
return bReadOnly;                                                           
}
final native function bool LoadID3Tag();
final native function bool SaveID3Tag();
*/
