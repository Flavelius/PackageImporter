//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;


namespace Engine
{


    public class PlaylistParserBase : StreamInterface
    {
        
        private byte Type;
        
        public string PlaylistName = string.Empty;
        
        public List<string> Paths = new List<string>();
        
        public List<string> Lines = new List<string>();
        
        public List<HtmlChar> SpecialChars = new List<HtmlChar>();
        
        public PlaylistParserBase()
        {
        }
        
        public struct HtmlChar
        {
            
            public string Plain;
            
            public string Coded;
        }
    }
}
/*
static function string HtmlDecode(string src) {
local int i;
i = 0;                                                                      
while (i < default.SpecialChars.Length) {                                   
src = Repl(src,default.SpecialChars[i].Coded,default.SpecialChars[i].Plain);
i++;                                                                      
}
return src;                                                                 
}
static function string GetTagged(out string Text) {
local string Tag;
local int opos;
local int cpos;
opos = InStr(Text,"<");                                                     
if (opos != -1) {                                                           
Text = Mid(Text,opos + 1);                                                
cpos = InStr(Text,">");                                                   
if (cpos == -1) {                                                         
return "";                                                              
}
Tag = Left(Text,cpos);                                                    
Text = Mid(Text,cpos + 1);                                                
opos = InStr(Locs(Text),"</" $ Locs(Tag) $ ">");                          
if (opos == -1) {                                                         
return Tag;                                                             
}
Text = Left(Text,opos);                                                   
return Tag;                                                               
}
return "";                                                                  
}
static function string GetValue(string KeyValuePair,optional bool bAllowSpaces) {
local int i;
local string str;
i = InStr(KeyValuePair,"=");                                                
if (i != -1) {                                                              
str = Mid(KeyValuePair,i + 1);                                            
if (Left(str,1) == """) {                                                 
str = Mid(str,1);                                                       
i = static.RevInStr(str,""");                                           
if (i != -1) {                                                          
str = Left(str,i);                                                    
}
return str;                                                             
}
i = InStr(str," ");                                                       
if (i != -1 && !bAllowSpaces) {                                           
str = Left(str,i);                                                      
}
return str;                                                               
}
return "";                                                                  
}
function ParseLines() {
Paths.Remove(0,Paths.Length);                                               
}
function ImportedPlaylist(int PlaylistIndex,int InsertPosition) {
local StreamPlaylist Playlist;
local int i;
ParseLines();                                                               
if (!Outer.ValidIndex(PlaylistIndex)) {                                     
PlaylistIndex = Outer.AddPlaylist(PlaylistName);                          
}
Playlist = Outer.Playlists[PlaylistIndex];                                  
if (!Playlist.ValidStreamIndex(InsertPosition)) {                           
InsertPosition = Playlist.GetPlaylistLength();                            
}
i = Paths.Length - 1;                                                       
while (i >= 0) {                                                            
Outer.InsertInPlaylist(PlaylistIndex,InsertPosition,Paths[i],i > 0);      
i--;                                                                      
}
Outer.Save();                                                               
}
function bool Import(int PlaylistIndex,int InsertPosition,string Path) {
if (Outer.FileManager.LoadPlaylist(Path,Lines)) {                           
ImportedPlaylist(PlaylistIndex,InsertPosition);                           
return True;                                                              
}
return False;                                                               
}
function SetType(byte InType) {
if (Type != 0) {                                                            
return;                                                                   
}
Type = InType;                                                              
}
function byte GetType() {
return Type;                                                                
}
*/
