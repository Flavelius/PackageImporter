//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Engine
{


    public class ShadowProjector : Projector
    {
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="ShadowProjector")]
        public Actor ShadowActor;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="ShadowProjector")]
        public Vector LightDirection;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="ShadowProjector")]
        public float LightDistance;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="ShadowProjector")]
        public bool RootMotion;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="ShadowProjector")]
        public bool bBlobShadow;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="ShadowProjector")]
        public bool bShadowActive;
        
        public ShadowBitmapMaterial ShadowTexture;
        
        public ShadowProjector()
        {
        }
    }
}
/*
event cl_OnTick(float delta) {
UpdateShadow();                                                             
}
function UpdateShadow() {
local Coords C;
DetachProjector(True);                                                      
if (ShadowActor != None && !ShadowActor.bHidden
&& ShadowActor.OverlayColor.A > 0
&& ShadowTexture != None
&& bShadowActive) {
if (ShadowTexture.Invalid) {                                              
Destroy();                                                              
} else {                                                                  
if (RootMotion && ShadowActor.DrawType == 2
&& ShadowActor.Mesh != None) {
C = ShadowActor.GetBoneCoords('None');                                
SetLocation(C.Origin);                                                
} else {                                                                
SetLocation(ShadowActor.Location);                                    
}
SetRotation(rotator(Normal(-LightDirection)));                          
ShadowTexture.Dirty = True;                                             
AttachProjector();                                                      
}
}
}
function InitShadow() {
local Plane BoundingSphere;
local ObjectPool localObjectPool;
if (ShadowActor != None) {                                                  
BoundingSphere = ShadowActor.GetRenderBoundingSphere();                   
FOV = static.Asin((BoundingSphere.W + 80) / LightDistance) * 180 / 3.14159274;
localObjectPool = Level.GetObjectPool();                                  
ShadowTexture = ShadowBitmapMaterial(localObjectPool.AllocateObject(Class'ShadowBitmapMaterial'));
ProjTexture = ShadowTexture;                                              
if (ShadowTexture != None) {                                              
SetDrawScale(LightDistance * Tan(0.50000000 * FOV * 3.14159274 / 180) / 0.50000000);
ShadowTexture.Invalid = False;                                          
ShadowTexture.bBlobShadow = bBlobShadow;                                
ShadowTexture.ShadowActor = ShadowActor;                                
ShadowTexture.LightDirection = Normal(LightDirection);                  
ShadowTexture.LightDistance = LightDistance;                            
ShadowTexture.LightFOV = FOV;                                           
ShadowTexture.CullDistance = CullDistance;                              
SBWantClientTick = True;                                                
UpdateShadow();                                                         
} else {                                                                  
Log(string(Name)
$ ".InitShadow: Failed to allocate texture");
}
} else {                                                                    
Log(string(Name) $ ".InitShadow: No actor");                              
}
}
event Destroyed() {
bShadowActive = False;                                                      
if (ShadowTexture != None) {                                                
ShadowTexture.ShadowActor = None;                                         
if (!ShadowTexture.Invalid) {                                             
if (Level != None) {                                                    
Level.GetObjectPool().FreeObject(ShadowTexture);                      
}
}
ShadowTexture = None;                                                     
ProjTexture = None;                                                       
}
Super.Destroyed();                                                          
}
*/
