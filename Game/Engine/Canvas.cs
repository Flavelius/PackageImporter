//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using TCosReborn.Framework.Common;


namespace Engine
{


    public class Canvas : SBPackageResource
    {
        
        public Font Font;
        
        public float FontScaleX;
        
        public float FontScaleY;
        
        public float SpaceX;
        
        public float SpaceY;
        
        public float OrgX;
        
        public float OrgY;
        
        public float ClipX;
        
        public float ClipY;
        
        public float CurX;
        
        public float CurY;
        
        public float Z;
        
        public byte Style;
        
        public float CurYL;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        public Color DrawColor;
        
        public bool bCenter;
        
        public bool bNoSmooth;
        
        public bool bIgnoreTextColorCodes;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int SizeX;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int SizeY;
        
        public Plane ColorModulate;
        
        public bool bForceAlpha;
        
        public float ForcedAlpha;
        
        public bool bRenderLevel;
        
        public Font TinyFont;
        
        public Font SmallFont;
        
        public Font MedFont;
        
        public string TinyFontName = string.Empty;
        
        public string SmallFontName = string.Empty;
        
        public string MedFontName = string.Empty;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public Viewport Viewport;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public int pCanvasUtil;
        
        public byte LastStyle;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        public Material LastMaterial;
        
        public Canvas()
        {
        }
        
        public enum EFillStyle
        {
            
            FSTY_Normal ,
            
            FSTY_Stretched ,
            
            FSTY_Scaled ,
            
            FSTY_Bound ,
            
            FSTY_Justified ,
            
            FSTY_PartialScaled ,
            
            FSTY_Tiled,
        }
    }
}
/*
simulated function DrawScreenText(string Text,float X,float Y,byte Pivot) {
local int TextScreenWidth;
local int TextScreenHeight;
local float UL;
local float VL;
X *= SizeX;                                                                 
Y *= SizeY;                                                                 
TextSize(Text,UL,VL);                                                       
TextScreenWidth = UL;                                                       
TextScreenHeight = VL;                                                      
switch (Pivot) {                                                            
case 0 :                                                                  
break;                                                                  
case 1 :                                                                  
X -= TextScreenWidth / 2;                                               
break;                                                                  
case 2 :                                                                  
X -= TextScreenWidth;                                                   
break;                                                                  
case 3 :                                                                  
X -= TextScreenWidth;                                                   
Y -= TextScreenHeight / 2;                                              
break;                                                                  
case 4 :                                                                  
X -= TextScreenWidth;                                                   
Y -= TextScreenHeight;                                                  
break;                                                                  
case 5 :                                                                  
X -= TextScreenWidth / 2;                                               
Y -= TextScreenHeight;                                                  
break;                                                                  
case 6 :                                                                  
Y -= TextScreenHeight;                                                  
break;                                                                  
case 7 :                                                                  
Y -= TextScreenHeight / 2;                                              
break;                                                                  
case 8 :                                                                  
X -= TextScreenWidth / 2;                                               
Y -= TextScreenHeight / 2;                                              
break;                                                                  
default:                                                                  
}
SetPos(X,Y);                                                                
DrawTextClipped(Text);                                                      
}
final simulated function DrawBox(Canvas Canvas,float width,float Height) {
DrawHorizontal(CurY,width);                                                 
DrawHorizontal(CurY + Height,width);                                        
DrawVertical(CurX,Height);                                                  
DrawVertical(CurX + width,Height);                                          
}
final simulated function DrawBracket(float width,float Height,float bracket_size) {
local float X;
local float Y;
width = Max(width,5);                                                       
Height = Max(Height,5);                                                     
X = CurX;                                                                   
Y = CurY;                                                                   
DrawHorizontal(CurY,bracket_size);                                          
DrawHorizontal(CurY + Height,bracket_size);                                 
DrawVertical(CurX,bracket_size);                                            
DrawVertical(CurX + width,bracket_size);                                    
CurY = Y + Height - bracket_size;                                           
DrawVertical(CurX,bracket_size);                                            
DrawVertical(CurX + width,bracket_size);                                    
CurX = X + width - bracket_size;                                            
DrawHorizontal(Y,bracket_size);                                             
DrawHorizontal(Y + Height,bracket_size);                                    
}
final function DrawLine(int direction,float Size) {
local float cX;
local float cY;
cX = CurX;                                                                  
cY = CurY;                                                                  
switch (direction) {                                                        
case 0 :                                                                  
CurY -= Size;                                                           
DrawVertical(CurX,Size);                                                
break;                                                                  
case 1 :                                                                  
DrawVertical(CurX,Size);                                                
break;                                                                  
case 2 :                                                                  
CurX -= Size;                                                           
DrawHorizontal(CurY,Size);                                              
break;                                                                  
case 3 :                                                                  
DrawHorizontal(CurY,Size);                                              
break;                                                                  
default:                                                                  
}
CurX = cX;                                                                  
CurY = cY;                                                                  
}
final function DrawHorizontal(float Y,float width) {
local float cX;
local float cY;
cX = CurX;                                                                  
cY = CurY;                                                                  
CurY = Y;                                                                   
DrawTile(Texture'WhiteSquareTexture',width,2.00000000,0.00000000,0.00000000,2.00000000,2.00000000);
CurX = cX;                                                                  
CurY = cY;                                                                  
}
final function DrawVertical(float X,float Height) {
local float cX;
local float cY;
cX = CurX;                                                                  
cY = CurY;                                                                  
CurX = X;                                                                   
DrawTile(Texture'WhiteSquareTexture',2.00000000,Height,0.00000000,0.00000000,2.00000000,2.00000000);
CurX = cX;                                                                  
CurY = cY;                                                                  
}
final static function Color MakeColor(byte R,byte G,byte B,optional byte A) {
local Color C;
C.R = R;                                                                    
C.G = G;                                                                    
C.B = B;                                                                    
if (A == 0) {                                                               
A = 255;                                                                  
}
C.A = A;                                                                    
return C;                                                                   
}
final function SetDrawColor(byte R,byte G,byte B,optional byte A) {
local Color C;
C.R = R;                                                                    
C.G = G;                                                                    
C.B = B;                                                                    
if (A == 0) {                                                               
A = 255;                                                                  
}
C.A = A;                                                                    
DrawColor = C;                                                              
}
final function DrawRect(Texture Tex,float RectX,float RectY) {
DrawTile(Tex,RectX,RectY,0.00000000,0.00000000,Tex.USize,Tex.VSize);        
}
final function DrawIcon(Texture Tex,float Scale) {
if (Tex != None) {                                                          
DrawTile(Tex,Tex.USize * Scale,Tex.VSize * Scale,0.00000000,0.00000000,Tex.USize,Tex.VSize);
}
}
final function DrawPattern(Material Tex,float XL,float YL,float Scale) {
DrawTile(Tex,XL,YL,(CurX - OrgX) * Scale,(CurY - OrgY) * Scale,XL * Scale,YL * Scale);
}
final function SetClip(float X,float Y) {
ClipX = X;                                                                  
ClipY = Y;                                                                  
}
final function SetOrigin(float X,float Y) {
OrgX = X;                                                                   
OrgY = Y;                                                                   
}
final function SetPos(float X,float Y) {
CurX = X;                                                                   
CurY = Y;                                                                   
}
event Reset() {
Font = default.Font;                                                        
FontScaleX = default.FontScaleX;                                            
FontScaleY = default.FontScaleY;                                            
SpaceX = default.SpaceX;                                                    
SpaceY = default.SpaceY;                                                    
OrgX = default.OrgX;                                                        
OrgY = default.OrgY;                                                        
CurX = default.CurX;                                                        
CurY = default.CurY;                                                        
Style = default.Style;                                                      
DrawColor = default.DrawColor;                                              
CurYL = default.CurYL;                                                      
bCenter = False;                                                            
bNoSmooth = False;                                                          
Z = 1.00000000;                                                             
ColorModulate = default.ColorModulate;                                      
}
final native function DrawActorClipped(Actor A,bool Wireframe,float Left,float top,float width,float Height,optional bool ClearZ,optional float DisplayFOV);
final native function DrawTextJustified(coerce string String,byte Justification,float X1,float Y1,float X2,float Y2);
final native function DrawTileScaled(Material mat,float XScale,float YScale);
final native function DrawTileJustified(Material mat,byte Justification,float XL,float YL);
final native function DrawTileStretchedEx(Material mat,float XL,float YL,float UL,float UT,float UW,float UH);
final native function DrawTileStretched(Material mat,float XL,float YL);
final native function DrawTilePartialStretched(Material mat,float XL,float YL);
final static native function WrapText(out string Text,out string Line,float dx,Font F,float FontScaleX);
final native function WrapStringToArray(string Text,out array<string> OutArray,float dx,optional string EOL);
final native function Clear(optional bool ClearRGB,optional bool ClearZ);
final native function DrawScreenActor(Actor A,optional float FOV,optional bool Wireframe,optional bool ClearZ);
final native function SetScreenProjector(int Index,Vector Position,Color Color,float Radius,Texture Tex);
final native function SetScreenLight(int Index,Vector Position,Color LightColor,float Radius);
final native function GetCameraLocation(out Vector CameraLocation,out Rotator CameraRotation);
final native function Vector WorldToScreen(Vector WorldLoc);
final native(480) function DrawPortal(int X,int Y,int width,int Height,Actor CamActor,Vector CamLocation,Rotator CamRotation,optional int FOV,optional bool ClearZ);
final native(470) function TextSize(coerce string String,out float XL,out float YL);
final native(469) function DrawTextClipped(coerce string Text,optional bool bCheckHotKey);
final native(468) function DrawTileClipped(Material mat,float XL,float YL,float U,float V,float UL,float VL);
native function DrawPositionedActorWithCameraEffects(Actor A,float Distance,bool Wireframe,array<CameraEffect> CameraEffects,optional bool ClearZ,optional float DisplayFOV,optional Rotator cameraRot);
native function DrawPositionedActor(Actor A,float Distance,bool Wireframe,optional bool ClearZ,optional float DisplayFOV,optional Rotator cameraRot);
final native(467) function DrawActor(Actor A,bool Wireframe,optional bool ClearZ,optional float DisplayFOV);
final native function DrawTilePixelClamped(Material mat,float XL,float YL,float U,float V,float UL,float VL);
final native function DrawTileClamped(Material mat,float XL,float YL,float U,float V,float UL,float VL);
final native(466) function DrawTile(Material mat,float XL,float YL,float U,float V,float UL,float VL);
final native(465) function DrawText(coerce string Text,optional bool CR);
final native(464) function StrLen(coerce string String,out float XL,out float YL);
*/
