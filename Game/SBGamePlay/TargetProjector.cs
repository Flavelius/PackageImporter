//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using TCosReborn.Framework.Common;


namespace SBGamePlay
{
    
    
    public class TargetProjector : DynamicProjector
    {
        
        public float currentRoll;
        
        public Rotator currentRotation;
        
        public float Height;
        
        public float targetScale;
        
        public float currentScale;
        
        public TargetProjector()
        {
        }
    }
}
/*
function LoadTargetTexture() {
if (ProjTexture == None) {                                                  
}
}
function SetIsVisible(bool B) {
if (B) {                                                                    
MaxTraceDistance = 10000;                                                 
targetScale = 1.00000000;                                                 
} else {                                                                    
MaxTraceDistance = 0;                                                     
}
}
function bool IsVisible() {
return MaxTraceDistance > 0;                                                
}
function ProjectOnToLocation(Vector projectionLocation,Vector Origin,float MinDistance,float MaxDistance) {
local float Distance;
Distance = VSize(projectionLocation - Origin);                              
SetIsVisible(Distance < MaxDistance && Distance > MinDistance);             
ExecuteProjection(projectionLocation);                                      
}
function ExecuteProjection(Vector projectionLocation) {
local Vector loc;
if (IsVisible()) {                                                          
if (ProjTexture == None) {                                                
LoadTargetTexture();                                                    
}
loc = projectionLocation;                                                 
loc.Z += Height;                                                          
SetLocation(loc);                                                         
currentRotation = rotator(projectionLocation - Location);                 
currentRoll += 20;                                                        
currentRotation.Roll = currentRoll;                                       
SetRotation(currentRotation);                                             
if (currentScale < targetScale) {                                         
currentScale += 0.01000000 * targetScale;                               
} else {                                                                  
if (currentScale < targetScale) {                                       
currentScale -= 0.01000000 * targetScale;                             
}
}
SetDrawScale(currentScale);                                               
}
}
*/
