//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using SBGame;


namespace SBGamePlay
{


    public class EV_Claustroport : Content_Event
    {
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Action")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public string DestinationTag = string.Empty;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Action")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float MaxDistance;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Action")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public bool UseOrientation;
        
        public EV_Claustroport()
        {
        }
    }
}
/*
function sv_Execute(Game_Pawn aObject,Game_Pawn aSubject) {
local Actor A;
local Vector pos;
A = FindClosestActor(Class'Actor',aSubject,DestinationTag);                 
if (A == None) {                                                            
return;                                                                   
}
pos = RandomRadiusLocation(A,MaxDistance,-1.00000000,True,aSubject.GetCollisionExtent(),aSubject.IsGrounded());
if (pos == vect(0.000000, 0.000000, 0.000000)) {                            
return;                                                                   
}
if (UseOrientation) {                                                       
ClaustroportPawn(aSubject,pos,A.Rotation);                                
} else {                                                                    
ClaustroportPawn(aSubject,pos,aSubject.Rotation);                         
}
}
function bool sv_CanExecute(Game_Pawn aObject,Game_Pawn aSubject) {
local Actor A;
if (aSubject == None) {                                                     
return False;                                                             
}
A = FindClosestActor(Class'Actor',aSubject,DestinationTag);                 
if (A == None) {                                                            
return False;                                                             
}
return True;                                                                
}
*/
