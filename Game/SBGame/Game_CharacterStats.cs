//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using TCosReborn.Framework.Common;


namespace SBGame
{
    
    
    public class Game_CharacterStats : Base_Component
    {
        
        public const int EFF_Stats = 8;
        
        public const int EFF_Animation = 4;
        
        public const int EFF_Rotation = 2;
        
        public const int EFF_Movement = 1;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int mBaseBody;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int mBaseMind;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int mBaseFocus;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int mBaseMaxHealth;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mBaseRuneAffinity;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mBaseSpiritAffinity;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mBaseSoulAffinity;
        
        public int mExtraBodyPoints;
        
        public int mExtraMindPoints;
        
        public int mExtraFocusPoints;
        
        public float mHealth;
        
        public byte mState;
        
        public byte mFrozenFlags;
        
        public int mFreezeMovementCount;
        
        public int mFreezeRotationCount;
        
        public int mFreezeAnimationCount;
        
        public int mFreezeStatsCount;
        
        public int mBaseMovementSpeed;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int mMovementSpeed;
        
        public float mRearDamageIncrease;
        
        public float mFrontDamageIncrease;
        
        public float mConcentrationAttackSpeedBonus;
        
        public CharacterStatsRecord mRecord;
        
        public byte mCharacterClass;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int mStateRankShift;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int mRegenPointShift;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int mPhysiqueLevel;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int mMoraleLevel;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int mConcentrationLevel;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int mBodyDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int mMindDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int mFocusDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int mAttributesDeltaInternal;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mRuneAffinityDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mSpiritAffinityDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mSoulAffinityDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int mMaxHealthDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mPhysiqueRegenerationDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mPhysiqueDegenerationDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mMoraleRegenerationDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mMoraleDegenerationDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mConcentrationRegenerationDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mConcentrationDegenerationDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mHealthRegenerationDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mMeleeResistanceDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mRangedResistanceDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mMagicResistanceDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int mPePRankDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mAttackSpeedBonusDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mMovementSpeedBonusDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mDamageBonusDelta;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=11)]
        public float[] mPhysiqueLevelBonus = new float[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=11)]
        public float[] mMoraleLevelBonus = new float[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=11)]
        public float[] mConcentrationLevelBonus = new float[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=12)]
        public int[] mBodyDefaults = new int[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=12)]
        public int[] mMindDefaults = new int[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=12)]
        public int[] mFocusDefaults = new int[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=12)]
        public float[] mRuneAffinityDefaults = new float[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=12)]
        public float[] mSpiritAffinityDefaults = new float[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=12)]
        public float[] mSoulAffinityDefaults = new float[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=12)]
        public int[] mMaxHealthDefaults = new int[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=5)]
        public float[] mHealthRegenerationDefault = new float[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=5)]
        public float[] mPhysiqueRegenerationDefault = new float[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=5)]
        public float[] mMoraleRegenerationDefault = new float[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=5)]
        public float[] mConcentrationRegenerationDefault = new float[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=5)]
        public float[] mPhysiqueDegenerationDefault = new float[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=5)]
        public float[] mMoraleDegenerationDefault = new float[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=5)]
        public float[] mConcentrationDegenerationDefault = new float[0];
        
        [TCosReborn.Framework.Attributes.FieldConfigAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=5)]
        public float[] mMovementSpeedMultiplier = new float[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.FieldConfigAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=5)]
        public float[] mDamageBonus = new float[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.FieldConfigAttribute()]
        public int mMovementSpeedDefault;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mRegenerationEpoch;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int mMaxHealthBonusPerFameLevel;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mMeleeResistanceModifier;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mRangedResistanceModifier;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mMagicResistanceModifier;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mRuneAffinityModifier;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mSpiritAffinityModifier;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float mSoulAffinityModifier;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.FieldConfigAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=6)]
        public float[] mHealthPepLvlBonus = new float[0];
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.FieldConfigAttribute()]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=6)]
        public float[] mDamagePepLvlBonus = new float[0];
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        private bool @__Recalculate;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        private bool @__UpdateModifiers;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        private int @__UpdateCounter;
        
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        private float @__UpdateTimeElapsed;
        
        private List<FreezeData> mMovementFreezeTimers = new List<FreezeData>();
        
        private List<FreezeData> mRotationFreezeTimers = new List<FreezeData>();
        
        private List<FreezeData> mAnimationFreezeTimers = new List<FreezeData>();
        
        private List<FreezeData> mStatsFreezeTimers = new List<FreezeData>();
        
        public Game_CharacterStats()
        {
        }
        
        public struct FreezeData
        {
            
            public float Start;
            
            public float Duration;
        }
        
        public struct CharacterStatsRecord
        {
            
            public int Body;
            
            public int Mind;
            
            public int Focus;
            
            public float Physique;
            
            public float Morale;
            
            public float Concentration;
            
            public int FameLevel;
            
            public int PePRank;
            
            public float RuneAffinity;
            
            public float SpiritAffinity;
            
            public float SoulAffinity;
            
            public float MeleeResistance;
            
            public float RangedResistance;
            
            public float MagicResistance;
            
            public int MaxHealth;
            
            public float PhysiqueRegeneration;
            
            public float PhysiqueDegeneration;
            
            public float MoraleRegeneration;
            
            public float MoraleDegeneration;
            
            public float ConcentrationRegeneration;
            
            public float ConcentrationDegeneration;
            
            public float HealthRegeneration;
            
            public float AttackSpeedBonus;
            
            public float MovementSpeedBonus;
            
            public float DamageBonus;
            
            public float CopyHealth;
        }
        
        public enum ECharacterStatsCharacterState
        {
            
            CSCS_IDLE ,
            
            CSCS_COMBATREADY ,
            
            CSCS_INCOMBAT ,
            
            ECharacterStatsCharacterState_RESERVED_3 ,
            
            CSCS_SITTING,
        }
    }
}
/*
native function SetConcentration(float Value);
native function SetMorale(float Value);
native function SetPhysique(float Value);
native function byte GetCharacterClass();
native function SetCharacterClass(byte ClassId);
final native function byte GetArchetype();
final native function int GetPePRank();
final native function int GetFameLevel();
native event int GetPrevFameLevelPoints(int aCurrentLevel);
native event int GetNextFameLevelPoints(int currentLevel);
protected native function sv2clrel_UpdateStateRankShift_CallStub();
protected native event sv2clrel_UpdateStateRankShift(int aStateRankShift);
protected native function sv2clrel_UpdateMovementSpeed_CallStub();
protected native event sv2clrel_UpdateMovementSpeed(int aMovementSpeed);
protected native function sv2clrel_UpdateFrozenFlags_CallStub();
protected native event sv2clrel_UpdateFrozenFlags(byte aFrozenFlags);
protected native function sv2clrel_UpdateMaxHealth_CallStub();
protected native event sv2clrel_UpdateMaxHealth(int aMaxHealth);
protected native function sv2clrel_UpdateHealth_CallStub();
protected native event sv2clrel_UpdateHealth(float aHealth);
protected native function sv2clrel_UpdateConcentration_CallStub();
protected native event sv2clrel_UpdateConcentration(float aConcentration);
protected native function sv2clrel_UpdateMorale_CallStub();
protected native event sv2clrel_UpdateMorale(float aMorale);
protected native function sv2clrel_UpdatePhysique_CallStub();
protected native event sv2clrel_UpdatePhysique(float aPhysique);
protected native function sv2clrel_UpdateStateVariables_CallStub();
protected native event sv2clrel_UpdateStateVariables(float aPhysique,float aMorale,float aConcentration);
protected native function sv2cl_UpdateMagicResistance_CallStub();
protected native event sv2cl_UpdateMagicResistance(float aMagicResistance);
protected native function sv2cl_UpdateRangedResistance_CallStub();
protected native event sv2cl_UpdateRangedResistance(float aRangedResistance);
protected native function sv2cl_UpdateMeleeResistance_CallStub();
protected native event sv2cl_UpdateMeleeResistance(float aMeleeResistance);
protected native function sv2cl_UpdateFocusDelta_CallStub();
protected native event sv2cl_UpdateFocusDelta(int aFocusDelta);
protected native function sv2cl_UpdateMindDelta_CallStub();
protected native event sv2cl_UpdateMindDelta(int aMindDelta);
protected native function sv2cl_UpdateBodyDelta_CallStub();
protected native event sv2cl_UpdateBodyDelta(int aBodyDelta);
static function float sv_GetMoraleLevelBonus(int MoraleLevel) {
return Class'Game_CharacterStats'.default.mMoraleLevelBonus[MoraleLevel + 5];
}
native function sv_ResetFreezeStats();
native function sv_ResetFreezeAnimation();
native function sv_ResetFreezeRotation();
native function sv_ResetFreezeMovement();
final native function bool AreStatsFrozen();
final native function bool IsMovementLimited();
final native function bool IsAnimationFrozen();
final native function bool IsRotationFrozen();
final native function bool IsMovementFrozen();
native function FreezeStatsTimed(float aDuration);
native function FreezeStats(bool aFreeze);
native function FreezeAnimationTimed(float aDuration);
protected native function sv2clrel_FreezeAnimation_CallStub();
protected event sv2clrel_FreezeAnimation(bool aFreeze) {
if (aFreeze) {                                                              
mFrozenFlags = mFrozenFlags | 4;                                          
} else {                                                                    
mFrozenFlags = mFrozenFlags & 255 - 4;                                    
}
Outer.PauseAnim(aFreeze);                                                   
}
native function FreezeAnimation(bool aFreeze);
native function FreezeRotationTimed(float aDuration);
native function FreezeRotation(bool aFreeze);
native function FreezeMovementTimed(float aDuration);
native function FreezeMovement(bool aFreeze);
native function sv_Resurrect();
native function ResetAttributes();
native function SetAttributes(int Body,int Mind,int Focus);
native function UnsetStatsState(byte aNewState);
native function SetStatsState(byte aNewState);
native function ForceCalculationUpdate();
native function IncreaseMagicResistanceDelta(float aDelta);
native function IncreaseRangedResistanceDelta(float aDelta);
native function IncreaseMeleeResistanceDelta(float aDelta);
native function IncreaseHealthRegenerationDelta(float aDelta);
native function IncreaseConcentrationDegenerationDelta(float aDelta);
native function IncreaseConcentrationRegenerationDelta(float aDelta);
native function IncreaseMoraleDegenerationDelta(float aDelta);
native function IncreaseMoraleRegenerationDelta(float aDelta);
native function IncreasePhysiqueDegenerationDelta(float aDelta);
native function IncreasePhysiqueRegenerationDelta(float aDelta);
native function IncreaseDamageBonusDelta(float aDelta);
native function IncreaseMovementSpeedBonusDelta(float aDelta);
native function IncreaseAttackSpeedBonusDelta(float aDelta);
native function IncreaseConcentration(float aDelta);
native function IncreaseMorale(float aDelta);
native function IncreasePhysique(float aDelta);
native function IncreasePePRankDelta(int aDelta);
native function IncreaseMaxHealthDelta(int aDelta);
native function IncreaseSoulAffinityDelta(float aDelta);
native function IncreaseSpiritAffinityDelta(float aDelta);
native function IncreaseRuneAffinityDelta(float aDelta);
native function IncreaseFocusDelta(int aDelta);
native function IncreaseMindDelta(int aDelta);
native function IncreaseBodyDelta(int aDelta);
native function IncreaseFrontDamageIncrease(float aDelta);
native function IncreaseRearDamageIncrease(float aDelta);
native function int GetAttributePoints(byte aAttribute);
event cl_OnInit() {
Super.cl_OnInit();                                                          
Outer.PauseAnim(IsAnimationFrozen());                                       
}
*/
