//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using TCosReborn.Framework.Common;


namespace SBGame
{
    
    
    public class FSkill_EffectClass_Range : FSkill_EffectClass
    {
        
        public const float MAX_SKILLSIZE = 200F;
        
        public const float MAX_SPEED = 1000F;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="direction")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public Vector LocationOffset;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="direction")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public int RotationOffset;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Angle")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float Angle;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Radius")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float MinRadius;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Radius")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public float MaxRadius;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Sorting")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public byte SortingMethod;
        
        public FSkill_EffectClass_Range()
        {
        }
    }
}
/*
native function CalcOffsetLocation(out Vector outLocation,out Rotator outRotation);
final event DrawStaticDebugInfo(Game_Pawn aPawn,Vector aLocation) {
local Vector lLeft;
local Vector lRight;
local Rotator lRotation;
local float oldYaw;
CalcOffsetLocation(aLocation,aPawn.Rotation);                               
lRotation = aPawn.Rotation;                                                 
oldYaw = lRotation.Yaw;                                                     
lRotation.Yaw = oldYaw + static.ConvertDegreesToURU(RotationOffset + Angle / 2);
lRight = vector(lRotation) * MaxRadius + aLocation;                         
lRotation.Yaw = oldYaw + static.ConvertDegreesToURU(RotationOffset - Angle / 2);
lLeft = vector(lRotation) * MaxRadius + aLocation;                          
aPawn.DrawDebugLine(aLocation,lLeft,255,255,255);                           
aPawn.DrawDebugLine(aLocation,lRight,255,255,255);                          
aPawn.DrawDebugCapsule(aLocation,MaxRadius * 2,MinRadius,16,155,0);         
aPawn.DrawDebugSphere(aLocation,MaxRadius,16,220,220,0);                    
}
*/
