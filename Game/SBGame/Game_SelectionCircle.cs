//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using TCosReborn.Framework.Common;


namespace SBGame
{
    
    
    public class Game_SelectionCircle : DynamicProjector
    {
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        public Texture SelectionTexture;
        
        public float CircleScale;
        
        public float Height;
        
        public float MaxMaxTraceDistance;
        
        public float targetScale;
        
        public Game_Pawn mPawn;
        
        public Game_SelectionCircle()
        {
        }
    }
}
/*
private final function bool IsScreenshotMode() {
return Base_GameClient(Class'Actor'.static.GetGameEngine()).GPlayerController.Player.InteractionMaster.ScreenshotMode == 2;
}
function SetPawn(Game_Pawn aPawn) {
if (mPawn == aPawn
&& !bIsEnabled && !mPawn.IsValidActor()) {         
return;                                                                   
}
if (aPawn == None) {                                                        
Height = 0.00000000;                                                      
targetScale = 0.00000000;                                                 
SetDrawScale(0.00000000);                                                 
MaxTraceDistance = 0;                                                     
bProjectStaticMesh = False;                                               
bProjectTerrain = False;                                                  
bIsEnabled = False;                                                       
cl_OnTick(0.00000000);                                                    
mPawn = None;                                                             
} else {                                                                    
mPawn = aPawn;                                                            
Height = CollisionHeight;                                                 
if (ProjTexture != None) {                                                
targetScale = CircleScale * aPawn.SkillRadius / 0.50000000 * ProjTexture.MaterialUSize();
goto jl00ED;                                                            
}
SetDrawScale((DrawScale + targetScale) / 2.00000000);                     
MaxTraceDistance = 3 * aPawn.CollisionHeight;                             
bProjectStaticMesh = True;                                                
bProjectTerrain = True;                                                   
bIsEnabled = True;                                                        
}
}
function cl_OnPlayerTick(float DeltaTime) {
if (mPawn != None) {                                                        
if (mPawn.IsDead()) {                                                     
SetPawn(None);                                                          
} else {                                                                  
if (IsScreenshotMode() && DrawScale > 0) {                              
SetDrawScale(0.00000000);                                             
cl_OnTick(0.00000000);                                                
}
}
} else {                                                                    
if (MaxTraceDistance > 0.00000000) {                                      
SetPawn(None);                                                          
}
}
}
function cl_UpdateLocation(float DeltaTime) {
local Rotator currentRotation;
local Vector ProjLocation;
local Vector projNormal;
if (mPawn != None && !mPawn.IsDead()
&& !IsScreenshotMode()) {        
ProjLocation = mPawn.Location;                                            
ProjLocation.Z += Height;                                                 
currentRotation = rotator(mPawn.Location - ProjLocation);                 
SetRotation(currentRotation);                                             
SetLocation(ProjLocation);                                                
SetDrawScale(targetScale);                                                
projNormal = ProjLocation;                                                
projNormal.Z -= MaxMaxTraceDistance;                                      
Trace(ProjLocation,projNormal,projNormal,Location,False);                 
MaxTraceDistance = 1.10000002 * VSize(ProjLocation - Location);           
cl_OnTick(DeltaTime);                                                     
}
}
*/
