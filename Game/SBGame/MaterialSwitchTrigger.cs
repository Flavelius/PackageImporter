//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using TCosReborn.Framework.Common;


namespace SBGame
{
    
    
    public class MaterialSwitchTrigger : Triggers
    {
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="MaterialSwitchTrigger")]
        public List<SpecificMaterial> MaterialsToTrigger = new List<SpecificMaterial>();
        
        public MaterialSwitchTrigger()
        {
        }
        
        public struct SpecificMaterial
        {
            
            public MaterialSwitch SwitchMaterial;
            
            public int SubMaterial;
        }
    }
}
/*
function Trigger(Actor Other,Pawn EventInstigator) {
local int i;
local MaterialSwitch switchMat;
if (Other == None) {                                                        
Other = self;                                                             
}
i = 0;                                                                      
while (i < MaterialsToTrigger.Length) {                                     
switchMat = MaterialsToTrigger[i].SwitchMaterial;                         
if (switchMat != None) {                                                  
switchMat.CurrentMaterialIndex = MaterialsToTrigger[i].SubMaterial - 1; 
switchMat.Trigger(Other,EventInstigator);                               
}
++i;                                                                      
}
}
function PostBeginPlay() {
local int i;
i = 0;                                                                      
while (i < MaterialsToTrigger.Length) {                                     
if (MaterialsToTrigger[i].SwitchMaterial != None) {                       
MaterialsToTrigger[i].SwitchMaterial.Reset();                           
}
++i;                                                                      
}
}
*/
