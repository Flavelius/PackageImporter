//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using TCosReborn.Framework.Common;


namespace SBGame
{
    
    
    public class DS_Quest_GameInfo : Deadspell_GameInfo
    {
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="QuestEvents")]
        public List<QuestEvent> QuestEvents = new List<QuestEvent>();
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="QuestEvents")]
        public NameProperty QuestStartEvent;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="QuestEvents")]
        public string StartPortalNavigationTag = string.Empty;
        
        public int CurrentEvent;
        
        public float CurrentPerc;
        
        public float TargetPerc;
        
        public float PercPerSec;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Travel")]
        public float WaitSecHack;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Travel")]
        public float OutroSecHack;
        
        public float mTime;
        
        public float mOutroTime;
        
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        [TCosReborn.Framework.Attributes.FieldTransientAttribute()]
        public bool mQuestStarted;
        
        public bool mQuestFinished;
        
        public DS_Quest_GameInfo()
        {
        }
        
        public struct QuestEvent
        {
            
            public NameProperty Event;
            
            public float Duration;
            
            public float TargetPerc;
        }
    }
}
/*
event Trigger(Actor Other,Pawn EventInstigator) {
TargetPerc = QuestEvents[CurrentEvent].TargetPerc;                          
PercPerSec = (TargetPerc - CurrentPerc) / Max(QuestEvents[CurrentEvent].Duration,1);
if (++CurrentEvent <= QuestEvents.Length) {                                 
Tag = QuestEvents[CurrentEvent].Event;                                    
}
}
event PostBeginPlay() {
Super.PostBeginPlay();                                                      
DSQuestParseInstanceOptions("");                                            
mTime = -WaitSecHack;                                                       
if (QuestEvents.Length > 0) {                                               
Tag = QuestEvents[0].Event;                                               
CurrentEvent = 0;                                                         
CurrentPerc = 0.00000000;                                                 
}
}
native function DSQuestParseInstanceOptions(string Options);
*/
