//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Engine;
using SBAI;
using SBAIScripts;
using SBBase;
using SBGame;
using SBGamePlay;
using SBMiniGames;
using System;
using System.Collections;
using System.Collections.Generic;
using TCosReborn.Framework.Common;


namespace SBGame
{
    
    
    public class MovingLevelElement : Game_Actor
    {
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="MovingLevelElement")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public byte NumKeys;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="MovingLevelElement")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public bool bUseLocation;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="MovingLevelElement")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public bool bUseRotation;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="MovingLevelElement")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public bool bUseScale;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="MovingLevelElement")]
        public float Delay;
        
        public float WaitedTime;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="KeyFrame")]
        public byte KeyNum;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="KeyFrame")]
        public float KeyDuration;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="KeyFrame")]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        public Sound KeySound;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="KeyFrame")]
        public string KeyTriggerEvent = string.Empty;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="KeyFrame")]
        public string KeyUntriggerEvent = string.Empty;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Sound")]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        public Sound StartMoveSound;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Sound")]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        public Sound MovingSound;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="Sound")]
        [TCosReborn.Framework.Attributes.IgnoreFieldExtractionAttribute()]
        public Sound StoppingSound;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="MovingLevelElement")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public byte WorldRaytraceKey;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="MovingLevelElement")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public byte BrushRaytraceKey;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="MovingLevelElement")]
        public byte MLEType;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="MovingLevelElement")]
        public byte MLEMoveMode;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="MovingLevelElement")]
        public byte MLEEncroachMode;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="MovingLevelElement")]
        public byte MLEStoppingMode;
        
        public byte MLEState;
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="MovingLevelElement")]
        [TCosReborn.Framework.Attributes.ArraySizeForExtractionAttribute(Size=24)]
        public MLEKey[] Keys = new MLEKey[0];
        
        public float KeyTime;
        
        public float MoveSpeed;
        
        public Vector BasePos;
        
        public Vector OldPos;
        
        public Rotator BaseRot;
        
        public Rotator OldRot;
        
        public MovingLevelElement()
        {
        }
        
        public struct MLEKey
        {
            
            public Vector Location;
            
            public Rotator Rotation;
            
            public Vector Scale;
            
            public float Duration;
            
            public string TriggerEvent;
            
            public string UntriggerEvent;
            
            public Sound Sound;
        }
        
        public enum EMLESoundType
        {
            
            MLEST_StartSound ,
            
            MLEST_MovingSound ,
            
            MLEST_StopSound,
        }
        
        public enum EMLEState
        {
            
            MLES_StateStopped ,
            
            MLES_StateStopping ,
            
            MLES_StateMoving ,
            
            MLES_StateWaiting,
        }
        
        public enum EMLEStoppingMode
        {
            
            MLESM_FinishKey ,
            
            MLESM_FinishAnimation ,
            
            MLESM_Freeze,
        }
        
        public enum EMLEEncroachMode
        {
            
            MLEEM_EncroachCrush ,
            
            MLEEM_EncroachIgnore,
        }
        
        public enum EMLEMoveMode
        {
            
            MLEMM_Loop ,
            
            MLEMM_Bounce,
        }
        
        public enum EMLEType
        {
            
            MLET_TypeTriggerConstant ,
            
            MLET_TypeTriggerToggle,
        }
    }
}
/*
event cl_OnUpdate() {
Super.cl_OnUpdate();                                                        
}
event cl_OnBaseline() {
Super.cl_OnBaseline();                                                      
}
native function Rotator CalculateCurrentRotation();
native function Vector CalculateCurrentLocation();
native function Update(Vector vec,Rotator Rot);
native function ResetState();
native function UpdateRelevants();
native event cl_OnTick(float delta);
state() Stopped {
event UnTrigger(Actor Other,Pawn EventInstigator) {
switch (MLEType) {                                                      
case 0 :                                                              
ResetState();                                                       
break;                                                              
case 1 :                                                              
MLEStoppingMode = 0;                                                
MoveSpeed = -1.00000000;                                            
if (Delay > 0) {                                                    
GotoState('Waiting');                                             
} else {                                                            
GotoState('Stopping');                                            
}
break;                                                              
default:                                                              
}
}
event Trigger(Actor Other,Pawn EventInstigator) {
Instigator = EventInstigator;                                           
switch (MLEType) {                                                      
case 0 :                                                              
if (Delay > 0) {                                                    
GotoState('Waiting');                                             
} else {                                                            
GotoState('Moving');                                              
}
break;                                                              
case 1 :                                                              
MLEStoppingMode = 0;                                                
MoveSpeed = 1.00000000;                                             
if (Delay > 0) {                                                    
GotoState('Waiting');                                             
} else {                                                            
GotoState('Stopping');                                            
}
break;                                                              
default:                                                              
}
}
function BeginState() {
Instigator = None;                                                      
MLEState = 0;                                                           
UpdateRelevants();                                                      
}
function Reset() {
Reset();                                                                
}
function bool SelfTriggered() {
return False;                                                           
}
}
state() Moving {
event UnTrigger(Actor Other,Pawn EventInstigator) {
switch (MLEStoppingMode) {                                              
case 0 :                                                              
case 1 :                                                              
GotoState('Stopping');                                              
break;                                                              
case 2 :                                                              
GotoState('Stopped');                                               
break;                                                              
default:                                                              
break;                                                              
}
}
event Trigger(Actor Other,Pawn EventInstigator) {
}
function BeginState() {
MLEState = 2;                                                           
UpdateRelevants();                                                      
}
function Reset() {
Reset();                                                                
}
function bool SelfTriggered() {
return False;                                                           
}
}
state() Stopping {
event UnTrigger(Actor Other,Pawn EventInstigator) {
}
event Trigger(Actor Other,Pawn EventInstigator) {
}
function BeginState() {
MLEState = 1;                                                           
UpdateRelevants();                                                      
}
function Reset() {
Reset();                                                                
}
function bool SelfTriggered() {
return False;                                                           
}
}
state() Waiting {
event UnTrigger(Actor Other,Pawn EventInstigator) {
}
event Trigger(Actor Other,Pawn EventInstigator) {
}
function BeginState() {
MLEState = 3;                                                           
UpdateRelevants();                                                      
}
function Reset() {
Reset();                                                                
}
function bool SelfTriggered() {
return False;                                                           
}
}
*/
