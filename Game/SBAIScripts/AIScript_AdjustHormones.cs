//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using SBAI;
using System.Collections.Generic;


namespace SBAIScripts
{


    public class AIScript_AdjustHormones : AI_Script
    {
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="AIScript_AdjustHormones")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public List<Hormone> Hormones = new List<Hormone>();
        
        [TCosReborn.Framework.Attributes.FieldCategoryAttribute(Category="AIScript_AdjustHormones")]
        [TCosReborn.Framework.Attributes.FieldConstAttribute()]
        public bool StartActive;
        
        public AIScript_AdjustHormones()
        {
        }
        
        public struct Hormone
        {
            
            public string Tag;
            
            public float Bonus;
        }
    }
}
/*
state EnabledState {
event bool OnTick(Game_AIController aController,float aDeltaTime) {
local int i;
i = 0;                                                                  
while (i < Hormones.Length) {                                           
AdjustHormone(aController,name(Hormones[i].Tag),Hormones[i].Bonus * aDeltaTime);
i++;                                                                  
}
return OnTick(aController,aDeltaTime);                                  
}
event UnTrigger(Actor Other,Pawn EventInstigator) {
GotoState('DisabledState');                                             
}
}
state DisabledState {
event Trigger(Actor Other,Pawn EventInstigator) {
GotoState('EnabledState');                                              
}
}
auto state Initialize {
function BeginState() {
if (StartActive) {                                                      
GotoState('EnabledState');                                            
} else {                                                                
GotoState('DisabledState');                                           
}
}
}
*/
